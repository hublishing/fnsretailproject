// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"7IWGr":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "ba8867bbbdf185b5";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    if (HMR_USE_SSE) ws = new EventSource("/__parcel_hmr");
    else try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"gBOtN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _awsAmplify = require("aws-amplify");
var _awsExports = require("./aws-exports");
var _awsExportsDefault = parcelHelpers.interopDefault(_awsExports);
(0, _awsAmplify.Amplify).configure((0, _awsExportsDefault.default));
// 회원가입 함수
const signUp = async (event)=>{
    event.preventDefault();
    const email = document.querySelector('input[placeholder="email"]').value;
    const password = document.querySelector('input[placeholder="password"]').value;
    try {
        const { user } = await (0, _awsAmplify.Auth).signUp({
            username: email,
            password,
            attributes: {
                email
            }
        });
        console.log("\uD68C\uC6D0\uAC00\uC785 \uC131\uACF5:", user);
        alert("\uD68C\uC6D0\uAC00\uC785\uC774 \uC644\uB8CC\uB418\uC5C8\uC2B5\uB2C8\uB2E4. \uC774\uBA54\uC77C \uC778\uC99D\uC744 \uD655\uC778\uD558\uC138\uC694.");
        window.location.href = "/index.html";
    } catch (error) {
        console.error("\uD68C\uC6D0\uAC00\uC785 \uC2E4\uD328:", error);
        document.querySelector(".errortext").textContent = "\uD68C\uC6D0\uAC00\uC785 \uC2E4\uD328: " + error.message;
    }
};
document.querySelector("form").addEventListener("submit", signUp);

},{"aws-amplify":"ctfB3","./aws-exports":"9im1Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ctfB3":[function(require,module,exports) {
/*
 * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Analytics", ()=>(0, _analytics.Analytics));
parcelHelpers.export(exports, "AWSPinpointProvider", ()=>(0, _analytics.AWSPinpointProvider));
parcelHelpers.export(exports, "AWSKinesisProvider", ()=>(0, _analytics.AWSKinesisProvider));
parcelHelpers.export(exports, "AWSKinesisFirehoseProvider", ()=>(0, _analytics.AWSKinesisFirehoseProvider));
parcelHelpers.export(exports, "AmazonPersonalizeProvider", ()=>(0, _analytics.AmazonPersonalizeProvider));
parcelHelpers.export(exports, "Auth", ()=>(0, _auth.Auth));
parcelHelpers.export(exports, "Storage", ()=>(0, _storage.Storage));
parcelHelpers.export(exports, "StorageClass", ()=>(0, _storage.StorageClass));
parcelHelpers.export(exports, "API", ()=>(0, _api.API));
parcelHelpers.export(exports, "APIClass", ()=>(0, _api.APIClass));
parcelHelpers.export(exports, "graphqlOperation", ()=>(0, _api.graphqlOperation));
parcelHelpers.export(exports, "AuthModeStrategyType", ()=>(0, _datastore.AuthModeStrategyType));
parcelHelpers.export(exports, "DataStore", ()=>(0, _datastore.DataStore));
parcelHelpers.export(exports, "Predicates", ()=>(0, _datastore.Predicates));
parcelHelpers.export(exports, "SortDirection", ()=>(0, _datastore.SortDirection));
parcelHelpers.export(exports, "syncExpression", ()=>(0, _datastore.syncExpression));
parcelHelpers.export(exports, "PubSub", ()=>(0, _pubsub.PubSub));
parcelHelpers.export(exports, "Cache", ()=>(0, _cacheDefault.default));
parcelHelpers.export(exports, "Interactions", ()=>(0, _interactions.Interactions));
parcelHelpers.export(exports, "XR", ()=>(0, _xr.XR));
parcelHelpers.export(exports, "Predictions", ()=>(0, _predictions.Predictions));
parcelHelpers.export(exports, "Logger", ()=>(0, _core.ConsoleLogger));
parcelHelpers.export(exports, "Hub", ()=>(0, _core.Hub));
parcelHelpers.export(exports, "JS", ()=>(0, _core.JS));
parcelHelpers.export(exports, "ClientDevice", ()=>(0, _core.ClientDevice));
parcelHelpers.export(exports, "Signer", ()=>(0, _core.Signer));
parcelHelpers.export(exports, "I18n", ()=>(0, _core.I18n));
parcelHelpers.export(exports, "ServiceWorker", ()=>(0, _core.ServiceWorker));
parcelHelpers.export(exports, "AWSCloudWatchProvider", ()=>(0, _core.AWSCloudWatchProvider));
parcelHelpers.export(exports, "withSSRContext", ()=>(0, _withSSRContext.withSSRContext));
parcelHelpers.export(exports, "Geo", ()=>(0, _geo.Geo));
parcelHelpers.export(exports, "Amplify", ()=>(0, _core.Amplify));
var _core = require("@aws-amplify/core");
var _auth = require("@aws-amplify/auth");
var _cache = require("@aws-amplify/cache");
var _cacheDefault = parcelHelpers.interopDefault(_cache);
var _analytics = require("@aws-amplify/analytics");
var _storage = require("@aws-amplify/storage");
var _api = require("@aws-amplify/api");
var _datastore = require("@aws-amplify/datastore");
var _pubsub = require("@aws-amplify/pubsub");
var _interactions = require("@aws-amplify/interactions");
var _ui = require("@aws-amplify/ui");
parcelHelpers.exportAll(_ui, exports);
var _xr = require("@aws-amplify/xr");
var _predictions = require("@aws-amplify/predictions");
var _withSSRContext = require("./withSSRContext");
var _geo = require("@aws-amplify/geo");
/** Always importing Auth when users import Amplify such that
    for unauthenticated access (no sign in and sign up),
    users don't have to import Auth explicitly **/ (0, _core.Amplify).Auth = (0, _auth.Auth);
(0, _core.Amplify).Cache = (0, _cacheDefault.default);
(0, _core.Amplify).ServiceWorker = (0, _core.ServiceWorker);
/**
 * @deprecated use named import
 */ exports.default = (0, _core.Amplify);

},{"@aws-amplify/core":"hZcAF","@aws-amplify/auth":"51piL","@aws-amplify/cache":"iXrtJ","@aws-amplify/analytics":false,"@aws-amplify/storage":"7ehwm","@aws-amplify/api":false,"@aws-amplify/datastore":false,"@aws-amplify/pubsub":false,"@aws-amplify/interactions":false,"@aws-amplify/ui":"kBu2D","@aws-amplify/xr":false,"@aws-amplify/predictions":false,"./withSSRContext":false,"@aws-amplify/geo":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hZcAF":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmplifyClass", ()=>(0, _amplify.AmplifyClass));
parcelHelpers.export(exports, "ClientDevice", ()=>(0, _clientDevice.ClientDevice));
parcelHelpers.export(exports, "ConsoleLogger", ()=>(0, _logger.ConsoleLogger));
parcelHelpers.export(exports, "Logger", ()=>(0, _logger.ConsoleLogger));
parcelHelpers.export(exports, "Hub", ()=>(0, _hub.Hub));
parcelHelpers.export(exports, "I18n", ()=>(0, _i18N.I18n));
parcelHelpers.export(exports, "Signer", ()=>(0, _signer.Signer));
parcelHelpers.export(exports, "FacebookOAuth", ()=>(0, _oauthHelper.FacebookOAuth));
parcelHelpers.export(exports, "GoogleOAuth", ()=>(0, _oauthHelper.GoogleOAuth));
parcelHelpers.export(exports, "Credentials", ()=>(0, _credentials.Credentials));
parcelHelpers.export(exports, "CredentialsClass", ()=>(0, _credentials.CredentialsClass));
parcelHelpers.export(exports, "ServiceWorker", ()=>(0, _serviceWorker.ServiceWorker));
parcelHelpers.export(exports, "StorageHelper", ()=>(0, _storageHelper.StorageHelper));
parcelHelpers.export(exports, "MemoryStorage", ()=>(0, _storageHelper.MemoryStorage));
parcelHelpers.export(exports, "UniversalStorage", ()=>(0, _universalStorage.UniversalStorage));
parcelHelpers.export(exports, "Platform", ()=>(0, _platform.Platform));
parcelHelpers.export(exports, "getAmplifyUserAgent", ()=>(0, _platform.getAmplifyUserAgent));
parcelHelpers.export(exports, "Constants", ()=>Constants);
parcelHelpers.export(exports, "Amplify", ()=>(0, _amplify.Amplify));
var _amplify = require("./Amplify");
var _platform = require("./Platform");
var _clientDevice = require("./ClientDevice");
var _logger = require("./Logger");
var _errors = require("./Errors");
parcelHelpers.exportAll(_errors, exports);
var _hub = require("./Hub");
var _i18N = require("./I18n");
var _js = require("./JS");
parcelHelpers.exportAll(_js, exports);
var _signer = require("./Signer");
var _parser = require("./Parser");
parcelHelpers.exportAll(_parser, exports);
var _providers = require("./Providers");
parcelHelpers.exportAll(_providers, exports);
var _oauthHelper = require("./OAuthHelper");
var _rncomponents = require("./RNComponents");
parcelHelpers.exportAll(_rncomponents, exports);
var _credentials = require("./Credentials");
var _serviceWorker = require("./ServiceWorker");
var _storageHelper = require("./StorageHelper");
var _universalStorage = require("./UniversalStorage");
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
parcelHelpers.exportAll(_constants, exports);
var _util = require("./Util");
parcelHelpers.exportAll(_util, exports);
var Constants = {
    userAgent: (0, _platform.Platform).userAgent
};
/**
 * @deprecated use named import
 */ exports.default = (0, _amplify.Amplify);

},{"./Amplify":"4gP56","./Platform":"2ZOrj","./ClientDevice":false,"./Logger":"aOIPE","./Errors":false,"./Hub":"kCAC7","./I18n":"hddus","./JS":"fFubg","./Signer":false,"./Parser":"inlQu","./Providers":false,"./OAuthHelper":false,"./RNComponents":false,"./Credentials":"e9vlE","./ServiceWorker":"kIufi","./StorageHelper":"3R0f0","./UniversalStorage":"iBN8A","./constants":false,"./Util":"hLH9s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4gP56":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmplifyClass", ()=>AmplifyClass);
parcelHelpers.export(exports, "Amplify", ()=>Amplify);
var _logger = require("./Logger");
var __read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var logger = new (0, _logger.ConsoleLogger)("Amplify");
var AmplifyClass = /** @class */ function() {
    function AmplifyClass() {
        // Everything that is `register`ed is tracked here
        this._components = [];
        this._config = {};
        // All modules (with `getModuleName()`) are stored here for dependency injection
        this._modules = {};
        // for backward compatibility to avoid breaking change
        // if someone is using like Amplify.Auth
        this.Auth = null;
        this.Analytics = null;
        this.API = null;
        this.Credentials = null;
        this.Storage = null;
        this.I18n = null;
        this.Cache = null;
        this.PubSub = null;
        this.Interactions = null;
        this.Pushnotification = null;
        this.UI = null;
        this.XR = null;
        this.Predictions = null;
        this.DataStore = null;
        this.Geo = null;
        this.Logger = (0, _logger.ConsoleLogger);
        this.ServiceWorker = null;
    }
    AmplifyClass.prototype.register = function(comp) {
        logger.debug("component registered in amplify", comp);
        this._components.push(comp);
        if (typeof comp.getModuleName === "function") {
            this._modules[comp.getModuleName()] = comp;
            this[comp.getModuleName()] = comp;
        } else logger.debug("no getModuleName method for component", comp);
        // Finally configure this new component(category) loaded
        // With the new modularization changes in Amplify V3, all the Amplify
        // component are not loaded/registered right away but when they are
        // imported (and hence instantiated) in the client's app. This ensures
        // that all new components imported get correctly configured with the
        // configuration that Amplify.configure() was called with.
        comp.configure(this._config);
    };
    AmplifyClass.prototype.configure = function(config) {
        var _this = this;
        if (!config) return this._config;
        this._config = Object.assign(this._config, config);
        logger.debug("amplify config", this._config);
        // Dependency Injection via property-setting.
        // This avoids introducing a public method/interface/setter that's difficult to remove later.
        // Plus, it reduces `if` statements within the `constructor` and `configure` of each module
        Object.entries(this._modules).forEach(function(_a) {
            var _b = __read(_a, 2), Name = _b[0], comp = _b[1];
            // e.g. Auth.*
            Object.keys(comp).forEach(function(property) {
                // e.g. Auth["Credentials"] = this._modules["Credentials"] when set
                if (_this._modules[property]) comp[property] = _this._modules[property];
            });
        });
        this._components.map(function(comp) {
            comp.configure(_this._config);
        });
        return this._config;
    };
    AmplifyClass.prototype.addPluggable = function(pluggable) {
        if (pluggable && pluggable["getCategory"] && typeof pluggable["getCategory"] === "function") this._components.map(function(comp) {
            if (comp["addPluggable"] && typeof comp["addPluggable"] === "function") comp.addPluggable(pluggable);
        });
    };
    return AmplifyClass;
}();
var Amplify = new AmplifyClass();
/**
 * @deprecated use named import
 */ exports.default = Amplify;

},{"./Logger":"aOIPE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aOIPE":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _consoleLogger = require("./ConsoleLogger");
parcelHelpers.exportAll(_consoleLogger, exports);

},{"./ConsoleLogger":"9vCE0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9vCE0":[function(require,module,exports) {
/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LOG_TYPE", ()=>LOG_TYPE);
parcelHelpers.export(exports, "ConsoleLogger", ()=>ConsoleLogger);
var _constants = require("../Util/Constants");
var __values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
};
var LOG_LEVELS = {
    VERBOSE: 1,
    DEBUG: 2,
    INFO: 3,
    WARN: 4,
    ERROR: 5
};
var LOG_TYPE;
(function(LOG_TYPE) {
    LOG_TYPE["DEBUG"] = "DEBUG";
    LOG_TYPE["ERROR"] = "ERROR";
    LOG_TYPE["INFO"] = "INFO";
    LOG_TYPE["WARN"] = "WARN";
    LOG_TYPE["VERBOSE"] = "VERBOSE";
})(LOG_TYPE || (LOG_TYPE = {}));
/**
 * Write logs
 * @class Logger
 */ var ConsoleLogger = /** @class */ function() {
    /**
     * @constructor
     * @param {string} name - Name of the logger
     */ function ConsoleLogger(name, level) {
        if (level === void 0) level = LOG_TYPE.WARN;
        this.name = name;
        this.level = level;
        this._pluggables = [];
    }
    ConsoleLogger.prototype._padding = function(n) {
        return n < 10 ? "0" + n : "" + n;
    };
    ConsoleLogger.prototype._ts = function() {
        var dt = new Date();
        return [
            this._padding(dt.getMinutes()),
            this._padding(dt.getSeconds())
        ].join(":") + "." + dt.getMilliseconds();
    };
    ConsoleLogger.prototype.configure = function(config) {
        if (!config) return this._config;
        this._config = config;
        return this._config;
    };
    /**
     * Write log
     * @method
     * @memeberof Logger
     * @param {LOG_TYPE|string} type - log type, default INFO
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype._log = function(type) {
        var e_1, _a;
        var msg = [];
        for(var _i = 1; _i < arguments.length; _i++)msg[_i - 1] = arguments[_i];
        var logger_level_name = this.level;
        if (ConsoleLogger.LOG_LEVEL) logger_level_name = ConsoleLogger.LOG_LEVEL;
        if (typeof window !== "undefined" && window.LOG_LEVEL) logger_level_name = window.LOG_LEVEL;
        var logger_level = LOG_LEVELS[logger_level_name];
        var type_level = LOG_LEVELS[type];
        if (!(type_level >= logger_level)) // Do nothing if type is not greater than or equal to logger level (handle undefined)
        return;
        var log = console.log.bind(console);
        if (type === LOG_TYPE.ERROR && console.error) log = console.error.bind(console);
        if (type === LOG_TYPE.WARN && console.warn) log = console.warn.bind(console);
        var prefix = "[" + type + "] " + this._ts() + " " + this.name;
        var message = "";
        if (msg.length === 1 && typeof msg[0] === "string") {
            message = prefix + " - " + msg[0];
            log(message);
        } else if (msg.length === 1) {
            message = prefix + " " + msg[0];
            log(prefix, msg[0]);
        } else if (typeof msg[0] === "string") {
            var obj = msg.slice(1);
            if (obj.length === 1) obj = obj[0];
            message = prefix + " - " + msg[0] + " " + obj;
            log(prefix + " - " + msg[0], obj);
        } else {
            message = prefix + " " + msg;
            log(prefix, msg);
        }
        try {
            for(var _b = __values(this._pluggables), _c = _b.next(); !_c.done; _c = _b.next()){
                var plugin = _c.value;
                var logEvent = {
                    message: message,
                    timestamp: Date.now()
                };
                plugin.pushLogs([
                    logEvent
                ]);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    };
    /**
     * Write General log. Default to INFO
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.log = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, __spread([
            LOG_TYPE.INFO
        ], msg));
    };
    /**
     * Write INFO log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.info = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, __spread([
            LOG_TYPE.INFO
        ], msg));
    };
    /**
     * Write WARN log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.warn = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, __spread([
            LOG_TYPE.WARN
        ], msg));
    };
    /**
     * Write ERROR log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.error = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, __spread([
            LOG_TYPE.ERROR
        ], msg));
    };
    /**
     * Write DEBUG log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.debug = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, __spread([
            LOG_TYPE.DEBUG
        ], msg));
    };
    /**
     * Write VERBOSE log
     * @method
     * @memeberof Logger
     * @param {string|object} msg - Logging message or object
     */ ConsoleLogger.prototype.verbose = function() {
        var msg = [];
        for(var _i = 0; _i < arguments.length; _i++)msg[_i] = arguments[_i];
        this._log.apply(this, __spread([
            LOG_TYPE.VERBOSE
        ], msg));
    };
    ConsoleLogger.prototype.addPluggable = function(pluggable) {
        if (pluggable && pluggable.getCategoryName() === (0, _constants.AWS_CLOUDWATCH_CATEGORY)) {
            this._pluggables.push(pluggable);
            pluggable.configure(this._config);
        }
    };
    ConsoleLogger.prototype.listPluggables = function() {
        return this._pluggables;
    };
    ConsoleLogger.LOG_LEVEL = null;
    return ConsoleLogger;
}();

},{"../Util/Constants":"ey6Nm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ey6Nm":[function(require,module,exports) {
/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ // Logging constants
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_BASE_BUFFER_SIZE", ()=>AWS_CLOUDWATCH_BASE_BUFFER_SIZE);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_CATEGORY", ()=>AWS_CLOUDWATCH_CATEGORY);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE", ()=>AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_MAX_EVENT_SIZE", ()=>AWS_CLOUDWATCH_MAX_EVENT_SIZE);
parcelHelpers.export(exports, "AWS_CLOUDWATCH_PROVIDER_NAME", ()=>AWS_CLOUDWATCH_PROVIDER_NAME);
parcelHelpers.export(exports, "NO_CREDS_ERROR_STRING", ()=>NO_CREDS_ERROR_STRING);
parcelHelpers.export(exports, "RETRY_ERROR_CODES", ()=>RETRY_ERROR_CODES);
var AWS_CLOUDWATCH_BASE_BUFFER_SIZE = 26;
var AWS_CLOUDWATCH_MAX_BATCH_EVENT_SIZE = 1048576;
var AWS_CLOUDWATCH_MAX_EVENT_SIZE = 256000;
var AWS_CLOUDWATCH_CATEGORY = "Logging";
var AWS_CLOUDWATCH_PROVIDER_NAME = "AWSCloudWatch";
var NO_CREDS_ERROR_STRING = "No credentials";
var RETRY_ERROR_CODES = [
    "ResourceNotFoundException",
    "InvalidSequenceTokenException"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"2ZOrj":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Platform", ()=>Platform);
parcelHelpers.export(exports, "getAmplifyUserAgent", ()=>getAmplifyUserAgent);
var _version = require("./version");
var BASE_USER_AGENT = "aws-amplify/" + (0, _version.version);
var Platform = {
    userAgent: BASE_USER_AGENT + " js",
    product: "",
    navigator: null,
    isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
    Platform.product = navigator.product || "";
    Platform.navigator = navigator || null;
    switch(navigator.product){
        case "ReactNative":
            Platform.userAgent = BASE_USER_AGENT + " react-native";
            Platform.isReactNative = true;
            break;
        default:
            Platform.userAgent = BASE_USER_AGENT + " js";
            Platform.isReactNative = false;
            break;
    }
}
var getAmplifyUserAgent = function() {
    return Platform.userAgent;
};
/**
 * @deprecated use named import
 */ exports.default = Platform;

},{"./version":"jfptF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jfptF":[function(require,module,exports) {
// generated by genversion
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
var version = "4.3.10";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kCAC7":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HubClass", ()=>HubClass);
parcelHelpers.export(exports, "Hub", ()=>Hub);
var _logger = require("./Logger");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
};
var logger = new (0, _logger.ConsoleLogger)("Hub");
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
function isLegacyCallback(callback) {
    return callback.onHubCapsule !== undefined;
}
var HubClass = /** @class */ function() {
    function HubClass(name) {
        this.listeners = [];
        this.patterns = [];
        this.protectedChannels = [
            "core",
            "auth",
            "api",
            "analytics",
            "interactions",
            "pubsub",
            "storage",
            "xr"
        ];
        this.name = name;
    }
    // Note - Need to pass channel as a reference for removal to work and not anonymous function
    HubClass.prototype.remove = function(channel, listener) {
        if (channel instanceof RegExp) {
            var pattern_1 = this.patterns.find(function(_a) {
                var pattern = _a.pattern;
                return pattern.source === channel.source;
            });
            if (!pattern_1) {
                logger.warn("No listeners for " + channel);
                return;
            }
            this.patterns = __spread(this.patterns.filter(function(x) {
                return x !== pattern_1;
            }));
        } else {
            var holder = this.listeners[channel];
            if (!holder) {
                logger.warn("No listeners for " + channel);
                return;
            }
            this.listeners[channel] = __spread(holder.filter(function(_a) {
                var callback = _a.callback;
                return callback !== listener;
            }));
        }
    };
    HubClass.prototype.dispatch = function(channel, payload, source, ampSymbol) {
        if (source === void 0) source = "";
        if (this.protectedChannels.indexOf(channel) > -1) {
            var hasAccess = ampSymbol === AMPLIFY_SYMBOL;
            if (!hasAccess) logger.warn("WARNING: " + channel + " is protected and dispatching on it can have unintended consequences");
        }
        var capsule = {
            channel: channel,
            payload: __assign({}, payload),
            source: source,
            patternInfo: []
        };
        try {
            this._toListeners(capsule);
        } catch (e) {
            logger.error(e);
        }
    };
    HubClass.prototype.listen = function(channel, callback, listenerName) {
        var _this = this;
        if (listenerName === void 0) listenerName = "noname";
        var cb;
        // Check for legacy onHubCapsule callback for backwards compatability
        if (isLegacyCallback(callback)) {
            logger.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback.");
            cb = callback.onHubCapsule.bind(callback);
        } else if (typeof callback !== "function") throw new Error("No callback supplied to Hub");
        else cb = callback;
        if (channel instanceof RegExp) this.patterns.push({
            pattern: channel,
            callback: cb
        });
        else {
            var holder = this.listeners[channel];
            if (!holder) {
                holder = [];
                this.listeners[channel] = holder;
            }
            holder.push({
                name: listenerName,
                callback: cb
            });
        }
        return function() {
            _this.remove(channel, cb);
        };
    };
    HubClass.prototype._toListeners = function(capsule) {
        var channel = capsule.channel, payload = capsule.payload;
        var holder = this.listeners[channel];
        if (holder) holder.forEach(function(listener) {
            logger.debug("Dispatching to " + channel + " with ", payload);
            try {
                listener.callback(capsule);
            } catch (e) {
                logger.error(e);
            }
        });
        if (this.patterns.length > 0) {
            if (!payload.message) {
                logger.warn("Cannot perform pattern matching without a message key");
                return;
            }
            var payloadStr_1 = payload.message;
            this.patterns.forEach(function(pattern) {
                var match = payloadStr_1.match(pattern.pattern);
                if (match) {
                    var _a = __read(match), groups = _a.slice(1);
                    var dispatchingCapsule = __assign(__assign({}, capsule), {
                        patternInfo: groups
                    });
                    try {
                        pattern.callback(dispatchingCapsule);
                    } catch (e) {
                        logger.error(e);
                    }
                }
            });
        }
    };
    return HubClass;
}();
var Hub = new HubClass("__default__");
/**
 * @deprecated use named import
 */ exports.default = Hub;

},{"./Logger":"aOIPE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hddus":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "I18n", ()=>I18n);
var _i18N = require("./I18n");
var _logger = require("../Logger");
var _amplify = require("../Amplify");
var logger = new (0, _logger.ConsoleLogger)("I18n");
var _config = null;
var _i18n = null;
/**
 * Export I18n APIs
 */ var I18n = /** @class */ function() {
    function I18n() {}
    /**
     * @static
     * @method
     * Configure I18n part
     * @param {Object} config - Configuration of the I18n
     */ I18n.configure = function(config) {
        logger.debug("configure I18n");
        if (!config) return _config;
        _config = Object.assign({}, _config, config.I18n || config);
        I18n.createInstance();
        return _config;
    };
    I18n.getModuleName = function() {
        return "I18n";
    };
    /**
     * @static
     * @method
     * Create an instance of I18n for the library
     */ I18n.createInstance = function() {
        logger.debug("create I18n instance");
        if (_i18n) return;
        _i18n = new (0, _i18N.I18n)(_config);
    };
    /**
     * @static @method
     * Explicitly setting language
     * @param {String} lang
     */ I18n.setLanguage = function(lang) {
        I18n.checkConfig();
        return _i18n.setLanguage(lang);
    };
    /**
     * @static @method
     * Get value
     * @param {String} key
     * @param {String} defVal - Default value
     */ I18n.get = function(key, defVal) {
        if (!I18n.checkConfig()) return typeof defVal === "undefined" ? key : defVal;
        return _i18n.get(key, defVal);
    };
    /**
     * @static
     * @method
     * Add vocabularies for one language
     * @param {String} langurage - Language of the dictionary
     * @param {Object} vocabularies - Object that has key-value as dictionary entry
     */ I18n.putVocabulariesForLanguage = function(language, vocabularies) {
        I18n.checkConfig();
        return _i18n.putVocabulariesForLanguage(language, vocabularies);
    };
    /**
     * @static
     * @method
     * Add vocabularies for one language
     * @param {Object} vocabularies - Object that has language as key,
     *                                vocabularies of each language as value
     */ I18n.putVocabularies = function(vocabularies) {
        I18n.checkConfig();
        return _i18n.putVocabularies(vocabularies);
    };
    I18n.checkConfig = function() {
        if (!_i18n) _i18n = new (0, _i18N.I18n)(_config);
        return true;
    };
    return I18n;
}();
(0, _amplify.Amplify).register(I18n);
/**
 * @deprecated use named import
 */ exports.default = I18n;

},{"./I18n":"kqZps","../Logger":"aOIPE","../Amplify":"4gP56","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kqZps":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "I18n", ()=>I18n);
var _logger = require("../Logger");
var logger = new (0, _logger.ConsoleLogger)("I18n");
/**
 * Language transition class
 */ var I18n = /** @class */ function() {
    /**
     * @constructor
     * Initialize with configurations
     * @param {Object} options
     */ function I18n(options) {
        /**
         * @private
         */ this._options = null;
        /**
         * @private
         */ this._lang = null;
        /**
         * @private
         */ this._dict = {};
        this._options = Object.assign({}, options);
        this._lang = this._options.language;
        if (!this._lang && typeof window !== "undefined" && window && window.navigator) this._lang = window.navigator.language;
        logger.debug(this._lang);
    }
    /**
     * @method
     * Explicitly setting language
     * @param {String} lang
     */ I18n.prototype.setLanguage = function(lang) {
        this._lang = lang;
    };
    /**
     * @method
     * Get value
     * @param {String} key
     * @param {String} defVal - Default value
     */ I18n.prototype.get = function(key, defVal) {
        if (defVal === void 0) defVal = undefined;
        if (!this._lang) return typeof defVal !== "undefined" ? defVal : key;
        var lang = this._lang;
        var val = this.getByLanguage(key, lang);
        if (val) return val;
        if (lang.indexOf("-") > 0) val = this.getByLanguage(key, lang.split("-")[0]);
        if (val) return val;
        return typeof defVal !== "undefined" ? defVal : key;
    };
    /**
     * @method
     * Get value according to specified language
     * @param {String} key
     * @param {String} language - Specified langurage to be used
     * @param {String} defVal - Default value
     */ I18n.prototype.getByLanguage = function(key, language, defVal) {
        if (defVal === void 0) defVal = null;
        if (!language) return defVal;
        var lang_dict = this._dict[language];
        if (!lang_dict) return defVal;
        return lang_dict[key];
    };
    /**
     * @method
     * Add vocabularies for one language
     * @param {String} language - Language of the dictionary
     * @param {Object} vocabularies - Object that has key-value as dictionary entry
     */ I18n.prototype.putVocabulariesForLanguage = function(language, vocabularies) {
        var lang_dict = this._dict[language];
        if (!lang_dict) lang_dict = this._dict[language] = {};
        Object.assign(lang_dict, vocabularies);
    };
    /**
     * @method
     * Add vocabularies for one language
     * @param {Object} vocabularies - Object that has language as key,
     *                                vocabularies of each language as value
     */ I18n.prototype.putVocabularies = function(vocabularies) {
        var _this = this;
        Object.keys(vocabularies).map(function(key) {
            _this.putVocabulariesForLanguage(key, vocabularies[key]);
        });
    };
    return I18n;
}();

},{"../Logger":"aOIPE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fFubg":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isEmpty", ()=>isEmpty);
parcelHelpers.export(exports, "sortByField", ()=>sortByField);
parcelHelpers.export(exports, "objectLessAttributes", ()=>objectLessAttributes);
parcelHelpers.export(exports, "filenameToContentType", ()=>filenameToContentType);
parcelHelpers.export(exports, "isTextFile", ()=>isTextFile);
parcelHelpers.export(exports, "generateRandomString", ()=>generateRandomString);
parcelHelpers.export(exports, "makeQuerablePromise", ()=>makeQuerablePromise);
parcelHelpers.export(exports, "isWebWorker", ()=>isWebWorker);
parcelHelpers.export(exports, "browserOrNode", ()=>browserOrNode);
parcelHelpers.export(exports, "transferKeyToLowerCase", ()=>transferKeyToLowerCase);
parcelHelpers.export(exports, "transferKeyToUpperCase", ()=>transferKeyToUpperCase);
parcelHelpers.export(exports, "isStrictObject", ()=>isStrictObject);
parcelHelpers.export(exports, "JS", ()=>JS);
var process = require("6dd1111aaf1faf9b");
var MIME_MAP = [
    {
        type: "text/plain",
        ext: "txt"
    },
    {
        type: "text/html",
        ext: "html"
    },
    {
        type: "text/javascript",
        ext: "js"
    },
    {
        type: "text/css",
        ext: "css"
    },
    {
        type: "text/csv",
        ext: "csv"
    },
    {
        type: "text/yaml",
        ext: "yml"
    },
    {
        type: "text/yaml",
        ext: "yaml"
    },
    {
        type: "text/calendar",
        ext: "ics"
    },
    {
        type: "text/calendar",
        ext: "ical"
    },
    {
        type: "image/apng",
        ext: "apng"
    },
    {
        type: "image/bmp",
        ext: "bmp"
    },
    {
        type: "image/gif",
        ext: "gif"
    },
    {
        type: "image/x-icon",
        ext: "ico"
    },
    {
        type: "image/x-icon",
        ext: "cur"
    },
    {
        type: "image/jpeg",
        ext: "jpg"
    },
    {
        type: "image/jpeg",
        ext: "jpeg"
    },
    {
        type: "image/jpeg",
        ext: "jfif"
    },
    {
        type: "image/jpeg",
        ext: "pjp"
    },
    {
        type: "image/jpeg",
        ext: "pjpeg"
    },
    {
        type: "image/png",
        ext: "png"
    },
    {
        type: "image/svg+xml",
        ext: "svg"
    },
    {
        type: "image/tiff",
        ext: "tif"
    },
    {
        type: "image/tiff",
        ext: "tiff"
    },
    {
        type: "image/webp",
        ext: "webp"
    },
    {
        type: "application/json",
        ext: "json"
    },
    {
        type: "application/xml",
        ext: "xml"
    },
    {
        type: "application/x-sh",
        ext: "sh"
    },
    {
        type: "application/zip",
        ext: "zip"
    },
    {
        type: "application/x-rar-compressed",
        ext: "rar"
    },
    {
        type: "application/x-tar",
        ext: "tar"
    },
    {
        type: "application/x-bzip",
        ext: "bz"
    },
    {
        type: "application/x-bzip2",
        ext: "bz2"
    },
    {
        type: "application/pdf",
        ext: "pdf"
    },
    {
        type: "application/java-archive",
        ext: "jar"
    },
    {
        type: "application/msword",
        ext: "doc"
    },
    {
        type: "application/vnd.ms-excel",
        ext: "xls"
    },
    {
        type: "application/vnd.ms-excel",
        ext: "xlsx"
    },
    {
        type: "message/rfc822",
        ext: "eml"
    }
];
var isEmpty = function(obj) {
    if (obj === void 0) obj = {};
    return Object.keys(obj).length === 0;
};
var sortByField = function(list, field, dir) {
    if (!list || !list.sort) return false;
    var dirX = dir && dir === "desc" ? -1 : 1;
    list.sort(function(a, b) {
        var a_val = a[field];
        var b_val = b[field];
        if (typeof b_val === "undefined") return typeof a_val === "undefined" ? 0 : 1 * dirX;
        if (typeof a_val === "undefined") return -1 * dirX;
        if (a_val < b_val) return -1 * dirX;
        if (a_val > b_val) return 1 * dirX;
        return 0;
    });
    return true;
};
var objectLessAttributes = function(obj, less) {
    var ret = Object.assign({}, obj);
    if (less) {
        if (typeof less === "string") delete ret[less];
        else less.forEach(function(attr) {
            delete ret[attr];
        });
    }
    return ret;
};
var filenameToContentType = function(filename, defVal) {
    if (defVal === void 0) defVal = "application/octet-stream";
    var name = filename.toLowerCase();
    var filtered = MIME_MAP.filter(function(mime) {
        return name.endsWith("." + mime.ext);
    });
    return filtered.length > 0 ? filtered[0].type : defVal;
};
var isTextFile = function(contentType) {
    var type = contentType.toLowerCase();
    if (type.startsWith("text/")) return true;
    return "application/json" === type || "application/xml" === type || "application/sh" === type;
};
var generateRandomString = function() {
    var result = "";
    var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
    for(var i = 32; i > 0; i -= 1)result += chars[Math.floor(Math.random() * chars.length)];
    return result;
};
var makeQuerablePromise = function(promise) {
    if (promise.isResolved) return promise;
    var isPending = true;
    var isRejected = false;
    var isFullfilled = false;
    var result = promise.then(function(data) {
        isFullfilled = true;
        isPending = false;
        return data;
    }, function(e) {
        isRejected = true;
        isPending = false;
        throw e;
    });
    result.isFullfilled = function() {
        return isFullfilled;
    };
    result.isPending = function() {
        return isPending;
    };
    result.isRejected = function() {
        return isRejected;
    };
    return result;
};
var isWebWorker = function() {
    if (typeof self === "undefined") return false;
    var selfContext = self;
    return typeof selfContext.WorkerGlobalScope !== "undefined" && self instanceof selfContext.WorkerGlobalScope;
};
var browserOrNode = function() {
    var isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined";
    var isNode = typeof process !== "undefined" && process.versions != null && process.versions.node != null;
    return {
        isBrowser: isBrowser,
        isNode: isNode
    };
};
var transferKeyToLowerCase = function(obj, whiteListForItself, whiteListForChildren) {
    if (whiteListForItself === void 0) whiteListForItself = [];
    if (whiteListForChildren === void 0) whiteListForChildren = [];
    if (!isStrictObject(obj)) return obj;
    var ret = {};
    for(var key in obj)if (obj.hasOwnProperty(key)) {
        var transferedKey = whiteListForItself.includes(key) ? key : key[0].toLowerCase() + key.slice(1);
        ret[transferedKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToLowerCase(obj[key], whiteListForItself, whiteListForChildren);
    }
    return ret;
};
var transferKeyToUpperCase = function(obj, whiteListForItself, whiteListForChildren) {
    if (whiteListForItself === void 0) whiteListForItself = [];
    if (whiteListForChildren === void 0) whiteListForChildren = [];
    if (!isStrictObject(obj)) return obj;
    var ret = {};
    for(var key in obj)if (obj.hasOwnProperty(key)) {
        var transferredKey = whiteListForItself.includes(key) ? key : key[0].toUpperCase() + key.slice(1);
        ret[transferredKey] = whiteListForChildren.includes(key) ? obj[key] : transferKeyToUpperCase(obj[key], whiteListForItself, whiteListForChildren);
    }
    return ret;
};
var isStrictObject = function(obj) {
    return obj instanceof Object && !(obj instanceof Array) && !(obj instanceof Function) && !(obj instanceof Number) && !(obj instanceof String) && !(obj instanceof Boolean);
};
/**
 * @deprecated use per-function imports
 */ var JS = /** @class */ function() {
    function JS() {}
    JS.isEmpty = isEmpty;
    JS.sortByField = sortByField;
    JS.objectLessAttributes = objectLessAttributes;
    JS.filenameToContentType = filenameToContentType;
    JS.isTextFile = isTextFile;
    JS.generateRandomString = generateRandomString;
    JS.makeQuerablePromise = makeQuerablePromise;
    JS.isWebWorker = isWebWorker;
    JS.browserOrNode = browserOrNode;
    JS.transferKeyToLowerCase = transferKeyToLowerCase;
    JS.transferKeyToUpperCase = transferKeyToUpperCase;
    JS.isStrictObject = isStrictObject;
    return JS;
}();
/**
 * @deprecated use per-function imports
 */ exports.default = JS;

},{"6dd1111aaf1faf9b":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"inlQu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseMobileHubConfig", ()=>parseMobileHubConfig);
parcelHelpers.export(exports, "Parser", ()=>Parser);
var _logger = require("./Logger");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var logger = new (0, _logger.ConsoleLogger)("Parser");
var parseMobileHubConfig = function(config) {
    var amplifyConfig = {};
    // Analytics
    if (config["aws_mobile_analytics_app_id"]) {
        var Analytics = {
            AWSPinpoint: {
                appId: config["aws_mobile_analytics_app_id"],
                region: config["aws_mobile_analytics_app_region"]
            }
        };
        amplifyConfig.Analytics = Analytics;
    }
    // Auth
    if (config["aws_cognito_identity_pool_id"] || config["aws_user_pools_id"]) amplifyConfig.Auth = {
        userPoolId: config["aws_user_pools_id"],
        userPoolWebClientId: config["aws_user_pools_web_client_id"],
        region: config["aws_cognito_region"],
        identityPoolId: config["aws_cognito_identity_pool_id"],
        identityPoolRegion: config["aws_cognito_region"],
        mandatorySignIn: config["aws_mandatory_sign_in"] === "enable"
    };
    // Storage
    var storageConfig;
    if (config["aws_user_files_s3_bucket"]) storageConfig = {
        AWSS3: {
            bucket: config["aws_user_files_s3_bucket"],
            region: config["aws_user_files_s3_bucket_region"],
            dangerouslyConnectToHttpEndpointForTesting: config["aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing"]
        }
    };
    else storageConfig = config ? config.Storage || config : {};
    // Logging
    if (config["Logging"]) amplifyConfig.Logging = __assign(__assign({}, config["Logging"]), {
        region: config["aws_project_region"]
    });
    // Geo
    if (config["geo"]) {
        amplifyConfig.Geo = Object.assign({}, config.geo);
        if (config.geo["amazon_location_service"]) amplifyConfig.Geo = {
            AmazonLocationService: config.geo["amazon_location_service"]
        };
    }
    amplifyConfig.Analytics = Object.assign({}, amplifyConfig.Analytics, config.Analytics);
    amplifyConfig.Auth = Object.assign({}, amplifyConfig.Auth, config.Auth);
    amplifyConfig.Storage = Object.assign({}, storageConfig);
    amplifyConfig.Logging = Object.assign({}, amplifyConfig.Logging, config.Logging);
    logger.debug("parse config", config, "to amplifyconfig", amplifyConfig);
    return amplifyConfig;
};
/**
 * @deprecated use per-function export
 */ var Parser = /** @class */ function() {
    function Parser() {}
    Parser.parseMobilehubConfig = parseMobileHubConfig;
    return Parser;
}();
/**
 * @deprecated use per-function export
 */ exports.default = Parser;

},{"./Logger":"aOIPE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"zKgKu":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GoogleOAuth", ()=>GoogleOAuth);
parcelHelpers.export(exports, "FacebookOAuth", ()=>FacebookOAuth);
var _googleOAuth = require("./GoogleOAuth");
var _facebookOAuth = require("./FacebookOAuth");
var GoogleOAuth = new (0, _googleOAuth.GoogleOAuth)();
var FacebookOAuth = new (0, _facebookOAuth.FacebookOAuth)();

},{"./GoogleOAuth":"dDWqF","./FacebookOAuth":"cLE4d","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDWqF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GoogleOAuth", ()=>GoogleOAuth);
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var _logger = require("../Logger");
var _js = require("../JS");
var _util = require("../Util");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var logger = new (0, _logger.ConsoleLogger)("CognitoCredentials");
var waitForInit = new Promise(function(res, rej) {
    if (!(0, _js.browserOrNode)().isBrowser) {
        logger.debug("not in the browser, directly resolved");
        return res();
    }
    var ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
    if (ga) {
        logger.debug("google api already loaded");
        return res();
    } else setTimeout(function() {
        return res();
    }, 2000);
});
var GoogleOAuth = /** @class */ function() {
    function GoogleOAuth() {
        this.initialized = false;
        this.refreshGoogleToken = this.refreshGoogleToken.bind(this);
        this._refreshGoogleTokenImpl = this._refreshGoogleTokenImpl.bind(this);
    }
    GoogleOAuth.prototype.refreshGoogleToken = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!!this.initialized) return [
                            3 /*break*/ ,
                            2
                        ];
                        logger.debug("need to wait for the Google SDK loaded");
                        return [
                            4 /*yield*/ ,
                            waitForInit
                        ];
                    case 1:
                        _a.sent();
                        this.initialized = true;
                        logger.debug("finish waiting");
                        _a.label = 2;
                    case 2:
                        return [
                            2 /*return*/ ,
                            this._refreshGoogleTokenImpl()
                        ];
                }
            });
        });
    };
    GoogleOAuth.prototype._refreshGoogleTokenImpl = function() {
        var ga = null;
        if ((0, _js.browserOrNode)().isBrowser) ga = window["gapi"] && window["gapi"].auth2 ? window["gapi"].auth2 : null;
        if (!ga) {
            logger.debug("no gapi auth2 available");
            return Promise.reject("no gapi auth2 available");
        }
        return new Promise(function(res, rej) {
            ga.getAuthInstance().then(function(googleAuth) {
                if (!googleAuth) {
                    logger.debug("google Auth undefined");
                    rej(new (0, _util.NonRetryableError)("google Auth undefined"));
                }
                var googleUser = googleAuth.currentUser.get();
                // refresh the token
                if (googleUser.isSignedIn()) {
                    logger.debug("refreshing the google access token");
                    googleUser.reloadAuthResponse().then(function(authResponse) {
                        var id_token = authResponse.id_token, expires_at = authResponse.expires_at;
                        res({
                            token: id_token,
                            expires_at: expires_at
                        });
                    }).catch(function(err) {
                        if (err && err.error === "network_error") // Not using NonRetryableError so handler will be retried
                        rej("Network error reloading google auth response");
                        else rej(new (0, _util.NonRetryableError)("Failed to reload google auth response"));
                    });
                } else rej(new (0, _util.NonRetryableError)("User is not signed in with Google"));
            }).catch(function(err) {
                logger.debug("Failed to refresh google token", err);
                rej(new (0, _util.NonRetryableError)("Failed to refresh google token"));
            });
        });
    };
    return GoogleOAuth;
}();
/**
 * @deprecated use named import
 */ exports.default = GoogleOAuth;

},{"../Logger":"aOIPE","../JS":"fFubg","../Util":"hLH9s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hLH9s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Mutex", ()=>(0, _mutexDefault.default));
parcelHelpers.export(exports, "Reachability", ()=>(0, _reachabilityDefault.default));
var _retry = require("./Retry");
parcelHelpers.exportAll(_retry, exports);
var _mutex = require("./Mutex");
var _mutexDefault = parcelHelpers.interopDefault(_mutex);
var _reachability = require("./Reachability");
var _reachabilityDefault = parcelHelpers.interopDefault(_reachability);
var _dateUtils = require("./DateUtils");
parcelHelpers.exportAll(_dateUtils, exports);
var _stringUtils = require("./StringUtils");
parcelHelpers.exportAll(_stringUtils, exports);
var _constants = require("./Constants");
parcelHelpers.exportAll(_constants, exports);

},{"./Retry":"8aOZi","./Mutex":false,"./Reachability":false,"./DateUtils":false,"./StringUtils":"ge69D","./Constants":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8aOZi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NonRetryableError", ()=>NonRetryableError);
/**
 * @private
 * Internal use of Amplify only
 */ parcelHelpers.export(exports, "retry", ()=>retry);
parcelHelpers.export(exports, "jitteredExponentialRetry", ()=>jitteredExponentialRetry);
var _consoleLogger = require("../Logger/ConsoleLogger");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
};
var logger = new (0, _consoleLogger.ConsoleLogger)("Util");
var NonRetryableError = /** @class */ function(_super) {
    __extends(NonRetryableError, _super);
    function NonRetryableError(message) {
        var _this = _super.call(this, message) || this;
        _this.nonRetryable = true;
        return _this;
    }
    return NonRetryableError;
}(Error);
var isNonRetryableError = function(obj) {
    var key = "nonRetryable";
    return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, attempt) {
    if (attempt === void 0) attempt = 1;
    return __awaiter(this, void 0, void 0, function() {
        var err_1, retryIn_1;
        return __generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (typeof functionToRetry !== "function") throw Error("functionToRetry must be a function");
                    logger.debug(functionToRetry.name + " attempt #" + attempt + " with this vars: " + JSON.stringify(args));
                    _a.label = 1;
                case 1:
                    _a.trys.push([
                        1,
                        3,
                        ,
                        8
                    ]);
                    return [
                        4 /*yield*/ ,
                        functionToRetry.apply(void 0, __spread(args))
                    ];
                case 2:
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
                case 3:
                    err_1 = _a.sent();
                    logger.debug("error on " + functionToRetry.name, err_1);
                    if (isNonRetryableError(err_1)) {
                        logger.debug(functionToRetry.name + " non retryable error", err_1);
                        throw err_1;
                    }
                    retryIn_1 = delayFn(attempt, args, err_1);
                    logger.debug(functionToRetry.name + " retrying in " + retryIn_1 + " ms");
                    if (!(retryIn_1 !== false)) return [
                        3 /*break*/ ,
                        6
                    ];
                    return [
                        4 /*yield*/ ,
                        new Promise(function(res) {
                            return setTimeout(res, retryIn_1);
                        })
                    ];
                case 4:
                    _a.sent();
                    return [
                        4 /*yield*/ ,
                        retry(functionToRetry, args, delayFn, attempt + 1)
                    ];
                case 5:
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
                case 6:
                    throw err_1;
                case 7:
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 8:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
var MAX_DELAY_MS = 300000;
function jitteredBackoff(maxDelayMs) {
    var BASE_TIME_MS = 100;
    var JITTER_FACTOR = 100;
    return function(attempt) {
        var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
        return delay > maxDelayMs ? false : delay;
    };
}
var jitteredExponentialRetry = function(functionToRetry, args, maxDelayMs) {
    if (maxDelayMs === void 0) maxDelayMs = MAX_DELAY_MS;
    return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));
};

},{"../Logger/ConsoleLogger":"9vCE0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ge69D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "urlSafeEncode", ()=>urlSafeEncode);
parcelHelpers.export(exports, "urlSafeDecode", ()=>urlSafeDecode);
function urlSafeEncode(str) {
    return str.split("").map(function(char) {
        return char.charCodeAt(0).toString(16).padStart(2, "0");
    }).join("");
}
function urlSafeDecode(hex) {
    return hex.match(/.{2}/g).map(function(char) {
        return String.fromCharCode(parseInt(char, 16));
    }).join("");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cLE4d":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FacebookOAuth", ()=>FacebookOAuth);
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var _logger = require("../Logger");
var _js = require("../JS");
var _util = require("../Util");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var logger = new (0, _logger.ConsoleLogger)("CognitoCredentials");
var waitForInit = new Promise(function(res, rej) {
    if (!(0, _js.browserOrNode)().isBrowser) {
        logger.debug("not in the browser, directly resolved");
        return res();
    }
    var fb = window["FB"];
    if (fb) {
        logger.debug("FB SDK already loaded");
        return res();
    } else setTimeout(function() {
        return res();
    }, 2000);
});
var FacebookOAuth = /** @class */ function() {
    function FacebookOAuth() {
        this.initialized = false;
        this.refreshFacebookToken = this.refreshFacebookToken.bind(this);
        this._refreshFacebookTokenImpl = this._refreshFacebookTokenImpl.bind(this);
    }
    FacebookOAuth.prototype.refreshFacebookToken = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!!this.initialized) return [
                            3 /*break*/ ,
                            2
                        ];
                        logger.debug("need to wait for the Facebook SDK loaded");
                        return [
                            4 /*yield*/ ,
                            waitForInit
                        ];
                    case 1:
                        _a.sent();
                        this.initialized = true;
                        logger.debug("finish waiting");
                        _a.label = 2;
                    case 2:
                        return [
                            2 /*return*/ ,
                            this._refreshFacebookTokenImpl()
                        ];
                }
            });
        });
    };
    FacebookOAuth.prototype._refreshFacebookTokenImpl = function() {
        var fb = null;
        if ((0, _js.browserOrNode)().isBrowser) fb = window["FB"];
        if (!fb) {
            var errorMessage = "no fb sdk available";
            logger.debug(errorMessage);
            return Promise.reject(new (0, _util.NonRetryableError)(errorMessage));
        }
        return new Promise(function(res, rej) {
            fb.getLoginStatus(function(fbResponse) {
                if (!fbResponse || !fbResponse.authResponse) {
                    var errorMessage = "no response from facebook when refreshing the jwt token";
                    logger.debug(errorMessage);
                    // There is no definitive indication for a network error in
                    // fbResponse, so we are treating it as an invalid token.
                    rej(new (0, _util.NonRetryableError)(errorMessage));
                } else {
                    var response = fbResponse.authResponse;
                    var accessToken = response.accessToken, expiresIn = response.expiresIn;
                    var date = new Date();
                    var expires_at = expiresIn * 1000 + date.getTime();
                    if (!accessToken) {
                        var errorMessage = "the jwtToken is undefined";
                        logger.debug(errorMessage);
                        rej(new (0, _util.NonRetryableError)(errorMessage));
                    }
                    res({
                        token: accessToken,
                        expires_at: expires_at
                    });
                }
            }, {
                scope: "public_profile,email"
            });
        });
    };
    return FacebookOAuth;
}();
/**
 * @deprecated use named import
 */ exports.default = FacebookOAuth;

},{"../Logger":"aOIPE","../JS":"fFubg","../Util":"hLH9s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e9vlE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CredentialsClass", ()=>CredentialsClass);
parcelHelpers.export(exports, "Credentials", ()=>Credentials);
var _logger = require("./Logger");
var _storageHelper = require("./StorageHelper");
var _js = require("./JS");
var _oauthHelper = require("./OAuthHelper");
var _util = require("./Util");
var _platform = require("./Platform");
var _amplify = require("./Amplify");
var _credentialProviderCognitoIdentity = require("@aws-sdk/credential-provider-cognito-identity");
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var logger = new (0, _logger.ConsoleLogger)("Credentials");
var CREDENTIALS_TTL = 3000000; // 50 min, can be modified on config if required in the future
var COGNITO_IDENTITY_KEY_PREFIX = "CognitoIdentityId-";
var CredentialsClass = /** @class */ function() {
    function CredentialsClass(config) {
        this._gettingCredPromise = null;
        this._refreshHandlers = {};
        // Allow `Auth` to be injected for SSR, but Auth isn't a required dependency for Credentials
        this.Auth = undefined;
        this.configure(config);
        this._refreshHandlers["google"] = (0, _oauthHelper.GoogleOAuth).refreshGoogleToken;
        this._refreshHandlers["facebook"] = (0, _oauthHelper.FacebookOAuth).refreshFacebookToken;
    }
    CredentialsClass.prototype.getModuleName = function() {
        return "Credentials";
    };
    CredentialsClass.prototype.getCredSource = function() {
        return this._credentials_source;
    };
    CredentialsClass.prototype.configure = function(config) {
        if (!config) return this._config || {};
        this._config = Object.assign({}, this._config, config);
        var refreshHandlers = this._config.refreshHandlers;
        // If the developer has provided an object of refresh handlers,
        // then we can merge the provided handlers with the current handlers.
        if (refreshHandlers) this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);
        this._storage = this._config.storage;
        if (!this._storage) this._storage = new (0, _storageHelper.StorageHelper)().getStorage();
        this._storageSync = Promise.resolve();
        if (typeof this._storage["sync"] === "function") this._storageSync = this._storage["sync"]();
        return this._config;
    };
    CredentialsClass.prototype.get = function() {
        logger.debug("getting credentials");
        return this._pickupCredentials();
    };
    // currently we only store the guest identity in local storage
    CredentialsClass.prototype._getCognitoIdentityIdStorageKey = function(identityPoolId) {
        return "" + COGNITO_IDENTITY_KEY_PREFIX + identityPoolId;
    };
    CredentialsClass.prototype._pickupCredentials = function() {
        logger.debug("picking up credentials");
        if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {
            logger.debug("getting new cred promise");
            this._gettingCredPromise = (0, _js.makeQuerablePromise)(this._keepAlive());
        } else logger.debug("getting old cred promise");
        return this._gettingCredPromise;
    };
    CredentialsClass.prototype._keepAlive = function() {
        return __awaiter(this, void 0, void 0, function() {
            var cred, _a, Auth, user_1, session, refreshToken_1, refreshRequest, err_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        logger.debug("checking if credentials exists and not expired");
                        cred = this._credentials;
                        if (cred && !this._isExpired(cred) && !this._isPastTTL()) {
                            logger.debug("credentials not changed and not expired, directly return");
                            return [
                                2 /*return*/ ,
                                Promise.resolve(cred)
                            ];
                        }
                        logger.debug("need to get a new credential or refresh the existing one");
                        _a = this.Auth, Auth = _a === void 0 ? (0, _amplify.Amplify).Auth : _a;
                        if (!Auth || typeof Auth.currentUserCredentials !== "function") return [
                            2 /*return*/ ,
                            Promise.reject("No Auth module registered in Amplify")
                        ];
                        if (!(!this._isExpired(cred) && this._isPastTTL())) return [
                            3 /*break*/ ,
                            6
                        ];
                        logger.debug("ttl has passed but token is not yet expired");
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            5,
                            ,
                            6
                        ]);
                        return [
                            4 /*yield*/ ,
                            Auth.currentUserPoolUser()
                        ];
                    case 2:
                        user_1 = _b.sent();
                        return [
                            4 /*yield*/ ,
                            Auth.currentSession()
                        ];
                    case 3:
                        session = _b.sent();
                        refreshToken_1 = session.refreshToken;
                        refreshRequest = new Promise(function(res, rej) {
                            user_1.refreshSession(refreshToken_1, function(err, data) {
                                return err ? rej(err) : res(data);
                            });
                        });
                        return [
                            4 /*yield*/ ,
                            refreshRequest
                        ];
                    case 4:
                        _b.sent(); // note that rejections will be caught and handled in the catch block.
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 5:
                        err_1 = _b.sent();
                        // should not throw because user might just be on guest access or is authenticated through federation
                        logger.debug("Error attempting to refreshing the session", err_1);
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 6:
                        return [
                            2 /*return*/ ,
                            Auth.currentUserCredentials()
                        ];
                }
            });
        });
    };
    CredentialsClass.prototype.refreshFederatedToken = function(federatedInfo) {
        logger.debug("Getting federated credentials");
        var provider = federatedInfo.provider, user = federatedInfo.user, token = federatedInfo.token, identity_id = federatedInfo.identity_id;
        var expires_at = federatedInfo.expires_at;
        // Make sure expires_at is in millis
        expires_at = new Date(expires_at).getFullYear() === 1970 ? expires_at * 1000 : expires_at;
        var that = this;
        logger.debug("checking if federated jwt token expired");
        if (expires_at > new Date().getTime()) {
            // if not expired
            logger.debug("token not expired");
            return this._setCredentialsFromFederation({
                provider: provider,
                token: token,
                user: user,
                identity_id: identity_id,
                expires_at: expires_at
            });
        } else // if refresh handler exists
        if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === "function") {
            logger.debug("getting refreshed jwt token from federation provider");
            return this._providerRefreshWithRetry({
                refreshHandler: that._refreshHandlers[provider],
                provider: provider,
                user: user
            });
        } else {
            logger.debug("no refresh handler for provider:", provider);
            this.clear();
            return Promise.reject("no refresh handler for provider");
        }
    };
    CredentialsClass.prototype._providerRefreshWithRetry = function(_a) {
        var _this = this;
        var refreshHandler = _a.refreshHandler, provider = _a.provider, user = _a.user;
        var MAX_DELAY_MS = 10000;
        // refreshHandler will retry network errors, otherwise it will
        // return NonRetryableError to break out of jitteredExponentialRetry
        return (0, _util.jitteredExponentialRetry)(refreshHandler, [], MAX_DELAY_MS).then(function(data) {
            logger.debug("refresh federated token sucessfully", data);
            return _this._setCredentialsFromFederation({
                provider: provider,
                token: data.token,
                user: user,
                identity_id: data.identity_id,
                expires_at: data.expires_at
            });
        }).catch(function(e) {
            var isNetworkError = typeof e === "string" && e.toLowerCase().lastIndexOf("network error", e.length) === 0;
            if (!isNetworkError) _this.clear();
            logger.debug("refresh federated token failed", e);
            return Promise.reject("refreshing federation token failed: " + e);
        });
    };
    CredentialsClass.prototype._isExpired = function(credentials) {
        if (!credentials) {
            logger.debug("no credentials for expiration check");
            return true;
        }
        logger.debug("are these credentials expired?", credentials);
        var ts = Date.now();
        /* returns date object.
            https://github.com/aws/aws-sdk-js-v3/blob/v1.0.0-beta.1/packages/types/src/credentials.ts#L26
        */ var expiration = credentials.expiration;
        return expiration.getTime() <= ts;
    };
    CredentialsClass.prototype._isPastTTL = function() {
        return this._nextCredentialsRefresh <= Date.now();
    };
    CredentialsClass.prototype._setCredentialsForGuest = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, identityPoolId, region, mandatorySignIn, identityId, _b, cognitoClient, credentials, cognitoIdentityParams, credentialsProvider;
            var _this = this;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        logger.debug("setting credentials for guest");
                        _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;
                        if (mandatorySignIn) return [
                            2 /*return*/ ,
                            Promise.reject("cannot get guest credentials when mandatory signin enabled")
                        ];
                        if (!identityPoolId) {
                            logger.debug("No Cognito Identity pool provided for unauthenticated access");
                            return [
                                2 /*return*/ ,
                                Promise.reject("No Cognito Identity pool provided for unauthenticated access")
                            ];
                        }
                        if (!region) {
                            logger.debug("region is not configured for getting the credentials");
                            return [
                                2 /*return*/ ,
                                Promise.reject("region is not configured for getting the credentials")
                            ];
                        }
                        _b = this;
                        return [
                            4 /*yield*/ ,
                            this._getGuestIdentityId()
                        ];
                    case 1:
                        identityId = _b._identityId = _c.sent();
                        cognitoClient = new (0, _clientCognitoIdentity.CognitoIdentityClient)({
                            region: region,
                            customUserAgent: (0, _platform.getAmplifyUserAgent)()
                        });
                        credentials = undefined;
                        if (identityId) {
                            cognitoIdentityParams = {
                                identityId: identityId,
                                client: cognitoClient
                            };
                            credentials = (0, _credentialProviderCognitoIdentity.fromCognitoIdentity)(cognitoIdentityParams)();
                        } else {
                            credentialsProvider = function() {
                                return __awaiter(_this, void 0, void 0, function() {
                                    var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;
                                    return __generator(this, function(_a) {
                                        switch(_a.label){
                                            case 0:
                                                return [
                                                    4 /*yield*/ ,
                                                    cognitoClient.send(new (0, _clientCognitoIdentity.GetIdCommand)({
                                                        IdentityPoolId: identityPoolId
                                                    }))
                                                ];
                                            case 1:
                                                IdentityId = _a.sent().IdentityId;
                                                this._identityId = IdentityId;
                                                cognitoIdentityParams = {
                                                    client: cognitoClient,
                                                    identityId: IdentityId
                                                };
                                                credentialsFromCognitoIdentity = (0, _credentialProviderCognitoIdentity.fromCognitoIdentity)(cognitoIdentityParams);
                                                return [
                                                    2 /*return*/ ,
                                                    credentialsFromCognitoIdentity()
                                                ];
                                        }
                                    });
                                });
                            };
                            credentials = credentialsProvider().catch(function(err) {
                                return __awaiter(_this, void 0, void 0, function() {
                                    return __generator(this, function(_a) {
                                        throw err;
                                    });
                                });
                            });
                        }
                        return [
                            2 /*return*/ ,
                            this._loadCredentials(credentials, "guest", false, null).then(function(res) {
                                return res;
                            }).catch(function(e) {
                                return __awaiter(_this, void 0, void 0, function() {
                                    var credentialsProvider;
                                    var _this = this;
                                    return __generator(this, function(_a) {
                                        switch(_a.label){
                                            case 0:
                                                if (!(e.name === "ResourceNotFoundException" && e.message === "Identity '" + identityId + "' not found.")) return [
                                                    3 /*break*/ ,
                                                    2
                                                ];
                                                logger.debug("Failed to load guest credentials");
                                                return [
                                                    4 /*yield*/ ,
                                                    this._removeGuestIdentityId()
                                                ];
                                            case 1:
                                                _a.sent();
                                                credentialsProvider = function() {
                                                    return __awaiter(_this, void 0, void 0, function() {
                                                        var IdentityId, cognitoIdentityParams, credentialsFromCognitoIdentity;
                                                        return __generator(this, function(_a) {
                                                            switch(_a.label){
                                                                case 0:
                                                                    return [
                                                                        4 /*yield*/ ,
                                                                        cognitoClient.send(new (0, _clientCognitoIdentity.GetIdCommand)({
                                                                            IdentityPoolId: identityPoolId
                                                                        }))
                                                                    ];
                                                                case 1:
                                                                    IdentityId = _a.sent().IdentityId;
                                                                    this._identityId = IdentityId;
                                                                    cognitoIdentityParams = {
                                                                        client: cognitoClient,
                                                                        identityId: IdentityId
                                                                    };
                                                                    credentialsFromCognitoIdentity = (0, _credentialProviderCognitoIdentity.fromCognitoIdentity)(cognitoIdentityParams);
                                                                    return [
                                                                        2 /*return*/ ,
                                                                        credentialsFromCognitoIdentity()
                                                                    ];
                                                            }
                                                        });
                                                    });
                                                };
                                                credentials = credentialsProvider().catch(function(err) {
                                                    return __awaiter(_this, void 0, void 0, function() {
                                                        return __generator(this, function(_a) {
                                                            throw err;
                                                        });
                                                    });
                                                });
                                                return [
                                                    2 /*return*/ ,
                                                    this._loadCredentials(credentials, "guest", false, null)
                                                ];
                                            case 2:
                                                return [
                                                    2 /*return*/ ,
                                                    e
                                                ];
                                        }
                                    });
                                });
                            })
                        ];
                }
            });
        });
    };
    CredentialsClass.prototype._setCredentialsFromFederation = function(params) {
        var provider = params.provider, token = params.token, identity_id = params.identity_id;
        var domains = {
            google: "accounts.google.com",
            facebook: "graph.facebook.com",
            amazon: "www.amazon.com",
            developer: "cognito-identity.amazonaws.com"
        };
        // Use custom provider url instead of the predefined ones
        var domain = domains[provider] || provider;
        if (!domain) return Promise.reject("You must specify a federated provider");
        var logins = {};
        logins[domain] = token;
        var _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;
        if (!identityPoolId) {
            logger.debug("No Cognito Federated Identity pool provided");
            return Promise.reject("No Cognito Federated Identity pool provided");
        }
        if (!region) {
            logger.debug("region is not configured for getting the credentials");
            return Promise.reject("region is not configured for getting the credentials");
        }
        var cognitoClient = new (0, _clientCognitoIdentity.CognitoIdentityClient)({
            region: region,
            customUserAgent: (0, _platform.getAmplifyUserAgent)()
        });
        var credentials = undefined;
        if (identity_id) {
            var cognitoIdentityParams = {
                identityId: identity_id,
                logins: logins,
                client: cognitoClient
            };
            credentials = (0, _credentialProviderCognitoIdentity.fromCognitoIdentity)(cognitoIdentityParams)();
        } else {
            var cognitoIdentityParams = {
                logins: logins,
                identityPoolId: identityPoolId,
                client: cognitoClient
            };
            credentials = (0, _credentialProviderCognitoIdentity.fromCognitoIdentityPool)(cognitoIdentityParams)();
        }
        return this._loadCredentials(credentials, "federated", true, params);
    };
    CredentialsClass.prototype._setCredentialsFromSession = function(session) {
        var _this = this;
        logger.debug("set credentials from session");
        var idToken = session.getIdToken().getJwtToken();
        var _a = this._config, region = _a.region, userPoolId = _a.userPoolId, identityPoolId = _a.identityPoolId;
        if (!identityPoolId) {
            logger.debug("No Cognito Federated Identity pool provided");
            return Promise.reject("No Cognito Federated Identity pool provided");
        }
        if (!region) {
            logger.debug("region is not configured for getting the credentials");
            return Promise.reject("region is not configured for getting the credentials");
        }
        var key = "cognito-idp." + region + ".amazonaws.com/" + userPoolId;
        var logins = {};
        logins[key] = idToken;
        var cognitoClient = new (0, _clientCognitoIdentity.CognitoIdentityClient)({
            region: region,
            customUserAgent: (0, _platform.getAmplifyUserAgent)()
        });
        /*
            Retreiving identityId with GetIdCommand to mimic the behavior in the following code in aws-sdk-v3:
            https://git.io/JeDxU

            Note: Retreive identityId from CredentialsProvider once aws-sdk-js v3 supports this.
        */ var credentialsProvider = function() {
            return __awaiter(_this, void 0, void 0, function() {
                var guestIdentityId, generatedOrRetrievedIdentityId, IdentityId, _a, _b, AccessKeyId, Expiration, SecretKey, SessionToken, primaryIdentityId;
                return __generator(this, function(_c) {
                    switch(_c.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                this._getGuestIdentityId()
                            ];
                        case 1:
                            guestIdentityId = _c.sent();
                            if (!!guestIdentityId) return [
                                3 /*break*/ ,
                                3
                            ];
                            return [
                                4 /*yield*/ ,
                                cognitoClient.send(new (0, _clientCognitoIdentity.GetIdCommand)({
                                    IdentityPoolId: identityPoolId,
                                    Logins: logins
                                }))
                            ];
                        case 2:
                            IdentityId = _c.sent().IdentityId;
                            generatedOrRetrievedIdentityId = IdentityId;
                            _c.label = 3;
                        case 3:
                            return [
                                4 /*yield*/ ,
                                cognitoClient.send(new (0, _clientCognitoIdentity.GetCredentialsForIdentityCommand)({
                                    IdentityId: guestIdentityId || generatedOrRetrievedIdentityId,
                                    Logins: logins
                                }))
                            ];
                        case 4:
                            _a = _c.sent(), _b = _a.Credentials, AccessKeyId = _b.AccessKeyId, Expiration = _b.Expiration, SecretKey = _b.SecretKey, SessionToken = _b.SessionToken, primaryIdentityId = _a.IdentityId;
                            this._identityId = primaryIdentityId;
                            if (!guestIdentityId) return [
                                3 /*break*/ ,
                                6
                            ];
                            // if guestIdentity is found and used by GetCredentialsForIdentity
                            // it will be linked to the logins provided, and disqualified as an unauth identity
                            logger.debug("The guest identity " + guestIdentityId + " has been successfully linked to the logins");
                            if (guestIdentityId === primaryIdentityId) logger.debug("The guest identity " + guestIdentityId + " has become the primary identity");
                            // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest
                            return [
                                4 /*yield*/ ,
                                this._removeGuestIdentityId()
                            ];
                        case 5:
                            // remove it from local storage to avoid being used as a guest Identity by _setCredentialsForGuest
                            _c.sent();
                            _c.label = 6;
                        case 6:
                            // https://github.com/aws/aws-sdk-js-v3/blob/main/packages/credential-provider-cognito-identity/src/fromCognitoIdentity.ts#L40
                            return [
                                2 /*return*/ ,
                                {
                                    accessKeyId: AccessKeyId,
                                    secretAccessKey: SecretKey,
                                    sessionToken: SessionToken,
                                    expiration: Expiration,
                                    identityId: primaryIdentityId
                                }
                            ];
                    }
                });
            });
        };
        var credentials = credentialsProvider().catch(function(err) {
            return __awaiter(_this, void 0, void 0, function() {
                return __generator(this, function(_a) {
                    throw err;
                });
            });
        });
        return this._loadCredentials(credentials, "userPool", true, null);
    };
    CredentialsClass.prototype._loadCredentials = function(credentials, source, authenticated, info) {
        var _this = this;
        var that = this;
        return new Promise(function(res, rej) {
            credentials.then(function(credentials) {
                return __awaiter(_this, void 0, void 0, function() {
                    var user, provider, token, expires_at, identity_id;
                    return __generator(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                logger.debug("Load credentials successfully", credentials);
                                if (this._identityId && !credentials.identityId) credentials["identityId"] = this._identityId;
                                that._credentials = credentials;
                                that._credentials.authenticated = authenticated;
                                that._credentials_source = source;
                                that._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;
                                if (source === "federated") {
                                    user = Object.assign({
                                        id: this._credentials.identityId
                                    }, info.user);
                                    provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;
                                    try {
                                        this._storage.setItem("aws-amplify-federatedInfo", JSON.stringify({
                                            provider: provider,
                                            token: token,
                                            user: user,
                                            expires_at: expires_at,
                                            identity_id: identity_id
                                        }));
                                    } catch (e) {
                                        logger.debug("Failed to put federated info into auth storage", e);
                                    }
                                }
                                if (!(source === "guest")) return [
                                    3 /*break*/ ,
                                    2
                                ];
                                return [
                                    4 /*yield*/ ,
                                    this._setGuestIdentityId(credentials.identityId)
                                ];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2:
                                res(that._credentials);
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            }).catch(function(err) {
                if (err) {
                    logger.debug("Failed to load credentials", credentials);
                    logger.debug("Error loading credentials", err);
                    rej(err);
                    return;
                }
            });
        });
    };
    CredentialsClass.prototype.set = function(params, source) {
        if (source === "session") return this._setCredentialsFromSession(params);
        else if (source === "federation") return this._setCredentialsFromFederation(params);
        else if (source === "guest") return this._setCredentialsForGuest();
        else {
            logger.debug("no source specified for setting credentials");
            return Promise.reject("invalid source");
        }
    };
    CredentialsClass.prototype.clear = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                this._credentials = null;
                this._credentials_source = null;
                logger.debug("removing aws-amplify-federatedInfo from storage");
                this._storage.removeItem("aws-amplify-federatedInfo");
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    /* operations on local stored guest identity */ CredentialsClass.prototype._getGuestIdentityId = function() {
        return __awaiter(this, void 0, void 0, function() {
            var identityPoolId, e_1;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        identityPoolId = this._config.identityPoolId;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 2:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            this._storage.getItem(this._getCognitoIdentityIdStorageKey(identityPoolId))
                        ];
                    case 3:
                        e_1 = _a.sent();
                        logger.debug("Failed to get the cached guest identityId", e_1);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    CredentialsClass.prototype._setGuestIdentityId = function(identityId) {
        return __awaiter(this, void 0, void 0, function() {
            var identityPoolId, e_2;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        identityPoolId = this._config.identityPoolId;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 2:
                        _a.sent();
                        this._storage.setItem(this._getCognitoIdentityIdStorageKey(identityPoolId), identityId);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_2 = _a.sent();
                        logger.debug("Failed to cache guest identityId", e_2);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    CredentialsClass.prototype._removeGuestIdentityId = function() {
        return __awaiter(this, void 0, void 0, function() {
            var identityPoolId;
            return __generator(this, function(_a) {
                identityPoolId = this._config.identityPoolId;
                logger.debug("removing " + this._getCognitoIdentityIdStorageKey(identityPoolId) + " from storage");
                this._storage.removeItem(this._getCognitoIdentityIdStorageKey(identityPoolId));
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    /**
     * Compact version of credentials
     * @param {Object} credentials
     * @return {Object} - Credentials
     */ CredentialsClass.prototype.shear = function(credentials) {
        return {
            accessKeyId: credentials.accessKeyId,
            sessionToken: credentials.sessionToken,
            secretAccessKey: credentials.secretAccessKey,
            identityId: credentials.identityId,
            authenticated: credentials.authenticated
        };
    };
    return CredentialsClass;
}();
var Credentials = new CredentialsClass(null);
(0, _amplify.Amplify).register(Credentials);
/**
 * @deprecated use named import
 */ exports.default = Credentials;

},{"./Logger":"aOIPE","./StorageHelper":"3R0f0","./JS":"fFubg","./OAuthHelper":"zKgKu","./Util":"hLH9s","./Platform":"2ZOrj","./Amplify":"4gP56","@aws-sdk/credential-provider-cognito-identity":"i6AvY","@aws-sdk/client-cognito-identity":"6STYA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3R0f0":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MemoryStorage", ()=>MemoryStorage);
parcelHelpers.export(exports, "StorageHelper", ()=>StorageHelper);
var dataMemory = {};
/** @class */ var MemoryStorage = /** @class */ function() {
    function MemoryStorage() {}
    /**
     * This is used to set a specific item in storage
     * @param {string} key - the key for the item
     * @param {object} value - the value
     * @returns {string} value that was set
     */ MemoryStorage.setItem = function(key, value) {
        dataMemory[key] = value;
        return dataMemory[key];
    };
    /**
     * This is used to get a specific key from storage
     * @param {string} key - the key for the item
     * This is used to clear the storage
     * @returns {string} the data item
     */ MemoryStorage.getItem = function(key) {
        return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;
    };
    /**
     * This is used to remove an item from storage
     * @param {string} key - the key being set
     * @returns {string} value - value that was deleted
     */ MemoryStorage.removeItem = function(key) {
        return delete dataMemory[key];
    };
    /**
     * This is used to clear the storage
     * @returns {string} nothing
     */ MemoryStorage.clear = function() {
        dataMemory = {};
        return dataMemory;
    };
    return MemoryStorage;
}();
var StorageHelper = /** @class */ function() {
    /**
     * This is used to get a storage object
     * @returns {object} the storage
     */ function StorageHelper() {
        try {
            this.storageWindow = window.localStorage;
            this.storageWindow.setItem("aws.amplify.test-ls", 1);
            this.storageWindow.removeItem("aws.amplify.test-ls");
        } catch (exception) {
            this.storageWindow = MemoryStorage;
        }
    }
    /**
     * This is used to return the storage
     * @returns {object} the storage
     */ StorageHelper.prototype.getStorage = function() {
        return this.storageWindow;
    };
    return StorageHelper;
}();
/**
 * @deprecated use named import
 */ exports.default = StorageHelper;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i6AvY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cognitoProviderParameters = require("./CognitoProviderParameters");
parcelHelpers.exportAll(_cognitoProviderParameters, exports);
var _fromCognitoIdentity = require("./fromCognitoIdentity");
parcelHelpers.exportAll(_fromCognitoIdentity, exports);
var _fromCognitoIdentityPool = require("./fromCognitoIdentityPool");
parcelHelpers.exportAll(_fromCognitoIdentityPool, exports);
var _logins = require("./Logins");
parcelHelpers.exportAll(_logins, exports);
var _storage = require("./Storage");
parcelHelpers.exportAll(_storage, exports);

},{"./CognitoProviderParameters":false,"./fromCognitoIdentity":"d8ZgH","./fromCognitoIdentityPool":"4UQMg","./Logins":false,"./Storage":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d8ZgH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Retrieves temporary AWS credentials using Amazon Cognito's
 * `GetCredentialsForIdentity` operation.
 *
 * Results from this function call are not cached internally.
 */ parcelHelpers.export(exports, "fromCognitoIdentity", ()=>fromCognitoIdentity);
var _tslib = require("tslib");
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _propertyProvider = require("@aws-sdk/property-provider");
var _resolveLogins = require("./resolveLogins");
function fromCognitoIdentity(parameters) {
    var _this = this;
    return function() {
        return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
            var _a, _b, _c, AccessKeyId, Expiration, _d, SecretKey, SessionToken, _e, _f, _g, _h;
            var _j;
            return (0, _tslib.__generator)(this, function(_k) {
                switch(_k.label){
                    case 0:
                        _f = (_e = parameters.client).send;
                        _g = (0, _clientCognitoIdentity.GetCredentialsForIdentityCommand).bind;
                        _j = {
                            CustomRoleArn: parameters.customRoleArn,
                            IdentityId: parameters.identityId
                        };
                        if (!parameters.logins) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _resolveLogins.resolveLogins)(parameters.logins)
                        ];
                    case 1:
                        _h = _k.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        _h = undefined;
                        _k.label = 3;
                    case 3:
                        return [
                            4 /*yield*/ ,
                            _f.apply(_e, [
                                new (_g.apply((0, _clientCognitoIdentity.GetCredentialsForIdentityCommand), [
                                    void 0,
                                    (_j.Logins = _h, _j)
                                ]))()
                            ])
                        ];
                    case 4:
                        _a = _k.sent().Credentials, _b = _a === void 0 ? throwOnMissingCredentials() : _a, _c = _b.AccessKeyId, AccessKeyId = _c === void 0 ? throwOnMissingAccessKeyId() : _c, Expiration = _b.Expiration, _d = _b.SecretKey, SecretKey = _d === void 0 ? throwOnMissingSecretKey() : _d, SessionToken = _b.SessionToken;
                        return [
                            2 /*return*/ ,
                            {
                                identityId: parameters.identityId,
                                accessKeyId: AccessKeyId,
                                secretAccessKey: SecretKey,
                                sessionToken: SessionToken,
                                expiration: Expiration
                            }
                        ];
                }
            });
        });
    };
}
function throwOnMissingAccessKeyId() {
    throw new (0, _propertyProvider.ProviderError)("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
    throw new (0, _propertyProvider.ProviderError)("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
    throw new (0, _propertyProvider.ProviderError)("Response from Amazon Cognito contained no secret key");
}

},{"tslib":"fvjju","@aws-sdk/client-cognito-identity":"6STYA","@aws-sdk/property-provider":"hAZuM","./resolveLogins":"lCi3C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fvjju":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6STYA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cognitoIdentityClient = require("./CognitoIdentityClient");
parcelHelpers.exportAll(_cognitoIdentityClient, exports);
var _cognitoIdentity = require("./CognitoIdentity");
parcelHelpers.exportAll(_cognitoIdentity, exports);
var _createIdentityPoolCommand = require("./commands/CreateIdentityPoolCommand");
parcelHelpers.exportAll(_createIdentityPoolCommand, exports);
var _deleteIdentitiesCommand = require("./commands/DeleteIdentitiesCommand");
parcelHelpers.exportAll(_deleteIdentitiesCommand, exports);
var _deleteIdentityPoolCommand = require("./commands/DeleteIdentityPoolCommand");
parcelHelpers.exportAll(_deleteIdentityPoolCommand, exports);
var _describeIdentityCommand = require("./commands/DescribeIdentityCommand");
parcelHelpers.exportAll(_describeIdentityCommand, exports);
var _describeIdentityPoolCommand = require("./commands/DescribeIdentityPoolCommand");
parcelHelpers.exportAll(_describeIdentityPoolCommand, exports);
var _getCredentialsForIdentityCommand = require("./commands/GetCredentialsForIdentityCommand");
parcelHelpers.exportAll(_getCredentialsForIdentityCommand, exports);
var _getIdCommand = require("./commands/GetIdCommand");
parcelHelpers.exportAll(_getIdCommand, exports);
var _getIdentityPoolRolesCommand = require("./commands/GetIdentityPoolRolesCommand");
parcelHelpers.exportAll(_getIdentityPoolRolesCommand, exports);
var _getOpenIdTokenCommand = require("./commands/GetOpenIdTokenCommand");
parcelHelpers.exportAll(_getOpenIdTokenCommand, exports);
var _getOpenIdTokenForDeveloperIdentityCommand = require("./commands/GetOpenIdTokenForDeveloperIdentityCommand");
parcelHelpers.exportAll(_getOpenIdTokenForDeveloperIdentityCommand, exports);
var _listIdentitiesCommand = require("./commands/ListIdentitiesCommand");
parcelHelpers.exportAll(_listIdentitiesCommand, exports);
var _listIdentityPoolsCommand = require("./commands/ListIdentityPoolsCommand");
parcelHelpers.exportAll(_listIdentityPoolsCommand, exports);
var _listIdentityPoolsPaginator = require("./pagination/ListIdentityPoolsPaginator");
parcelHelpers.exportAll(_listIdentityPoolsPaginator, exports);
var _listTagsForResourceCommand = require("./commands/ListTagsForResourceCommand");
parcelHelpers.exportAll(_listTagsForResourceCommand, exports);
var _lookupDeveloperIdentityCommand = require("./commands/LookupDeveloperIdentityCommand");
parcelHelpers.exportAll(_lookupDeveloperIdentityCommand, exports);
var _mergeDeveloperIdentitiesCommand = require("./commands/MergeDeveloperIdentitiesCommand");
parcelHelpers.exportAll(_mergeDeveloperIdentitiesCommand, exports);
var _setIdentityPoolRolesCommand = require("./commands/SetIdentityPoolRolesCommand");
parcelHelpers.exportAll(_setIdentityPoolRolesCommand, exports);
var _tagResourceCommand = require("./commands/TagResourceCommand");
parcelHelpers.exportAll(_tagResourceCommand, exports);
var _unlinkDeveloperIdentityCommand = require("./commands/UnlinkDeveloperIdentityCommand");
parcelHelpers.exportAll(_unlinkDeveloperIdentityCommand, exports);
var _unlinkIdentityCommand = require("./commands/UnlinkIdentityCommand");
parcelHelpers.exportAll(_unlinkIdentityCommand, exports);
var _untagResourceCommand = require("./commands/UntagResourceCommand");
parcelHelpers.exportAll(_untagResourceCommand, exports);
var _updateIdentityPoolCommand = require("./commands/UpdateIdentityPoolCommand");
parcelHelpers.exportAll(_updateIdentityPoolCommand, exports);
var _interfaces = require("./pagination/Interfaces");
parcelHelpers.exportAll(_interfaces, exports);
var _index = require("./models/index");
parcelHelpers.exportAll(_index, exports);

},{"./CognitoIdentityClient":"1Nf7t","./CognitoIdentity":false,"./commands/CreateIdentityPoolCommand":false,"./commands/DeleteIdentitiesCommand":false,"./commands/DeleteIdentityPoolCommand":false,"./commands/DescribeIdentityCommand":false,"./commands/DescribeIdentityPoolCommand":false,"./commands/GetCredentialsForIdentityCommand":"hQK33","./commands/GetIdCommand":"4yuUU","./commands/GetIdentityPoolRolesCommand":false,"./commands/GetOpenIdTokenCommand":false,"./commands/GetOpenIdTokenForDeveloperIdentityCommand":false,"./commands/ListIdentitiesCommand":false,"./commands/ListIdentityPoolsCommand":false,"./pagination/ListIdentityPoolsPaginator":false,"./commands/ListTagsForResourceCommand":false,"./commands/LookupDeveloperIdentityCommand":false,"./commands/MergeDeveloperIdentitiesCommand":false,"./commands/SetIdentityPoolRolesCommand":false,"./commands/TagResourceCommand":false,"./commands/UnlinkDeveloperIdentityCommand":false,"./commands/UnlinkIdentityCommand":false,"./commands/UntagResourceCommand":false,"./commands/UpdateIdentityPoolCommand":false,"./pagination/Interfaces":false,"./models/index":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Nf7t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoIdentityClient", ()=>CognitoIdentityClient);
var _tslib = require("tslib");
var _runtimeConfig = require("./runtimeConfig");
var _configResolver = require("@aws-sdk/config-resolver");
var _middlewareContentLength = require("@aws-sdk/middleware-content-length");
var _middlewareHostHeader = require("@aws-sdk/middleware-host-header");
var _middlewareLogger = require("@aws-sdk/middleware-logger");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _middlewareUserAgent = require("@aws-sdk/middleware-user-agent");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <fullname>Amazon Cognito Federated Identities</fullname>
 *          <p>Amazon Cognito Federated Identities is a web service that delivers scoped temporary
 *          credentials to mobile devices and other untrusted environments. It uniquely identifies a
 *          device and supplies the user with a consistent identity over the lifetime of an
 *          application.</p>
 *          <p>Using Amazon Cognito Federated Identities, you can enable authentication with one or
 *          more third-party identity providers (Facebook, Google, or Login with Amazon) or an Amazon
 *          Cognito user pool, and you can also choose to support unauthenticated access from your app.
 *          Cognito delivers a unique identifier for each user and acts as an OpenID token provider
 *          trusted by AWS Security Token Service (STS) to access temporary, limited-privilege AWS
 *          credentials.</p>
 *          <p>For a description of the authentication flow from the Amazon Cognito Developer Guide
 *          see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/authentication-flow.html">Authentication Flow</a>.</p>
 *          <p>For more information see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-identity.html">Amazon Cognito Federated Identities</a>.</p>
 */ var CognitoIdentityClient = /** @class */ function(_super) {
    (0, _tslib.__extends)(CognitoIdentityClient, _super);
    function CognitoIdentityClient(configuration) {
        var _this = this;
        var _config_0 = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _runtimeConfig.ClientDefaultValues)), configuration);
        var _config_1 = (0, _configResolver.resolveRegionConfig)(_config_0);
        var _config_2 = (0, _configResolver.resolveEndpointsConfig)(_config_1);
        var _config_3 = (0, _middlewareSigning.resolveAwsAuthConfig)(_config_2);
        var _config_4 = (0, _middlewareRetry.resolveRetryConfig)(_config_3);
        var _config_5 = (0, _middlewareHostHeader.resolveHostHeaderConfig)(_config_4);
        var _config_6 = (0, _middlewareUserAgent.resolveUserAgentConfig)(_config_5);
        _this = _super.call(this, _config_6) || this;
        _this.config = _config_6;
        _this.middlewareStack.use((0, _middlewareRetry.getRetryPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareContentLength.getContentLengthPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareHostHeader.getHostHeaderPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareLogger.getLoggerPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareUserAgent.getUserAgentPlugin)(_this.config));
        return _this;
    }
    CognitoIdentityClient.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
    };
    return CognitoIdentityClient;
}((0, _smithyClient.Client));

},{"tslib":"lRdW5","./runtimeConfig":"eLuT7","@aws-sdk/config-resolver":"cd0W3","@aws-sdk/middleware-content-length":"kUr8i","@aws-sdk/middleware-host-header":"fDojh","@aws-sdk/middleware-logger":"b6LDm","@aws-sdk/middleware-retry":"hgahj","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/middleware-user-agent":"7Khhc","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRdW5":[function(require,module,exports) {
/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise, SuppressedError, Symbol, Iterator */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__esDecorate", ()=>__esDecorate);
parcelHelpers.export(exports, "__runInitializers", ()=>__runInitializers);
parcelHelpers.export(exports, "__propKey", ()=>__propKey);
parcelHelpers.export(exports, "__setFunctionName", ()=>__setFunctionName);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
/** @deprecated */ parcelHelpers.export(exports, "__spread", ()=>__spread);
/** @deprecated */ parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__spreadArray", ()=>__spreadArray);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
parcelHelpers.export(exports, "__classPrivateFieldIn", ()=>__classPrivateFieldIn);
parcelHelpers.export(exports, "__addDisposableResource", ()=>__addDisposableResource);
parcelHelpers.export(exports, "__disposeResources", ()=>__disposeResources);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
        if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
        return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for(var i = decorators.length - 1; i >= 0; i--){
        var context = {};
        for(var p in contextIn)context[p] = p === "access" ? {} : contextIn[p];
        for(var p in contextIn.access)context.access[p] = contextIn.access[p];
        context.addInitializer = function(f) {
            if (done) throw new TypeError("Cannot add initializers after decoration has completed");
            extraInitializers.push(accept(f || null));
        };
        var result = (0, decorators[i])(kind === "accessor" ? {
            get: descriptor.get,
            set: descriptor.set
        } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        } else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
}
function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for(var i = 0; i < initializers.length; i++)value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    return useValue ? value : void 0;
}
function __propKey(x) {
    return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", {
        configurable: true,
        value: prefix ? "".concat(prefix, " ", name) : name
    });
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(g && (g = 0, op[0] && (_ = 0)), _)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
var __createBinding = Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) desc = {
        enumerable: true,
        get: function() {
            return m[k];
        }
    };
    Object.defineProperty(o, k2, desc);
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
};
function __exportStar(m, o) {
    for(var p in m)if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) {
        for(var i = 0, l = from.length, ar; i < l; i++)if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = Object.create((typeof AsyncIterator === "function" ? AsyncIterator : Object).prototype), verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function awaitReturn(f) {
        return function(v) {
            return Promise.resolve(v).then(f, reject);
        };
    }
    function verb(n, f) {
        if (g[n]) {
            i[n] = function(v) {
                return new Promise(function(a, b) {
                    q.push([
                        n,
                        v,
                        a,
                        b
                    ]) > 1 || resume(n, v);
                });
            };
            if (f) i[n] = f(i[n]);
        }
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: false
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
var __setModuleDefault = Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
};
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    }
    __setModuleDefault(result, mod);
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
    if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
    return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
    if (value !== null && value !== void 0) {
        if (typeof value !== "object" && typeof value !== "function") throw new TypeError("Object expected.");
        var dispose, inner;
        if (async) {
            if (!Symbol.asyncDispose) throw new TypeError("Symbol.asyncDispose is not defined.");
            dispose = value[Symbol.asyncDispose];
        }
        if (dispose === void 0) {
            if (!Symbol.dispose) throw new TypeError("Symbol.dispose is not defined.");
            dispose = value[Symbol.dispose];
            if (async) inner = dispose;
        }
        if (typeof dispose !== "function") throw new TypeError("Object not disposable.");
        if (inner) dispose = function() {
            try {
                inner.call(this);
            } catch (e) {
                return Promise.reject(e);
            }
        };
        env.stack.push({
            value: value,
            dispose: dispose,
            async: async
        });
    } else if (async) env.stack.push({
        async: true
    });
    return value;
}
var _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};
function __disposeResources(env) {
    function fail(e) {
        env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
        env.hasError = true;
    }
    var r, s = 0;
    function next() {
        while(r = env.stack.pop())try {
            if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);
            if (r.dispose) {
                var result = r.dispose.call(r.value);
                if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) {
                    fail(e);
                    return next();
                });
            } else s |= 1;
        } catch (e) {
            fail(e);
        }
        if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();
        if (env.hasError) throw env.error;
    }
    return next();
}
exports.default = {
    __extends: __extends,
    __assign: __assign,
    __rest: __rest,
    __decorate: __decorate,
    __param: __param,
    __metadata: __metadata,
    __awaiter: __awaiter,
    __generator: __generator,
    __createBinding: __createBinding,
    __exportStar: __exportStar,
    __values: __values,
    __read: __read,
    __spread: __spread,
    __spreadArrays: __spreadArrays,
    __spreadArray: __spreadArray,
    __await: __await,
    __asyncGenerator: __asyncGenerator,
    __asyncDelegator: __asyncDelegator,
    __asyncValues: __asyncValues,
    __makeTemplateObject: __makeTemplateObject,
    __importStar: __importStar,
    __importDefault: __importDefault,
    __classPrivateFieldGet: __classPrivateFieldGet,
    __classPrivateFieldSet: __classPrivateFieldSet,
    __classPrivateFieldIn: __classPrivateFieldIn,
    __addDisposableResource: __addDisposableResource,
    __disposeResources: __disposeResources
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eLuT7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientDefaultValues", ()=>ClientDefaultValues);
var _tslib = require("tslib");
var _packageJson = require("./package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
var _sha256Browser = require("@aws-crypto/sha256-browser");
var _fetchHttpHandler = require("@aws-sdk/fetch-http-handler");
var _invalidDependency = require("@aws-sdk/invalid-dependency");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _utilBase64Browser = require("@aws-sdk/util-base64-browser");
var _utilBodyLengthBrowser = require("@aws-sdk/util-body-length-browser");
var _utilUserAgentBrowser = require("@aws-sdk/util-user-agent-browser");
var _utilUtf8Browser = require("@aws-sdk/util-utf8-browser");
var _runtimeConfigShared = require("./runtimeConfig.shared");
var ClientDefaultValues = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _runtimeConfigShared.ClientSharedValues)), {
    runtime: "browser",
    base64Decoder: (0, _utilBase64Browser.fromBase64),
    base64Encoder: (0, _utilBase64Browser.toBase64),
    bodyLengthChecker: (0, _utilBodyLengthBrowser.calculateBodyLength),
    credentialDefaultProvider: function(_) {
        return function() {
            return Promise.reject(new Error("Credential is missing"));
        };
    },
    defaultUserAgentProvider: (0, _utilUserAgentBrowser.defaultUserAgent)({
        serviceId: (0, _runtimeConfigShared.ClientSharedValues).serviceId,
        clientVersion: (0, _packageJsonDefault.default).version
    }),
    maxAttempts: (0, _middlewareRetry.DEFAULT_MAX_ATTEMPTS),
    region: (0, _invalidDependency.invalidProvider)("Region is missing"),
    requestHandler: new (0, _fetchHttpHandler.FetchHttpHandler)(),
    sha256: (0, _sha256Browser.Sha256),
    streamCollector: (0, _fetchHttpHandler.streamCollector),
    utf8Decoder: (0, _utilUtf8Browser.fromUtf8),
    utf8Encoder: (0, _utilUtf8Browser.toUtf8)
});

},{"tslib":"lRdW5","./package.json":"dglBI","@aws-crypto/sha256-browser":"h7M77","@aws-sdk/fetch-http-handler":"atrsn","@aws-sdk/invalid-dependency":"1ry3q","@aws-sdk/middleware-retry":"hgahj","@aws-sdk/util-base64-browser":"aNXKr","@aws-sdk/util-body-length-browser":"kyGUn","@aws-sdk/util-user-agent-browser":"26YQ4","@aws-sdk/util-utf8-browser":"aUJSS","./runtimeConfig.shared":"14XAX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dglBI":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@aws-sdk/client-cognito-identity","description":"AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native","version":"3.6.1","scripts":{"clean":"yarn remove-definitions && yarn remove-dist && yarn remove-documentation","build-documentation":"yarn remove-documentation && typedoc ./","prepublishOnly":"yarn build","pretest":"yarn build:cjs","remove-definitions":"rimraf ./types","remove-dist":"rimraf ./dist","remove-documentation":"rimraf ./docs","test:unit":"mocha **/cjs/**/*.spec.js","test:e2e":"mocha **/cjs/**/*.ispec.js && karma start karma.conf.js","test":"yarn test:unit","build:cjs":"tsc -p tsconfig.json","build:es":"tsc -p tsconfig.es.json","build":"yarn build:cjs && yarn build:es","postbuild":"downlevel-dts types types/ts3.4"},"main":"./dist/cjs/index.js","types":"./types/index.d.ts","module":"./dist/es/index.js","browser":{"./runtimeConfig":"./runtimeConfig.browser"},"react-native":{"./runtimeConfig":"./runtimeConfig.native"},"sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"^1.0.0","@aws-crypto/sha256-js":"^1.0.0","@aws-sdk/config-resolver":"3.6.1","@aws-sdk/credential-provider-node":"3.6.1","@aws-sdk/fetch-http-handler":"3.6.1","@aws-sdk/hash-node":"3.6.1","@aws-sdk/invalid-dependency":"3.6.1","@aws-sdk/middleware-content-length":"3.6.1","@aws-sdk/middleware-host-header":"3.6.1","@aws-sdk/middleware-logger":"3.6.1","@aws-sdk/middleware-retry":"3.6.1","@aws-sdk/middleware-serde":"3.6.1","@aws-sdk/middleware-signing":"3.6.1","@aws-sdk/middleware-stack":"3.6.1","@aws-sdk/middleware-user-agent":"3.6.1","@aws-sdk/node-config-provider":"3.6.1","@aws-sdk/node-http-handler":"3.6.1","@aws-sdk/protocol-http":"3.6.1","@aws-sdk/smithy-client":"3.6.1","@aws-sdk/types":"3.6.1","@aws-sdk/url-parser":"3.6.1","@aws-sdk/url-parser-native":"3.6.1","@aws-sdk/util-base64-browser":"3.6.1","@aws-sdk/util-base64-node":"3.6.1","@aws-sdk/util-body-length-browser":"3.6.1","@aws-sdk/util-body-length-node":"3.6.1","@aws-sdk/util-user-agent-browser":"3.6.1","@aws-sdk/util-user-agent-node":"3.6.1","@aws-sdk/util-utf8-browser":"3.6.1","@aws-sdk/util-utf8-node":"3.6.1","tslib":"^2.0.0"},"devDependencies":{"@aws-sdk/client-documentation-generator":"3.6.1","@aws-sdk/client-iam":"3.6.1","@types/chai":"^4.2.11","@types/mocha":"^8.0.4","@types/node":"^12.7.5","downlevel-dts":"0.7.0","jest":"^26.1.0","rimraf":"^3.0.0","typedoc":"^0.19.2","typescript":"~4.1.2"},"engines":{"node":">=10.0.0"},"typesVersions":{"<4.0":{"types/*":["types/ts3.4/*"]}},"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-cognito-identity"}}');

},{}],"h7M77":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
var tslib_1 = require("62ec12493516a334");
(0, tslib_1.__exportStar)(require("e099a4a7ffb231f5"), exports);
var ie11Sha256_1 = require("de15e02776b0e316");
Object.defineProperty(exports, "Ie11Sha256", {
    enumerable: true,
    get: function() {
        return ie11Sha256_1.Sha256;
    }
});
var webCryptoSha256_1 = require("8c4446d1ab49a729");
Object.defineProperty(exports, "WebCryptoSha256", {
    enumerable: true,
    get: function() {
        return webCryptoSha256_1.Sha256;
    }
});

},{"62ec12493516a334":"1ibki","e099a4a7ffb231f5":"5zD05","de15e02776b0e316":"4aNxR","8c4446d1ab49a729":"1toRi"}],"1ibki":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5zD05":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var ie11Sha256_1 = require("a7f146ad1f3cbfc1");
var webCryptoSha256_1 = require("725c2de9fef54f64");
var sha256_js_1 = require("acd71c1991c101d8");
var supports_web_crypto_1 = require("b78851f350642902");
var ie11_detection_1 = require("d3a26cad479a1048");
var util_locate_window_1 = require("cb5027cfddf0ae5a");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) this.hash = new webCryptoSha256_1.Sha256(secret);
        else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) this.hash = new ie11Sha256_1.Sha256(secret);
        else this.hash = new sha256_js_1.Sha256(secret);
    }
    Sha256.prototype.update = function(data, encoding) {
        this.hash.update(data, encoding);
    };
    Sha256.prototype.digest = function() {
        return this.hash.digest();
    };
    return Sha256;
}();
exports.Sha256 = Sha256;

},{"a7f146ad1f3cbfc1":"4aNxR","725c2de9fef54f64":"1toRi","acd71c1991c101d8":"7VpcP","b78851f350642902":"hF3NL","d3a26cad479a1048":"l9y1G","cb5027cfddf0ae5a":"7axS0"}],"4aNxR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var isEmptyData_1 = require("d8dc3989d6db06cb");
var constants_1 = require("d71db60dd455789b");
var util_utf8_browser_1 = require("b2a4d6e137ed6620");
var util_locate_window_1 = require("fb05deefe8f5231");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        if (secret) {
            this.operation = getKeyPromise(secret).then(function(keyData) {
                return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
            });
            this.operation.catch(function() {});
        } else this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
    }
    Sha256.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) return;
        this.operation = this.operation.then(function(operation) {
            operation.onerror = function() {
                _this.operation = Promise.reject(new Error("Error encountered updating hash"));
            };
            operation.process(toArrayBufferView(toHash));
            return operation;
        });
        this.operation.catch(function() {});
    };
    Sha256.prototype.digest = function() {
        return this.operation.then(function(operation) {
            return new Promise(function(resolve, reject) {
                operation.onerror = function() {
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.oncomplete = function() {
                    if (operation.result) resolve(new Uint8Array(operation.result));
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.finish();
            });
        });
    };
    return Sha256;
}();
exports.Sha256 = Sha256;
function getKeyPromise(secret) {
    return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [
            "sign"
        ]);
        keyOperation.oncomplete = function() {
            if (keyOperation.result) resolve(keyOperation.result);
            reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
            reject(new Error("ImportKey failed to import key."));
        };
    });
}
function toArrayBufferView(data) {
    if (typeof data === "string") return (0, util_utf8_browser_1.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}

},{"d8dc3989d6db06cb":"2P0qd","d71db60dd455789b":"YaYqM","b2a4d6e137ed6620":"aUJSS","fb05deefe8f5231":"7axS0"}],"2P0qd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;

},{}],"YaYqM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
exports.SHA_256_HASH = {
    name: "SHA-256"
};
exports.SHA_256_HMAC_ALGO = {
    name: "HMAC",
    hash: exports.SHA_256_HASH
};
exports.EMPTY_DATA_SHA_256 = new Uint8Array([
    227,
    176,
    196,
    66,
    152,
    252,
    28,
    20,
    154,
    251,
    244,
    200,
    153,
    111,
    185,
    36,
    39,
    174,
    65,
    228,
    100,
    155,
    147,
    76,
    164,
    149,
    153,
    27,
    120,
    82,
    184,
    85
]);

},{}],"aUJSS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
var _pureJs = require("./pureJs");
var _whatwgEncodingApi = require("./whatwgEncodingApi");
var fromUtf8 = function(input) {
    return typeof TextEncoder === "function" ? (0, _whatwgEncodingApi.fromUtf8)(input) : (0, _pureJs.fromUtf8)(input);
};
var toUtf8 = function(input) {
    return typeof TextDecoder === "function" ? (0, _whatwgEncodingApi.toUtf8)(input) : (0, _pureJs.toUtf8)(input);
};

},{"./pureJs":"7z43D","./whatwgEncodingApi":"d3Bf3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7z43D":[function(require,module,exports) {
/**
 * Converts a JS string from its native UCS-2/UTF-16 representation into a
 * Uint8Array of the bytes used to represent the equivalent characters in UTF-8.
 *
 * Cribbed from the `goog.crypt.stringToUtf8ByteArray` function in the Google
 * Closure library, though updated to use typed arrays.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
var fromUtf8 = function(input) {
    var bytes = [];
    for(var i = 0, len = input.length; i < len; i++){
        var value = input.charCodeAt(i);
        if (value < 0x80) bytes.push(value);
        else if (value < 0x800) bytes.push(value >> 6 | 192, value & 63 | 128);
        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            var surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
            bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
    }
    return Uint8Array.from(bytes);
};
var toUtf8 = function(input) {
    var decoded = "";
    for(var i = 0, len = input.length; i < len; i++){
        var byte = input[i];
        if (byte < 0x80) decoded += String.fromCharCode(byte);
        else if (192 <= byte && byte < 224) {
            var nextByte = input[++i];
            decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
            var surrogatePair = [
                byte,
                input[++i],
                input[++i],
                input[++i]
            ];
            var encoded = "%" + surrogatePair.map(function(byteValue) {
                return byteValue.toString(16);
            }).join("%");
            decoded += decodeURIComponent(encoded);
        } else decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
    }
    return decoded;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d3Bf3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
function fromUtf8(input) {
    return new TextEncoder().encode(input);
}
function toUtf8(input) {
    return new TextDecoder("utf-8").decode(input);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7axS0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "locateWindow", ()=>locateWindow);
const fallbackWindow = {};
function locateWindow() {
    if (typeof window !== "undefined") return window;
    else if (typeof self !== "undefined") return self;
    return fallbackWindow;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1toRi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var util_1 = require("fd29082ab97241f2");
var constants_1 = require("a96b793b8f5ad16");
var util_locate_window_1 = require("3b3155587be8430d");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
            this.key = new Promise(function(resolve, reject) {
                (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, [
                    "sign"
                ]).then(resolve, reject);
            });
            this.key.catch(function() {});
        }
    }
    Sha256.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) return;
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
    };
    Sha256.prototype.digest = function() {
        var _this = this;
        if (this.key) return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
                return new Uint8Array(data);
            });
        });
        if ((0, util_1.isEmptyData)(this.toHash)) return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        return Promise.resolve().then(function() {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
            return Promise.resolve(new Uint8Array(data));
        });
    };
    return Sha256;
}();
exports.Sha256 = Sha256;

},{"fd29082ab97241f2":"aDvRG","a96b793b8f5ad16":"YaYqM","3b3155587be8430d":"7axS0"}],"aDvRG":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
var convertToBuffer_1 = require("d546aa13e7a4f234");
Object.defineProperty(exports, "convertToBuffer", {
    enumerable: true,
    get: function() {
        return convertToBuffer_1.convertToBuffer;
    }
});
var isEmptyData_1 = require("688570fbe8307eb0");
Object.defineProperty(exports, "isEmptyData", {
    enumerable: true,
    get: function() {
        return isEmptyData_1.isEmptyData;
    }
});
var numToUint8_1 = require("9f8c2d94c37c0290");
Object.defineProperty(exports, "numToUint8", {
    enumerable: true,
    get: function() {
        return numToUint8_1.numToUint8;
    }
});
var uint32ArrayFrom_1 = require("65327eb5bf877089");
Object.defineProperty(exports, "uint32ArrayFrom", {
    enumerable: true,
    get: function() {
        return uint32ArrayFrom_1.uint32ArrayFrom;
    }
});

},{"d546aa13e7a4f234":"9wG1p","688570fbe8307eb0":"7lZKK","9f8c2d94c37c0290":"6vB9f","65327eb5bf877089":"gwA65"}],"9wG1p":[function(require,module,exports) {
var Buffer = require("c6f30219801e45d2").Buffer;
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.convertToBuffer = void 0;
var util_utf8_browser_1 = require("edd31833385d65db");
// Quick polyfill
var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
    return Buffer.from(input, "utf8");
} : util_utf8_browser_1.fromUtf8;
function convertToBuffer(data) {
    // Already a Uint8, do nothing
    if (data instanceof Uint8Array) return data;
    if (typeof data === "string") return fromUtf8(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}
exports.convertToBuffer = convertToBuffer;

},{"c6f30219801e45d2":"fCgem","edd31833385d65db":"aUJSS"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
const base64 = require("9c62938f1dccc73c");
const ieee754 = require("aceacb6a4531a9d2");
const customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" // eslint-disable-line dot-notation
 ? Symbol["for"]("nodejs.util.inspect.custom") // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
const K_MAX_LENGTH = 0x7fffffff;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        const arr = new Uint8Array(1);
        const proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, "parent", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, "offset", {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    const buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === "string") return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === "number") throw new TypeError('The "value" argument must not be of type number. Received type number');
    const valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    const b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") return Buffer.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    const length = byteLength(string, encoding) | 0;
    let buf = createBuffer(length);
    const actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    const length = array.length < 0 ? 0 : checked(array.length) | 0;
    const buf = createBuffer(length);
    for(let i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        const copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    let buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        const len = checked(obj.length) | 0;
        const buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== "number" || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === "Buffer" && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    let x = a.length;
    let y = b.length;
    for(let i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    let i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    const buffer = Buffer.allocUnsafe(length);
    let pos = 0;
    for(i = 0; i < list.length; ++i){
        let buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
                if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
                buf.copy(buffer, pos);
            } else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    const len = string.length;
    const mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    let loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    let loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    const i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    const len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(let i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    const len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(let i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    const len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(let i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    const length = this.length;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    let str = "";
    const max = exports.INSPECT_MAX_BYTES;
    str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
    if (this.length > max) str += " ... ";
    return "<Buffer " + str + ">";
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    let x = thisEnd - thisStart;
    let y = end - start;
    const len = Math.min(x, y);
    const thisCopy = this.slice(thisStart, thisEnd);
    const targetCopy = target.slice(start, end);
    for(let i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    let indexSize = 1;
    let arrLength = arr.length;
    let valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    let i;
    if (dir) {
        let foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            let found = true;
            for(let j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    const remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    const strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    let i;
    for(i = 0; i < length; ++i){
        const parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    const remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    let loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
        case "latin1":
        case "binary":
            return asciiWrite(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    const res = [];
    let i = start;
    while(i < end){
        const firstByte = buf[i];
        let codePoint = null;
        let bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    const len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    let res = "";
    let i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    let ret = "";
    end = Math.min(buf.length, end);
    for(let i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    const len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    let out = "";
    for(let i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    const bytes = buf.slice(start, end);
    let res = "";
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(let i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    const len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    const newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset + --byteLength];
    let mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const lo = first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
    const hi = this[++offset] + this[++offset] * 256 + this[++offset] * 2 ** 16 + last * 2 ** 24;
    return BigInt(lo) + (BigInt(hi) << BigInt(32));
});
Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last;
    return (BigInt(hi) << BigInt(32)) + BigInt(lo);
});
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let val = this[offset];
    let mul = 1;
    let i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    let i = byteLength;
    let mul = 1;
    let val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    const val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = this[offset + 4] + this[offset + 5] * 256 + this[offset + 6] * 2 ** 16 + (last << 24 // Overflow
    );
    return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 256 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
});
Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
    offset = offset >>> 0;
    validateNumber(offset, "offset");
    const first = this[offset];
    const last = this[offset + 7];
    if (first === undefined || last === undefined) boundsError(offset, this.length - 8);
    const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 + this[++offset] * 256 + this[++offset];
    return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 256 + last);
});
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let mul = 1;
    let i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        const maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    let i = byteLength - 1;
    let mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
function wrtBigUInt64LE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    lo = lo >> 8;
    buf[offset++] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    hi = hi >> 8;
    buf[offset++] = hi;
    return offset;
}
function wrtBigUInt64BE(buf, value, offset, min, max) {
    checkIntBI(value, min, max, buf, offset, 7);
    let lo = Number(value & BigInt(0xffffffff));
    buf[offset + 7] = lo;
    lo = lo >> 8;
    buf[offset + 6] = lo;
    lo = lo >> 8;
    buf[offset + 5] = lo;
    lo = lo >> 8;
    buf[offset + 4] = lo;
    let hi = Number(value >> BigInt(32) & BigInt(0xffffffff));
    buf[offset + 3] = hi;
    hi = hi >> 8;
    buf[offset + 2] = hi;
    hi = hi >> 8;
    buf[offset + 1] = hi;
    hi = hi >> 8;
    buf[offset] = hi;
    return offset + 8;
}
Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
});
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = 0;
    let mul = 1;
    let sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        const limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    let i = byteLength - 1;
    let mul = 1;
    let sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 0xff;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    this[offset] = value & 0xff;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 0xff;
    return offset + 4;
};
Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
    return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
    return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
});
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError("argument should be a Buffer");
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("Index out of range");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    const len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === "function") // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
        if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === "number") val = val & 255;
    else if (typeof val === "boolean") val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    let i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        const bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        const len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// CUSTOM ERRORS
// =============
// Simplified versions from Node, changed for Buffer-only usage
const errors = {};
function E(sym, getMessage, Base) {
    errors[sym] = class NodeError extends Base {
        constructor(){
            super();
            Object.defineProperty(this, "message", {
                value: getMessage.apply(this, arguments),
                writable: true,
                configurable: true
            });
            // Add the error code to the name to include it in the stack trace.
            this.name = `${this.name} [${sym}]`;
            // Access the stack to generate the error message including the error code
            // from the name.
            this.stack // eslint-disable-line no-unused-expressions
            ;
            // Reset the name to the actual name.
            delete this.name;
        }
        get code() {
            return sym;
        }
        set code(value) {
            Object.defineProperty(this, "code", {
                configurable: true,
                enumerable: true,
                value,
                writable: true
            });
        }
        toString() {
            return `${this.name} [${sym}]: ${this.message}`;
        }
    };
}
E("ERR_BUFFER_OUT_OF_BOUNDS", function(name) {
    if (name) return `${name} is outside of buffer bounds`;
    return "Attempt to access memory outside buffer bounds";
}, RangeError);
E("ERR_INVALID_ARG_TYPE", function(name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
}, TypeError);
E("ERR_OUT_OF_RANGE", function(str, range, input) {
    let msg = `The value of "${str}" is out of range.`;
    let received = input;
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) received = addNumericalSeparator(String(input));
    else if (typeof input === "bigint") {
        received = String(input);
        if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) received = addNumericalSeparator(received);
        received += "n";
    }
    msg += ` It must be ${range}. Received ${received}`;
    return msg;
}, RangeError);
function addNumericalSeparator(val) {
    let res = "";
    let i = val.length;
    const start = val[0] === "-" ? 1 : 0;
    for(; i >= start + 4; i -= 3)res = `_${val.slice(i - 3, i)}${res}`;
    return `${val.slice(0, i)}${res}`;
}
// CHECK FUNCTIONS
// ===============
function checkBounds(buf, offset, byteLength) {
    validateNumber(offset, "offset");
    if (buf[offset] === undefined || buf[offset + byteLength] === undefined) boundsError(offset, buf.length - (byteLength + 1));
}
function checkIntBI(value, min, max, buf, offset, byteLength) {
    if (value > max || value < min) {
        const n = typeof min === "bigint" ? "n" : "";
        let range;
        if (byteLength > 3) {
            if (min === 0 || min === BigInt(0)) range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`;
            else range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` + `${(byteLength + 1) * 8 - 1}${n}`;
        } else range = `>= ${min}${n} and <= ${max}${n}`;
        throw new errors.ERR_OUT_OF_RANGE("value", range, value);
    }
    checkBounds(buf, offset, byteLength);
}
function validateNumber(value, name) {
    if (typeof value !== "number") throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
}
function boundsError(value, length, type) {
    if (Math.floor(value) !== value) {
        validateNumber(value, type);
        throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
    }
    if (length < 0) throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
    throw new errors.ERR_OUT_OF_RANGE(type || "offset", `>= ${type ? 1 : 0} and <= ${length}`, value);
}
// HELPER FUNCTIONS
// ================
const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split("=")[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    let codePoint;
    const length = string.length;
    let leadSurrogate = null;
    const bytes = [];
    for(let i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    const byteArray = [];
    for(let i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    let c, hi, lo;
    const byteArray = [];
    for(let i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    let i;
    for(i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = function() {
    const alphabet = "0123456789abcdef";
    const table = new Array(256);
    for(let i = 0; i < 16; ++i){
        const i16 = i * 16;
        for(let j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();
// Return not function with Error if BigInt not supported
function defineBigIntMethod(fn) {
    return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
}
function BufferBigIntNotDefined() {
    throw new Error("BigInt not supported");
}

},{"9c62938f1dccc73c":"eIiSV","aceacb6a4531a9d2":"cO95r"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"7lZKK":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;

},{}],"6vB9f":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.numToUint8 = void 0;
function numToUint8(num) {
    return new Uint8Array([
        (num & 0xff000000) >> 24,
        (num & 0x00ff0000) >> 16,
        (num & 0x0000ff00) >> 8,
        num & 0x000000ff
    ]);
}
exports.numToUint8 = numToUint8;

},{}],"gwA65":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uint32ArrayFrom = void 0;
// IE 11 does not support Array.from, so we do it manually
function uint32ArrayFrom(a_lookUpTable) {
    if (!Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while(a_index < a_lookUpTable.length)return_array[a_index] = a_lookUpTable[a_index];
        return return_array;
    }
    return Uint32Array.from(a_lookUpTable);
}
exports.uint32ArrayFrom = uint32ArrayFrom;

},{}],"7VpcP":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("f8b63e01ddcec905");
(0, tslib_1.__exportStar)(require("b696aefb9cca9376"), exports);

},{"f8b63e01ddcec905":"1ibki","b696aefb9cca9376":"f9XlN"}],"f9XlN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var tslib_1 = require("2e3c11d0a9edaad0");
var constants_1 = require("505b1090a27dc609");
var RawSha256_1 = require("42f04eeb66c32a2c");
var util_1 = require("15490eb1b51dbc09");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
            this.outer = new RawSha256_1.RawSha256();
            var inner = bufferFromSecret(secret);
            var outer = new Uint8Array(constants_1.BLOCK_SIZE);
            outer.set(inner);
            for(var i = 0; i < constants_1.BLOCK_SIZE; i++){
                inner[i] ^= 0x36;
                outer[i] ^= 0x5c;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            // overwrite the copied key in memory
            for(var i = 0; i < inner.byteLength; i++)inner[i] = 0;
        }
    }
    Sha256.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) return;
        try {
            this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e) {
            this.error = e;
        }
    };
    /* This synchronous method keeps compatibility
     * with the v2 aws-sdk.
     */ Sha256.prototype.digestSync = function() {
        if (this.error) throw this.error;
        if (this.outer) {
            if (!this.outer.finished) this.outer.update(this.hash.digest());
            return this.outer.digest();
        }
        return this.hash.digest();
    };
    /* The underlying digest method here is synchronous.
     * To keep the same interface with the other hash functions
     * the default is to expose this as an async method.
     * However, it can sometimes be useful to have a sync method.
     */ Sha256.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
            return (0, tslib_1.__generator)(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.digestSync()
                ];
            });
        });
    };
    return Sha256;
}();
exports.Sha256 = Sha256;
function bufferFromSecret(secret) {
    var input = (0, util_1.convertToBuffer)(secret);
    if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
    }
    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
    buffer.set(input);
    return buffer;
}

},{"2e3c11d0a9edaad0":"1ibki","505b1090a27dc609":"icreI","42f04eeb66c32a2c":"2uYYd","15490eb1b51dbc09":"aDvRG"}],"icreI":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
/**
 * @internal
 */ exports.BLOCK_SIZE = 64;
/**
 * @internal
 */ exports.DIGEST_LENGTH = 32;
/**
 * @internal
 */ exports.KEY = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
/**
 * @internal
 */ exports.INIT = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
];
/**
 * @internal
 */ exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

},{}],"2uYYd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RawSha256 = void 0;
var constants_1 = require("cb8118c59f995141");
/**
 * @internal
 */ var RawSha256 = /** @class */ function() {
    function RawSha256() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        /**
         * @internal
         */ this.finished = false;
    }
    RawSha256.prototype.update = function(data) {
        if (this.finished) throw new Error("Attempted to update an already finished hash.");
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) throw new Error("Cannot hash more than 2^53 - 1 bits");
        while(byteLength > 0){
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === constants_1.BLOCK_SIZE) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    };
    RawSha256.prototype.digest = function() {
        if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 0x80);
            // Ensure the final block has enough room for the hashed length
            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
                for(var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++)bufferView.setUint8(i, 0);
                this.hashBuffer();
                this.bufferLength = 0;
            }
            for(var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++)bufferView.setUint8(i, 0);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
        }
        // The value in state is little-endian rather than big-endian, so flip
        // each word into a new Uint8Array
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for(var i = 0; i < 8; i++){
            out[i * 4] = this.state[i] >>> 24 & 0xff;
            out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;
            out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;
            out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;
        }
        return out;
    };
    RawSha256.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for(var i = 0; i < constants_1.BLOCK_SIZE; i++){
            if (i < 16) this.temp[i] = (buffer[i * 4] & 0xff) << 24 | (buffer[i * 4 + 1] & 0xff) << 16 | (buffer[i * 4 + 2] & 0xff) << 8 | buffer[i * 4 + 3] & 0xff;
            else {
                var u = this.temp[i - 2];
                var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
                u = this.temp[i - 15];
                var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
                this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
            }
            var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
            var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = state3 + t1 | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
    };
    return RawSha256;
}();
exports.RawSha256 = RawSha256;

},{"cb8118c59f995141":"icreI"}],"hF3NL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("77b6e702e4b0428a");
tslib_1.__exportStar(require("150bdc65f19f6fe8"), exports);

},{"77b6e702e4b0428a":"eEys3","150bdc65f19f6fe8":"4T8k1"}],"eEys3":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4T8k1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
var tslib_1 = require("d9d4edfd7f160da1");
var subtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function supportsWebCrypto(window) {
    if (supportsSecureRandom(window) && typeof window.crypto.subtle === "object") {
        var subtle = window.crypto.subtle;
        return supportsSubtleCrypto(subtle);
    }
    return false;
}
exports.supportsWebCrypto = supportsWebCrypto;
function supportsSecureRandom(window) {
    if (typeof window === "object" && typeof window.crypto === "object") {
        var getRandomValues = window.crypto.getRandomValues;
        return typeof getRandomValues === "function";
    }
    return false;
}
exports.supportsSecureRandom = supportsSecureRandom;
function supportsSubtleCrypto(subtle) {
    return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
    });
}
exports.supportsSubtleCrypto = supportsSubtleCrypto;
function supportsZeroByteGCM(subtle) {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    if (!supportsSubtleCrypto(subtle)) return [
                        2 /*return*/ ,
                        false
                    ];
                    _b.label = 1;
                case 1:
                    _b.trys.push([
                        1,
                        4,
                        ,
                        5
                    ]);
                    return [
                        4 /*yield*/ ,
                        subtle.generateKey({
                            name: "AES-GCM",
                            length: 128
                        }, false, [
                            "encrypt"
                        ])
                    ];
                case 2:
                    key = _b.sent();
                    return [
                        4 /*yield*/ ,
                        subtle.encrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(Array(12)),
                            additionalData: new Uint8Array(Array(16)),
                            tagLength: 128
                        }, key, new Uint8Array(0))
                    ];
                case 3:
                    zeroByteAuthTag = _b.sent();
                    return [
                        2 /*return*/ ,
                        zeroByteAuthTag.byteLength === 16
                    ];
                case 4:
                    _a = _b.sent();
                    return [
                        2 /*return*/ ,
                        false
                    ];
                case 5:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
exports.supportsZeroByteGCM = supportsZeroByteGCM;

},{"d9d4edfd7f160da1":"eEys3"}],"l9y1G":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("349d4ad1a84f9391");
tslib_1.__exportStar(require("21db5ac52614a3fc"), exports);
tslib_1.__exportStar(require("d258f06221e01140"), exports);
tslib_1.__exportStar(require("ffb697f6ff78bfa1"), exports);
tslib_1.__exportStar(require("84552afc7d264010"), exports);
tslib_1.__exportStar(require("14b671c7aac632d"), exports);

},{"349d4ad1a84f9391":"8UVaX","21db5ac52614a3fc":"7MrWv","d258f06221e01140":"grtd6","ffb697f6ff78bfa1":"lUZoT","84552afc7d264010":"690sd","14b671c7aac632d":"jSZab"}],"8UVaX":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7MrWv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"grtd6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"lUZoT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"690sd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"jSZab":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMsWindow = void 0;
var msSubtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function quacksLikeAnMsWindow(window) {
    return "MSInputMethodContext" in window && "msCrypto" in window;
}
/**
 * Determines if the provided window is (or is like) the window object one would
 * expect to encounter in Internet Explorer 11.
 */ function isMsWindow(window) {
    if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {
        var _a = window.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
            return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
            return typeof method === "function";
        });
    }
    return false;
}
exports.isMsWindow = isMsWindow;

},{}],"atrsn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fetchHttpHandler = require("./fetch-http-handler");
parcelHelpers.exportAll(_fetchHttpHandler, exports);
var _streamCollector = require("./stream-collector");
parcelHelpers.exportAll(_streamCollector, exports);

},{"./fetch-http-handler":"5MBuP","./stream-collector":"bWFTZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5MBuP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FetchHttpHandler", ()=>FetchHttpHandler);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _querystringBuilder = require("@aws-sdk/querystring-builder");
var _requestTimeout = require("./request-timeout");
var FetchHttpHandler = /** @class */ function() {
    function FetchHttpHandler(_a) {
        var _b = _a === void 0 ? {} : _a, requestTimeout = _b.requestTimeout;
        this.requestTimeout = requestTimeout;
    }
    FetchHttpHandler.prototype.destroy = function() {
    // Do nothing. TLS and HTTP/2 connection pooling is handled by the browser.
    };
    FetchHttpHandler.prototype.handle = function(request, _a) {
        var _b = _a === void 0 ? {} : _a, abortSignal = _b.abortSignal;
        var requestTimeoutInMs = this.requestTimeout;
        // if the request was already aborted, prevent doing extra work
        if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            var abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        var path = request.path;
        if (request.query) {
            var queryString = (0, _querystringBuilder.buildQueryString)(request.query);
            if (queryString) path += "?" + queryString;
        }
        var port = request.port, method = request.method;
        var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
        // Request constructor doesn't allow GET/HEAD request with body
        // ref: https://github.com/whatwg/fetch/issues/551
        var body = method === "GET" || method === "HEAD" ? undefined : request.body;
        var requestOptions = {
            body: body,
            headers: new Headers(request.headers),
            method: method
        };
        // some browsers support abort signal
        if (typeof AbortController !== "undefined") requestOptions["signal"] = abortSignal;
        var fetchRequest = new Request(url, requestOptions);
        var raceOfPromises = [
            fetch(fetchRequest).then(function(response) {
                var e_1, _a;
                var fetchHeaders = response.headers;
                var transformedHeaders = {};
                try {
                    for(var _b = (0, _tslib.__values)(fetchHeaders.entries()), _c = _b.next(); !_c.done; _c = _b.next()){
                        var pair = _c.value;
                        transformedHeaders[pair[0]] = pair[1];
                    }
                } catch (e_1_1) {
                    e_1 = {
                        error: e_1_1
                    };
                } finally{
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    } finally{
                        if (e_1) throw e_1.error;
                    }
                }
                var hasReadableStream = response.body !== undefined;
                // Return the response with buffered body
                if (!hasReadableStream) return response.blob().then(function(body) {
                    return {
                        response: new (0, _protocolHttp.HttpResponse)({
                            headers: transformedHeaders,
                            statusCode: response.status,
                            body: body
                        })
                    };
                });
                // Return the response with streaming body
                return {
                    response: new (0, _protocolHttp.HttpResponse)({
                        headers: transformedHeaders,
                        statusCode: response.status,
                        body: response.body
                    })
                };
            }),
            (0, _requestTimeout.requestTimeout)(requestTimeoutInMs)
        ];
        if (abortSignal) raceOfPromises.push(new Promise(function(resolve, reject) {
            abortSignal.onabort = function() {
                var abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
            };
        }));
        return Promise.race(raceOfPromises);
    };
    return FetchHttpHandler;
}();

},{"tslib":"g4wY9","@aws-sdk/protocol-http":"dbzKK","@aws-sdk/querystring-builder":"2elde","./request-timeout":"c2BD8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g4wY9":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dbzKK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _httpResponse = require("./httpResponse");
parcelHelpers.exportAll(_httpResponse, exports);
var _httpRequest = require("./httpRequest");
parcelHelpers.exportAll(_httpRequest, exports);
var _httpHandler = require("./httpHandler");
parcelHelpers.exportAll(_httpHandler, exports);
var _isValidHostname = require("./isValidHostname");
parcelHelpers.exportAll(_isValidHostname, exports);

},{"./httpResponse":"iqfRF","./httpRequest":"4iqyQ","./httpHandler":"ipBda","./isValidHostname":"8SFRw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iqfRF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpResponse", ()=>HttpResponse);
var HttpResponse = /** @class */ function() {
    function HttpResponse(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    HttpResponse.isInstance = function(response) {
        //determine if response is a valid HttpResponse
        if (!response) return false;
        var resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    };
    return HttpResponse;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4iqyQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpRequest", ()=>HttpRequest);
var _tslib = require("tslib");
var HttpRequest = /** @class */ function() {
    function HttpRequest(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.substr(-1) !== ":" ? options.protocol + ":" : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? "/" + options.path : options.path : "/";
    }
    HttpRequest.isInstance = function(request) {
        //determine if request is a valid httpRequest
        if (!request) return false;
        var req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    };
    HttpRequest.prototype.clone = function() {
        var cloned = new HttpRequest((0, _tslib.__assign)((0, _tslib.__assign)({}, this), {
            headers: (0, _tslib.__assign)({}, this.headers)
        }));
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
    };
    return HttpRequest;
}();
function cloneQuery(query) {
    return Object.keys(query).reduce(function(carry, paramName) {
        var _a;
        var param = query[paramName];
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? (0, _tslib.__spread)(param) : param, _a));
    }, {});
}

},{"tslib":"es4g3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"es4g3":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ipBda":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8SFRw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidHostname", ()=>isValidHostname);
function isValidHostname(hostname) {
    var hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2elde":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildQueryString", ()=>buildQueryString);
var _tslib = require("tslib");
var _utilUriEscape = require("@aws-sdk/util-uri-escape");
function buildQueryString(query) {
    var e_1, _a;
    var parts = [];
    try {
        for(var _b = (0, _tslib.__values)(Object.keys(query).sort()), _c = _b.next(); !_c.done; _c = _b.next()){
            var key = _c.value;
            var value = query[key];
            key = (0, _utilUriEscape.escapeUri)(key);
            if (Array.isArray(value)) for(var i = 0, iLen = value.length; i < iLen; i++)parts.push(key + "=" + (0, _utilUriEscape.escapeUri)(value[i]));
            else {
                var qsEntry = key;
                if (value || typeof value === "string") qsEntry += "=" + (0, _utilUriEscape.escapeUri)(value);
                parts.push(qsEntry);
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return parts.join("&");
}

},{"tslib":"lgCXl","@aws-sdk/util-uri-escape":"bdO3o","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgCXl":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bdO3o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _escapeUri = require("./escape-uri");
parcelHelpers.exportAll(_escapeUri, exports);
var _escapeUriPath = require("./escape-uri-path");
parcelHelpers.exportAll(_escapeUriPath, exports);

},{"./escape-uri":"7UvZi","./escape-uri-path":"fDIIJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7UvZi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeUri", ()=>escapeUri);
var escapeUri = function(uri) {
    // AWS percent-encodes some extra non-standard characters in a URI
    return encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
};
var hexEncode = function(c) {
    return "%" + c.charCodeAt(0).toString(16).toUpperCase();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDIIJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeUriPath", ()=>escapeUriPath);
var _escapeUri = require("./escape-uri");
var escapeUriPath = function(uri) {
    return uri.split("/").map((0, _escapeUri.escapeUri)).join("/");
};

},{"./escape-uri":"7UvZi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c2BD8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "requestTimeout", ()=>requestTimeout);
function requestTimeout(timeoutInMs) {
    if (timeoutInMs === void 0) timeoutInMs = 0;
    return new Promise(function(resolve, reject) {
        if (timeoutInMs) setTimeout(function() {
            var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
        }, timeoutInMs);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bWFTZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "streamCollector", ()=>streamCollector);
var _tslib = require("tslib");
var _utilBase64Browser = require("@aws-sdk/util-base64-browser");
var streamCollector = function(stream) {
    if (typeof Blob === "function" && stream instanceof Blob) return collectBlob(stream);
    return collectStream(stream);
};
function collectBlob(blob) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var base64, arrayBuffer;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        readToBase64(blob)
                    ];
                case 1:
                    base64 = _a.sent();
                    arrayBuffer = (0, _utilBase64Browser.fromBase64)(base64);
                    return [
                        2 /*return*/ ,
                        new Uint8Array(arrayBuffer)
                    ];
            }
        });
    });
}
function collectStream(stream) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var res, reader, isDone, _a, done, value, prior;
        return (0, _tslib.__generator)(this, function(_b) {
            switch(_b.label){
                case 0:
                    res = new Uint8Array(0);
                    reader = stream.getReader();
                    isDone = false;
                    _b.label = 1;
                case 1:
                    if (!!isDone) return [
                        3 /*break*/ ,
                        3
                    ];
                    return [
                        4 /*yield*/ ,
                        reader.read()
                    ];
                case 2:
                    _a = _b.sent(), done = _a.done, value = _a.value;
                    if (value) {
                        prior = res;
                        res = new Uint8Array(prior.length + value.length);
                        res.set(prior);
                        res.set(value, prior.length);
                    }
                    isDone = done;
                    return [
                        3 /*break*/ ,
                        1
                    ];
                case 3:
                    return [
                        2 /*return*/ ,
                        res
                    ];
            }
        });
    });
}
function readToBase64(blob) {
    return new Promise(function(resolve, reject) {
        var reader = new FileReader();
        reader.onloadend = function() {
            var _a;
            // reference: https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL
            // response from readAsDataURL is always prepended with "data:*/*;base64,"
            if (reader.readyState !== 2) return reject(new Error("Reader aborted too early"));
            var result = (_a = reader.result) !== null && _a !== void 0 ? _a : "";
            // Response can include only 'data:' for empty blob, return empty string in this case.
            // Otherwise, return the string after ','
            var commaIndex = result.indexOf(",");
            var dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
            resolve(result.substring(dataOffset));
        };
        reader.onabort = function() {
            return reject(new Error("Read aborted"));
        };
        reader.onerror = function() {
            return reject(reader.error);
        };
        // reader.readAsArrayBuffer is not always available
        reader.readAsDataURL(blob);
    });
}

},{"tslib":"g4wY9","@aws-sdk/util-base64-browser":"aNXKr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aNXKr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts a base-64 encoded string to a Uint8Array of bytes.
 *
 * @param input The base-64 encoded string
 *
 * @see https://tools.ietf.org/html/rfc4648#section-4
 */ parcelHelpers.export(exports, "fromBase64", ()=>fromBase64);
/**
 * Converts a Uint8Array of binary data to a base-64 encoded string.
 *
 * @param input The binary data to encode
 *
 * @see https://tools.ietf.org/html/rfc4648#section-4
 */ parcelHelpers.export(exports, "toBase64", ()=>toBase64);
var alphabetByEncoding = {};
var alphabetByValue = new Array(64);
for(var i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++){
    var char = String.fromCharCode(i + start);
    alphabetByEncoding[char] = i;
    alphabetByValue[i] = char;
}
for(var i = 0, start = "a".charCodeAt(0), limit = "z".charCodeAt(0); i + start <= limit; i++){
    var char = String.fromCharCode(i + start);
    var index = i + 26;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
for(var i = 0; i < 10; i++){
    alphabetByEncoding[i.toString(10)] = i + 52;
    var char = i.toString(10);
    var index = i + 52;
    alphabetByEncoding[char] = index;
    alphabetByValue[index] = char;
}
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
var bitsPerLetter = 6;
var bitsPerByte = 8;
var maxLetterValue = 63;
function fromBase64(input) {
    var totalByteLength = input.length / 4 * 3;
    if (input.substr(-2) === "==") totalByteLength -= 2;
    else if (input.substr(-1) === "=") totalByteLength--;
    var out = new ArrayBuffer(totalByteLength);
    var dataView = new DataView(out);
    for(var i = 0; i < input.length; i += 4){
        var bits = 0;
        var bitLength = 0;
        for(var j = i, limit = i + 3; j <= limit; j++)if (input[j] !== "=") {
            bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;
            bitLength += bitsPerLetter;
        } else bits >>= bitsPerLetter;
        var chunkOffset = i / 4 * 3;
        bits >>= bitLength % bitsPerByte;
        var byteLength = Math.floor(bitLength / bitsPerByte);
        for(var k = 0; k < byteLength; k++){
            var offset = (byteLength - k - 1) * bitsPerByte;
            dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
        }
    }
    return new Uint8Array(out);
}
function toBase64(input) {
    var str = "";
    for(var i = 0; i < input.length; i += 3){
        var bits = 0;
        var bitLength = 0;
        for(var j = i, limit = Math.min(i + 3, input.length); j < limit; j++){
            bits |= input[j] << (limit - j - 1) * bitsPerByte;
            bitLength += bitsPerByte;
        }
        var bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
        bits <<= bitClusterCount * bitsPerLetter - bitLength;
        for(var k = 1; k <= bitClusterCount; k++){
            var offset = (bitClusterCount - k) * bitsPerLetter;
            str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
        }
        str += "==".slice(0, 4 - bitClusterCount);
    }
    return str;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ry3q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _invalidFunction = require("./invalidFunction");
parcelHelpers.exportAll(_invalidFunction, exports);
var _invalidProvider = require("./invalidProvider");
parcelHelpers.exportAll(_invalidProvider, exports);

},{"./invalidFunction":"0Tm5F","./invalidProvider":"e5kQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"0Tm5F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invalidFunction", ()=>invalidFunction);
var invalidFunction = function(message) {
    return function() {
        throw new Error(message);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e5kQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invalidProvider", ()=>invalidProvider);
var invalidProvider = function(message) {
    return function() {
        return Promise.reject(message);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hgahj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _retryMiddleware = require("./retryMiddleware");
parcelHelpers.exportAll(_retryMiddleware, exports);
var _omitRetryHeadersMiddleware = require("./omitRetryHeadersMiddleware");
parcelHelpers.exportAll(_omitRetryHeadersMiddleware, exports);
var _defaultStrategy = require("./defaultStrategy");
parcelHelpers.exportAll(_defaultStrategy, exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _delayDecider = require("./delayDecider");
parcelHelpers.exportAll(_delayDecider, exports);
var _retryDecider = require("./retryDecider");
parcelHelpers.exportAll(_retryDecider, exports);

},{"./retryMiddleware":"6LirE","./omitRetryHeadersMiddleware":"cpDpC","./defaultStrategy":"9fkaR","./configurations":"eL3tJ","./delayDecider":"lpy71","./retryDecider":"a8phO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6LirE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "retryMiddleware", ()=>retryMiddleware);
parcelHelpers.export(exports, "retryMiddlewareOptions", ()=>retryMiddlewareOptions);
parcelHelpers.export(exports, "getRetryPlugin", ()=>getRetryPlugin);
var _tslib = require("tslib");
var retryMiddleware = function(options) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var _a;
                return (0, _tslib.__generator)(this, function(_b) {
                    if ((_a = options === null || options === void 0 ? void 0 : options.retryStrategy) === null || _a === void 0 ? void 0 : _a.mode) context.userAgent = (0, _tslib.__spread)(context.userAgent || [], [
                        [
                            "cfg/retry-mode",
                            options.retryStrategy.mode
                        ]
                    ]);
                    return [
                        2 /*return*/ ,
                        options.retryStrategy.retry(next, args)
                    ];
                });
            });
        };
    };
};
var retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: [
        "RETRY"
    ],
    step: "finalizeRequest",
    priority: "high",
    override: true
};
var getRetryPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
        }
    };
};

},{"tslib":"ih7nG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ih7nG":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cpDpC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "omitRetryHeadersMiddleware", ()=>omitRetryHeadersMiddleware);
parcelHelpers.export(exports, "omitRetryHeadersMiddlewareOptions", ()=>omitRetryHeadersMiddlewareOptions);
parcelHelpers.export(exports, "getOmitRetryHeadersPlugin", ()=>getOmitRetryHeadersPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _constants = require("./constants");
var omitRetryHeadersMiddleware = function() {
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var request;
                return (0, _tslib.__generator)(this, function(_a) {
                    request = args.request;
                    if ((0, _protocolHttp.HttpRequest).isInstance(request)) {
                        delete request.headers[0, _constants.INVOCATION_ID_HEADER];
                        delete request.headers[0, _constants.REQUEST_HEADER];
                    }
                    return [
                        2 /*return*/ ,
                        next(args)
                    ];
                });
            });
        };
    };
};
var omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: [
        "RETRY",
        "HEADERS",
        "OMIT_RETRY_HEADERS"
    ],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true
};
var getOmitRetryHeadersPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
        }
    };
};

},{"tslib":"ih7nG","@aws-sdk/protocol-http":"dbzKK","./constants":"juS8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"juS8Q":[function(require,module,exports) {
/**
 * The base number of milliseconds to use in calculating a suitable cool-down
 * time when a retryable error is encountered.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_RETRY_DELAY_BASE", ()=>DEFAULT_RETRY_DELAY_BASE);
parcelHelpers.export(exports, "MAXIMUM_RETRY_DELAY", ()=>MAXIMUM_RETRY_DELAY);
parcelHelpers.export(exports, "THROTTLING_RETRY_DELAY_BASE", ()=>THROTTLING_RETRY_DELAY_BASE);
parcelHelpers.export(exports, "INITIAL_RETRY_TOKENS", ()=>INITIAL_RETRY_TOKENS);
parcelHelpers.export(exports, "RETRY_COST", ()=>RETRY_COST);
parcelHelpers.export(exports, "TIMEOUT_RETRY_COST", ()=>TIMEOUT_RETRY_COST);
parcelHelpers.export(exports, "NO_RETRY_INCREMENT", ()=>NO_RETRY_INCREMENT);
parcelHelpers.export(exports, "INVOCATION_ID_HEADER", ()=>INVOCATION_ID_HEADER);
parcelHelpers.export(exports, "REQUEST_HEADER", ()=>REQUEST_HEADER);
var DEFAULT_RETRY_DELAY_BASE = 100;
var MAXIMUM_RETRY_DELAY = 20000;
var THROTTLING_RETRY_DELAY_BASE = 500;
var INITIAL_RETRY_TOKENS = 500;
var RETRY_COST = 5;
var TIMEOUT_RETRY_COST = 10;
var NO_RETRY_INCREMENT = 1;
var INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
var REQUEST_HEADER = "amz-sdk-request";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9fkaR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_MAX_ATTEMPTS", ()=>DEFAULT_MAX_ATTEMPTS);
parcelHelpers.export(exports, "DEFAULT_RETRY_MODE", ()=>DEFAULT_RETRY_MODE);
parcelHelpers.export(exports, "StandardRetryStrategy", ()=>StandardRetryStrategy);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
var _uuid = require("uuid");
var _constants = require("./constants");
var _defaultRetryQuota = require("./defaultRetryQuota");
var _delayDecider = require("./delayDecider");
var _retryDecider = require("./retryDecider");
var DEFAULT_MAX_ATTEMPTS = 3;
var DEFAULT_RETRY_MODE = "standard";
var StandardRetryStrategy = /** @class */ function() {
    function StandardRetryStrategy(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = DEFAULT_RETRY_MODE;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : (0, _retryDecider.defaultRetryDecider);
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : (0, _delayDecider.defaultDelayDecider);
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, _defaultRetryQuota.getDefaultRetryQuota)((0, _constants.INITIAL_RETRY_TOKENS));
    }
    StandardRetryStrategy.prototype.shouldRetry = function(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    };
    StandardRetryStrategy.prototype.getMaxAttempts = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var maxAttempts, error_1;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.maxAttemptsProvider()
                        ];
                    case 1:
                        maxAttempts = _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        error_1 = _a.sent();
                        maxAttempts = DEFAULT_MAX_ATTEMPTS;
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            maxAttempts
                        ];
                }
            });
        });
    };
    StandardRetryStrategy.prototype.retry = function(next, args) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var retryTokenAmount, attempts, totalDelay, maxAttempts, request, _loop_1, this_1, state_1;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        attempts = 0;
                        totalDelay = 0;
                        return [
                            4 /*yield*/ ,
                            this.getMaxAttempts()
                        ];
                    case 1:
                        maxAttempts = _a.sent();
                        request = args.request;
                        if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _constants.INVOCATION_ID_HEADER] = (0, _uuid.v4)();
                        _loop_1 = function() {
                            var _a, response, output, err_1, delay_1;
                            return (0, _tslib.__generator)(this, function(_b) {
                                switch(_b.label){
                                    case 0:
                                        _b.trys.push([
                                            0,
                                            2,
                                            ,
                                            5
                                        ]);
                                        if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _constants.REQUEST_HEADER] = "attempt=" + (attempts + 1) + "; max=" + maxAttempts;
                                        return [
                                            4 /*yield*/ ,
                                            next(args)
                                        ];
                                    case 1:
                                        _a = _b.sent(), response = _a.response, output = _a.output;
                                        this_1.retryQuota.releaseRetryTokens(retryTokenAmount);
                                        output.$metadata.attempts = attempts + 1;
                                        output.$metadata.totalRetryDelay = totalDelay;
                                        return [
                                            2 /*return*/ ,
                                            {
                                                value: {
                                                    response: response,
                                                    output: output
                                                }
                                            }
                                        ];
                                    case 2:
                                        err_1 = _b.sent();
                                        attempts++;
                                        if (!this_1.shouldRetry(err_1, attempts, maxAttempts)) return [
                                            3 /*break*/ ,
                                            4
                                        ];
                                        retryTokenAmount = this_1.retryQuota.retrieveRetryTokens(err_1);
                                        delay_1 = this_1.delayDecider((0, _serviceErrorClassification.isThrottlingError)(err_1) ? (0, _constants.THROTTLING_RETRY_DELAY_BASE) : (0, _constants.DEFAULT_RETRY_DELAY_BASE), attempts);
                                        totalDelay += delay_1;
                                        return [
                                            4 /*yield*/ ,
                                            new Promise(function(resolve) {
                                                return setTimeout(resolve, delay_1);
                                            })
                                        ];
                                    case 3:
                                        _b.sent();
                                        return [
                                            2 /*return*/ ,
                                            "continue"
                                        ];
                                    case 4:
                                        if (!err_1.$metadata) err_1.$metadata = {};
                                        err_1.$metadata.attempts = attempts;
                                        err_1.$metadata.totalRetryDelay = totalDelay;
                                        throw err_1;
                                    case 5:
                                        return [
                                            2 /*return*/ 
                                        ];
                                }
                            });
                        };
                        this_1 = this;
                        _a.label = 2;
                    case 2:
                        return [
                            5 /*yield**/ ,
                            _loop_1()
                        ];
                    case 3:
                        state_1 = _a.sent();
                        if (typeof state_1 === "object") return [
                            2 /*return*/ ,
                            state_1.value
                        ];
                        return [
                            3 /*break*/ ,
                            2
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return StandardRetryStrategy;
}();

},{"tslib":"ih7nG","@aws-sdk/protocol-http":"dbzKK","@aws-sdk/service-error-classification":"55gX7","uuid":"2YH3o","./constants":"juS8Q","./defaultRetryQuota":"bCnN0","./delayDecider":"lpy71","./retryDecider":"a8phO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"55gX7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isRetryableByTrait", ()=>isRetryableByTrait);
parcelHelpers.export(exports, "isClockSkewError", ()=>isClockSkewError);
parcelHelpers.export(exports, "isThrottlingError", ()=>isThrottlingError);
parcelHelpers.export(exports, "isTransientError", ()=>isTransientError);
var _constants = require("./constants");
var isRetryableByTrait = function(error) {
    return error.$retryable !== undefined;
};
var isClockSkewError = function(error) {
    return (0, _constants.CLOCK_SKEW_ERROR_CODES).includes(error.name);
};
var isThrottlingError = function(error) {
    var _a, _b;
    return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || (0, _constants.THROTTLING_ERROR_CODES).includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
};
var isTransientError = function(error) {
    var _a;
    return (0, _constants.TRANSIENT_ERROR_CODES).includes(error.name) || (0, _constants.TRANSIENT_ERROR_STATUS_CODES).includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
};

},{"./constants":"afxhZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"afxhZ":[function(require,module,exports) {
/**
 * Errors encountered when the client clock and server clock cannot agree on the
 * current time.
 *
 * These errors are retryable, assuming the SDK has enabled clock skew
 * correction.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CLOCK_SKEW_ERROR_CODES", ()=>CLOCK_SKEW_ERROR_CODES);
parcelHelpers.export(exports, "THROTTLING_ERROR_CODES", ()=>THROTTLING_ERROR_CODES);
parcelHelpers.export(exports, "TRANSIENT_ERROR_CODES", ()=>TRANSIENT_ERROR_CODES);
parcelHelpers.export(exports, "TRANSIENT_ERROR_STATUS_CODES", ()=>TRANSIENT_ERROR_STATUS_CODES);
var CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch"
];
var THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException"
];
var TRANSIENT_ERROR_CODES = [
    "AbortError",
    "TimeoutError",
    "RequestTimeout",
    "RequestTimeoutException"
];
var TRANSIENT_ERROR_STATUS_CODES = [
    500,
    502,
    503,
    504
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2YH3o":[function(require,module,exports) {
var v1 = require("c6df88204e1f4299");
var v4 = require("3855f0864044f01d");
var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;
module.exports = uuid;

},{"c6df88204e1f4299":"1UaLK","3855f0864044f01d":"nZnAg"}],"1UaLK":[function(require,module,exports) {
var rng = require("3d2d1ae5ae56a8b5");
var bytesToUuid = require("862e80dd3f0567cf");
// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
var _nodeId;
var _clockseq;
// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;
// See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
    var i = buf && offset || 0;
    var b = buf || [];
    options = options || {};
    var node = options.node || _nodeId;
    var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;
    // node and clockseq need to be initialized to random values if they're not
    // specified.  We do this lazily to minimize issues related to insufficient
    // system entropy.  See #189
    if (node == null || clockseq == null) {
        var seedBytes = rng();
        if (node == null) // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
        node = _nodeId = [
            seedBytes[0] | 0x01,
            seedBytes[1],
            seedBytes[2],
            seedBytes[3],
            seedBytes[4],
            seedBytes[5]
        ];
        if (clockseq == null) // Per 4.2.2, randomize (14 bit) clockseq
        clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
    // UUID timestamps are 100 nano-second units since the Gregorian epoch,
    // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
    // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
    // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
    var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();
    // Per 4.2.1.2, use count of uuid's generated during the current clock
    // cycle to simulate higher resolution clock
    var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;
    // Time since last uuid creation (in msecs)
    var dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000;
    // Per 4.2.1.2, Bump clockseq on clock regression
    if (dt < 0 && options.clockseq === undefined) clockseq = clockseq + 1 & 0x3fff;
    // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
    // time interval
    if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) nsecs = 0;
    // Per 4.2.1.2 Throw error if too many uuids are requested
    if (nsecs >= 10000) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
    _lastMSecs = msecs;
    _lastNSecs = nsecs;
    _clockseq = clockseq;
    // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
    msecs += 12219292800000;
    // `time_low`
    var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
    b[i++] = tl >>> 24 & 0xff;
    b[i++] = tl >>> 16 & 0xff;
    b[i++] = tl >>> 8 & 0xff;
    b[i++] = tl & 0xff;
    // `time_mid`
    var tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
    b[i++] = tmh >>> 8 & 0xff;
    b[i++] = tmh & 0xff;
    // `time_high_and_version`
    b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
    b[i++] = tmh >>> 16 & 0xff;
    // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
    b[i++] = clockseq >>> 8 | 0x80;
    // `clock_seq_low`
    b[i++] = clockseq & 0xff;
    // `node`
    for(var n = 0; n < 6; ++n)b[i + n] = node[n];
    return buf ? buf : bytesToUuid(b);
}
module.exports = v1;

},{"3d2d1ae5ae56a8b5":"575ZK","862e80dd3f0567cf":"hFTr1"}],"575ZK":[function(require,module,exports) {
// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection
// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = typeof crypto != "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto != "undefined" && typeof window.msCrypto.getRandomValues == "function" && msCrypto.getRandomValues.bind(msCrypto);
if (getRandomValues) {
    // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
    var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef
    module.exports = function whatwgRNG() {
        getRandomValues(rnds8);
        return rnds8;
    };
} else {
    // Math.random()-based (RNG)
    //
    // If all else fails, use Math.random().  It's fast, but is of unspecified
    // quality.
    var rnds = new Array(16);
    module.exports = function mathRNG() {
        for(var i = 0, r; i < 16; i++){
            if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
            rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
        }
        return rnds;
    };
}

},{}],"hFTr1":[function(require,module,exports) {
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var byteToHex = [];
for(var i = 0; i < 256; ++i)byteToHex[i] = (i + 0x100).toString(16).substr(1);
function bytesToUuid(buf, offset) {
    var i = offset || 0;
    var bth = byteToHex;
    // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
    return [
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        "-",
        bth[buf[i++]],
        bth[buf[i++]],
        "-",
        bth[buf[i++]],
        bth[buf[i++]],
        "-",
        bth[buf[i++]],
        bth[buf[i++]],
        "-",
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]],
        bth[buf[i++]]
    ].join("");
}
module.exports = bytesToUuid;

},{}],"nZnAg":[function(require,module,exports) {
var rng = require("24932e89aef21842");
var bytesToUuid = require("5cc20217cefb381c");
function v4(options, buf, offset) {
    var i = buf && offset || 0;
    if (typeof options == "string") {
        buf = options === "binary" ? new Array(16) : null;
        options = null;
    }
    options = options || {};
    var rnds = options.random || (options.rng || rng)();
    // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80;
    // Copy bytes to buffer, if provided
    if (buf) for(var ii = 0; ii < 16; ++ii)buf[i + ii] = rnds[ii];
    return buf || bytesToUuid(rnds);
}
module.exports = v4;

},{"24932e89aef21842":"575ZK","5cc20217cefb381c":"hFTr1"}],"bCnN0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefaultRetryQuota", ()=>getDefaultRetryQuota);
var _constants = require("./constants");
var getDefaultRetryQuota = function(initialRetryTokens) {
    var MAX_CAPACITY = initialRetryTokens;
    var availableCapacity = initialRetryTokens;
    var getCapacityAmount = function(error) {
        return error.name === "TimeoutError" ? (0, _constants.TIMEOUT_RETRY_COST) : (0, _constants.RETRY_COST);
    };
    var hasRetryTokens = function(error) {
        return getCapacityAmount(error) <= availableCapacity;
    };
    var retrieveRetryTokens = function(error) {
        if (!hasRetryTokens(error)) // retryStrategy should stop retrying, and return last error
        throw new Error("No retry token available");
        var capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
    };
    var releaseRetryTokens = function(capacityReleaseAmount) {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : (0, _constants.NO_RETRY_INCREMENT);
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
        hasRetryTokens: hasRetryTokens,
        retrieveRetryTokens: retrieveRetryTokens,
        releaseRetryTokens: releaseRetryTokens
    });
};

},{"./constants":"juS8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lpy71":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultDelayDecider", ()=>defaultDelayDecider);
var _constants = require("./constants");
var defaultDelayDecider = function(delayBase, attempts) {
    return Math.floor(Math.min((0, _constants.MAXIMUM_RETRY_DELAY), Math.random() * Math.pow(2, attempts) * delayBase));
};

},{"./constants":"juS8Q","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a8phO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultRetryDecider", ()=>defaultRetryDecider);
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
var defaultRetryDecider = function(error) {
    if (!error) return false;
    return (0, _serviceErrorClassification.isRetryableByTrait)(error) || (0, _serviceErrorClassification.isClockSkewError)(error) || (0, _serviceErrorClassification.isThrottlingError)(error) || (0, _serviceErrorClassification.isTransientError)(error);
};

},{"@aws-sdk/service-error-classification":"55gX7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eL3tJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENV_MAX_ATTEMPTS", ()=>ENV_MAX_ATTEMPTS);
parcelHelpers.export(exports, "CONFIG_MAX_ATTEMPTS", ()=>CONFIG_MAX_ATTEMPTS);
parcelHelpers.export(exports, "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", ()=>NODE_MAX_ATTEMPT_CONFIG_OPTIONS);
parcelHelpers.export(exports, "resolveRetryConfig", ()=>resolveRetryConfig);
parcelHelpers.export(exports, "ENV_RETRY_MODE", ()=>ENV_RETRY_MODE);
parcelHelpers.export(exports, "CONFIG_RETRY_MODE", ()=>CONFIG_RETRY_MODE);
parcelHelpers.export(exports, "NODE_RETRY_MODE_CONFIG_OPTIONS", ()=>NODE_RETRY_MODE_CONFIG_OPTIONS);
var _tslib = require("tslib");
var _defaultStrategy = require("./defaultStrategy");
var ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
var CONFIG_MAX_ATTEMPTS = "max_attempts";
var NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: function(env) {
        var value = env[ENV_MAX_ATTEMPTS];
        if (!value) return undefined;
        var maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error("Environment variable " + ENV_MAX_ATTEMPTS + ' mast be a number, got "' + value + '"');
        return maxAttempt;
    },
    configFileSelector: function(profile) {
        var value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value) return undefined;
        var maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error("Shared config file entry " + CONFIG_MAX_ATTEMPTS + ' mast be a number, got "' + value + '"');
        return maxAttempt;
    },
    default: (0, _defaultStrategy.DEFAULT_MAX_ATTEMPTS)
};
var resolveRetryConfig = function(input) {
    var maxAttempts = normalizeMaxAttempts(input.maxAttempts);
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        maxAttempts: maxAttempts,
        retryStrategy: input.retryStrategy || new (0, _defaultStrategy.StandardRetryStrategy)(maxAttempts)
    });
};
var normalizeMaxAttempts = function(maxAttempts) {
    if (maxAttempts === void 0) maxAttempts = (0, _defaultStrategy.DEFAULT_MAX_ATTEMPTS);
    if (typeof maxAttempts === "number") {
        var promisified_1 = Promise.resolve(maxAttempts);
        return function() {
            return promisified_1;
        };
    }
    return maxAttempts;
};
var ENV_RETRY_MODE = "AWS_RETRY_MODE";
var CONFIG_RETRY_MODE = "retry_mode";
var NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: function(env) {
        return env[ENV_RETRY_MODE];
    },
    configFileSelector: function(profile) {
        return profile[CONFIG_RETRY_MODE];
    },
    default: (0, _defaultStrategy.DEFAULT_RETRY_MODE)
};

},{"tslib":"ih7nG","./defaultStrategy":"9fkaR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kyGUn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateBodyLength", ()=>calculateBodyLength);
function calculateBodyLength(body) {
    if (typeof body === "string") {
        var len = body.length;
        for(var i = len - 1; i >= 0; i--){
            var code = body.charCodeAt(i);
            if (code > 0x7f && code <= 0x7ff) len++;
            else if (code > 0x7ff && code <= 0xffff) len += 2;
        }
        return len;
    } else if (typeof body.byteLength === "number") // handles Uint8Array, ArrayBuffer, Buffer, and ArrayBufferView
    return body.byteLength;
    else if (typeof body.size === "number") // handles browser File object
    return body.size;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"26YQ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultUserAgent", ()=>defaultUserAgent);
var _tslib = require("tslib");
var _bowser = require("bowser");
var _bowserDefault = parcelHelpers.interopDefault(_bowser);
var defaultUserAgent = function(_a) {
    var serviceId = _a.serviceId, clientVersion = _a.clientVersion;
    return function() {
        return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
            var parsedUA, sections;
            var _a, _b, _c, _d, _e, _f, _g;
            return (0, _tslib.__generator)(this, function(_h) {
                parsedUA = ((_a = window === null || window === void 0 ? void 0 : window.navigator) === null || _a === void 0 ? void 0 : _a.userAgent) ? (0, _bowserDefault.default).parse(window.navigator.userAgent) : undefined;
                sections = [
                    // sdk-metadata
                    [
                        "aws-sdk-js",
                        clientVersion
                    ],
                    // os-metadata
                    [
                        "os/" + (((_b = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _b === void 0 ? void 0 : _b.name) || "other"),
                        (_c = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.os) === null || _c === void 0 ? void 0 : _c.version
                    ],
                    // language-metadata
                    // ECMAScript edition doesn't matter in JS.
                    [
                        "lang/js"
                    ],
                    // browser vendor and version.
                    [
                        "md/browser",
                        ((_e = (_d = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _d === void 0 ? void 0 : _d.name) !== null && _e !== void 0 ? _e : "unknown") + "_" + ((_g = (_f = parsedUA === null || parsedUA === void 0 ? void 0 : parsedUA.browser) === null || _f === void 0 ? void 0 : _f.version) !== null && _g !== void 0 ? _g : "unknown")
                    ]
                ];
                if (serviceId) // api-metadata
                // service Id may not appear in non-AWS clients
                sections.push([
                    "api/" + serviceId,
                    clientVersion
                ]);
                return [
                    2 /*return*/ ,
                    sections
                ];
            });
        });
    };
};

},{"tslib":"3QGSn","bowser":"5jYCf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3QGSn":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5jYCf":[function(require,module,exports) {
!function(e, t) {
    module.exports = t();
}(this, function() {
    return function(e) {
        var t = {};
        function r(n) {
            if (t[n]) return t[n].exports;
            var i = t[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
        }
        return r.m = e, r.c = t, r.d = function(e, t, n) {
            r.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: n
            });
        }, r.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        }, r.t = function(e, t) {
            if (1 & t && (e = r(e)), 8 & t) return e;
            if (4 & t && "object" == typeof e && e && e.__esModule) return e;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e) for(var i in e)r.d(n, i, (function(t) {
                return e[t];
            }).bind(null, i));
            return n;
        }, r.n = function(e) {
            var t = e && e.__esModule ? function() {
                return e.default;
            } : function() {
                return e;
            };
            return r.d(t, "a", t), t;
        }, r.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 90);
    }({
        17: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n = r(18), i = function() {
                function e() {}
                return e.getFirstMatch = function(e, t) {
                    var r = t.match(e);
                    return r && r.length > 0 && r[1] || "";
                }, e.getSecondMatch = function(e, t) {
                    var r = t.match(e);
                    return r && r.length > 1 && r[2] || "";
                }, e.matchAndReturnConst = function(e, t, r) {
                    if (e.test(t)) return r;
                }, e.getWindowsVersionName = function(e) {
                    switch(e){
                        case "NT":
                            return "NT";
                        case "XP":
                            return "XP";
                        case "NT 5.0":
                            return "2000";
                        case "NT 5.1":
                            return "XP";
                        case "NT 5.2":
                            return "2003";
                        case "NT 6.0":
                            return "Vista";
                        case "NT 6.1":
                            return "7";
                        case "NT 6.2":
                            return "8";
                        case "NT 6.3":
                            return "8.1";
                        case "NT 10.0":
                            return "10";
                        default:
                            return;
                    }
                }, e.getMacOSVersionName = function(e) {
                    var t = e.split(".").splice(0, 2).map(function(e) {
                        return parseInt(e, 10) || 0;
                    });
                    if (t.push(0), 10 === t[0]) switch(t[1]){
                        case 5:
                            return "Leopard";
                        case 6:
                            return "Snow Leopard";
                        case 7:
                            return "Lion";
                        case 8:
                            return "Mountain Lion";
                        case 9:
                            return "Mavericks";
                        case 10:
                            return "Yosemite";
                        case 11:
                            return "El Capitan";
                        case 12:
                            return "Sierra";
                        case 13:
                            return "High Sierra";
                        case 14:
                            return "Mojave";
                        case 15:
                            return "Catalina";
                        default:
                            return;
                    }
                }, e.getAndroidVersionName = function(e) {
                    var t = e.split(".").splice(0, 2).map(function(e) {
                        return parseInt(e, 10) || 0;
                    });
                    if (t.push(0), !(1 === t[0] && t[1] < 5)) return 1 === t[0] && t[1] < 6 ? "Cupcake" : 1 === t[0] && t[1] >= 6 ? "Donut" : 2 === t[0] && t[1] < 2 ? "Eclair" : 2 === t[0] && 2 === t[1] ? "Froyo" : 2 === t[0] && t[1] > 2 ? "Gingerbread" : 3 === t[0] ? "Honeycomb" : 4 === t[0] && t[1] < 1 ? "Ice Cream Sandwich" : 4 === t[0] && t[1] < 4 ? "Jelly Bean" : 4 === t[0] && t[1] >= 4 ? "KitKat" : 5 === t[0] ? "Lollipop" : 6 === t[0] ? "Marshmallow" : 7 === t[0] ? "Nougat" : 8 === t[0] ? "Oreo" : 9 === t[0] ? "Pie" : void 0;
                }, e.getVersionPrecision = function(e) {
                    return e.split(".").length;
                }, e.compareVersions = function(t, r, n) {
                    void 0 === n && (n = !1);
                    var i = e.getVersionPrecision(t), s = e.getVersionPrecision(r), a = Math.max(i, s), o = 0, u = e.map([
                        t,
                        r
                    ], function(t) {
                        var r = a - e.getVersionPrecision(t), n = t + new Array(r + 1).join(".0");
                        return e.map(n.split("."), function(e) {
                            return new Array(20 - e.length).join("0") + e;
                        }).reverse();
                    });
                    for(n && (o = a - Math.min(i, s)), a -= 1; a >= o;){
                        if (u[0][a] > u[1][a]) return 1;
                        if (u[0][a] === u[1][a]) {
                            if (a === o) return 0;
                            a -= 1;
                        } else if (u[0][a] < u[1][a]) return -1;
                    }
                }, e.map = function(e, t) {
                    var r, n = [];
                    if (Array.prototype.map) return Array.prototype.map.call(e, t);
                    for(r = 0; r < e.length; r += 1)n.push(t(e[r]));
                    return n;
                }, e.find = function(e, t) {
                    var r, n;
                    if (Array.prototype.find) return Array.prototype.find.call(e, t);
                    for(r = 0, n = e.length; r < n; r += 1){
                        var i = e[r];
                        if (t(i, r)) return i;
                    }
                }, e.assign = function(e) {
                    for(var t, r, n = e, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++)s[a - 1] = arguments[a];
                    if (Object.assign) return Object.assign.apply(Object, [
                        e
                    ].concat(s));
                    var o = function() {
                        var e = s[t];
                        "object" == typeof e && null !== e && Object.keys(e).forEach(function(t) {
                            n[t] = e[t];
                        });
                    };
                    for(t = 0, r = s.length; t < r; t += 1)o();
                    return e;
                }, e.getBrowserAlias = function(e) {
                    return n.BROWSER_ALIASES_MAP[e];
                }, e.getBrowserTypeByAlias = function(e) {
                    return n.BROWSER_MAP[e] || "";
                }, e;
            }();
            t.default = i, e.exports = t.default;
        },
        18: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0;
            t.BROWSER_ALIASES_MAP = {
                "Amazon Silk": "amazon_silk",
                "Android Browser": "android",
                Bada: "bada",
                BlackBerry: "blackberry",
                Chrome: "chrome",
                Chromium: "chromium",
                Electron: "electron",
                Epiphany: "epiphany",
                Firefox: "firefox",
                Focus: "focus",
                Generic: "generic",
                "Google Search": "google_search",
                Googlebot: "googlebot",
                "Internet Explorer": "ie",
                "K-Meleon": "k_meleon",
                Maxthon: "maxthon",
                "Microsoft Edge": "edge",
                "MZ Browser": "mz",
                "NAVER Whale Browser": "naver",
                Opera: "opera",
                "Opera Coast": "opera_coast",
                PhantomJS: "phantomjs",
                Puffin: "puffin",
                QupZilla: "qupzilla",
                QQ: "qq",
                QQLite: "qqlite",
                Safari: "safari",
                Sailfish: "sailfish",
                "Samsung Internet for Android": "samsung_internet",
                SeaMonkey: "seamonkey",
                Sleipnir: "sleipnir",
                Swing: "swing",
                Tizen: "tizen",
                "UC Browser": "uc",
                Vivaldi: "vivaldi",
                "WebOS Browser": "webos",
                WeChat: "wechat",
                "Yandex Browser": "yandex",
                Roku: "roku"
            };
            t.BROWSER_MAP = {
                amazon_silk: "Amazon Silk",
                android: "Android Browser",
                bada: "Bada",
                blackberry: "BlackBerry",
                chrome: "Chrome",
                chromium: "Chromium",
                electron: "Electron",
                epiphany: "Epiphany",
                firefox: "Firefox",
                focus: "Focus",
                generic: "Generic",
                googlebot: "Googlebot",
                google_search: "Google Search",
                ie: "Internet Explorer",
                k_meleon: "K-Meleon",
                maxthon: "Maxthon",
                edge: "Microsoft Edge",
                mz: "MZ Browser",
                naver: "NAVER Whale Browser",
                opera: "Opera",
                opera_coast: "Opera Coast",
                phantomjs: "PhantomJS",
                puffin: "Puffin",
                qupzilla: "QupZilla",
                qq: "QQ Browser",
                qqlite: "QQ Browser Lite",
                safari: "Safari",
                sailfish: "Sailfish",
                samsung_internet: "Samsung Internet for Android",
                seamonkey: "SeaMonkey",
                sleipnir: "Sleipnir",
                swing: "Swing",
                tizen: "Tizen",
                uc: "UC Browser",
                vivaldi: "Vivaldi",
                webos: "WebOS Browser",
                wechat: "WeChat",
                yandex: "Yandex Browser"
            };
            t.PLATFORMS_MAP = {
                tablet: "tablet",
                mobile: "mobile",
                desktop: "desktop",
                tv: "tv"
            };
            t.OS_MAP = {
                WindowsPhone: "Windows Phone",
                Windows: "Windows",
                MacOS: "macOS",
                iOS: "iOS",
                Android: "Android",
                WebOS: "WebOS",
                BlackBerry: "BlackBerry",
                Bada: "Bada",
                Tizen: "Tizen",
                Linux: "Linux",
                ChromeOS: "Chrome OS",
                PlayStation4: "PlayStation 4",
                Roku: "Roku"
            };
            t.ENGINE_MAP = {
                EdgeHTML: "EdgeHTML",
                Blink: "Blink",
                Trident: "Trident",
                Presto: "Presto",
                Gecko: "Gecko",
                WebKit: "WebKit"
            };
        },
        90: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(91)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            function a(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                }
            }
            var o = function() {
                function e() {}
                var t, r, n;
                return e.getParser = function(e, t) {
                    if (void 0 === t && (t = !1), "string" != typeof e) throw new Error("UserAgent should be a string");
                    return new i.default(e, t);
                }, e.parse = function(e) {
                    return new i.default(e).getResult();
                }, t = e, n = [
                    {
                        key: "BROWSER_MAP",
                        get: function() {
                            return s.BROWSER_MAP;
                        }
                    },
                    {
                        key: "ENGINE_MAP",
                        get: function() {
                            return s.ENGINE_MAP;
                        }
                    },
                    {
                        key: "OS_MAP",
                        get: function() {
                            return s.OS_MAP;
                        }
                    },
                    {
                        key: "PLATFORMS_MAP",
                        get: function() {
                            return s.PLATFORMS_MAP;
                        }
                    }
                ], r = null, n && a(t, n), e;
            }();
            t.default = o, e.exports = t.default;
        },
        91: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n = u(r(92)), i = u(r(93)), s = u(r(94)), a = u(r(95)), o = u(r(17));
            function u(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            }
            var d = function() {
                function e(e, t) {
                    if (void 0 === t && (t = !1), null == e || "" === e) throw new Error("UserAgent parameter can't be empty");
                    this._ua = e, this.parsedResult = {}, !0 !== t && this.parse();
                }
                var t = e.prototype;
                return t.getUA = function() {
                    return this._ua;
                }, t.test = function(e) {
                    return e.test(this._ua);
                }, t.parseBrowser = function() {
                    var e = this;
                    this.parsedResult.browser = {};
                    var t = o.default.find(n.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.browser = t.describe(this.getUA())), this.parsedResult.browser;
                }, t.getBrowser = function() {
                    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
                }, t.getBrowserName = function(e) {
                    return e ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
                }, t.getBrowserVersion = function() {
                    return this.getBrowser().version;
                }, t.getOS = function() {
                    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
                }, t.parseOS = function() {
                    var e = this;
                    this.parsedResult.os = {};
                    var t = o.default.find(i.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.os = t.describe(this.getUA())), this.parsedResult.os;
                }, t.getOSName = function(e) {
                    var t = this.getOS().name;
                    return e ? String(t).toLowerCase() || "" : t || "";
                }, t.getOSVersion = function() {
                    return this.getOS().version;
                }, t.getPlatform = function() {
                    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
                }, t.getPlatformType = function(e) {
                    void 0 === e && (e = !1);
                    var t = this.getPlatform().type;
                    return e ? String(t).toLowerCase() || "" : t || "";
                }, t.parsePlatform = function() {
                    var e = this;
                    this.parsedResult.platform = {};
                    var t = o.default.find(s.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.platform = t.describe(this.getUA())), this.parsedResult.platform;
                }, t.getEngine = function() {
                    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
                }, t.getEngineName = function(e) {
                    return e ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
                }, t.parseEngine = function() {
                    var e = this;
                    this.parsedResult.engine = {};
                    var t = o.default.find(a.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.engine = t.describe(this.getUA())), this.parsedResult.engine;
                }, t.parse = function() {
                    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
                }, t.getResult = function() {
                    return o.default.assign({}, this.parsedResult);
                }, t.satisfies = function(e) {
                    var t = this, r = {}, n = 0, i = {}, s = 0;
                    if (Object.keys(e).forEach(function(t) {
                        var a = e[t];
                        "string" == typeof a ? (i[t] = a, s += 1) : "object" == typeof a && (r[t] = a, n += 1);
                    }), n > 0) {
                        var a = Object.keys(r), u = o.default.find(a, function(e) {
                            return t.isOS(e);
                        });
                        if (u) {
                            var d = this.satisfies(r[u]);
                            if (void 0 !== d) return d;
                        }
                        var c = o.default.find(a, function(e) {
                            return t.isPlatform(e);
                        });
                        if (c) {
                            var f = this.satisfies(r[c]);
                            if (void 0 !== f) return f;
                        }
                    }
                    if (s > 0) {
                        var l = Object.keys(i), h = o.default.find(l, function(e) {
                            return t.isBrowser(e, !0);
                        });
                        if (void 0 !== h) return this.compareVersion(i[h]);
                    }
                }, t.isBrowser = function(e, t) {
                    void 0 === t && (t = !1);
                    var r = this.getBrowserName().toLowerCase(), n = e.toLowerCase(), i = o.default.getBrowserTypeByAlias(n);
                    return t && i && (n = i.toLowerCase()), n === r;
                }, t.compareVersion = function(e) {
                    var t = [
                        0
                    ], r = e, n = !1, i = this.getBrowserVersion();
                    if ("string" == typeof i) return ">" === e[0] || "<" === e[0] ? (r = e.substr(1), "=" === e[1] ? (n = !0, r = e.substr(2)) : t = [], ">" === e[0] ? t.push(1) : t.push(-1)) : "=" === e[0] ? r = e.substr(1) : "~" === e[0] && (n = !0, r = e.substr(1)), t.indexOf(o.default.compareVersions(i, r, n)) > -1;
                }, t.isOS = function(e) {
                    return this.getOSName(!0) === String(e).toLowerCase();
                }, t.isPlatform = function(e) {
                    return this.getPlatformType(!0) === String(e).toLowerCase();
                }, t.isEngine = function(e) {
                    return this.getEngineName(!0) === String(e).toLowerCase();
                }, t.is = function(e, t) {
                    return void 0 === t && (t = !1), this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e);
                }, t.some = function(e) {
                    var t = this;
                    return void 0 === e && (e = []), e.some(function(e) {
                        return t.is(e);
                    });
                }, e;
            }();
            t.default = d, e.exports = t.default;
        },
        92: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            };
            var s = /version\/(\d+(\.?_?\d+)+)/i, a = [
                {
                    test: [
                        /googlebot/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Googlebot"
                        }, r = i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opera/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opr\/|opios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera"
                        }, r = i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /SamsungBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Samsung Internet for Android"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /Whale/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "NAVER Whale Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /MZBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "MZ Browser"
                        }, r = i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /focus/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Focus"
                        }, r = i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /swing/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Swing"
                        }, r = i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /coast/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera Coast"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opt\/\d+(?:.?_?\d+)+/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera Touch"
                        }, r = i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /yabrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Yandex Browser"
                        }, r = i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /ucbrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "UC Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /Maxthon|mxios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Maxthon"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /epiphany/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Epiphany"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /puffin/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Puffin"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /sleipnir/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Sleipnir"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /k-meleon/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "K-Meleon"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /micromessenger/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "WeChat"
                        }, r = i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /qqbrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser"
                        }, r = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /msie|trident/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Internet Explorer"
                        }, r = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /\sedg\//i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Microsoft Edge"
                        }, r = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /edg([ea]|ios)/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Microsoft Edge"
                        }, r = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /vivaldi/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Vivaldi"
                        }, r = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /seamonkey/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "SeaMonkey"
                        }, r = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /sailfish/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Sailfish"
                        }, r = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /silk/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Amazon Silk"
                        }, r = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /phantom/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "PhantomJS"
                        }, r = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /slimerjs/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "SlimerJS"
                        }, r = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /blackberry|\bbb\d+/i,
                        /rim\stablet/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "BlackBerry"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /(web|hpw)[o0]s/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "WebOS Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /bada/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Bada"
                        }, r = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /tizen/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Tizen"
                        }, r = i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /qupzilla/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "QupZilla"
                        }, r = i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /firefox|iceweasel|fxios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Firefox"
                        }, r = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /electron/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Electron"
                        }, r = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /MiuiBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Miui"
                        }, r = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /chromium/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Chromium"
                        }, r = i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /chrome|crios|crmo/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Chrome"
                        }, r = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /GSA/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Google Search"
                        }, r = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        var t = !e.test(/like android/i), r = e.test(/android/i);
                        return t && r;
                    },
                    describe: function(e) {
                        var t = {
                            name: "Android Browser"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /playstation 4/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "PlayStation 4"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /safari|applewebkit/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Safari"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /.*/i
                    ],
                    describe: function(e) {
                        var t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
                        return {
                            name: i.default.getFirstMatch(t, e),
                            version: i.default.getSecondMatch(t, e)
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        93: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: [
                        /Roku\/DVP/
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e);
                        return {
                            name: s.OS_MAP.Roku,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /windows phone/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.WindowsPhone,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /windows /i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e), r = i.default.getWindowsVersionName(t);
                        return {
                            name: s.OS_MAP.Windows,
                            version: t,
                            versionName: r
                        };
                    }
                },
                {
                    test: [
                        /Macintosh(.*?) FxiOS(.*?)\//
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.OS_MAP.iOS
                        }, r = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /macintosh/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e).replace(/[_\s]/g, "."), r = i.default.getMacOSVersionName(t), n = {
                            name: s.OS_MAP.MacOS,
                            version: t
                        };
                        return r && (n.versionName = r), n;
                    }
                },
                {
                    test: [
                        /(ipod|iphone|ipad)/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e).replace(/[_\s]/g, ".");
                        return {
                            name: s.OS_MAP.iOS,
                            version: t
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = !e.test(/like android/i), r = e.test(/android/i);
                        return t && r;
                    },
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e), r = i.default.getAndroidVersionName(t), n = {
                            name: s.OS_MAP.Android,
                            version: t
                        };
                        return r && (n.versionName = r), n;
                    }
                },
                {
                    test: [
                        /(web|hpw)[o0]s/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e), r = {
                            name: s.OS_MAP.WebOS
                        };
                        return t && t.length && (r.version = t), r;
                    }
                },
                {
                    test: [
                        /blackberry|\bbb\d+/i,
                        /rim\stablet/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e) || i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e) || i.default.getFirstMatch(/\bbb(\d+)/i, e);
                        return {
                            name: s.OS_MAP.BlackBerry,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /bada/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.Bada,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /tizen/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.Tizen,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /linux/i
                    ],
                    describe: function() {
                        return {
                            name: s.OS_MAP.Linux
                        };
                    }
                },
                {
                    test: [
                        /CrOS/
                    ],
                    describe: function() {
                        return {
                            name: s.OS_MAP.ChromeOS
                        };
                    }
                },
                {
                    test: [
                        /PlayStation 4/
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.PlayStation4,
                            version: t
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        94: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: [
                        /googlebot/i
                    ],
                    describe: function() {
                        return {
                            type: "bot",
                            vendor: "Google"
                        };
                    }
                },
                {
                    test: [
                        /huawei/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(can-l01)/i, e) && "Nova", r = {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Huawei"
                        };
                        return t && (r.model = t), r;
                    }
                },
                {
                    test: [
                        /nexus\s*(?:7|8|9|10).*/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Nexus"
                        };
                    }
                },
                {
                    test: [
                        /ipad/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Apple",
                            model: "iPad"
                        };
                    }
                },
                {
                    test: [
                        /Macintosh(.*?) FxiOS(.*?)\//
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Apple",
                            model: "iPad"
                        };
                    }
                },
                {
                    test: [
                        /kftt build/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Amazon",
                            model: "Kindle Fire HD 7"
                        };
                    }
                },
                {
                    test: [
                        /silk/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Amazon"
                        };
                    }
                },
                {
                    test: [
                        /tablet(?! pc)/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = e.test(/ipod|iphone/i), r = e.test(/like (ipod|iphone)/i);
                        return t && !r;
                    },
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(ipod|iphone)/i, e);
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Apple",
                            model: t
                        };
                    }
                },
                {
                    test: [
                        /nexus\s*[0-6].*/i,
                        /galaxy nexus/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Nexus"
                        };
                    }
                },
                {
                    test: [
                        /[^-]mobi/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "blackberry" === e.getBrowserName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "BlackBerry"
                        };
                    }
                },
                {
                    test: function(e) {
                        return "bada" === e.getBrowserName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "windows phone" === e.getBrowserName();
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Microsoft"
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = Number(String(e.getOSVersion()).split(".")[0]);
                        return "android" === e.getOSName(!0) && t >= 3;
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet
                        };
                    }
                },
                {
                    test: function(e) {
                        return "android" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "macos" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop,
                            vendor: "Apple"
                        };
                    }
                },
                {
                    test: function(e) {
                        return "windows" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop
                        };
                    }
                },
                {
                    test: function(e) {
                        return "linux" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop
                        };
                    }
                },
                {
                    test: function(e) {
                        return "playstation 4" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tv
                        };
                    }
                },
                {
                    test: function(e) {
                        return "roku" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tv
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        95: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: function(e) {
                        return "microsoft edge" === e.getBrowserName(!0);
                    },
                    describe: function(e) {
                        if (/\sedg\//i.test(e)) return {
                            name: s.ENGINE_MAP.Blink
                        };
                        var t = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e);
                        return {
                            name: s.ENGINE_MAP.EdgeHTML,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /trident/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Trident
                        }, r = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        return e.test(/presto/i);
                    },
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Presto
                        }, r = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        var t = e.test(/gecko/i), r = e.test(/like gecko/i);
                        return t && !r;
                    },
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Gecko
                        }, r = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /(apple)?webkit\/537\.36/i
                    ],
                    describe: function() {
                        return {
                            name: s.ENGINE_MAP.Blink
                        };
                    }
                },
                {
                    test: [
                        /(apple)?webkit/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.WebKit
                        }, r = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        }
    });
});

},{}],"14XAX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientSharedValues", ()=>ClientSharedValues);
var _endpoints = require("./endpoints");
var _urlParser = require("@aws-sdk/url-parser");
var ClientSharedValues = {
    apiVersion: "2014-06-30",
    disableHostPrefix: false,
    logger: {},
    regionInfoProvider: (0, _endpoints.defaultRegionInfoProvider),
    serviceId: "Cognito Identity",
    urlParser: (0, _urlParser.parseUrl)
};

},{"./endpoints":"4lxDw","@aws-sdk/url-parser":"aIEzl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4lxDw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultRegionInfoProvider", ()=>defaultRegionInfoProvider);
var _tslib = require("tslib");
// Partition default templates
var AWS_TEMPLATE = "cognito-identity.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "cognito-identity.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "cognito-identity.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "cognito-identity.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "cognito-identity.{region}.amazonaws.com";
// Partition regions
var AWS_REGIONS = new Set([
    "af-south-1",
    "ap-east-1",
    "ap-northeast-1",
    "ap-northeast-2",
    "ap-south-1",
    "ap-southeast-1",
    "ap-southeast-2",
    "ca-central-1",
    "eu-central-1",
    "eu-north-1",
    "eu-south-1",
    "eu-west-1",
    "eu-west-2",
    "eu-west-3",
    "me-south-1",
    "sa-east-1",
    "us-east-1",
    "us-east-2",
    "us-west-1",
    "us-west-2"
]);
var AWS_CN_REGIONS = new Set([
    "cn-north-1",
    "cn-northwest-1"
]);
var AWS_ISO_REGIONS = new Set([
    "us-iso-east-1"
]);
var AWS_ISO_B_REGIONS = new Set([
    "us-isob-east-1"
]);
var AWS_US_GOV_REGIONS = new Set([
    "us-gov-east-1",
    "us-gov-west-1"
]);
var defaultRegionInfoProvider = function(region, options) {
    var regionInfo = undefined;
    switch(region){
        // First, try to match exact region names.
        case "ap-northeast-1":
            regionInfo = {
                hostname: "cognito-identity.ap-northeast-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-northeast-2":
            regionInfo = {
                hostname: "cognito-identity.ap-northeast-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-south-1":
            regionInfo = {
                hostname: "cognito-identity.ap-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-southeast-1":
            regionInfo = {
                hostname: "cognito-identity.ap-southeast-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-southeast-2":
            regionInfo = {
                hostname: "cognito-identity.ap-southeast-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ca-central-1":
            regionInfo = {
                hostname: "cognito-identity.ca-central-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "cn-north-1":
            regionInfo = {
                hostname: "cognito-identity.cn-north-1.amazonaws.com.cn",
                partition: "aws-cn"
            };
            break;
        case "eu-central-1":
            regionInfo = {
                hostname: "cognito-identity.eu-central-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-north-1":
            regionInfo = {
                hostname: "cognito-identity.eu-north-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-1":
            regionInfo = {
                hostname: "cognito-identity.eu-west-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-2":
            regionInfo = {
                hostname: "cognito-identity.eu-west-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-3":
            regionInfo = {
                hostname: "cognito-identity.eu-west-3.amazonaws.com",
                partition: "aws"
            };
            break;
        case "fips-us-east-1":
            regionInfo = {
                hostname: "cognito-identity-fips.us-east-1.amazonaws.com",
                partition: "aws",
                signingRegion: "us-east-1"
            };
            break;
        case "fips-us-east-2":
            regionInfo = {
                hostname: "cognito-identity-fips.us-east-2.amazonaws.com",
                partition: "aws",
                signingRegion: "us-east-2"
            };
            break;
        case "fips-us-gov-west-1":
            regionInfo = {
                hostname: "cognito-identity-fips.us-gov-west-1.amazonaws.com",
                partition: "aws-us-gov",
                signingRegion: "us-gov-west-1"
            };
            break;
        case "fips-us-west-2":
            regionInfo = {
                hostname: "cognito-identity-fips.us-west-2.amazonaws.com",
                partition: "aws",
                signingRegion: "us-west-2"
            };
            break;
        case "sa-east-1":
            regionInfo = {
                hostname: "cognito-identity.sa-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-east-1":
            regionInfo = {
                hostname: "cognito-identity.us-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-east-2":
            regionInfo = {
                hostname: "cognito-identity.us-east-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-gov-west-1":
            regionInfo = {
                hostname: "cognito-identity.us-gov-west-1.amazonaws.com",
                partition: "aws-us-gov"
            };
            break;
        case "us-west-1":
            regionInfo = {
                hostname: "cognito-identity.us-west-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-west-2":
            regionInfo = {
                hostname: "cognito-identity.us-west-2.amazonaws.com",
                partition: "aws"
            };
            break;
        // Next, try to match partition endpoints.
        default:
            if (AWS_REGIONS.has(region)) regionInfo = {
                hostname: AWS_TEMPLATE.replace("{region}", region),
                partition: "aws"
            };
            if (AWS_CN_REGIONS.has(region)) regionInfo = {
                hostname: AWS_CN_TEMPLATE.replace("{region}", region),
                partition: "aws-cn"
            };
            if (AWS_ISO_REGIONS.has(region)) regionInfo = {
                hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
                partition: "aws-iso"
            };
            if (AWS_ISO_B_REGIONS.has(region)) regionInfo = {
                hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
                partition: "aws-iso-b"
            };
            if (AWS_US_GOV_REGIONS.has(region)) regionInfo = {
                hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
                partition: "aws-us-gov"
            };
            // Finally, assume it's an AWS partition endpoint.
            if (regionInfo === undefined) regionInfo = {
                hostname: AWS_TEMPLATE.replace("{region}", region),
                partition: "aws"
            };
    }
    return Promise.resolve((0, _tslib.__assign)({
        signingService: "cognito-identity"
    }, regionInfo));
};

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aIEzl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseUrl", ()=>parseUrl);
var _querystringParser = require("@aws-sdk/querystring-parser");
var parseUrl = function(url) {
    var _a = new URL(url), hostname = _a.hostname, pathname = _a.pathname, port = _a.port, protocol = _a.protocol, search = _a.search;
    var query;
    if (search) query = (0, _querystringParser.parseQueryString)(search);
    return {
        hostname: hostname,
        port: port ? parseInt(port) : undefined,
        protocol: protocol,
        path: pathname,
        query: query
    };
};

},{"@aws-sdk/querystring-parser":"9Nn3I","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Nn3I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseQueryString", ()=>parseQueryString);
var _tslib = require("tslib");
function parseQueryString(querystring) {
    var e_1, _a;
    var query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) try {
        for(var _b = (0, _tslib.__values)(querystring.split("&")), _c = _b.next(); !_c.done; _c = _b.next()){
            var pair = _c.value;
            var _d = (0, _tslib.__read)(pair.split("="), 2), key = _d[0], _e = _d[1], value = _e === void 0 ? null : _e;
            key = decodeURIComponent(key);
            if (value) value = decodeURIComponent(value);
            if (!(key in query)) query[key] = value;
            else if (Array.isArray(query[key])) query[key].push(value);
            else query[key] = [
                query[key],
                value
            ];
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return query;
}

},{"tslib":"bF81B","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bF81B":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cd0W3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _endpointsConfig = require("./EndpointsConfig");
parcelHelpers.exportAll(_endpointsConfig, exports);
var _regionConfig = require("./RegionConfig");
parcelHelpers.exportAll(_regionConfig, exports);

},{"./EndpointsConfig":"6dFGU","./RegionConfig":"2VMMN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6dFGU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpointsConfig", ()=>resolveEndpointsConfig);
var _tslib = require("tslib");
var resolveEndpointsConfig = function(input) {
    var _a;
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: input.endpoint ? normalizeEndpoint(input) : function() {
            return getEndPointFromRegion(input);
        },
        isCustomEndpoint: input.endpoint ? true : false
    });
};
var normalizeEndpoint = function(input) {
    var endpoint = input.endpoint, urlParser = input.urlParser;
    if (typeof endpoint === "string") {
        var promisified_1 = Promise.resolve(urlParser(endpoint));
        return function() {
            return promisified_1;
        };
    } else if (typeof endpoint === "object") {
        var promisified_2 = Promise.resolve(endpoint);
        return function() {
            return promisified_2;
        };
    }
    return endpoint;
};
var getEndPointFromRegion = function(input) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var _a, tls, region, dnsHostRegex, hostname;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = input.tls, tls = _a === void 0 ? true : _a;
                    return [
                        4 /*yield*/ ,
                        input.region()
                    ];
                case 1:
                    region = _c.sent();
                    dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
                    if (!dnsHostRegex.test(region)) throw new Error("Invalid region in client config");
                    return [
                        4 /*yield*/ ,
                        input.regionInfoProvider(region)
                    ];
                case 2:
                    hostname = ((_b = _c.sent()) !== null && _b !== void 0 ? _b : {}).hostname;
                    if (!hostname) throw new Error("Cannot resolve hostname from client config");
                    return [
                        2 /*return*/ ,
                        input.urlParser((tls ? "https:" : "http:") + "//" + hostname)
                    ];
            }
        });
    });
};

},{"tslib":"dDV07","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDV07":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2VMMN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "REGION_ENV_NAME", ()=>REGION_ENV_NAME);
parcelHelpers.export(exports, "REGION_INI_NAME", ()=>REGION_INI_NAME);
parcelHelpers.export(exports, "NODE_REGION_CONFIG_OPTIONS", ()=>NODE_REGION_CONFIG_OPTIONS);
parcelHelpers.export(exports, "NODE_REGION_CONFIG_FILE_OPTIONS", ()=>NODE_REGION_CONFIG_FILE_OPTIONS);
parcelHelpers.export(exports, "resolveRegionConfig", ()=>resolveRegionConfig);
var _tslib = require("tslib");
var REGION_ENV_NAME = "AWS_REGION";
var REGION_INI_NAME = "region";
var NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: function(env) {
        return env[REGION_ENV_NAME];
    },
    configFileSelector: function(profile) {
        return profile[REGION_INI_NAME];
    },
    default: function() {
        throw new Error("Region is missing");
    }
};
var NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
};
var resolveRegionConfig = function(input) {
    if (!input.region) throw new Error("Region is missing");
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        region: normalizeRegion(input.region)
    });
};
var normalizeRegion = function(region) {
    if (typeof region === "string") {
        var promisified_1 = Promise.resolve(region);
        return function() {
            return promisified_1;
        };
    }
    return region;
};

},{"tslib":"dDV07","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kUr8i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contentLengthMiddleware", ()=>contentLengthMiddleware);
parcelHelpers.export(exports, "contentLengthMiddlewareOptions", ()=>contentLengthMiddlewareOptions);
parcelHelpers.export(exports, "getContentLengthPlugin", ()=>getContentLengthPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
    var _this = this;
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                var request, body, headers, length;
                var _a;
                return (0, _tslib.__generator)(this, function(_b) {
                    request = args.request;
                    if ((0, _protocolHttp.HttpRequest).isInstance(request)) {
                        body = request.body, headers = request.headers;
                        if (body && Object.keys(headers).map(function(str) {
                            return str.toLowerCase();
                        }).indexOf(CONTENT_LENGTH_HEADER) === -1) {
                            length = bodyLengthChecker(body);
                            if (length !== undefined) request.headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, request.headers), (_a = {}, _a[CONTENT_LENGTH_HEADER] = String(length), _a));
                        }
                    }
                    return [
                        2 /*return*/ ,
                        next((0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
                            request: request
                        }))
                    ];
                });
            });
        };
    };
}
var contentLengthMiddlewareOptions = {
    step: "build",
    tags: [
        "SET_CONTENT_LENGTH",
        "CONTENT_LENGTH"
    ],
    name: "contentLengthMiddleware",
    override: true
};
var getContentLengthPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
        }
    };
};

},{"tslib":"b3FUQ","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b3FUQ":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDojh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveHostHeaderConfig", ()=>resolveHostHeaderConfig);
parcelHelpers.export(exports, "hostHeaderMiddleware", ()=>hostHeaderMiddleware);
parcelHelpers.export(exports, "hostHeaderMiddlewareOptions", ()=>hostHeaderMiddlewareOptions);
parcelHelpers.export(exports, "getHostHeaderPlugin", ()=>getHostHeaderPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
function resolveHostHeaderConfig(input) {
    return input;
}
var hostHeaderMiddleware = function(options) {
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var request, _a, handlerProtocol;
                return (0, _tslib.__generator)(this, function(_b) {
                    if (!(0, _protocolHttp.HttpRequest).isInstance(args.request)) return [
                        2 /*return*/ ,
                        next(args)
                    ];
                    request = args.request;
                    _a = (options.requestHandler.metadata || {}).handlerProtocol, handlerProtocol = _a === void 0 ? "" : _a;
                    //For H2 request, remove 'host' header and use ':authority' header instead
                    //reference: https://nodejs.org/dist/latest-v13.x/docs/api/errors.html#ERR_HTTP2_INVALID_CONNECTION_HEADERS
                    if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
                        delete request.headers["host"];
                        request.headers[":authority"] = "";
                    //non-H2 request and 'host' header is not set, set the 'host' header to request's hostname.
                    } else if (!request.headers["host"]) request.headers["host"] = request.hostname;
                    return [
                        2 /*return*/ ,
                        next(args)
                    ];
                });
            });
        };
    };
};
var hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "HOST"
    ],
    override: true
};
var getHostHeaderPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
        }
    };
};

},{"tslib":"3d0he","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3d0he":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b6LDm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _loggerMiddleware = require("./loggerMiddleware");
parcelHelpers.exportAll(_loggerMiddleware, exports);

},{"./loggerMiddleware":"1pfff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1pfff":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loggerMiddleware", ()=>loggerMiddleware);
parcelHelpers.export(exports, "loggerMiddlewareOptions", ()=>loggerMiddlewareOptions);
parcelHelpers.export(exports, "getLoggerPlugin", ()=>getLoggerPlugin);
var _tslib = require("tslib");
var loggerMiddleware = function() {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var clientName, commandName, inputFilterSensitiveLog, logger, outputFilterSensitiveLog, response, _a, $metadata, outputWithoutMetadata;
                return (0, _tslib.__generator)(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            clientName = context.clientName, commandName = context.commandName, inputFilterSensitiveLog = context.inputFilterSensitiveLog, logger = context.logger, outputFilterSensitiveLog = context.outputFilterSensitiveLog;
                            return [
                                4 /*yield*/ ,
                                next(args)
                            ];
                        case 1:
                            response = _b.sent();
                            if (!logger) return [
                                2 /*return*/ ,
                                response
                            ];
                            if (typeof logger.info === "function") {
                                _a = response.output, $metadata = _a.$metadata, outputWithoutMetadata = (0, _tslib.__rest)(_a, [
                                    "$metadata"
                                ]);
                                logger.info({
                                    clientName: clientName,
                                    commandName: commandName,
                                    input: inputFilterSensitiveLog(args.input),
                                    output: outputFilterSensitiveLog(outputWithoutMetadata),
                                    metadata: $metadata
                                });
                            }
                            return [
                                2 /*return*/ ,
                                response
                            ];
                    }
                });
            });
        };
    };
};
var loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: [
        "LOGGER"
    ],
    step: "initialize",
    override: true
};
var getLoggerPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
        }
    };
};

},{"tslib":"cc3oQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cc3oQ":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7xrR2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _middleware = require("./middleware");
parcelHelpers.exportAll(_middleware, exports);

},{"./configurations":"iBrsu","./middleware":"4hxVN","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iBrsu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveAwsAuthConfig", ()=>resolveAwsAuthConfig);
var _tslib = require("tslib");
var _signatureV4 = require("@aws-sdk/signature-v4");
function resolveAwsAuthConfig(input) {
    var _this = this;
    var credentials = input.credentials || input.credentialDefaultProvider(input);
    var normalizedCreds = normalizeProvider(credentials);
    var _a = input.signingEscapePath, signingEscapePath = _a === void 0 ? true : _a, _b = input.systemClockOffset, systemClockOffset = _b === void 0 ? input.systemClockOffset || 0 : _b, sha256 = input.sha256;
    var signer;
    if (input.signer) //if signer is supplied by user, normalize it to a function returning a promise for signer.
    signer = normalizeProvider(input.signer);
    else //construct a provider inferring signing from region.
    signer = function() {
        return normalizeProvider(input.region)().then(function(region) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                input.regionInfoProvider(region)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                [
                                    _a.sent() || {},
                                    region
                                ]
                            ];
                    }
                });
            });
        }).then(function(_a) {
            var _b = (0, _tslib.__read)(_a, 2), regionInfo = _b[0], region = _b[1];
            var signingRegion = regionInfo.signingRegion, signingService = regionInfo.signingService;
            //update client's singing region and signing service config if they are resolved.
            //signing region resolving order: user supplied signingRegion -> endpoints.json inferred region -> client region
            input.signingRegion = input.signingRegion || signingRegion || region;
            //signing name resolving order:
            //user supplied signingName -> endpoints.json inferred (credential scope -> model arnNamespace) -> model service id
            input.signingName = input.signingName || signingService || input.serviceId;
            return new (0, _signatureV4.SignatureV4)({
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256: sha256,
                uriEscapePath: signingEscapePath
            });
        });
    };
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        systemClockOffset: systemClockOffset,
        signingEscapePath: signingEscapePath,
        credentials: normalizedCreds,
        signer: signer
    });
}
function normalizeProvider(input) {
    if (typeof input === "object") {
        var promisified_1 = Promise.resolve(input);
        return function() {
            return promisified_1;
        };
    }
    return input;
}

},{"tslib":"5IeWg","@aws-sdk/signature-v4":"1wfLZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5IeWg":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1wfLZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _credentialDerivation = require("./credentialDerivation");
parcelHelpers.exportAll(_credentialDerivation, exports);
var _signatureV4 = require("./SignatureV4");
parcelHelpers.exportAll(_signatureV4, exports);

},{"./credentialDerivation":"kcQd2","./SignatureV4":"gytoI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kcQd2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Create a string describing the scope of credentials used to sign a request.
 *
 * @param shortDate The current calendar date in the form YYYYMMDD.
 * @param region    The AWS region in which the service resides.
 * @param service   The service to which the signed request is being sent.
 */ parcelHelpers.export(exports, "createScope", ()=>createScope);
parcelHelpers.export(exports, "getSigningKey", ()=>getSigningKey);
/**
 * @internal
 */ parcelHelpers.export(exports, "clearCredentialCache", ()=>clearCredentialCache);
var _tslib = require("tslib");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _constants = require("./constants");
var signingKeyCache = {};
var cacheQueue = [];
function createScope(shortDate, region, service) {
    return shortDate + "/" + region + "/" + service + "/" + (0, _constants.KEY_TYPE_IDENTIFIER);
}
var getSigningKey = function(sha256Constructor, credentials, shortDate, region, service) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var credsHash, cacheKey, key, _a, _b, signable, e_1_1;
        var e_1, _c;
        return (0, _tslib.__generator)(this, function(_d) {
            switch(_d.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId)
                    ];
                case 1:
                    credsHash = _d.sent();
                    cacheKey = shortDate + ":" + region + ":" + service + ":" + (0, _utilHexEncoding.toHex)(credsHash) + ":" + credentials.sessionToken;
                    if (cacheKey in signingKeyCache) return [
                        2 /*return*/ ,
                        signingKeyCache[cacheKey]
                    ];
                    cacheQueue.push(cacheKey);
                    while(cacheQueue.length > (0, _constants.MAX_CACHE_SIZE))delete signingKeyCache[cacheQueue.shift()];
                    key = "AWS4" + credentials.secretAccessKey;
                    _d.label = 2;
                case 2:
                    _d.trys.push([
                        2,
                        7,
                        8,
                        9
                    ]);
                    _a = (0, _tslib.__values)([
                        shortDate,
                        region,
                        service,
                        (0, _constants.KEY_TYPE_IDENTIFIER)
                    ]), _b = _a.next();
                    _d.label = 3;
                case 3:
                    if (!!_b.done) return [
                        3 /*break*/ ,
                        6
                    ];
                    signable = _b.value;
                    return [
                        4 /*yield*/ ,
                        hmac(sha256Constructor, key, signable)
                    ];
                case 4:
                    key = _d.sent();
                    _d.label = 5;
                case 5:
                    _b = _a.next();
                    return [
                        3 /*break*/ ,
                        3
                    ];
                case 6:
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 7:
                    e_1_1 = _d.sent();
                    e_1 = {
                        error: e_1_1
                    };
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    try {
                        if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                    } finally{
                        if (e_1) throw e_1.error;
                    }
                    return [
                        7 /*endfinally*/ 
                    ];
                case 9:
                    return [
                        2 /*return*/ ,
                        signingKeyCache[cacheKey] = key
                    ];
            }
        });
    });
};
function clearCredentialCache() {
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach(function(cacheKey) {
        delete signingKeyCache[cacheKey];
    });
}
function hmac(ctor, secret, data) {
    var hash = new ctor(secret);
    hash.update(data);
    return hash.digest();
}

},{"tslib":"4oKW1","@aws-sdk/util-hex-encoding":"37zn6","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4oKW1":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"37zn6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Converts a hexadecimal encoded string to a Uint8Array of bytes.
 *
 * @param encoded The hexadecimal encoded string
 */ parcelHelpers.export(exports, "fromHex", ()=>fromHex);
/**
 * Converts a Uint8Array of binary data to a hexadecimal encoded string.
 *
 * @param bytes The binary data to encode
 */ parcelHelpers.export(exports, "toHex", ()=>toHex);
var SHORT_TO_HEX = {};
var HEX_TO_SHORT = {};
for(var i = 0; i < 256; i++){
    var encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) encodedByte = "0" + encodedByte;
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) throw new Error("Hex encoded strings must have an even number length");
    var out = new Uint8Array(encoded.length / 2);
    for(var i = 0; i < encoded.length; i += 2){
        var encodedByte = encoded.substr(i, 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) out[i / 2] = HEX_TO_SHORT[encodedByte];
        else throw new Error("Cannot decode unrecognized sequence " + encodedByte + " as hexadecimal");
    }
    return out;
}
function toHex(bytes) {
    var out = "";
    for(var i = 0; i < bytes.byteLength; i++)out += SHORT_TO_HEX[bytes[i]];
    return out;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lYFXA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ALGORITHM_QUERY_PARAM", ()=>ALGORITHM_QUERY_PARAM);
parcelHelpers.export(exports, "CREDENTIAL_QUERY_PARAM", ()=>CREDENTIAL_QUERY_PARAM);
parcelHelpers.export(exports, "AMZ_DATE_QUERY_PARAM", ()=>AMZ_DATE_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNED_HEADERS_QUERY_PARAM", ()=>SIGNED_HEADERS_QUERY_PARAM);
parcelHelpers.export(exports, "EXPIRES_QUERY_PARAM", ()=>EXPIRES_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNATURE_QUERY_PARAM", ()=>SIGNATURE_QUERY_PARAM);
parcelHelpers.export(exports, "TOKEN_QUERY_PARAM", ()=>TOKEN_QUERY_PARAM);
parcelHelpers.export(exports, "AUTH_HEADER", ()=>AUTH_HEADER);
parcelHelpers.export(exports, "AMZ_DATE_HEADER", ()=>AMZ_DATE_HEADER);
parcelHelpers.export(exports, "DATE_HEADER", ()=>DATE_HEADER);
parcelHelpers.export(exports, "GENERATED_HEADERS", ()=>GENERATED_HEADERS);
parcelHelpers.export(exports, "SIGNATURE_HEADER", ()=>SIGNATURE_HEADER);
parcelHelpers.export(exports, "SHA256_HEADER", ()=>SHA256_HEADER);
parcelHelpers.export(exports, "TOKEN_HEADER", ()=>TOKEN_HEADER);
parcelHelpers.export(exports, "HOST_HEADER", ()=>HOST_HEADER);
parcelHelpers.export(exports, "ALWAYS_UNSIGNABLE_HEADERS", ()=>ALWAYS_UNSIGNABLE_HEADERS);
parcelHelpers.export(exports, "PROXY_HEADER_PATTERN", ()=>PROXY_HEADER_PATTERN);
parcelHelpers.export(exports, "SEC_HEADER_PATTERN", ()=>SEC_HEADER_PATTERN);
parcelHelpers.export(exports, "UNSIGNABLE_PATTERNS", ()=>UNSIGNABLE_PATTERNS);
parcelHelpers.export(exports, "ALGORITHM_IDENTIFIER", ()=>ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "EVENT_ALGORITHM_IDENTIFIER", ()=>EVENT_ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "UNSIGNED_PAYLOAD", ()=>UNSIGNED_PAYLOAD);
parcelHelpers.export(exports, "MAX_CACHE_SIZE", ()=>MAX_CACHE_SIZE);
parcelHelpers.export(exports, "KEY_TYPE_IDENTIFIER", ()=>KEY_TYPE_IDENTIFIER);
parcelHelpers.export(exports, "MAX_PRESIGNED_TTL", ()=>MAX_PRESIGNED_TTL);
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
var TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
var AUTH_HEADER = "authorization";
var AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
var DATE_HEADER = "date";
var GENERATED_HEADERS = [
    AUTH_HEADER,
    AMZ_DATE_HEADER,
    DATE_HEADER
];
var SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
var SHA256_HEADER = "x-amz-content-sha256";
var TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
var HOST_HEADER = "host";
var ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
};
var PROXY_HEADER_PATTERN = /^proxy-/;
var SEC_HEADER_PATTERN = /^sec-/;
var UNSIGNABLE_PATTERNS = [
    /^proxy-/i,
    /^sec-/i
];
var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
var EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
var MAX_CACHE_SIZE = 50;
var KEY_TYPE_IDENTIFIER = "aws4_request";
var MAX_PRESIGNED_TTL = 604800;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gytoI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignatureV4", ()=>SignatureV4);
var _tslib = require("tslib");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _constants = require("./constants");
var _credentialDerivation = require("./credentialDerivation");
var _getCanonicalHeaders = require("./getCanonicalHeaders");
var _getCanonicalQuery = require("./getCanonicalQuery");
var _getPayloadHash = require("./getPayloadHash");
var _hasHeader = require("./hasHeader");
var _moveHeadersToQuery = require("./moveHeadersToQuery");
var _prepareRequest = require("./prepareRequest");
var _utilDate = require("./utilDate");
var SignatureV4 = /** @class */ function() {
    function SignatureV4(_a) {
        var applyChecksum = _a.applyChecksum, credentials = _a.credentials, region = _a.region, service = _a.service, sha256 = _a.sha256, _b = _a.uriEscapePath, uriEscapePath = _b === void 0 ? true : _b;
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        // default to true if applyChecksum isn't set
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = normalizeRegionProvider(region);
        this.credentialProvider = normalizeCredentialsProvider(credentials);
    }
    SignatureV4.prototype.presign = function(originalRequest, options) {
        if (options === void 0) options = {};
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var _a, signingDate, _b, expiresIn, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService, credentials, region, _c, _d, longDate, shortDate, scope, request, canonicalHeaders, _e, _f, _g, _h, _j, _k;
            return (0, _tslib.__generator)(this, function(_l) {
                switch(_l.label){
                    case 0:
                        _a = options.signingDate, signingDate = _a === void 0 ? new Date() : _a, _b = options.expiresIn, expiresIn = _b === void 0 ? 3600 : _b, unsignableHeaders = options.unsignableHeaders, unhoistableHeaders = options.unhoistableHeaders, signableHeaders = options.signableHeaders, signingRegion = options.signingRegion, signingService = options.signingService;
                        return [
                            4 /*yield*/ ,
                            this.credentialProvider()
                        ];
                    case 1:
                        credentials = _l.sent();
                        if (!(signingRegion !== null && signingRegion !== void 0)) return [
                            3 /*break*/ ,
                            2
                        ];
                        _c = signingRegion;
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 2:
                        return [
                            4 /*yield*/ ,
                            this.regionProvider()
                        ];
                    case 3:
                        _c = _l.sent();
                        _l.label = 4;
                    case 4:
                        region = _c;
                        _d = formatDate(signingDate), longDate = _d.longDate, shortDate = _d.shortDate;
                        if (expiresIn > (0, _constants.MAX_PRESIGNED_TTL)) return [
                            2 /*return*/ ,
                            Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")
                        ];
                        scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
                        request = (0, _moveHeadersToQuery.moveHeadersToQuery)((0, _prepareRequest.prepareRequest)(originalRequest), {
                            unhoistableHeaders: unhoistableHeaders
                        });
                        if (credentials.sessionToken) request.query[0, _constants.TOKEN_QUERY_PARAM] = credentials.sessionToken;
                        request.query[0, _constants.ALGORITHM_QUERY_PARAM] = (0, _constants.ALGORITHM_IDENTIFIER);
                        request.query[0, _constants.CREDENTIAL_QUERY_PARAM] = credentials.accessKeyId + "/" + scope;
                        request.query[0, _constants.AMZ_DATE_QUERY_PARAM] = longDate;
                        request.query[0, _constants.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
                        canonicalHeaders = (0, _getCanonicalHeaders.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
                        request.query[0, _constants.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
                        _e = request.query;
                        _f = (0, _constants.SIGNATURE_QUERY_PARAM);
                        _g = this.getSignature;
                        _h = [
                            longDate,
                            scope,
                            this.getSigningKey(credentials, region, shortDate, signingService)
                        ];
                        _j = this.createCanonicalRequest;
                        _k = [
                            request,
                            canonicalHeaders
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _getPayloadHash.getPayloadHash)(originalRequest, this.sha256)
                        ];
                    case 5:
                        return [
                            4 /*yield*/ ,
                            _g.apply(this, _h.concat([
                                _j.apply(this, _k.concat([
                                    _l.sent()
                                ]))
                            ]))
                        ];
                    case 6:
                        _e[_f] = _l.sent();
                        return [
                            2 /*return*/ ,
                            request
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.sign = function(toSign, options) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            return (0, _tslib.__generator)(this, function(_a) {
                if (typeof toSign === "string") return [
                    2 /*return*/ ,
                    this.signString(toSign, options)
                ];
                else if (toSign.headers && toSign.payload) return [
                    2 /*return*/ ,
                    this.signEvent(toSign, options)
                ];
                else return [
                    2 /*return*/ ,
                    this.signRequest(toSign, options)
                ];
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    SignatureV4.prototype.signEvent = function(_a, _b) {
        var headers = _a.headers, payload = _a.payload;
        var _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, priorSignature = _b.priorSignature, signingRegion = _b.signingRegion, signingService = _b.signingService;
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var region, _d, _e, shortDate, longDate, scope, hashedPayload, hash, hashedHeaders, _f, stringToSign;
            return (0, _tslib.__generator)(this, function(_g) {
                switch(_g.label){
                    case 0:
                        if (!(signingRegion !== null && signingRegion !== void 0)) return [
                            3 /*break*/ ,
                            1
                        ];
                        _d = signingRegion;
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 1:
                        return [
                            4 /*yield*/ ,
                            this.regionProvider()
                        ];
                    case 2:
                        _d = _g.sent();
                        _g.label = 3;
                    case 3:
                        region = _d;
                        _e = formatDate(signingDate), shortDate = _e.shortDate, longDate = _e.longDate;
                        scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
                        return [
                            4 /*yield*/ ,
                            (0, _getPayloadHash.getPayloadHash)({
                                headers: {},
                                body: payload
                            }, this.sha256)
                        ];
                    case 4:
                        hashedPayload = _g.sent();
                        hash = new this.sha256();
                        hash.update(headers);
                        _f = (0, _utilHexEncoding.toHex);
                        return [
                            4 /*yield*/ ,
                            hash.digest()
                        ];
                    case 5:
                        hashedHeaders = _f.apply(void 0, [
                            _g.sent()
                        ]);
                        stringToSign = [
                            (0, _constants.EVENT_ALGORITHM_IDENTIFIER),
                            longDate,
                            scope,
                            priorSignature,
                            hashedHeaders,
                            hashedPayload
                        ].join("\n");
                        return [
                            2 /*return*/ ,
                            this.signString(stringToSign, {
                                signingDate: signingDate,
                                signingRegion: region,
                                signingService: signingService
                            })
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.signString = function(stringToSign, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signingRegion = _b.signingRegion, signingService = _b.signingService;
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var credentials, region, _d, shortDate, hash, _e, _f, _g;
            return (0, _tslib.__generator)(this, function(_h) {
                switch(_h.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.credentialProvider()
                        ];
                    case 1:
                        credentials = _h.sent();
                        if (!(signingRegion !== null && signingRegion !== void 0)) return [
                            3 /*break*/ ,
                            2
                        ];
                        _d = signingRegion;
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 2:
                        return [
                            4 /*yield*/ ,
                            this.regionProvider()
                        ];
                    case 3:
                        _d = _h.sent();
                        _h.label = 4;
                    case 4:
                        region = _d;
                        shortDate = formatDate(signingDate).shortDate;
                        _f = (_e = this.sha256).bind;
                        return [
                            4 /*yield*/ ,
                            this.getSigningKey(credentials, region, shortDate, signingService)
                        ];
                    case 5:
                        hash = new (_f.apply(_e, [
                            void 0,
                            _h.sent()
                        ]))();
                        hash.update(stringToSign);
                        _g = (0, _utilHexEncoding.toHex);
                        return [
                            4 /*yield*/ ,
                            hash.digest()
                        ];
                    case 6:
                        return [
                            2 /*return*/ ,
                            _g.apply(void 0, [
                                _h.sent()
                            ])
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.signRequest = function(requestToSign, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.signingDate, signingDate = _c === void 0 ? new Date() : _c, signableHeaders = _b.signableHeaders, unsignableHeaders = _b.unsignableHeaders, signingRegion = _b.signingRegion, signingService = _b.signingService;
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var credentials, region, _d, request, _e, longDate, shortDate, scope, payloadHash, canonicalHeaders, signature;
            return (0, _tslib.__generator)(this, function(_f) {
                switch(_f.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.credentialProvider()
                        ];
                    case 1:
                        credentials = _f.sent();
                        if (!(signingRegion !== null && signingRegion !== void 0)) return [
                            3 /*break*/ ,
                            2
                        ];
                        _d = signingRegion;
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 2:
                        return [
                            4 /*yield*/ ,
                            this.regionProvider()
                        ];
                    case 3:
                        _d = _f.sent();
                        _f.label = 4;
                    case 4:
                        region = _d;
                        request = (0, _prepareRequest.prepareRequest)(requestToSign);
                        _e = formatDate(signingDate), longDate = _e.longDate, shortDate = _e.shortDate;
                        scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
                        request.headers[0, _constants.AMZ_DATE_HEADER] = longDate;
                        if (credentials.sessionToken) request.headers[0, _constants.TOKEN_HEADER] = credentials.sessionToken;
                        return [
                            4 /*yield*/ ,
                            (0, _getPayloadHash.getPayloadHash)(request, this.sha256)
                        ];
                    case 5:
                        payloadHash = _f.sent();
                        if (!(0, _hasHeader.hasHeader)((0, _constants.SHA256_HEADER), request.headers) && this.applyChecksum) request.headers[0, _constants.SHA256_HEADER] = payloadHash;
                        canonicalHeaders = (0, _getCanonicalHeaders.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
                        return [
                            4 /*yield*/ ,
                            this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash))
                        ];
                    case 6:
                        signature = _f.sent();
                        request.headers[0, _constants.AUTH_HEADER] = (0, _constants.ALGORITHM_IDENTIFIER) + " " + ("Credential=" + credentials.accessKeyId + "/" + scope + ", ") + ("SignedHeaders=" + getCanonicalHeaderList(canonicalHeaders) + ", ") + ("Signature=" + signature);
                        return [
                            2 /*return*/ ,
                            request
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.createCanonicalRequest = function(request, canonicalHeaders, payloadHash) {
        var sortedHeaders = Object.keys(canonicalHeaders).sort();
        return request.method + "\n" + this.getCanonicalPath(request) + "\n" + (0, _getCanonicalQuery.getCanonicalQuery)(request) + "\n" + sortedHeaders.map(function(name) {
            return name + ":" + canonicalHeaders[name];
        }).join("\n") + "\n\n" + sortedHeaders.join(";") + "\n" + payloadHash;
    };
    SignatureV4.prototype.createStringToSign = function(longDate, credentialScope, canonicalRequest) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var hash, hashedRequest;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        hash = new this.sha256();
                        hash.update(canonicalRequest);
                        return [
                            4 /*yield*/ ,
                            hash.digest()
                        ];
                    case 1:
                        hashedRequest = _a.sent();
                        return [
                            2 /*return*/ ,
                            (0, _constants.ALGORITHM_IDENTIFIER) + "\n" + longDate + "\n" + credentialScope + "\n" + (0, _utilHexEncoding.toHex)(hashedRequest)
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.getCanonicalPath = function(_a) {
        var path = _a.path;
        if (this.uriEscapePath) {
            var doubleEncoded = encodeURIComponent(path.replace(/^\//, ""));
            return "/" + doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
    };
    SignatureV4.prototype.getSignature = function(longDate, credentialScope, keyPromise, canonicalRequest) {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var stringToSign, hash, _a, _b, _c;
            return (0, _tslib.__generator)(this, function(_d) {
                switch(_d.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.createStringToSign(longDate, credentialScope, canonicalRequest)
                        ];
                    case 1:
                        stringToSign = _d.sent();
                        _b = (_a = this.sha256).bind;
                        return [
                            4 /*yield*/ ,
                            keyPromise
                        ];
                    case 2:
                        hash = new (_b.apply(_a, [
                            void 0,
                            _d.sent()
                        ]))();
                        hash.update(stringToSign);
                        _c = (0, _utilHexEncoding.toHex);
                        return [
                            4 /*yield*/ ,
                            hash.digest()
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            _c.apply(void 0, [
                                _d.sent()
                            ])
                        ];
                }
            });
        });
    };
    SignatureV4.prototype.getSigningKey = function(credentials, region, shortDate, service) {
        return (0, _credentialDerivation.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
    };
    return SignatureV4;
}();
var formatDate = function(now) {
    var longDate = (0, _utilDate.iso8601)(now).replace(/[\-:]/g, "");
    return {
        longDate: longDate,
        shortDate: longDate.substr(0, 8)
    };
};
var getCanonicalHeaderList = function(headers) {
    return Object.keys(headers).sort().join(";");
};
var normalizeRegionProvider = function(region) {
    if (typeof region === "string") {
        var promisified_1 = Promise.resolve(region);
        return function() {
            return promisified_1;
        };
    } else return region;
};
var normalizeCredentialsProvider = function(credentials) {
    if (typeof credentials === "object") {
        var promisified_2 = Promise.resolve(credentials);
        return function() {
            return promisified_2;
        };
    } else return credentials;
};

},{"tslib":"4oKW1","@aws-sdk/util-hex-encoding":"37zn6","./constants":"lYFXA","./credentialDerivation":"kcQd2","./getCanonicalHeaders":"dF1i0","./getCanonicalQuery":"fQrSo","./getPayloadHash":"2y4Gv","./hasHeader":"cm35Y","./moveHeadersToQuery":"8im4t","./prepareRequest":"6nKci","./utilDate":"a0UVL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dF1i0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "getCanonicalHeaders", ()=>getCanonicalHeaders);
var _tslib = require("tslib");
var _constants = require("./constants");
function getCanonicalHeaders(_a, unsignableHeaders, signableHeaders) {
    var e_1, _b;
    var headers = _a.headers;
    var canonical = {};
    try {
        for(var _c = (0, _tslib.__values)(Object.keys(headers).sort()), _d = _c.next(); !_d.done; _d = _c.next()){
            var headerName = _d.value;
            var canonicalHeaderName = headerName.toLowerCase();
            if (canonicalHeaderName in (0, _constants.ALWAYS_UNSIGNABLE_HEADERS) || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || (0, _constants.PROXY_HEADER_PATTERN).test(canonicalHeaderName) || (0, _constants.SEC_HEADER_PATTERN).test(canonicalHeaderName)) {
                if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) continue;
            }
            canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return canonical;
}

},{"tslib":"4oKW1","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fQrSo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "getCanonicalQuery", ()=>getCanonicalQuery);
var _tslib = require("tslib");
var _utilUriEscape = require("@aws-sdk/util-uri-escape");
var _constants = require("./constants");
function getCanonicalQuery(_a) {
    var e_1, _b;
    var _c = _a.query, query = _c === void 0 ? {} : _c;
    var keys = [];
    var serialized = {};
    var _loop_1 = function(key) {
        if (key.toLowerCase() === (0, _constants.SIGNATURE_HEADER)) return "continue";
        keys.push(key);
        var value = query[key];
        if (typeof value === "string") serialized[key] = (0, _utilUriEscape.escapeUri)(key) + "=" + (0, _utilUriEscape.escapeUri)(value);
        else if (Array.isArray(value)) serialized[key] = value.slice(0).sort().reduce(function(encoded, value) {
            return encoded.concat([
                (0, _utilUriEscape.escapeUri)(key) + "=" + (0, _utilUriEscape.escapeUri)(value)
            ]);
        }, []).join("&");
    };
    try {
        for(var _d = (0, _tslib.__values)(Object.keys(query).sort()), _e = _d.next(); !_e.done; _e = _d.next()){
            var key = _e.value;
            _loop_1(key);
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_e && !_e.done && (_b = _d.return)) _b.call(_d);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return keys.map(function(key) {
        return serialized[key];
    }).filter(function(serialized) {
        return serialized;
    }) // omit any falsy values
    .join("&");
}

},{"tslib":"4oKW1","@aws-sdk/util-uri-escape":"bdO3o","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2y4Gv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "getPayloadHash", ()=>getPayloadHash);
var _tslib = require("tslib");
var _isArrayBuffer = require("@aws-sdk/is-array-buffer");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _constants = require("./constants");
function getPayloadHash(_a, hashConstructor) {
    var headers = _a.headers, body = _a.body;
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var _b, _c, headerName, hashCtor, _d;
        var e_1, _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    try {
                        for(_b = (0, _tslib.__values)(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()){
                            headerName = _c.value;
                            if (headerName.toLowerCase() === (0, _constants.SHA256_HEADER)) return [
                                2 /*return*/ ,
                                headers[headerName]
                            ];
                        }
                    } catch (e_1_1) {
                        e_1 = {
                            error: e_1_1
                        };
                    } finally{
                        try {
                            if (_c && !_c.done && (_e = _b.return)) _e.call(_b);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                    }
                    if (!(body == undefined)) return [
                        3 /*break*/ ,
                        1
                    ];
                    return [
                        2 /*return*/ ,
                        "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
                    ];
                case 1:
                    if (!(typeof body === "string" || ArrayBuffer.isView(body) || (0, _isArrayBuffer.isArrayBuffer)(body))) return [
                        3 /*break*/ ,
                        3
                    ];
                    hashCtor = new hashConstructor();
                    hashCtor.update(body);
                    _d = (0, _utilHexEncoding.toHex);
                    return [
                        4 /*yield*/ ,
                        hashCtor.digest()
                    ];
                case 2:
                    return [
                        2 /*return*/ ,
                        _d.apply(void 0, [
                            _f.sent()
                        ])
                    ];
                case 3:
                    // As any defined body that is not a string or binary data is a stream, this
                    // body is unsignable. Attempt to send the request with an unsigned payload,
                    // which may or may not be accepted by the service.
                    return [
                        2 /*return*/ ,
                        (0, _constants.UNSIGNED_PAYLOAD)
                    ];
            }
        });
    });
}

},{"tslib":"4oKW1","@aws-sdk/is-array-buffer":"66qD0","@aws-sdk/util-hex-encoding":"37zn6","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"66qD0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isArrayBuffer", ()=>isArrayBuffer);
var isArrayBuffer = function(arg) {
    return typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cm35Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasHeader", ()=>hasHeader);
var _tslib = require("tslib");
function hasHeader(soughtHeader, headers) {
    var e_1, _a;
    soughtHeader = soughtHeader.toLowerCase();
    try {
        for(var _b = (0, _tslib.__values)(Object.keys(headers)), _c = _b.next(); !_c.done; _c = _b.next()){
            var headerName = _c.value;
            if (soughtHeader === headerName.toLowerCase()) return true;
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return false;
}

},{"tslib":"4oKW1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8im4t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "moveHeadersToQuery", ()=>moveHeadersToQuery);
var _tslib = require("tslib");
var _cloneRequest = require("./cloneRequest");
function moveHeadersToQuery(request, options) {
    var e_1, _a;
    var _b;
    if (options === void 0) options = {};
    var _c = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest.cloneRequest)(request), headers = _c.headers, _d = _c.query, query = _d === void 0 ? {} : _d;
    try {
        for(var _e = (0, _tslib.__values)(Object.keys(headers)), _f = _e.next(); !_f.done; _f = _e.next()){
            var name = _f.value;
            var lname = name.toLowerCase();
            if (lname.substr(0, 6) === "x-amz-" && !((_b = options.unhoistableHeaders) === null || _b === void 0 ? void 0 : _b.has(lname))) {
                query[name] = headers[name];
                delete headers[name];
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, request), {
        headers: headers,
        query: query
    });
}

},{"tslib":"4oKW1","./cloneRequest":"cZ3v1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cZ3v1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "cloneRequest", ()=>cloneRequest);
var _tslib = require("tslib");
function cloneRequest(_a) {
    var headers = _a.headers, query = _a.query, rest = (0, _tslib.__rest)(_a, [
        "headers",
        "query"
    ]);
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, rest), {
        headers: (0, _tslib.__assign)({}, headers),
        query: query ? cloneQuery(query) : undefined
    });
}
function cloneQuery(query) {
    return Object.keys(query).reduce(function(carry, paramName) {
        var _a;
        var param = query[paramName];
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, carry), (_a = {}, _a[paramName] = Array.isArray(param) ? (0, _tslib.__spread)(param) : param, _a));
    }, {});
}

},{"tslib":"4oKW1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6nKci":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "prepareRequest", ()=>prepareRequest);
var _tslib = require("tslib");
var _cloneRequest = require("./cloneRequest");
var _constants = require("./constants");
function prepareRequest(request) {
    var e_1, _a;
    // Create a clone of the request object that does not clone the body
    request = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest.cloneRequest)(request);
    try {
        for(var _b = (0, _tslib.__values)(Object.keys(request.headers)), _c = _b.next(); !_c.done; _c = _b.next()){
            var headerName = _c.value;
            if ((0, _constants.GENERATED_HEADERS).indexOf(headerName.toLowerCase()) > -1) delete request.headers[headerName];
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    return request;
}

},{"tslib":"4oKW1","./cloneRequest":"cZ3v1","./constants":"lYFXA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0UVL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iso8601", ()=>iso8601);
parcelHelpers.export(exports, "toDate", ()=>toDate);
function iso8601(time) {
    return toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
}
function toDate(time) {
    if (typeof time === "number") return new Date(time * 1000);
    if (typeof time === "string") {
        if (Number(time)) return new Date(Number(time) * 1000);
        return new Date(time);
    }
    return time;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4hxVN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "awsAuthMiddleware", ()=>awsAuthMiddleware);
parcelHelpers.export(exports, "awsAuthMiddlewareOptions", ()=>awsAuthMiddlewareOptions);
parcelHelpers.export(exports, "getAwsAuthPlugin", ()=>getAwsAuthPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var isClockSkewed = function(newServerTime, systemClockOffset) {
    return Math.abs(getSkewCorrectedDate(systemClockOffset).getTime() - newServerTime) >= 300000;
};
var getSkewCorrectedDate = function(systemClockOffset) {
    return new Date(Date.now() + systemClockOffset);
};
function awsAuthMiddleware(options) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
                var signer, _a, output, _b, _c, headers, dateHeader, serverTime;
                var _d;
                return (0, _tslib.__generator)(this, function(_e) {
                    switch(_e.label){
                        case 0:
                            if (!(0, _protocolHttp.HttpRequest).isInstance(args.request)) return [
                                2 /*return*/ ,
                                next(args)
                            ];
                            if (!(typeof options.signer === "function")) return [
                                3 /*break*/ ,
                                2
                            ];
                            return [
                                4 /*yield*/ ,
                                options.signer()
                            ];
                        case 1:
                            _a = _e.sent();
                            return [
                                3 /*break*/ ,
                                3
                            ];
                        case 2:
                            _a = options.signer;
                            _e.label = 3;
                        case 3:
                            signer = _a;
                            _b = next;
                            _c = [
                                (0, _tslib.__assign)({}, args)
                            ];
                            _d = {};
                            return [
                                4 /*yield*/ ,
                                signer.sign(args.request, {
                                    signingDate: new Date(Date.now() + options.systemClockOffset),
                                    signingRegion: context["signing_region"],
                                    signingService: context["signing_service"]
                                })
                            ];
                        case 4:
                            return [
                                4 /*yield*/ ,
                                _b.apply(void 0, [
                                    (0, _tslib.__assign).apply(void 0, _c.concat([
                                        (_d.request = _e.sent(), _d)
                                    ]))
                                ])
                            ];
                        case 5:
                            output = _e.sent();
                            headers = output.response.headers;
                            dateHeader = headers && (headers.date || headers.Date);
                            if (dateHeader) {
                                serverTime = Date.parse(dateHeader);
                                if (isClockSkewed(serverTime, options.systemClockOffset)) options.systemClockOffset = serverTime - Date.now();
                            }
                            return [
                                2 /*return*/ ,
                                output
                            ];
                    }
                });
            });
        };
    };
}
var awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: [
        "SIGNATURE",
        "AWSAUTH"
    ],
    relation: "after",
    toMiddleware: "retryMiddleware",
    override: true
};
var getAwsAuthPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
        }
    };
};

},{"tslib":"5IeWg","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Khhc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _userAgentMiddleware = require("./user-agent-middleware");
parcelHelpers.exportAll(_userAgentMiddleware, exports);

},{"./configurations":"eisA8","./user-agent-middleware":"6BGgE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eisA8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveUserAgentConfig", ()=>resolveUserAgentConfig);
var _tslib = require("tslib");
function resolveUserAgentConfig(input) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        customUserAgent: typeof input.customUserAgent === "string" ? [
            [
                input.customUserAgent
            ]
        ] : input.customUserAgent
    });
}

},{"tslib":"fs9RH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fs9RH":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6BGgE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "userAgentMiddleware", ()=>userAgentMiddleware);
parcelHelpers.export(exports, "getUserAgentMiddlewareOptions", ()=>getUserAgentMiddlewareOptions);
parcelHelpers.export(exports, "getUserAgentPlugin", ()=>getUserAgentPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _constants = require("./constants");
var userAgentMiddleware = function(options) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var request, headers, userAgent, defaultUserAgent, customUserAgent, normalUAValue;
                var _a, _b;
                return (0, _tslib.__generator)(this, function(_c) {
                    switch(_c.label){
                        case 0:
                            request = args.request;
                            if (!(0, _protocolHttp.HttpRequest).isInstance(request)) return [
                                2 /*return*/ ,
                                next(args)
                            ];
                            headers = request.headers;
                            userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
                            return [
                                4 /*yield*/ ,
                                options.defaultUserAgentProvider()
                            ];
                        case 1:
                            defaultUserAgent = _c.sent().map(escapeUserAgent);
                            customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
                            // Set value to AWS-specific user agent header
                            headers[0, _constants.X_AMZ_USER_AGENT] = (0, _tslib.__spread)(defaultUserAgent, userAgent, customUserAgent).join((0, _constants.SPACE));
                            normalUAValue = (0, _tslib.__spread)(defaultUserAgent.filter(function(section) {
                                return section.startsWith("aws-sdk-");
                            }), customUserAgent).join((0, _constants.SPACE));
                            if (options.runtime !== "browser" && normalUAValue) headers[0, _constants.USER_AGENT] = headers[0, _constants.USER_AGENT] ? headers[0, _constants.USER_AGENT] + " " + normalUAValue : normalUAValue;
                            return [
                                2 /*return*/ ,
                                next((0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
                                    request: request
                                }))
                            ];
                    }
                });
            });
        };
    };
};
/**
 * Escape the each pair according to https://tools.ietf.org/html/rfc5234 and join the pair with pattern `name/version`.
 * User agent name may include prefix like `md/`, `api/`, `os/` etc., we should not escape the `/` after the prefix.
 * @private
 */ var escapeUserAgent = function(_a) {
    var _b = (0, _tslib.__read)(_a, 2), name = _b[0], version = _b[1];
    var prefixSeparatorIndex = name.indexOf("/");
    var prefix = name.substring(0, prefixSeparatorIndex); // If no prefix, prefix is just ""
    var uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") uaName = uaName.toLowerCase();
    return [
        prefix,
        uaName,
        version
    ].filter(function(item) {
        return item && item.length > 0;
    }).map(function(item) {
        return item === null || item === void 0 ? void 0 : item.replace((0, _constants.UA_ESCAPE_REGEX), "_");
    }).join("/");
};
var getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "SET_USER_AGENT",
        "USER_AGENT"
    ],
    override: true
};
var getUserAgentPlugin = function(config) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
        }
    };
};

},{"tslib":"fs9RH","@aws-sdk/protocol-http":"dbzKK","./constants":"4uvb6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4uvb6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "USER_AGENT", ()=>USER_AGENT);
parcelHelpers.export(exports, "X_AMZ_USER_AGENT", ()=>X_AMZ_USER_AGENT);
parcelHelpers.export(exports, "SPACE", ()=>SPACE);
parcelHelpers.export(exports, "UA_ESCAPE_REGEX", ()=>UA_ESCAPE_REGEX);
var USER_AGENT = "user-agent";
var X_AMZ_USER_AGENT = "x-amz-user-agent";
var SPACE = " ";
var UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kA4IO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _client = require("./client");
parcelHelpers.exportAll(_client, exports);
var _command = require("./command");
parcelHelpers.exportAll(_command, exports);
var _documentType = require("./document-type");
parcelHelpers.exportAll(_documentType, exports);
var _exception = require("./exception");
parcelHelpers.exportAll(_exception, exports);
var _extendedEncodeUriComponent = require("./extended-encode-uri-component");
parcelHelpers.exportAll(_extendedEncodeUriComponent, exports);
var _getArrayIfSingleItem = require("./get-array-if-single-item");
parcelHelpers.exportAll(_getArrayIfSingleItem, exports);
var _getValueFromTextNode = require("./get-value-from-text-node");
parcelHelpers.exportAll(_getValueFromTextNode, exports);
var _lazyJson = require("./lazy-json");
parcelHelpers.exportAll(_lazyJson, exports);
var _dateUtils = require("./date-utils");
parcelHelpers.exportAll(_dateUtils, exports);
var _splitEvery = require("./split-every");
parcelHelpers.exportAll(_splitEvery, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _retryableTrait = require("./retryable-trait");
parcelHelpers.exportAll(_retryableTrait, exports);
var _sdkError = require("./sdk-error");
parcelHelpers.exportAll(_sdkError, exports);

},{"./client":"hYTHc","./command":"6AmgY","./document-type":"dmYK8","./exception":"lfzpT","./extended-encode-uri-component":"82TgW","./get-array-if-single-item":"abGYw","./get-value-from-text-node":"2cDAX","./lazy-json":"kHCxp","./date-utils":"h0Yds","./split-every":"4qr44","./constants":"82I4K","./retryable-trait":"hxkUR","./sdk-error":"gO6h5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hYTHc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Client", ()=>Client);
var _middlewareStack = require("@aws-sdk/middleware-stack");
var Client = /** @class */ function() {
    function Client(config) {
        this.middlewareStack = (0, _middlewareStack.constructStack)();
        this.config = config;
    }
    Client.prototype.send = function(command, optionsOrCb, cb) {
        var options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
        var callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        var handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) handler(command).then(function(result) {
            return callback(null, result.output);
        }, function(err) {
            return callback(err);
        }).catch(// prevent any errors thrown in the callback from triggering an
        // unhandled promise rejection
        function() {});
        else return handler(command).then(function(result) {
            return result.output;
        });
    };
    Client.prototype.destroy = function() {
        if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();
    };
    return Client;
}();

},{"@aws-sdk/middleware-stack":"aYVqx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aYVqx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _middlewareStack = require("./MiddlewareStack");
parcelHelpers.exportAll(_middlewareStack, exports);

},{"./MiddlewareStack":"cvQvj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cvQvj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "constructStack", ()=>constructStack);
var _tslib = require("tslib");
var constructStack = function() {
    var absoluteEntries = [];
    var relativeEntries = [];
    var entriesNameSet = new Set();
    var sort = function(entries) {
        return entries.sort(function(a, b) {
            return stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"];
        });
    };
    var removeByName = function(toRemove) {
        var isRemoved = false;
        var filterCb = function(entry) {
            if (entry.name && entry.name === toRemove) {
                isRemoved = true;
                entriesNameSet.delete(toRemove);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    var removeByReference = function(toRemove) {
        var isRemoved = false;
        var filterCb = function(entry) {
            if (entry.middleware === toRemove) {
                isRemoved = true;
                if (entry.name) entriesNameSet.delete(entry.name);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    var cloneTo = function(toStack) {
        absoluteEntries.forEach(function(entry) {
            //@ts-ignore
            toStack.add(entry.middleware, (0, _tslib.__assign)({}, entry));
        });
        relativeEntries.forEach(function(entry) {
            //@ts-ignore
            toStack.addRelativeTo(entry.middleware, (0, _tslib.__assign)({}, entry));
        });
        return toStack;
    };
    var expandRelativeMiddlewareList = function(from) {
        var expandedMiddlewareList = [];
        from.before.forEach(function(entry) {
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push.apply(expandedMiddlewareList, (0, _tslib.__spread)(expandRelativeMiddlewareList(entry)));
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach(function(entry) {
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push.apply(expandedMiddlewareList, (0, _tslib.__spread)(expandRelativeMiddlewareList(entry)));
        });
        return expandedMiddlewareList;
    };
    /**
     * Get a final list of middleware in the order of being executed in the resolved handler.
     */ var getMiddlewareList = function() {
        var normalizedAbsoluteEntries = [];
        var normalizedRelativeEntries = [];
        var normalizedEntriesNameMap = {};
        absoluteEntries.forEach(function(entry) {
            var normalizedEntry = (0, _tslib.__assign)((0, _tslib.__assign)({}, entry), {
                before: [],
                after: []
            });
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach(function(entry) {
            var normalizedEntry = (0, _tslib.__assign)((0, _tslib.__assign)({}, entry), {
                before: [],
                after: []
            });
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach(function(entry) {
            if (entry.toMiddleware) {
                var toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                if (toMiddleware === undefined) throw new Error(entry.toMiddleware + " is not found when adding " + (entry.name || "anonymous") + " middleware " + entry.relation + " " + entry.toMiddleware);
                if (entry.relation === "after") toMiddleware.after.push(entry);
                if (entry.relation === "before") toMiddleware.before.push(entry);
            }
        });
        var mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce(function(wholeList, expendedMiddlewareList) {
            // TODO: Replace it with Array.flat();
            wholeList.push.apply(wholeList, (0, _tslib.__spread)(expendedMiddlewareList));
            return wholeList;
        }, []);
        return mainChain.map(function(entry) {
            return entry.middleware;
        });
    };
    var stack = {
        add: function(middleware, options) {
            if (options === void 0) options = {};
            var name = options.name, override = options.override;
            var entry = (0, _tslib.__assign)({
                step: "initialize",
                priority: "normal",
                middleware: middleware
            }, options);
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error("Duplicate middleware name '" + name + "'");
                    var toOverrideIndex = absoluteEntries.findIndex(function(entry) {
                        return entry.name === name;
                    });
                    var toOverride = absoluteEntries[toOverrideIndex];
                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) throw new Error('"' + name + '" middleware with ' + toOverride.priority + " priority in " + toOverride.step + " step cannot be " + ("overridden by same-name middleware with " + entry.priority + " priority in " + entry.step + " step."));
                    absoluteEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            absoluteEntries.push(entry);
        },
        addRelativeTo: function(middleware, options) {
            var name = options.name, override = options.override;
            var entry = (0, _tslib.__assign)({
                middleware: middleware
            }, options);
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error("Duplicate middleware name '" + name + "'");
                    var toOverrideIndex = relativeEntries.findIndex(function(entry) {
                        return entry.name === name;
                    });
                    var toOverride = relativeEntries[toOverrideIndex];
                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) throw new Error('"' + name + '" middleware ' + toOverride.relation + ' "' + toOverride.toMiddleware + '" middleware cannot be overridden ' + ("by same-name middleware " + entry.relation + ' "' + entry.toMiddleware + '" middleware.'));
                    relativeEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            relativeEntries.push(entry);
        },
        clone: function() {
            return cloneTo(constructStack());
        },
        use: function(plugin) {
            plugin.applyToStack(stack);
        },
        remove: function(toRemove) {
            if (typeof toRemove === "string") return removeByName(toRemove);
            else return removeByReference(toRemove);
        },
        removeByTag: function(toRemove) {
            var isRemoved = false;
            var filterCb = function(entry) {
                var tags = entry.tags, name = entry.name;
                if (tags && tags.includes(toRemove)) {
                    if (name) entriesNameSet.delete(name);
                    isRemoved = true;
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        },
        concat: function(from) {
            var cloned = cloneTo(constructStack());
            cloned.use(from);
            return cloned;
        },
        applyToStack: cloneTo,
        resolve: function(handler, context) {
            var e_1, _a;
            try {
                for(var _b = (0, _tslib.__values)(getMiddlewareList().reverse()), _c = _b.next(); !_c.done; _c = _b.next()){
                    var middleware = _c.value;
                    handler = middleware(handler, context);
                }
            } catch (e_1_1) {
                e_1 = {
                    error: e_1_1
                };
            } finally{
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                } finally{
                    if (e_1) throw e_1.error;
                }
            }
            return handler;
        }
    };
    return stack;
};
var stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
};
var priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
};

},{"tslib":"drUOm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"drUOm":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6AmgY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Command", ()=>Command);
var _middlewareStack = require("@aws-sdk/middleware-stack");
var Command = /** @class */ function() {
    function Command() {
        this.middlewareStack = (0, _middlewareStack.constructStack)();
    }
    return Command;
}();

},{"@aws-sdk/middleware-stack":"aYVqx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dmYK8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lfzpT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"82TgW":[function(require,module,exports) {
/**
 * Function that wraps encodeURIComponent to encode additional characters
 * to fully adhere to RFC 3986.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extendedEncodeURIComponent", ()=>extendedEncodeURIComponent);
function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"abGYw":[function(require,module,exports) {
/**
 * The XML parser will set one K:V for a member that could
 * return multiple entries but only has one.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getArrayIfSingleItem", ()=>getArrayIfSingleItem);
var getArrayIfSingleItem = function(mayBeArray) {
    return Array.isArray(mayBeArray) ? mayBeArray : [
        mayBeArray
    ];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2cDAX":[function(require,module,exports) {
/**
 * Recursively parses object and populates value is node from
 * "#text" key if it's available
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getValueFromTextNode", ()=>getValueFromTextNode);
var getValueFromTextNode = function(obj) {
    var textNodeName = "#text";
    for(var key in obj){
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) obj[key] = obj[key][textNodeName];
        else if (typeof obj[key] === "object" && obj[key] !== null) obj[key] = getValueFromTextNode(obj[key]);
    }
    return obj;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kHCxp":[function(require,module,exports) {
/**
 * Lazy String holder for JSON typed contents.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringWrapper", ()=>StringWrapper);
parcelHelpers.export(exports, "LazyJsonString", ()=>LazyJsonString);
var _tslib = require("tslib");
var StringWrapper = function() {
    //@ts-ignore 'this' cannot be assigned to any, but Object.getPrototypeOf accepts any
    var Class = Object.getPrototypeOf(this).constructor;
    var Constructor = Function.bind.apply(String, (0, _tslib.__spread)([
        null
    ], arguments));
    //@ts-ignore Call wrapped String constructor directly, don't bother typing it.
    var instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
    }
});
Object.setPrototypeOf(StringWrapper, String);
var LazyJsonString = /** @class */ function(_super) {
    (0, _tslib.__extends)(LazyJsonString, _super);
    function LazyJsonString() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LazyJsonString.prototype.deserializeJSON = function() {
        return JSON.parse(_super.prototype.toString.call(this));
    };
    LazyJsonString.prototype.toJSON = function() {
        return _super.prototype.toString.call(this);
    };
    LazyJsonString.fromObject = function(object) {
        if (object instanceof LazyJsonString) return object;
        else if (object instanceof String || typeof object === "string") return new LazyJsonString(object);
        return new LazyJsonString(JSON.stringify(object));
    };
    return LazyJsonString;
}(StringWrapper);

},{"tslib":"6xUDJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6xUDJ":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h0Yds":[function(require,module,exports) {
/**
 * Builds a proper UTC HttpDate timestamp from a Date object
 * since not all environments will have this as the expected
 * format.
 *
 * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toUTCString
 * > Prior to ECMAScript 2018, the format of the return value
 * > varied according to the platform. The most common return
 * > value was an RFC-1123 formatted date stamp, which is a
 * > slightly updated version of RFC-822 date stamps.
 */ // Build indexes outside so we allocate them once.
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dateToUtcString", ()=>dateToUtcString);
var days = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
];
// prettier-ignore
var months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
function dateToUtcString(date) {
    var year = date.getUTCFullYear();
    var month = date.getUTCMonth();
    var dayOfWeek = date.getUTCDay();
    var dayOfMonthInt = date.getUTCDate();
    var hoursInt = date.getUTCHours();
    var minutesInt = date.getUTCMinutes();
    var secondsInt = date.getUTCSeconds();
    // Build 0 prefixed strings for contents that need to be
    // two digits and where we get an integer back.
    var dayOfMonthString = dayOfMonthInt < 10 ? "0" + dayOfMonthInt : "" + dayOfMonthInt;
    var hoursString = hoursInt < 10 ? "0" + hoursInt : "" + hoursInt;
    var minutesString = minutesInt < 10 ? "0" + minutesInt : "" + minutesInt;
    var secondsString = secondsInt < 10 ? "0" + secondsInt : "" + secondsInt;
    return days[dayOfWeek] + ", " + dayOfMonthString + " " + months[month] + " " + year + " " + hoursString + ":" + minutesString + ":" + secondsString + " GMT";
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4qr44":[function(require,module,exports) {
/**
 * Given an input string, splits based on the delimiter after a given
 * number of delimiters has been encountered.
 *
 * @param value The input string to split.
 * @param delimiter The delimiter to split on.
 * @param numDelimiters The number of delimiters to have encountered to split.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitEvery", ()=>splitEvery);
function splitEvery(value, delimiter, numDelimiters) {
    // Fail if we don't have a clear number to split on.
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    var segments = value.split(delimiter);
    // Short circuit extra logic for the simple case.
    if (numDelimiters === 1) return segments;
    var compoundSegments = [];
    var currentSegment = "";
    for(var i = 0; i < segments.length; i++){
        if (currentSegment === "") // Start a new segment.
        currentSegment = segments[i];
        else // Compound the current segment with the delimiter.
        currentSegment += delimiter + segments[i];
        if ((i + 1) % numDelimiters === 0) {
            // We encountered the right number of delimiters, so add the entry.
            compoundSegments.push(currentSegment);
            // And reset the current segment.
            currentSegment = "";
        }
    }
    // Handle any leftover segment portion.
    if (currentSegment !== "") compoundSegments.push(currentSegment);
    return compoundSegments;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"82I4K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SENSITIVE_STRING", ()=>SENSITIVE_STRING);
var SENSITIVE_STRING = "***SensitiveInformation***";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hxkUR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gO6h5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hQK33":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetCredentialsForIdentityCommand", ()=>GetCredentialsForIdentityCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Returns credentials for the provided identity ID. Any provided logins will be
 *          validated against supported login providers. If the token is for
 *          cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service
 *          with the appropriate role for the token.</p>
 *          <p>This is a public API. You do not need any credentials to call this API.</p>
 */ var GetCredentialsForIdentityCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetCredentialsForIdentityCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetCredentialsForIdentityCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetCredentialsForIdentityCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "GetCredentialsForIdentityCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetCredentialsForIdentityInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetCredentialsForIdentityResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetCredentialsForIdentityCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetCredentialsForIdentityCommand)(input, context);
    };
    GetCredentialsForIdentityCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetCredentialsForIdentityCommand)(output, context);
    };
    return GetCredentialsForIdentityCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k79k4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmbiguousRoleResolutionType", ()=>AmbiguousRoleResolutionType);
parcelHelpers.export(exports, "CognitoIdentityProvider", ()=>CognitoIdentityProvider);
parcelHelpers.export(exports, "CreateIdentityPoolInput", ()=>CreateIdentityPoolInput);
parcelHelpers.export(exports, "IdentityPool", ()=>IdentityPool);
parcelHelpers.export(exports, "InternalErrorException", ()=>InternalErrorException);
parcelHelpers.export(exports, "InvalidParameterException", ()=>InvalidParameterException);
parcelHelpers.export(exports, "LimitExceededException", ()=>LimitExceededException);
parcelHelpers.export(exports, "NotAuthorizedException", ()=>NotAuthorizedException);
parcelHelpers.export(exports, "ResourceConflictException", ()=>ResourceConflictException);
parcelHelpers.export(exports, "TooManyRequestsException", ()=>TooManyRequestsException);
parcelHelpers.export(exports, "DeleteIdentitiesInput", ()=>DeleteIdentitiesInput);
parcelHelpers.export(exports, "ErrorCode", ()=>ErrorCode);
parcelHelpers.export(exports, "UnprocessedIdentityId", ()=>UnprocessedIdentityId);
parcelHelpers.export(exports, "DeleteIdentitiesResponse", ()=>DeleteIdentitiesResponse);
parcelHelpers.export(exports, "DeleteIdentityPoolInput", ()=>DeleteIdentityPoolInput);
parcelHelpers.export(exports, "ResourceNotFoundException", ()=>ResourceNotFoundException);
parcelHelpers.export(exports, "DescribeIdentityInput", ()=>DescribeIdentityInput);
parcelHelpers.export(exports, "IdentityDescription", ()=>IdentityDescription);
parcelHelpers.export(exports, "DescribeIdentityPoolInput", ()=>DescribeIdentityPoolInput);
parcelHelpers.export(exports, "ExternalServiceException", ()=>ExternalServiceException);
parcelHelpers.export(exports, "GetCredentialsForIdentityInput", ()=>GetCredentialsForIdentityInput);
parcelHelpers.export(exports, "Credentials", ()=>Credentials);
parcelHelpers.export(exports, "GetCredentialsForIdentityResponse", ()=>GetCredentialsForIdentityResponse);
parcelHelpers.export(exports, "InvalidIdentityPoolConfigurationException", ()=>InvalidIdentityPoolConfigurationException);
parcelHelpers.export(exports, "GetIdInput", ()=>GetIdInput);
parcelHelpers.export(exports, "GetIdResponse", ()=>GetIdResponse);
parcelHelpers.export(exports, "GetIdentityPoolRolesInput", ()=>GetIdentityPoolRolesInput);
parcelHelpers.export(exports, "MappingRuleMatchType", ()=>MappingRuleMatchType);
parcelHelpers.export(exports, "MappingRule", ()=>MappingRule);
parcelHelpers.export(exports, "RulesConfigurationType", ()=>RulesConfigurationType);
parcelHelpers.export(exports, "RoleMappingType", ()=>RoleMappingType);
parcelHelpers.export(exports, "RoleMapping", ()=>RoleMapping);
parcelHelpers.export(exports, "GetIdentityPoolRolesResponse", ()=>GetIdentityPoolRolesResponse);
parcelHelpers.export(exports, "GetOpenIdTokenInput", ()=>GetOpenIdTokenInput);
parcelHelpers.export(exports, "GetOpenIdTokenResponse", ()=>GetOpenIdTokenResponse);
parcelHelpers.export(exports, "DeveloperUserAlreadyRegisteredException", ()=>DeveloperUserAlreadyRegisteredException);
parcelHelpers.export(exports, "GetOpenIdTokenForDeveloperIdentityInput", ()=>GetOpenIdTokenForDeveloperIdentityInput);
parcelHelpers.export(exports, "GetOpenIdTokenForDeveloperIdentityResponse", ()=>GetOpenIdTokenForDeveloperIdentityResponse);
parcelHelpers.export(exports, "ListIdentitiesInput", ()=>ListIdentitiesInput);
parcelHelpers.export(exports, "ListIdentitiesResponse", ()=>ListIdentitiesResponse);
parcelHelpers.export(exports, "ListIdentityPoolsInput", ()=>ListIdentityPoolsInput);
parcelHelpers.export(exports, "IdentityPoolShortDescription", ()=>IdentityPoolShortDescription);
parcelHelpers.export(exports, "ListIdentityPoolsResponse", ()=>ListIdentityPoolsResponse);
parcelHelpers.export(exports, "ListTagsForResourceInput", ()=>ListTagsForResourceInput);
parcelHelpers.export(exports, "ListTagsForResourceResponse", ()=>ListTagsForResourceResponse);
parcelHelpers.export(exports, "LookupDeveloperIdentityInput", ()=>LookupDeveloperIdentityInput);
parcelHelpers.export(exports, "LookupDeveloperIdentityResponse", ()=>LookupDeveloperIdentityResponse);
parcelHelpers.export(exports, "MergeDeveloperIdentitiesInput", ()=>MergeDeveloperIdentitiesInput);
parcelHelpers.export(exports, "MergeDeveloperIdentitiesResponse", ()=>MergeDeveloperIdentitiesResponse);
parcelHelpers.export(exports, "ConcurrentModificationException", ()=>ConcurrentModificationException);
parcelHelpers.export(exports, "SetIdentityPoolRolesInput", ()=>SetIdentityPoolRolesInput);
parcelHelpers.export(exports, "TagResourceInput", ()=>TagResourceInput);
parcelHelpers.export(exports, "TagResourceResponse", ()=>TagResourceResponse);
parcelHelpers.export(exports, "UnlinkDeveloperIdentityInput", ()=>UnlinkDeveloperIdentityInput);
parcelHelpers.export(exports, "UnlinkIdentityInput", ()=>UnlinkIdentityInput);
parcelHelpers.export(exports, "UntagResourceInput", ()=>UntagResourceInput);
parcelHelpers.export(exports, "UntagResourceResponse", ()=>UntagResourceResponse);
var _tslib = require("tslib");
var AmbiguousRoleResolutionType;
(function(AmbiguousRoleResolutionType) {
    AmbiguousRoleResolutionType["AUTHENTICATED_ROLE"] = "AuthenticatedRole";
    AmbiguousRoleResolutionType["DENY"] = "Deny";
})(AmbiguousRoleResolutionType || (AmbiguousRoleResolutionType = {}));
var CognitoIdentityProvider;
(function(CognitoIdentityProvider) {
    CognitoIdentityProvider.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CognitoIdentityProvider || (CognitoIdentityProvider = {}));
var CreateIdentityPoolInput;
(function(CreateIdentityPoolInput) {
    CreateIdentityPoolInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CreateIdentityPoolInput || (CreateIdentityPoolInput = {}));
var IdentityPool;
(function(IdentityPool) {
    IdentityPool.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IdentityPool || (IdentityPool = {}));
var InternalErrorException;
(function(InternalErrorException) {
    InternalErrorException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InternalErrorException || (InternalErrorException = {}));
var InvalidParameterException;
(function(InvalidParameterException) {
    InvalidParameterException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InvalidParameterException || (InvalidParameterException = {}));
var LimitExceededException;
(function(LimitExceededException) {
    LimitExceededException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LimitExceededException || (LimitExceededException = {}));
var NotAuthorizedException;
(function(NotAuthorizedException) {
    NotAuthorizedException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(NotAuthorizedException || (NotAuthorizedException = {}));
var ResourceConflictException;
(function(ResourceConflictException) {
    ResourceConflictException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ResourceConflictException || (ResourceConflictException = {}));
var TooManyRequestsException;
(function(TooManyRequestsException) {
    TooManyRequestsException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TooManyRequestsException || (TooManyRequestsException = {}));
var DeleteIdentitiesInput;
(function(DeleteIdentitiesInput) {
    DeleteIdentitiesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteIdentitiesInput || (DeleteIdentitiesInput = {}));
var ErrorCode;
(function(ErrorCode) {
    ErrorCode["ACCESS_DENIED"] = "AccessDenied";
    ErrorCode["INTERNAL_SERVER_ERROR"] = "InternalServerError";
})(ErrorCode || (ErrorCode = {}));
var UnprocessedIdentityId;
(function(UnprocessedIdentityId) {
    UnprocessedIdentityId.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UnprocessedIdentityId || (UnprocessedIdentityId = {}));
var DeleteIdentitiesResponse;
(function(DeleteIdentitiesResponse) {
    DeleteIdentitiesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteIdentitiesResponse || (DeleteIdentitiesResponse = {}));
var DeleteIdentityPoolInput;
(function(DeleteIdentityPoolInput) {
    DeleteIdentityPoolInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteIdentityPoolInput || (DeleteIdentityPoolInput = {}));
var ResourceNotFoundException;
(function(ResourceNotFoundException) {
    ResourceNotFoundException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ResourceNotFoundException || (ResourceNotFoundException = {}));
var DescribeIdentityInput;
(function(DescribeIdentityInput) {
    DescribeIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeIdentityInput || (DescribeIdentityInput = {}));
var IdentityDescription;
(function(IdentityDescription) {
    IdentityDescription.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IdentityDescription || (IdentityDescription = {}));
var DescribeIdentityPoolInput;
(function(DescribeIdentityPoolInput) {
    DescribeIdentityPoolInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DescribeIdentityPoolInput || (DescribeIdentityPoolInput = {}));
var ExternalServiceException;
(function(ExternalServiceException) {
    ExternalServiceException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ExternalServiceException || (ExternalServiceException = {}));
var GetCredentialsForIdentityInput;
(function(GetCredentialsForIdentityInput) {
    GetCredentialsForIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetCredentialsForIdentityInput || (GetCredentialsForIdentityInput = {}));
var Credentials;
(function(Credentials) {
    Credentials.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Credentials || (Credentials = {}));
var GetCredentialsForIdentityResponse;
(function(GetCredentialsForIdentityResponse) {
    GetCredentialsForIdentityResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetCredentialsForIdentityResponse || (GetCredentialsForIdentityResponse = {}));
var InvalidIdentityPoolConfigurationException;
(function(InvalidIdentityPoolConfigurationException) {
    InvalidIdentityPoolConfigurationException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InvalidIdentityPoolConfigurationException || (InvalidIdentityPoolConfigurationException = {}));
var GetIdInput;
(function(GetIdInput) {
    GetIdInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetIdInput || (GetIdInput = {}));
var GetIdResponse;
(function(GetIdResponse) {
    GetIdResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetIdResponse || (GetIdResponse = {}));
var GetIdentityPoolRolesInput;
(function(GetIdentityPoolRolesInput) {
    GetIdentityPoolRolesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetIdentityPoolRolesInput || (GetIdentityPoolRolesInput = {}));
var MappingRuleMatchType;
(function(MappingRuleMatchType) {
    MappingRuleMatchType["CONTAINS"] = "Contains";
    MappingRuleMatchType["EQUALS"] = "Equals";
    MappingRuleMatchType["NOT_EQUAL"] = "NotEqual";
    MappingRuleMatchType["STARTS_WITH"] = "StartsWith";
})(MappingRuleMatchType || (MappingRuleMatchType = {}));
var MappingRule;
(function(MappingRule) {
    MappingRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MappingRule || (MappingRule = {}));
var RulesConfigurationType;
(function(RulesConfigurationType) {
    RulesConfigurationType.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RulesConfigurationType || (RulesConfigurationType = {}));
var RoleMappingType;
(function(RoleMappingType) {
    RoleMappingType["RULES"] = "Rules";
    RoleMappingType["TOKEN"] = "Token";
})(RoleMappingType || (RoleMappingType = {}));
var RoleMapping;
(function(RoleMapping) {
    RoleMapping.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RoleMapping || (RoleMapping = {}));
var GetIdentityPoolRolesResponse;
(function(GetIdentityPoolRolesResponse) {
    GetIdentityPoolRolesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetIdentityPoolRolesResponse || (GetIdentityPoolRolesResponse = {}));
var GetOpenIdTokenInput;
(function(GetOpenIdTokenInput) {
    GetOpenIdTokenInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetOpenIdTokenInput || (GetOpenIdTokenInput = {}));
var GetOpenIdTokenResponse;
(function(GetOpenIdTokenResponse) {
    GetOpenIdTokenResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetOpenIdTokenResponse || (GetOpenIdTokenResponse = {}));
var DeveloperUserAlreadyRegisteredException;
(function(DeveloperUserAlreadyRegisteredException) {
    DeveloperUserAlreadyRegisteredException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeveloperUserAlreadyRegisteredException || (DeveloperUserAlreadyRegisteredException = {}));
var GetOpenIdTokenForDeveloperIdentityInput;
(function(GetOpenIdTokenForDeveloperIdentityInput) {
    GetOpenIdTokenForDeveloperIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetOpenIdTokenForDeveloperIdentityInput || (GetOpenIdTokenForDeveloperIdentityInput = {}));
var GetOpenIdTokenForDeveloperIdentityResponse;
(function(GetOpenIdTokenForDeveloperIdentityResponse) {
    GetOpenIdTokenForDeveloperIdentityResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetOpenIdTokenForDeveloperIdentityResponse || (GetOpenIdTokenForDeveloperIdentityResponse = {}));
var ListIdentitiesInput;
(function(ListIdentitiesInput) {
    ListIdentitiesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListIdentitiesInput || (ListIdentitiesInput = {}));
var ListIdentitiesResponse;
(function(ListIdentitiesResponse) {
    ListIdentitiesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListIdentitiesResponse || (ListIdentitiesResponse = {}));
var ListIdentityPoolsInput;
(function(ListIdentityPoolsInput) {
    ListIdentityPoolsInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListIdentityPoolsInput || (ListIdentityPoolsInput = {}));
var IdentityPoolShortDescription;
(function(IdentityPoolShortDescription) {
    IdentityPoolShortDescription.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IdentityPoolShortDescription || (IdentityPoolShortDescription = {}));
var ListIdentityPoolsResponse;
(function(ListIdentityPoolsResponse) {
    ListIdentityPoolsResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListIdentityPoolsResponse || (ListIdentityPoolsResponse = {}));
var ListTagsForResourceInput;
(function(ListTagsForResourceInput) {
    ListTagsForResourceInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListTagsForResourceInput || (ListTagsForResourceInput = {}));
var ListTagsForResourceResponse;
(function(ListTagsForResourceResponse) {
    ListTagsForResourceResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListTagsForResourceResponse || (ListTagsForResourceResponse = {}));
var LookupDeveloperIdentityInput;
(function(LookupDeveloperIdentityInput) {
    LookupDeveloperIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LookupDeveloperIdentityInput || (LookupDeveloperIdentityInput = {}));
var LookupDeveloperIdentityResponse;
(function(LookupDeveloperIdentityResponse) {
    LookupDeveloperIdentityResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LookupDeveloperIdentityResponse || (LookupDeveloperIdentityResponse = {}));
var MergeDeveloperIdentitiesInput;
(function(MergeDeveloperIdentitiesInput) {
    MergeDeveloperIdentitiesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MergeDeveloperIdentitiesInput || (MergeDeveloperIdentitiesInput = {}));
var MergeDeveloperIdentitiesResponse;
(function(MergeDeveloperIdentitiesResponse) {
    MergeDeveloperIdentitiesResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MergeDeveloperIdentitiesResponse || (MergeDeveloperIdentitiesResponse = {}));
var ConcurrentModificationException;
(function(ConcurrentModificationException) {
    ConcurrentModificationException.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ConcurrentModificationException || (ConcurrentModificationException = {}));
var SetIdentityPoolRolesInput;
(function(SetIdentityPoolRolesInput) {
    SetIdentityPoolRolesInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(SetIdentityPoolRolesInput || (SetIdentityPoolRolesInput = {}));
var TagResourceInput;
(function(TagResourceInput) {
    TagResourceInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TagResourceInput || (TagResourceInput = {}));
var TagResourceResponse;
(function(TagResourceResponse) {
    TagResourceResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TagResourceResponse || (TagResourceResponse = {}));
var UnlinkDeveloperIdentityInput;
(function(UnlinkDeveloperIdentityInput) {
    UnlinkDeveloperIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UnlinkDeveloperIdentityInput || (UnlinkDeveloperIdentityInput = {}));
var UnlinkIdentityInput;
(function(UnlinkIdentityInput) {
    UnlinkIdentityInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UnlinkIdentityInput || (UnlinkIdentityInput = {}));
var UntagResourceInput;
(function(UntagResourceInput) {
    UntagResourceInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UntagResourceInput || (UntagResourceInput = {}));
var UntagResourceResponse;
(function(UntagResourceResponse) {
    UntagResourceResponse.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(UntagResourceResponse || (UntagResourceResponse = {}));

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3sr6F":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeAws_json1_1CreateIdentityPoolCommand", ()=>serializeAws_json1_1CreateIdentityPoolCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteIdentitiesCommand", ()=>serializeAws_json1_1DeleteIdentitiesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteIdentityPoolCommand", ()=>serializeAws_json1_1DeleteIdentityPoolCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeIdentityCommand", ()=>serializeAws_json1_1DescribeIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeIdentityPoolCommand", ()=>serializeAws_json1_1DescribeIdentityPoolCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetCredentialsForIdentityCommand", ()=>serializeAws_json1_1GetCredentialsForIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetIdCommand", ()=>serializeAws_json1_1GetIdCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetIdentityPoolRolesCommand", ()=>serializeAws_json1_1GetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetOpenIdTokenCommand", ()=>serializeAws_json1_1GetOpenIdTokenCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand", ()=>serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListIdentitiesCommand", ()=>serializeAws_json1_1ListIdentitiesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListIdentityPoolsCommand", ()=>serializeAws_json1_1ListIdentityPoolsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListTagsForResourceCommand", ()=>serializeAws_json1_1ListTagsForResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_1LookupDeveloperIdentityCommand", ()=>serializeAws_json1_1LookupDeveloperIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1MergeDeveloperIdentitiesCommand", ()=>serializeAws_json1_1MergeDeveloperIdentitiesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1SetIdentityPoolRolesCommand", ()=>serializeAws_json1_1SetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1TagResourceCommand", ()=>serializeAws_json1_1TagResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UnlinkDeveloperIdentityCommand", ()=>serializeAws_json1_1UnlinkDeveloperIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UnlinkIdentityCommand", ()=>serializeAws_json1_1UnlinkIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UntagResourceCommand", ()=>serializeAws_json1_1UntagResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UpdateIdentityPoolCommand", ()=>serializeAws_json1_1UpdateIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1CreateIdentityPoolCommand", ()=>deserializeAws_json1_1CreateIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteIdentitiesCommand", ()=>deserializeAws_json1_1DeleteIdentitiesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteIdentityPoolCommand", ()=>deserializeAws_json1_1DeleteIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeIdentityCommand", ()=>deserializeAws_json1_1DescribeIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeIdentityPoolCommand", ()=>deserializeAws_json1_1DescribeIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetCredentialsForIdentityCommand", ()=>deserializeAws_json1_1GetCredentialsForIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetIdCommand", ()=>deserializeAws_json1_1GetIdCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetIdentityPoolRolesCommand", ()=>deserializeAws_json1_1GetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetOpenIdTokenCommand", ()=>deserializeAws_json1_1GetOpenIdTokenCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand", ()=>deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListIdentitiesCommand", ()=>deserializeAws_json1_1ListIdentitiesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListIdentityPoolsCommand", ()=>deserializeAws_json1_1ListIdentityPoolsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListTagsForResourceCommand", ()=>deserializeAws_json1_1ListTagsForResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1LookupDeveloperIdentityCommand", ()=>deserializeAws_json1_1LookupDeveloperIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1MergeDeveloperIdentitiesCommand", ()=>deserializeAws_json1_1MergeDeveloperIdentitiesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1SetIdentityPoolRolesCommand", ()=>deserializeAws_json1_1SetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1TagResourceCommand", ()=>deserializeAws_json1_1TagResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UnlinkDeveloperIdentityCommand", ()=>deserializeAws_json1_1UnlinkDeveloperIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UnlinkIdentityCommand", ()=>deserializeAws_json1_1UnlinkIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UntagResourceCommand", ()=>deserializeAws_json1_1UntagResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UpdateIdentityPoolCommand", ()=>deserializeAws_json1_1UpdateIdentityPoolCommand);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var serializeAws_json1_1CreateIdentityPoolCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.CreateIdentityPool"
            };
            body = JSON.stringify(serializeAws_json1_1CreateIdentityPoolInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteIdentitiesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.DeleteIdentities"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteIdentitiesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DeleteIdentityPoolCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.DeleteIdentityPool"
            };
            body = JSON.stringify(serializeAws_json1_1DeleteIdentityPoolInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.DescribeIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1DescribeIdentityPoolCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.DescribeIdentityPool"
            };
            body = JSON.stringify(serializeAws_json1_1DescribeIdentityPoolInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetCredentialsForIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetCredentialsForIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1GetCredentialsForIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetIdCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetId"
            };
            body = JSON.stringify(serializeAws_json1_1GetIdInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetIdentityPoolRolesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetIdentityPoolRoles"
            };
            body = JSON.stringify(serializeAws_json1_1GetIdentityPoolRolesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetOpenIdTokenCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetOpenIdToken"
            };
            body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1ListIdentitiesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.ListIdentities"
            };
            body = JSON.stringify(serializeAws_json1_1ListIdentitiesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1ListIdentityPoolsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.ListIdentityPools"
            };
            body = JSON.stringify(serializeAws_json1_1ListIdentityPoolsInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1ListTagsForResourceCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.ListTagsForResource"
            };
            body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1LookupDeveloperIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.LookupDeveloperIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1LookupDeveloperIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1MergeDeveloperIdentitiesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.MergeDeveloperIdentities"
            };
            body = JSON.stringify(serializeAws_json1_1MergeDeveloperIdentitiesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1SetIdentityPoolRolesCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.SetIdentityPoolRoles"
            };
            body = JSON.stringify(serializeAws_json1_1SetIdentityPoolRolesInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1TagResourceCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.TagResource"
            };
            body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1UnlinkDeveloperIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.UnlinkDeveloperIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1UnlinkDeveloperIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1UnlinkIdentityCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.UnlinkIdentity"
            };
            body = JSON.stringify(serializeAws_json1_1UnlinkIdentityInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1UntagResourceCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.UntagResource"
            };
            body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var serializeAws_json1_1UpdateIdentityPoolCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, body;
        return (0, _tslib.__generator)(this, function(_a) {
            headers = {
                "content-type": "application/x-amz-json-1.1",
                "x-amz-target": "AWSCognitoIdentityService.UpdateIdentityPool"
            };
            body = JSON.stringify(serializeAws_json1_1IdentityPool(input, context));
            return [
                2 /*return*/ ,
                buildHttpRpcRequest(context, headers, "/", undefined, body)
            ];
        });
    });
};
var deserializeAws_json1_1CreateIdentityPoolCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1CreateIdentityPoolCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1IdentityPool(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1CreateIdentityPoolCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteIdentitiesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteIdentitiesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1DeleteIdentitiesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteIdentitiesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, parsedBody, message;
        var _f;
        return (0, _tslib.__generator)(this, function(_g) {
            switch(_g.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _f = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_f.body = _g.sent(), _f)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        8
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _g.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        9
                    ];
                case 8:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _g.label = 9;
                case 9:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteIdentityPoolCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DeleteIdentityPoolCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DeleteIdentityPoolCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1IdentityDescription(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeIdentityPoolCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1DescribeIdentityPoolCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1IdentityPool(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1DescribeIdentityPoolCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetCredentialsForIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetCredentialsForIdentityResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetCredentialsForIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        var _l;
        return (0, _tslib.__generator)(this, function(_m) {
            switch(_m.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _l = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_l.body = _m.sent(), _l)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidIdentityPoolConfigurationException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        18
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 16:
                    _k = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 17:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _k.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetIdCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetIdCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetIdResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetIdCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        var _l;
        return (0, _tslib.__generator)(this, function(_m) {
            switch(_m.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _l = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_l.body = _m.sent(), _l)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        18
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 16:
                    _k = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 17:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _k.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetIdentityPoolRolesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetIdentityPoolRolesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetIdentityPoolRolesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetOpenIdTokenCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetOpenIdTokenCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetOpenIdTokenResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetOpenIdTokenCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        var _k;
        return (0, _tslib.__generator)(this, function(_l) {
            switch(_l.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _k = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_k.body = _l.sent(), _k)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        16
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        var _k;
        return (0, _tslib.__generator)(this, function(_l) {
            switch(_l.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _k = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_k.body = _l.sent(), _k)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "DeveloperUserAlreadyRegisteredException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#DeveloperUserAlreadyRegisteredException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        16
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListIdentitiesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1ListIdentitiesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListIdentitiesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListIdentitiesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListIdentityPoolsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1ListIdentityPoolsCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListIdentityPoolsResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListIdentityPoolsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListTagsForResourceCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1ListTagsForResourceCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ListTagsForResourceCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1LookupDeveloperIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1LookupDeveloperIdentityResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1LookupDeveloperIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1MergeDeveloperIdentitiesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1MergeDeveloperIdentitiesResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1SetIdentityPoolRolesCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1SetIdentityPoolRolesCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        var _k;
        return (0, _tslib.__generator)(this, function(_l) {
            switch(_l.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _k = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_k.body = _l.sent(), _k)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ConcurrentModificationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        16
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1TagResourceCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1TagResourceCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1TagResourceResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1TagResourceCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1UnlinkDeveloperIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UnlinkDeveloperIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, parsedBody, message;
        var _j;
        return (0, _tslib.__generator)(this, function(_k) {
            switch(_k.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _j = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_j.body = _k.sent(), _j)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        14
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _k.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        15
                    ];
                case 14:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _k.label = 15;
                case 15:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UnlinkIdentityCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1UnlinkIdentityCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    response = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UnlinkIdentityCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, parsedBody, message;
        var _k;
        return (0, _tslib.__generator)(this, function(_l) {
            switch(_l.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _k = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_k.body = _l.sent(), _k)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ExternalServiceException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        16
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _l.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        17
                    ];
                case 16:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _l.label = 17;
                case 17:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UntagResourceCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1UntagResourceCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UntagResourceCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, parsedBody, message;
        var _h;
        return (0, _tslib.__generator)(this, function(_j) {
            switch(_j.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _h = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_h.body = _j.sent(), _h)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        12
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _j.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        13
                    ];
                case 12:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _j.label = 13;
                case 13:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UpdateIdentityPoolCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var data, contents, response;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_json1_1UpdateIdentityPoolCommandError(output, context)
                    ];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents = {};
                    contents = deserializeAws_json1_1IdentityPool(data, context);
                    response = (0, _tslib.__assign)({
                        $metadata: deserializeMetadata(output)
                    }, contents);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(response)
                    ];
            }
        });
    });
};
var deserializeAws_json1_1UpdateIdentityPoolCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, _e, _f, _g, _h, _j, _k, parsedBody, message;
        var _l;
        return (0, _tslib.__generator)(this, function(_m) {
            switch(_m.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _l = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_l.body = _m.sent(), _l)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ConcurrentModificationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.cognitoidentity#InternalErrorException":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "com.amazonaws.cognitoidentity#InvalidParameterException":
                            return [
                                3 /*break*/ ,
                                6
                            ];
                        case "LimitExceededException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "com.amazonaws.cognitoidentity#LimitExceededException":
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case "NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
                            return [
                                3 /*break*/ ,
                                10
                            ];
                        case "ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceConflictException":
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case "ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
                            return [
                                3 /*break*/ ,
                                14
                            ];
                        case "TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
                            return [
                                3 /*break*/ ,
                                16
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        18
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 6:
                    _e = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context)
                    ];
                case 7:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _e.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 8:
                    _f = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context)
                    ];
                case 9:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _f.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 10:
                    _g = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context)
                    ];
                case 11:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _g.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 12:
                    _h = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context)
                    ];
                case 13:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _h.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 14:
                    _j = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context)
                    ];
                case 15:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _j.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 16:
                    _k = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context)
                    ];
                case 17:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _k.concat([
                            _m.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        19
                    ];
                case 18:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _m.label = 19;
                case 19:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_json1_1ConcurrentModificationExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ConcurrentModificationException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ConcurrentModificationException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1DeveloperUserAlreadyRegisteredException(body, context);
            contents = (0, _tslib.__assign)({
                name: "DeveloperUserAlreadyRegisteredException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1ExternalServiceExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ExternalServiceException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ExternalServiceException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1InternalErrorExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InternalErrorException(body, context);
            contents = (0, _tslib.__assign)({
                name: "InternalErrorException",
                $fault: "server",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InvalidIdentityPoolConfigurationException(body, context);
            contents = (0, _tslib.__assign)({
                name: "InvalidIdentityPoolConfigurationException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1InvalidParameterExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
            contents = (0, _tslib.__assign)({
                name: "InvalidParameterException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1LimitExceededExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1LimitExceededException(body, context);
            contents = (0, _tslib.__assign)({
                name: "LimitExceededException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1NotAuthorizedExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1NotAuthorizedException(body, context);
            contents = (0, _tslib.__assign)({
                name: "NotAuthorizedException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1ResourceConflictExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ResourceConflictException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ResourceConflictException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1ResourceNotFoundExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
            contents = (0, _tslib.__assign)({
                name: "ResourceNotFoundException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_json1_1TooManyRequestsExceptionResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var body, deserialized, contents;
        return (0, _tslib.__generator)(this, function(_a) {
            body = parsedOutput.body;
            deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
            contents = (0, _tslib.__assign)({
                name: "TooManyRequestsException",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            }, deserialized);
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var serializeAws_json1_1CognitoIdentityProvider = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.ClientId !== undefined && input.ClientId !== null && {
        ClientId: input.ClientId
    }), input.ProviderName !== undefined && input.ProviderName !== null && {
        ProviderName: input.ProviderName
    }), input.ServerSideTokenCheck !== undefined && input.ServerSideTokenCheck !== null && {
        ServerSideTokenCheck: input.ServerSideTokenCheck
    });
};
var serializeAws_json1_1CognitoIdentityProviderList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return serializeAws_json1_1CognitoIdentityProvider(entry, context);
    });
};
var serializeAws_json1_1CreateIdentityPoolInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.AllowClassicFlow !== undefined && input.AllowClassicFlow !== null && {
        AllowClassicFlow: input.AllowClassicFlow
    }), input.AllowUnauthenticatedIdentities !== undefined && input.AllowUnauthenticatedIdentities !== null && {
        AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
    }), input.CognitoIdentityProviders !== undefined && input.CognitoIdentityProviders !== null && {
        CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
    }), input.DeveloperProviderName !== undefined && input.DeveloperProviderName !== null && {
        DeveloperProviderName: input.DeveloperProviderName
    }), input.IdentityPoolName !== undefined && input.IdentityPoolName !== null && {
        IdentityPoolName: input.IdentityPoolName
    }), input.IdentityPoolTags !== undefined && input.IdentityPoolTags !== null && {
        IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
    }), input.OpenIdConnectProviderARNs !== undefined && input.OpenIdConnectProviderARNs !== null && {
        OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
    }), input.SamlProviderARNs !== undefined && input.SamlProviderARNs !== null && {
        SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
    }), input.SupportedLoginProviders !== undefined && input.SupportedLoginProviders !== null && {
        SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
    });
};
var serializeAws_json1_1DeleteIdentitiesInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityIdsToDelete !== undefined && input.IdentityIdsToDelete !== null && {
        IdentityIdsToDelete: serializeAws_json1_1IdentityIdList(input.IdentityIdsToDelete, context)
    });
};
var serializeAws_json1_1DeleteIdentityPoolInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    });
};
var serializeAws_json1_1DescribeIdentityInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    });
};
var serializeAws_json1_1DescribeIdentityPoolInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    });
};
var serializeAws_json1_1GetCredentialsForIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.CustomRoleArn !== undefined && input.CustomRoleArn !== null && {
        CustomRoleArn: input.CustomRoleArn
    }), input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    });
};
var serializeAws_json1_1GetIdentityPoolRolesInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    });
};
var serializeAws_json1_1GetIdInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.AccountId !== undefined && input.AccountId !== null && {
        AccountId: input.AccountId
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    });
};
var serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    }), input.TokenDuration !== undefined && input.TokenDuration !== null && {
        TokenDuration: input.TokenDuration
    });
};
var serializeAws_json1_1GetOpenIdTokenInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    });
};
var serializeAws_json1_1IdentityIdList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1IdentityPool = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.AllowClassicFlow !== undefined && input.AllowClassicFlow !== null && {
        AllowClassicFlow: input.AllowClassicFlow
    }), input.AllowUnauthenticatedIdentities !== undefined && input.AllowUnauthenticatedIdentities !== null && {
        AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
    }), input.CognitoIdentityProviders !== undefined && input.CognitoIdentityProviders !== null && {
        CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
    }), input.DeveloperProviderName !== undefined && input.DeveloperProviderName !== null && {
        DeveloperProviderName: input.DeveloperProviderName
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.IdentityPoolName !== undefined && input.IdentityPoolName !== null && {
        IdentityPoolName: input.IdentityPoolName
    }), input.IdentityPoolTags !== undefined && input.IdentityPoolTags !== null && {
        IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
    }), input.OpenIdConnectProviderARNs !== undefined && input.OpenIdConnectProviderARNs !== null && {
        OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
    }), input.SamlProviderARNs !== undefined && input.SamlProviderARNs !== null && {
        SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
    }), input.SupportedLoginProviders !== undefined && input.SupportedLoginProviders !== null && {
        SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
    });
};
var serializeAws_json1_1IdentityPoolTagsListType = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1IdentityPoolTagsType = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1IdentityProviders = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1ListIdentitiesInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.HideDisabled !== undefined && input.HideDisabled !== null && {
        HideDisabled: input.HideDisabled
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.MaxResults !== undefined && input.MaxResults !== null && {
        MaxResults: input.MaxResults
    }), input.NextToken !== undefined && input.NextToken !== null && {
        NextToken: input.NextToken
    });
};
var serializeAws_json1_1ListIdentityPoolsInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.MaxResults !== undefined && input.MaxResults !== null && {
        MaxResults: input.MaxResults
    }), input.NextToken !== undefined && input.NextToken !== null && {
        NextToken: input.NextToken
    });
};
var serializeAws_json1_1ListTagsForResourceInput = function(input, context) {
    return (0, _tslib.__assign)({}, input.ResourceArn !== undefined && input.ResourceArn !== null && {
        ResourceArn: input.ResourceArn
    });
};
var serializeAws_json1_1LoginsList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1LoginsMap = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1LookupDeveloperIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.DeveloperUserIdentifier !== undefined && input.DeveloperUserIdentifier !== null && {
        DeveloperUserIdentifier: input.DeveloperUserIdentifier
    }), input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.MaxResults !== undefined && input.MaxResults !== null && {
        MaxResults: input.MaxResults
    }), input.NextToken !== undefined && input.NextToken !== null && {
        NextToken: input.NextToken
    });
};
var serializeAws_json1_1MappingRule = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.Claim !== undefined && input.Claim !== null && {
        Claim: input.Claim
    }), input.MatchType !== undefined && input.MatchType !== null && {
        MatchType: input.MatchType
    }), input.RoleARN !== undefined && input.RoleARN !== null && {
        RoleARN: input.RoleARN
    }), input.Value !== undefined && input.Value !== null && {
        Value: input.Value
    });
};
var serializeAws_json1_1MappingRulesList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return serializeAws_json1_1MappingRule(entry, context);
    });
};
var serializeAws_json1_1MergeDeveloperIdentitiesInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.DestinationUserIdentifier !== undefined && input.DestinationUserIdentifier !== null && {
        DestinationUserIdentifier: input.DestinationUserIdentifier
    }), input.DeveloperProviderName !== undefined && input.DeveloperProviderName !== null && {
        DeveloperProviderName: input.DeveloperProviderName
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.SourceUserIdentifier !== undefined && input.SourceUserIdentifier !== null && {
        SourceUserIdentifier: input.SourceUserIdentifier
    });
};
var serializeAws_json1_1OIDCProviderList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1RoleMapping = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.AmbiguousRoleResolution !== undefined && input.AmbiguousRoleResolution !== null && {
        AmbiguousRoleResolution: input.AmbiguousRoleResolution
    }), input.RulesConfiguration !== undefined && input.RulesConfiguration !== null && {
        RulesConfiguration: serializeAws_json1_1RulesConfigurationType(input.RulesConfiguration, context)
    }), input.Type !== undefined && input.Type !== null && {
        Type: input.Type
    });
};
var serializeAws_json1_1RoleMappingMap = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = serializeAws_json1_1RoleMapping(value, context), _b));
    }, {});
};
var serializeAws_json1_1RolesMap = function(input, context) {
    return Object.entries(input).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var serializeAws_json1_1RulesConfigurationType = function(input, context) {
    return (0, _tslib.__assign)({}, input.Rules !== undefined && input.Rules !== null && {
        Rules: serializeAws_json1_1MappingRulesList(input.Rules, context)
    });
};
var serializeAws_json1_1SAMLProviderList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var serializeAws_json1_1SetIdentityPoolRolesInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    }), input.RoleMappings !== undefined && input.RoleMappings !== null && {
        RoleMappings: serializeAws_json1_1RoleMappingMap(input.RoleMappings, context)
    }), input.Roles !== undefined && input.Roles !== null && {
        Roles: serializeAws_json1_1RolesMap(input.Roles, context)
    });
};
var serializeAws_json1_1TagResourceInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.ResourceArn !== undefined && input.ResourceArn !== null && {
        ResourceArn: input.ResourceArn
    }), input.Tags !== undefined && input.Tags !== null && {
        Tags: serializeAws_json1_1IdentityPoolTagsType(input.Tags, context)
    });
};
var serializeAws_json1_1UnlinkDeveloperIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.DeveloperProviderName !== undefined && input.DeveloperProviderName !== null && {
        DeveloperProviderName: input.DeveloperProviderName
    }), input.DeveloperUserIdentifier !== undefined && input.DeveloperUserIdentifier !== null && {
        DeveloperUserIdentifier: input.DeveloperUserIdentifier
    }), input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.IdentityPoolId !== undefined && input.IdentityPoolId !== null && {
        IdentityPoolId: input.IdentityPoolId
    });
};
var serializeAws_json1_1UnlinkIdentityInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.IdentityId !== undefined && input.IdentityId !== null && {
        IdentityId: input.IdentityId
    }), input.Logins !== undefined && input.Logins !== null && {
        Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
    }), input.LoginsToRemove !== undefined && input.LoginsToRemove !== null && {
        LoginsToRemove: serializeAws_json1_1LoginsList(input.LoginsToRemove, context)
    });
};
var serializeAws_json1_1UntagResourceInput = function(input, context) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input.ResourceArn !== undefined && input.ResourceArn !== null && {
        ResourceArn: input.ResourceArn
    }), input.TagKeys !== undefined && input.TagKeys !== null && {
        TagKeys: serializeAws_json1_1IdentityPoolTagsListType(input.TagKeys, context)
    });
};
var deserializeAws_json1_1CognitoIdentityProvider = function(output, context) {
    return {
        ClientId: output.ClientId !== undefined && output.ClientId !== null ? output.ClientId : undefined,
        ProviderName: output.ProviderName !== undefined && output.ProviderName !== null ? output.ProviderName : undefined,
        ServerSideTokenCheck: output.ServerSideTokenCheck !== undefined && output.ServerSideTokenCheck !== null ? output.ServerSideTokenCheck : undefined
    };
};
var deserializeAws_json1_1CognitoIdentityProviderList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1CognitoIdentityProvider(entry, context);
    });
};
var deserializeAws_json1_1ConcurrentModificationException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1Credentials = function(output, context) {
    return {
        AccessKeyId: output.AccessKeyId !== undefined && output.AccessKeyId !== null ? output.AccessKeyId : undefined,
        Expiration: output.Expiration !== undefined && output.Expiration !== null ? new Date(Math.round(output.Expiration * 1000)) : undefined,
        SecretKey: output.SecretKey !== undefined && output.SecretKey !== null ? output.SecretKey : undefined,
        SessionToken: output.SessionToken !== undefined && output.SessionToken !== null ? output.SessionToken : undefined
    };
};
var deserializeAws_json1_1DeleteIdentitiesResponse = function(output, context) {
    return {
        UnprocessedIdentityIds: output.UnprocessedIdentityIds !== undefined && output.UnprocessedIdentityIds !== null ? deserializeAws_json1_1UnprocessedIdentityIdList(output.UnprocessedIdentityIds, context) : undefined
    };
};
var deserializeAws_json1_1DeveloperUserAlreadyRegisteredException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1DeveloperUserIdentifierList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_json1_1ExternalServiceException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1GetCredentialsForIdentityResponse = function(output, context) {
    return {
        Credentials: output.Credentials !== undefined && output.Credentials !== null ? deserializeAws_json1_1Credentials(output.Credentials, context) : undefined,
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined
    };
};
var deserializeAws_json1_1GetIdentityPoolRolesResponse = function(output, context) {
    return {
        IdentityPoolId: output.IdentityPoolId !== undefined && output.IdentityPoolId !== null ? output.IdentityPoolId : undefined,
        RoleMappings: output.RoleMappings !== undefined && output.RoleMappings !== null ? deserializeAws_json1_1RoleMappingMap(output.RoleMappings, context) : undefined,
        Roles: output.Roles !== undefined && output.Roles !== null ? deserializeAws_json1_1RolesMap(output.Roles, context) : undefined
    };
};
var deserializeAws_json1_1GetIdResponse = function(output, context) {
    return {
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined
    };
};
var deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse = function(output, context) {
    return {
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        Token: output.Token !== undefined && output.Token !== null ? output.Token : undefined
    };
};
var deserializeAws_json1_1GetOpenIdTokenResponse = function(output, context) {
    return {
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        Token: output.Token !== undefined && output.Token !== null ? output.Token : undefined
    };
};
var deserializeAws_json1_1IdentitiesList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1IdentityDescription(entry, context);
    });
};
var deserializeAws_json1_1IdentityDescription = function(output, context) {
    return {
        CreationDate: output.CreationDate !== undefined && output.CreationDate !== null ? new Date(Math.round(output.CreationDate * 1000)) : undefined,
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        LastModifiedDate: output.LastModifiedDate !== undefined && output.LastModifiedDate !== null ? new Date(Math.round(output.LastModifiedDate * 1000)) : undefined,
        Logins: output.Logins !== undefined && output.Logins !== null ? deserializeAws_json1_1LoginsList(output.Logins, context) : undefined
    };
};
var deserializeAws_json1_1IdentityPool = function(output, context) {
    return {
        AllowClassicFlow: output.AllowClassicFlow !== undefined && output.AllowClassicFlow !== null ? output.AllowClassicFlow : undefined,
        AllowUnauthenticatedIdentities: output.AllowUnauthenticatedIdentities !== undefined && output.AllowUnauthenticatedIdentities !== null ? output.AllowUnauthenticatedIdentities : undefined,
        CognitoIdentityProviders: output.CognitoIdentityProviders !== undefined && output.CognitoIdentityProviders !== null ? deserializeAws_json1_1CognitoIdentityProviderList(output.CognitoIdentityProviders, context) : undefined,
        DeveloperProviderName: output.DeveloperProviderName !== undefined && output.DeveloperProviderName !== null ? output.DeveloperProviderName : undefined,
        IdentityPoolId: output.IdentityPoolId !== undefined && output.IdentityPoolId !== null ? output.IdentityPoolId : undefined,
        IdentityPoolName: output.IdentityPoolName !== undefined && output.IdentityPoolName !== null ? output.IdentityPoolName : undefined,
        IdentityPoolTags: output.IdentityPoolTags !== undefined && output.IdentityPoolTags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.IdentityPoolTags, context) : undefined,
        OpenIdConnectProviderARNs: output.OpenIdConnectProviderARNs !== undefined && output.OpenIdConnectProviderARNs !== null ? deserializeAws_json1_1OIDCProviderList(output.OpenIdConnectProviderARNs, context) : undefined,
        SamlProviderARNs: output.SamlProviderARNs !== undefined && output.SamlProviderARNs !== null ? deserializeAws_json1_1SAMLProviderList(output.SamlProviderARNs, context) : undefined,
        SupportedLoginProviders: output.SupportedLoginProviders !== undefined && output.SupportedLoginProviders !== null ? deserializeAws_json1_1IdentityProviders(output.SupportedLoginProviders, context) : undefined
    };
};
var deserializeAws_json1_1IdentityPoolShortDescription = function(output, context) {
    return {
        IdentityPoolId: output.IdentityPoolId !== undefined && output.IdentityPoolId !== null ? output.IdentityPoolId : undefined,
        IdentityPoolName: output.IdentityPoolName !== undefined && output.IdentityPoolName !== null ? output.IdentityPoolName : undefined
    };
};
var deserializeAws_json1_1IdentityPoolsList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1IdentityPoolShortDescription(entry, context);
    });
};
var deserializeAws_json1_1IdentityPoolTagsType = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1IdentityProviders = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1InternalErrorException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1InvalidIdentityPoolConfigurationException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1InvalidParameterException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1LimitExceededException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1ListIdentitiesResponse = function(output, context) {
    return {
        Identities: output.Identities !== undefined && output.Identities !== null ? deserializeAws_json1_1IdentitiesList(output.Identities, context) : undefined,
        IdentityPoolId: output.IdentityPoolId !== undefined && output.IdentityPoolId !== null ? output.IdentityPoolId : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined
    };
};
var deserializeAws_json1_1ListIdentityPoolsResponse = function(output, context) {
    return {
        IdentityPools: output.IdentityPools !== undefined && output.IdentityPools !== null ? deserializeAws_json1_1IdentityPoolsList(output.IdentityPools, context) : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined
    };
};
var deserializeAws_json1_1ListTagsForResourceResponse = function(output, context) {
    return {
        Tags: output.Tags !== undefined && output.Tags !== null ? deserializeAws_json1_1IdentityPoolTagsType(output.Tags, context) : undefined
    };
};
var deserializeAws_json1_1LoginsList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_json1_1LookupDeveloperIdentityResponse = function(output, context) {
    return {
        DeveloperUserIdentifierList: output.DeveloperUserIdentifierList !== undefined && output.DeveloperUserIdentifierList !== null ? deserializeAws_json1_1DeveloperUserIdentifierList(output.DeveloperUserIdentifierList, context) : undefined,
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined,
        NextToken: output.NextToken !== undefined && output.NextToken !== null ? output.NextToken : undefined
    };
};
var deserializeAws_json1_1MappingRule = function(output, context) {
    return {
        Claim: output.Claim !== undefined && output.Claim !== null ? output.Claim : undefined,
        MatchType: output.MatchType !== undefined && output.MatchType !== null ? output.MatchType : undefined,
        RoleARN: output.RoleARN !== undefined && output.RoleARN !== null ? output.RoleARN : undefined,
        Value: output.Value !== undefined && output.Value !== null ? output.Value : undefined
    };
};
var deserializeAws_json1_1MappingRulesList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1MappingRule(entry, context);
    });
};
var deserializeAws_json1_1MergeDeveloperIdentitiesResponse = function(output, context) {
    return {
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined
    };
};
var deserializeAws_json1_1NotAuthorizedException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1OIDCProviderList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_json1_1ResourceConflictException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1ResourceNotFoundException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1RoleMapping = function(output, context) {
    return {
        AmbiguousRoleResolution: output.AmbiguousRoleResolution !== undefined && output.AmbiguousRoleResolution !== null ? output.AmbiguousRoleResolution : undefined,
        RulesConfiguration: output.RulesConfiguration !== undefined && output.RulesConfiguration !== null ? deserializeAws_json1_1RulesConfigurationType(output.RulesConfiguration, context) : undefined,
        Type: output.Type !== undefined && output.Type !== null ? output.Type : undefined
    };
};
var deserializeAws_json1_1RoleMappingMap = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = deserializeAws_json1_1RoleMapping(value, context), _b));
    }, {});
};
var deserializeAws_json1_1RolesMap = function(output, context) {
    return Object.entries(output).reduce(function(acc, _a) {
        var _b;
        var _c = (0, _tslib.__read)(_a, 2), key = _c[0], value = _c[1];
        if (value === null) return acc;
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_b = {}, _b[key] = value, _b));
    }, {});
};
var deserializeAws_json1_1RulesConfigurationType = function(output, context) {
    return {
        Rules: output.Rules !== undefined && output.Rules !== null ? deserializeAws_json1_1MappingRulesList(output.Rules, context) : undefined
    };
};
var deserializeAws_json1_1SAMLProviderList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_json1_1TagResourceResponse = function(output, context) {
    return {};
};
var deserializeAws_json1_1TooManyRequestsException = function(output, context) {
    return {
        message: output.message !== undefined && output.message !== null ? output.message : undefined
    };
};
var deserializeAws_json1_1UnprocessedIdentityId = function(output, context) {
    return {
        ErrorCode: output.ErrorCode !== undefined && output.ErrorCode !== null ? output.ErrorCode : undefined,
        IdentityId: output.IdentityId !== undefined && output.IdentityId !== null ? output.IdentityId : undefined
    };
};
var deserializeAws_json1_1UnprocessedIdentityIdList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_json1_1UnprocessedIdentityId(entry, context);
    });
};
var deserializeAws_json1_1UntagResourceResponse = function(output, context) {
    return {};
};
var deserializeMetadata = function(output) {
    var _a;
    return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    };
};
// Collect low-level response body stream to Uint8Array.
var collectBody = function(streamBody, context) {
    if (streamBody === void 0) streamBody = new Uint8Array();
    if (streamBody instanceof Uint8Array) return Promise.resolve(streamBody);
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function(streamBody, context) {
    return collectBody(streamBody, context).then(function(body) {
        return context.utf8Encoder(body);
    });
};
var buildHttpRpcRequest = function(context, headers, path, resolvedHostname, body) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var _a, hostname, _b, protocol, port, contents;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    contents = {
                        protocol: protocol,
                        hostname: hostname,
                        port: port,
                        method: "POST",
                        path: path,
                        headers: headers
                    };
                    if (resolvedHostname !== undefined) contents.hostname = resolvedHostname;
                    if (body !== undefined) contents.body = body;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)(contents)
                    ];
            }
        });
    });
};
var parseBody = function(streamBody, context) {
    return collectBodyString(streamBody, context).then(function(encoded) {
        if (encoded.length) return JSON.parse(encoded);
        return {};
    });
};
/**
 * Load an error code for the aws.rest-json-1.1 protocol.
 */ var loadRestJsonErrorCode = function(output, data) {
    var findKey = function(object, key) {
        return Object.keys(object).find(function(k) {
            return k.toLowerCase() === key.toLowerCase();
        });
    };
    var sanitizeErrorCode = function(rawValue) {
        var cleanValue = rawValue;
        if (cleanValue.indexOf(":") >= 0) cleanValue = cleanValue.split(":")[0];
        if (cleanValue.indexOf("#") >= 0) cleanValue = cleanValue.split("#")[1];
        return cleanValue;
    };
    var headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) return sanitizeErrorCode(output.headers[headerKey]);
    if (data.code !== undefined) return sanitizeErrorCode(data.code);
    if (data["__type"] !== undefined) return sanitizeErrorCode(data["__type"]);
    return "";
};

},{"tslib":"lRdW5","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dE6sE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deserializerMiddleware = require("./deserializerMiddleware");
parcelHelpers.exportAll(_deserializerMiddleware, exports);
var _serializerMiddleware = require("./serializerMiddleware");
parcelHelpers.exportAll(_serializerMiddleware, exports);
var _serdePlugin = require("./serdePlugin");
parcelHelpers.exportAll(_serdePlugin, exports);

},{"./deserializerMiddleware":"cwXh5","./serializerMiddleware":"cutgi","./serdePlugin":"6n7ho","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cwXh5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializerMiddleware", ()=>deserializerMiddleware);
var _tslib = require("tslib");
var deserializerMiddleware = function(options, deserializer) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var response, parsed;
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                next(args)
                            ];
                        case 1:
                            response = _a.sent().response;
                            return [
                                4 /*yield*/ ,
                                deserializer(response, options)
                            ];
                        case 2:
                            parsed = _a.sent();
                            return [
                                2 /*return*/ ,
                                {
                                    response: response,
                                    output: parsed
                                }
                            ];
                    }
                });
            });
        };
    };
};

},{"tslib":"dz4m7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dz4m7":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cutgi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializerMiddleware", ()=>serializerMiddleware);
var _tslib = require("tslib");
var serializerMiddleware = function(options, serializer) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var request;
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                serializer(args.input, options)
                            ];
                        case 1:
                            request = _a.sent();
                            return [
                                2 /*return*/ ,
                                next((0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
                                    request: request
                                }))
                            ];
                    }
                });
            });
        };
    };
};

},{"tslib":"dz4m7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6n7ho":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializerMiddlewareOption", ()=>deserializerMiddlewareOption);
parcelHelpers.export(exports, "serializerMiddlewareOption", ()=>serializerMiddlewareOption);
parcelHelpers.export(exports, "getSerdePlugin", ()=>getSerdePlugin);
var _deserializerMiddleware = require("./deserializerMiddleware");
var _serializerMiddleware = require("./serializerMiddleware");
var deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: [
        "DESERIALIZER"
    ],
    override: true
};
var serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: [
        "SERIALIZER"
    ],
    override: true
};
function getSerdePlugin(config, serializer, deserializer) {
    return {
        applyToStack: function(commandStack) {
            commandStack.add((0, _deserializerMiddleware.deserializerMiddleware)(config, deserializer), deserializerMiddlewareOption);
            commandStack.add((0, _serializerMiddleware.serializerMiddleware)(config, serializer), serializerMiddlewareOption);
        }
    };
}

},{"./deserializerMiddleware":"cwXh5","./serializerMiddleware":"cutgi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4yuUU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetIdCommand", ()=>GetIdCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an
 *          implicit linked account.</p>
 *          <p>This is a public API. You do not need any credentials to call this API.</p>
 */ var GetIdCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetIdCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetIdCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetIdCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "CognitoIdentityClient";
        var commandName = "GetIdCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetIdInput).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetIdResponse).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetIdCommand.prototype.serialize = function(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetIdCommand)(input, context);
    };
    GetIdCommand.prototype.deserialize = function(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetIdCommand)(output, context);
    };
    return GetIdCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"k79k4","../protocols/Aws_json1_1":"3sr6F","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hAZuM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chain = require("./chain");
parcelHelpers.exportAll(_chain, exports);
var _fromStatic = require("./fromStatic");
parcelHelpers.exportAll(_fromStatic, exports);
var _memoize = require("./memoize");
parcelHelpers.exportAll(_memoize, exports);
var _providerError = require("./ProviderError");
parcelHelpers.exportAll(_providerError, exports);

},{"./chain":"7LYIf","./fromStatic":"h2oyb","./memoize":"1fSWB","./ProviderError":"lwOKl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7LYIf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Compose a single credential provider function from multiple credential
 * providers. The first provider in the argument list will always be invoked;
 * subsequent providers in the list will be invoked in the order in which the
 * were received if the preceding provider did not successfully resolve.
 *
 * If no providers were received or no provider resolves successfully, the
 * returned promise will be rejected.
 */ parcelHelpers.export(exports, "chain", ()=>chain);
var _tslib = require("tslib");
var _providerError = require("./ProviderError");
function chain() {
    var providers = [];
    for(var _i = 0; _i < arguments.length; _i++)providers[_i] = arguments[_i];
    return function() {
        var e_1, _a;
        var promise = Promise.reject(new (0, _providerError.ProviderError)("No providers in chain"));
        var _loop_1 = function(provider) {
            promise = promise.catch(function(err) {
                if (err === null || err === void 0 ? void 0 : err.tryNextLink) return provider();
                throw err;
            });
        };
        try {
            for(var providers_1 = (0, _tslib.__values)(providers), providers_1_1 = providers_1.next(); !providers_1_1.done; providers_1_1 = providers_1.next()){
                var provider = providers_1_1.value;
                _loop_1(provider);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (providers_1_1 && !providers_1_1.done && (_a = providers_1.return)) _a.call(providers_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return promise;
    };
}

},{"tslib":"kfqt5","./ProviderError":"lwOKl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kfqt5":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lwOKl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProviderError", ()=>ProviderError);
var _tslib = require("tslib");
/**
 * An error representing a failure of an individual credential provider.
 *
 * This error class has special meaning to the {@link chain} method. If a
 * provider in the chain is rejected with an error, the chain will only proceed
 * to the next provider if the value of the `tryNextLink` property on the error
 * is truthy. This allows individual providers to halt the chain and also
 * ensures the chain will stop if an entirely unexpected error is encountered.
 */ var ProviderError = /** @class */ function(_super) {
    (0, _tslib.__extends)(ProviderError, _super);
    function ProviderError(message, tryNextLink) {
        if (tryNextLink === void 0) tryNextLink = true;
        var _this = _super.call(this, message) || this;
        _this.tryNextLink = tryNextLink;
        return _this;
    }
    return ProviderError;
}(Error);

},{"tslib":"kfqt5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h2oyb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromStatic", ()=>fromStatic);
var fromStatic = function(staticValue) {
    return function() {
        return Promise.resolve(staticValue);
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1fSWB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "memoize", ()=>memoize);
var _tslib = require("tslib");
var memoize = function(provider, isExpired, requiresRefresh) {
    var result;
    var hasResult;
    if (isExpired === undefined) // This is a static memoization; no need to incorporate refreshing
    return function() {
        if (!hasResult) {
            result = provider();
            hasResult = true;
        }
        return result;
    };
    var isConstant = false;
    return function() {
        return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
            var resolved;
            return (0, _tslib.__generator)(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!hasResult) {
                            result = provider();
                            hasResult = true;
                        }
                        if (isConstant) return [
                            2 /*return*/ ,
                            result
                        ];
                        return [
                            4 /*yield*/ ,
                            result
                        ];
                    case 1:
                        resolved = _a.sent();
                        if (requiresRefresh && !requiresRefresh(resolved)) {
                            isConstant = true;
                            return [
                                2 /*return*/ ,
                                resolved
                            ];
                        }
                        if (isExpired(resolved)) return [
                            2 /*return*/ ,
                            result = provider()
                        ];
                        return [
                            2 /*return*/ ,
                            resolved
                        ];
                }
            });
        });
    };
};

},{"tslib":"kfqt5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lCi3C":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "resolveLogins", ()=>resolveLogins);
var _tslib = require("tslib");
function resolveLogins(logins) {
    return Promise.all(Object.keys(logins).reduce(function(arr, name) {
        var tokenOrProvider = logins[name];
        if (typeof tokenOrProvider === "string") arr.push([
            name,
            tokenOrProvider
        ]);
        else arr.push(tokenOrProvider().then(function(token) {
            return [
                name,
                token
            ];
        }));
        return arr;
    }, [])).then(function(resolvedPairs) {
        return resolvedPairs.reduce(function(logins, _a) {
            var _b = (0, _tslib.__read)(_a, 2), key = _b[0], value = _b[1];
            logins[key] = value;
            return logins;
        }, {});
    });
}

},{"tslib":"fvjju","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4UQMg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Retrieves or generates a unique identifier using Amazon Cognito's `GetId`
 * operation, then generates temporary AWS credentials using Amazon Cognito's
 * `GetCredentialsForIdentity` operation.
 *
 * Results from `GetId` are cached internally, but results from
 * `GetCredentialsForIdentity` are not.
 */ parcelHelpers.export(exports, "fromCognitoIdentityPool", ()=>fromCognitoIdentityPool);
var _tslib = require("tslib");
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _propertyProvider = require("@aws-sdk/property-provider");
var _fromCognitoIdentity = require("./fromCognitoIdentity");
var _localStorage = require("./localStorage");
var _resolveLogins = require("./resolveLogins");
function fromCognitoIdentityPool(_a) {
    var _this = this;
    var accountId = _a.accountId, _b = _a.cache, cache = _b === void 0 ? (0, _localStorage.localStorage)() : _b, client = _a.client, customRoleArn = _a.customRoleArn, identityPoolId = _a.identityPoolId, logins = _a.logins, _c = _a.userIdentifier, userIdentifier = _c === void 0 ? !logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : undefined : _c;
    var cacheKey = userIdentifier ? "aws:cognito-identity-credentials:" + identityPoolId + ":" + userIdentifier : undefined;
    var provider = function() {
        return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
            var identityId, _a, _b, IdentityId, _c, _d, _e, _f;
            var _g;
            return (0, _tslib.__generator)(this, function(_h) {
                switch(_h.label){
                    case 0:
                        _a = cacheKey;
                        if (!_a) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            cache.getItem(cacheKey)
                        ];
                    case 1:
                        _a = _h.sent();
                        _h.label = 2;
                    case 2:
                        identityId = _a;
                        if (!!identityId) return [
                            3 /*break*/ ,
                            7
                        ];
                        _d = (_c = client).send;
                        _e = (0, _clientCognitoIdentity.GetIdCommand).bind;
                        _g = {
                            AccountId: accountId,
                            IdentityPoolId: identityPoolId
                        };
                        if (!logins) return [
                            3 /*break*/ ,
                            4
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _resolveLogins.resolveLogins)(logins)
                        ];
                    case 3:
                        _f = _h.sent();
                        return [
                            3 /*break*/ ,
                            5
                        ];
                    case 4:
                        _f = undefined;
                        _h.label = 5;
                    case 5:
                        return [
                            4 /*yield*/ ,
                            _d.apply(_c, [
                                new (_e.apply((0, _clientCognitoIdentity.GetIdCommand), [
                                    void 0,
                                    (_g.Logins = _f, _g)
                                ]))()
                            ])
                        ];
                    case 6:
                        _b = _h.sent().IdentityId, IdentityId = _b === void 0 ? throwOnMissingId() : _b;
                        identityId = IdentityId;
                        if (cacheKey) Promise.resolve(cache.setItem(cacheKey, identityId)).catch(function() {});
                        _h.label = 7;
                    case 7:
                        provider = (0, _fromCognitoIdentity.fromCognitoIdentity)({
                            client: client,
                            customRoleArn: customRoleArn,
                            logins: logins,
                            identityId: identityId
                        });
                        return [
                            2 /*return*/ ,
                            provider()
                        ];
                }
            });
        });
    };
    return function() {
        return provider().catch(function(err) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                return (0, _tslib.__generator)(this, function(_a) {
                    if (cacheKey) Promise.resolve(cache.removeItem(cacheKey)).catch(function() {});
                    throw err;
                });
            });
        });
    };
}
function throwOnMissingId() {
    throw new (0, _propertyProvider.ProviderError)("Response from Amazon Cognito contained no identity ID");
}

},{"tslib":"fvjju","@aws-sdk/client-cognito-identity":"6STYA","@aws-sdk/property-provider":"hAZuM","./fromCognitoIdentity":"d8ZgH","./localStorage":"kwUkb","./resolveLogins":"lCi3C","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kwUkb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "localStorage", ()=>localStorage);
var _indexedDbStorage = require("./IndexedDbStorage");
var _inMemoryStorage = require("./InMemoryStorage");
var inMemoryStorage = new (0, _inMemoryStorage.InMemoryStorage)();
function localStorage() {
    if (typeof self === "object" && self.indexedDB) return new (0, _indexedDbStorage.IndexedDbStorage)();
    if (typeof window === "object" && window.localStorage) return window.localStorage;
    return inMemoryStorage;
}

},{"./IndexedDbStorage":"hHWv9","./InMemoryStorage":"ahA5s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHWv9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IndexedDbStorage", ()=>IndexedDbStorage);
var STORE_NAME = "IdentityIds";
var IndexedDbStorage = /** @class */ function() {
    function IndexedDbStorage(dbName) {
        if (dbName === void 0) dbName = "aws:cognito-identity-ids";
        this.dbName = dbName;
    }
    IndexedDbStorage.prototype.getItem = function(key) {
        return this.withObjectStore("readonly", function(store) {
            var req = store.get(key);
            return new Promise(function(resolve) {
                req.onerror = function() {
                    return resolve(null);
                };
                req.onsuccess = function() {
                    return resolve(req.result ? req.result.value : null);
                };
            });
        }).catch(function() {
            return null;
        });
    };
    IndexedDbStorage.prototype.removeItem = function(key) {
        return this.withObjectStore("readwrite", function(store) {
            var req = store.delete(key);
            return new Promise(function(resolve, reject) {
                req.onerror = function() {
                    return reject(req.error);
                };
                req.onsuccess = function() {
                    return resolve();
                };
            });
        });
    };
    IndexedDbStorage.prototype.setItem = function(id, value) {
        return this.withObjectStore("readwrite", function(store) {
            var req = store.put({
                id: id,
                value: value
            });
            return new Promise(function(resolve, reject) {
                req.onerror = function() {
                    return reject(req.error);
                };
                req.onsuccess = function() {
                    return resolve();
                };
            });
        });
    };
    IndexedDbStorage.prototype.getDb = function() {
        var openDbRequest = self.indexedDB.open(this.dbName, 1);
        return new Promise(function(resolve, reject) {
            openDbRequest.onsuccess = function() {
                resolve(openDbRequest.result);
            };
            openDbRequest.onerror = function() {
                reject(openDbRequest.error);
            };
            openDbRequest.onblocked = function() {
                reject(new Error("Unable to access DB"));
            };
            openDbRequest.onupgradeneeded = function() {
                var db = openDbRequest.result;
                db.onerror = function() {
                    reject(new Error("Failed to create object store"));
                };
                db.createObjectStore(STORE_NAME, {
                    keyPath: "id"
                });
            };
        });
    };
    IndexedDbStorage.prototype.withObjectStore = function(mode, action) {
        return this.getDb().then(function(db) {
            var tx = db.transaction(STORE_NAME, mode);
            tx.oncomplete = function() {
                return db.close();
            };
            return new Promise(function(resolve, reject) {
                tx.onerror = function() {
                    return reject(tx.error);
                };
                resolve(action(tx.objectStore(STORE_NAME)));
            }).catch(function(err) {
                db.close();
                throw err;
            });
        });
    };
    return IndexedDbStorage;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ahA5s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InMemoryStorage", ()=>InMemoryStorage);
var InMemoryStorage = /** @class */ function() {
    function InMemoryStorage(store) {
        if (store === void 0) store = {};
        this.store = store;
    }
    InMemoryStorage.prototype.getItem = function(key) {
        if (key in this.store) return this.store[key];
        return null;
    };
    InMemoryStorage.prototype.removeItem = function(key) {
        delete this.store[key];
    };
    InMemoryStorage.prototype.setItem = function(key, value) {
        this.store[key] = value;
    };
    return InMemoryStorage;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kIufi":[function(require,module,exports) {
/**
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServiceWorker", ()=>(0, _serviceWorker.ServiceWorkerClass));
var _serviceWorker = require("./ServiceWorker");

},{"./ServiceWorker":"lmjvH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmjvH":[function(require,module,exports) {
/**
 * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServiceWorkerClass", ()=>ServiceWorkerClass);
var _logger = require("../Logger");
var _js = require("../JS");
var _amplify = require("../Amplify");
/**
 * Provides a means to registering a service worker in the browser
 * and communicating with it via postMessage events.
 * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/
 *
 * postMessage events are currently not supported in all browsers. See:
 * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API
 *
 * At the minmum this class will register the service worker and listen
 * and attempt to dispatch messages on state change and record analytics
 * events based on the service worker lifecycle.
 */ var ServiceWorkerClass = /** @class */ function() {
    function ServiceWorkerClass() {
        // The AWS Amplify logger
        this._logger = new (0, _logger.ConsoleLogger)("ServiceWorker");
    }
    Object.defineProperty(ServiceWorkerClass.prototype, "serviceWorker", {
        /**
         * Get the currently active service worker
         */ get: function() {
            return this._serviceWorker;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Register the service-worker.js file in the browser
     * Make sure the service-worker.js is part of the build
     * for example with Angular, modify the angular-cli.json file
     * and add to "assets" array "service-worker.js"
     * @param {string} - (optional) Service worker file. Defaults to "/service-worker.js"
     * @param {string} - (optional) The service worker scope. Defaults to "/"
     *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register
     * @returns {Promise}
     *	- resolve(ServiceWorkerRegistration)
     *	- reject(Error)
     **/ ServiceWorkerClass.prototype.register = function(filePath, scope) {
        var _this = this;
        if (filePath === void 0) filePath = "/service-worker.js";
        if (scope === void 0) scope = "/";
        this._logger.debug("registering " + filePath);
        this._logger.debug("registering service worker with scope " + scope);
        return new Promise(function(resolve, reject) {
            if (navigator && "serviceWorker" in navigator) navigator.serviceWorker.register(filePath, {
                scope: scope
            }).then(function(registration) {
                if (registration.installing) _this._serviceWorker = registration.installing;
                else if (registration.waiting) _this._serviceWorker = registration.waiting;
                else if (registration.active) _this._serviceWorker = registration.active;
                _this._registration = registration;
                _this._setupListeners();
                _this._logger.debug("Service Worker Registration Success: " + registration);
                return resolve(registration);
            }).catch(function(error) {
                _this._logger.debug("Service Worker Registration Failed " + error);
                return reject(error);
            });
            else return reject(new Error("Service Worker not available"));
        });
    };
    /**
     * Enable web push notifications. If not subscribed, a new subscription will
     * be created and registered.
     * 	Test Push Server: https://web-push-codelab.glitch.me/
     * 	Push Server Libraries: https://github.com/web-push-libs/
     * 	API Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/
     * @param publicKey
     * @returns {Promise}
     * 	- resolve(PushSubscription)
     *  - reject(Error)
     */ ServiceWorkerClass.prototype.enablePush = function(publicKey) {
        var _this = this;
        if (!this._registration) throw new Error("Service Worker not registered");
        this._publicKey = publicKey;
        return new Promise(function(resolve, reject) {
            if ((0, _js.browserOrNode)().isBrowser) _this._registration.pushManager.getSubscription().then(function(subscription) {
                if (subscription) {
                    _this._subscription = subscription;
                    _this._logger.debug("User is subscribed to push: " + JSON.stringify(subscription));
                    resolve(subscription);
                } else {
                    _this._logger.debug("User is NOT subscribed to push");
                    return _this._registration.pushManager.subscribe({
                        userVisibleOnly: true,
                        applicationServerKey: _this._urlB64ToUint8Array(publicKey)
                    }).then(function(subscription) {
                        _this._subscription = subscription;
                        _this._logger.debug("User subscribed: " + JSON.stringify(subscription));
                        resolve(subscription);
                    }).catch(function(error) {
                        _this._logger.error(error);
                    });
                }
            });
            else return reject(new Error("Service Worker not available"));
        });
    };
    /**
     * Convert a base64 encoded string to a Uint8 array for the push server key
     * @param base64String
     */ ServiceWorkerClass.prototype._urlB64ToUint8Array = function(base64String) {
        var padding = "=".repeat((4 - base64String.length % 4) % 4);
        var base64 = (base64String + padding).replace(/\-/g, "+").replace(/_/g, "/");
        var rawData = window.atob(base64);
        var outputArray = new Uint8Array(rawData.length);
        for(var i = 0; i < rawData.length; ++i)outputArray[i] = rawData.charCodeAt(i);
        return outputArray;
    };
    /**
     * Send a message to the service worker. The service worker needs
     * to implement `self.addEventListener('message') to handle the
     * message. This ***currently*** does not work in Safari or IE.
     * @param {object | string} - An arbitrary JSON object or string message to send to the service worker
     *	- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable
     * @returns {Promise}
     **/ ServiceWorkerClass.prototype.send = function(message) {
        if (this._serviceWorker) this._serviceWorker.postMessage(typeof message === "object" ? JSON.stringify(message) : message);
    };
    /**
     * Listen for service worker state change and message events
     * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state
     **/ ServiceWorkerClass.prototype._setupListeners = function() {
        var _this = this;
        this._serviceWorker.addEventListener("statechange", function(event) {
            var currentState = _this._serviceWorker.state;
            _this._logger.debug("ServiceWorker statechange: " + currentState);
            if ((0, _amplify.Amplify).Analytics && typeof (0, _amplify.Amplify).Analytics.record === "function") (0, _amplify.Amplify).Analytics.record({
                name: "ServiceWorker",
                attributes: {
                    state: currentState
                }
            });
        });
        this._serviceWorker.addEventListener("message", function(event) {
            _this._logger.debug("ServiceWorker message event: " + event);
        });
    };
    return ServiceWorkerClass;
}();
/**
 * @deprecated use named import
 */ exports.default = ServiceWorkerClass;

},{"../Logger":"aOIPE","../JS":"fFubg","../Amplify":"4gP56","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iBN8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UniversalStorage", ()=>UniversalStorage);
var _universalCookie = require("universal-cookie");
var _universalCookieDefault = parcelHelpers.interopDefault(_universalCookie);
var _js = require("../JS");
var isBrowser = (0, _js.browserOrNode)().isBrowser;
var UniversalStorage = /** @class */ function() {
    function UniversalStorage(context) {
        if (context === void 0) context = {};
        this.cookies = new (0, _universalCookieDefault.default)();
        this.store = isBrowser ? window.localStorage : Object.create(null);
        this.cookies = context.req ? new (0, _universalCookieDefault.default)(context.req.headers.cookie) : new (0, _universalCookieDefault.default)();
        Object.assign(this.store, this.cookies.getAll());
    }
    Object.defineProperty(UniversalStorage.prototype, "length", {
        get: function() {
            return Object.entries(this.store).length;
        },
        enumerable: true,
        configurable: true
    });
    UniversalStorage.prototype.clear = function() {
        var _this = this;
        Array.from(new Array(this.length)).map(function(_, i) {
            return _this.key(i);
        }).forEach(function(key) {
            return _this.removeItem(key);
        });
    };
    UniversalStorage.prototype.getItem = function(key) {
        return this.getLocalItem(key);
    };
    UniversalStorage.prototype.getLocalItem = function(key) {
        return Object.prototype.hasOwnProperty.call(this.store, key) ? this.store[key] : null;
    };
    UniversalStorage.prototype.getUniversalItem = function(key) {
        return this.cookies.get(key);
    };
    UniversalStorage.prototype.key = function(index) {
        return Object.keys(this.store)[index];
    };
    UniversalStorage.prototype.removeItem = function(key) {
        this.removeLocalItem(key);
        this.removeUniversalItem(key);
    };
    UniversalStorage.prototype.removeLocalItem = function(key) {
        delete this.store[key];
    };
    UniversalStorage.prototype.removeUniversalItem = function(key) {
        this.cookies.remove(key, {
            path: "/"
        });
    };
    UniversalStorage.prototype.setItem = function(key, value) {
        this.setLocalItem(key, value);
        // keys take the shape:
        //  1. `${ProviderPrefix}.${userPoolClientId}.${username}.${tokenType}
        //  2. `${ProviderPrefix}.${userPoolClientId}.LastAuthUser
        var tokenType = key.split(".").pop();
        switch(tokenType){
            // LastAuthUser is needed for computing other key names
            case "LastAuthUser":
            // accessToken is required for CognitoUserSession
            case "accessToken":
            // refreshToken originates on the client, but SSR pages won't fail when this expires
            // Note: the new `accessToken` will also be refreshed on the client (since Amplify doesn't set server-side cookies)
            case "refreshToken":
            // Required for CognitoUserSession
            case "idToken":
                isBrowser ? this.setUniversalItem(key, value) : this.setLocalItem(key, value);
        }
    };
    UniversalStorage.prototype.setLocalItem = function(key, value) {
        this.store[key] = value;
    };
    UniversalStorage.prototype.setUniversalItem = function(key, value) {
        this.cookies.set(key, value, {
            path: "/",
            // `httpOnly` cannot be set via JavaScript: https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies#JavaScript_access_using_Document.cookie
            sameSite: true,
            // Allow unsecure requests to http://localhost:3000/ when in development.
            secure: window.location.hostname === "localhost" ? false : true
        });
    };
    return UniversalStorage;
}();

},{"universal-cookie":"7mx41","../JS":"fFubg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7mx41":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cookies = require("./Cookies");
var _cookiesDefault = parcelHelpers.interopDefault(_cookies);
exports.default = (0, _cookiesDefault.default);

},{"./Cookies":"dLGVH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dLGVH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cookie = require("cookie");
var _utils = require("./utils");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var Cookies = /** @class */ function() {
    function Cookies(cookies, options) {
        var _this = this;
        this.changeListeners = [];
        this.HAS_DOCUMENT_COOKIE = false;
        this.cookies = (0, _utils.parseCookies)(cookies, options);
        new Promise(function() {
            _this.HAS_DOCUMENT_COOKIE = (0, _utils.hasDocumentCookie)();
        }).catch(function() {});
    }
    Cookies.prototype._updateBrowserValues = function(parseOptions) {
        if (!this.HAS_DOCUMENT_COOKIE) return;
        this.cookies = _cookie.parse(document.cookie, parseOptions);
    };
    Cookies.prototype._emitChange = function(params) {
        for(var i = 0; i < this.changeListeners.length; ++i)this.changeListeners[i](params);
    };
    Cookies.prototype.get = function(name, options, parseOptions) {
        if (options === void 0) options = {};
        this._updateBrowserValues(parseOptions);
        return (0, _utils.readCookie)(this.cookies[name], options);
    };
    Cookies.prototype.getAll = function(options, parseOptions) {
        if (options === void 0) options = {};
        this._updateBrowserValues(parseOptions);
        var result = {};
        for(var name_1 in this.cookies)result[name_1] = (0, _utils.readCookie)(this.cookies[name_1], options);
        return result;
    };
    Cookies.prototype.set = function(name, value, options) {
        var _a;
        if (typeof value === "object") value = JSON.stringify(value);
        this.cookies = __assign(__assign({}, this.cookies), (_a = {}, _a[name] = value, _a));
        if (this.HAS_DOCUMENT_COOKIE) document.cookie = _cookie.serialize(name, value, options);
        this._emitChange({
            name: name,
            value: value,
            options: options
        });
    };
    Cookies.prototype.remove = function(name, options) {
        var finalOptions = options = __assign(__assign({}, options), {
            expires: new Date(1970, 1, 1, 0, 0, 1),
            maxAge: 0
        });
        this.cookies = __assign({}, this.cookies);
        delete this.cookies[name];
        if (this.HAS_DOCUMENT_COOKIE) document.cookie = _cookie.serialize(name, "", finalOptions);
        this._emitChange({
            name: name,
            value: undefined,
            options: options
        });
    };
    Cookies.prototype.addChangeListener = function(callback) {
        this.changeListeners.push(callback);
    };
    Cookies.prototype.removeChangeListener = function(callback) {
        var idx = this.changeListeners.indexOf(callback);
        if (idx >= 0) this.changeListeners.splice(idx, 1);
    };
    return Cookies;
}();
exports.default = Cookies;

},{"cookie":"luAip","./utils":"1oWCi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"luAip":[function(require,module,exports) {
/*!
 * cookie
 * Copyright(c) 2012-2014 Roman Shtylman
 * Copyright(c) 2015 Douglas Christopher Wilson
 * MIT Licensed
 */ "use strict";
/**
 * Module exports.
 * @public
 */ exports.parse = parse;
exports.serialize = serialize;
/**
 * Module variables.
 * @private
 */ var decode = decodeURIComponent;
var encode = encodeURIComponent;
/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */ var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
/**
 * Parse a cookie header.
 *
 * Parse the given cookie header string into an object
 * The object has the various cookies as keys(names) => values
 *
 * @param {string} str
 * @param {object} [options]
 * @return {object}
 * @public
 */ function parse(str, options) {
    if (typeof str !== "string") throw new TypeError("argument str must be a string");
    var obj = {};
    var opt = options || {};
    var pairs = str.split(";");
    var dec = opt.decode || decode;
    for(var i = 0; i < pairs.length; i++){
        var pair = pairs[i];
        var index = pair.indexOf("=");
        // skip things that don't look like key=value
        if (index < 0) continue;
        var key = pair.substring(0, index).trim();
        // only assign once
        if (undefined == obj[key]) {
            var val = pair.substring(index + 1, pair.length).trim();
            // quoted values
            if (val[0] === '"') val = val.slice(1, -1);
            obj[key] = tryDecode(val, dec);
        }
    }
    return obj;
}
/**
 * Serialize data into a cookie header.
 *
 * Serialize the a name value pair into a cookie string suitable for
 * http headers. An optional options object specified cookie parameters.
 *
 * serialize('foo', 'bar', { httpOnly: true })
 *   => "foo=bar; httpOnly"
 *
 * @param {string} name
 * @param {string} val
 * @param {object} [options]
 * @return {string}
 * @public
 */ function serialize(name, val, options) {
    var opt = options || {};
    var enc = opt.encode || encode;
    if (typeof enc !== "function") throw new TypeError("option encode is invalid");
    if (!fieldContentRegExp.test(name)) throw new TypeError("argument name is invalid");
    var value = enc(val);
    if (value && !fieldContentRegExp.test(value)) throw new TypeError("argument val is invalid");
    var str = name + "=" + value;
    if (null != opt.maxAge) {
        var maxAge = opt.maxAge - 0;
        if (isNaN(maxAge) || !isFinite(maxAge)) throw new TypeError("option maxAge is invalid");
        str += "; Max-Age=" + Math.floor(maxAge);
    }
    if (opt.domain) {
        if (!fieldContentRegExp.test(opt.domain)) throw new TypeError("option domain is invalid");
        str += "; Domain=" + opt.domain;
    }
    if (opt.path) {
        if (!fieldContentRegExp.test(opt.path)) throw new TypeError("option path is invalid");
        str += "; Path=" + opt.path;
    }
    if (opt.expires) {
        if (typeof opt.expires.toUTCString !== "function") throw new TypeError("option expires is invalid");
        str += "; Expires=" + opt.expires.toUTCString();
    }
    if (opt.httpOnly) str += "; HttpOnly";
    if (opt.secure) str += "; Secure";
    if (opt.sameSite) {
        var sameSite = typeof opt.sameSite === "string" ? opt.sameSite.toLowerCase() : opt.sameSite;
        switch(sameSite){
            case true:
                str += "; SameSite=Strict";
                break;
            case "lax":
                str += "; SameSite=Lax";
                break;
            case "strict":
                str += "; SameSite=Strict";
                break;
            case "none":
                str += "; SameSite=None";
                break;
            default:
                throw new TypeError("option sameSite is invalid");
        }
    }
    return str;
}
/**
 * Try decoding a string using a decoding function.
 *
 * @param {string} str
 * @param {function} decode
 * @private
 */ function tryDecode(str, decode) {
    try {
        return decode(str);
    } catch (e) {
        return str;
    }
}

},{}],"1oWCi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasDocumentCookie", ()=>hasDocumentCookie);
parcelHelpers.export(exports, "cleanCookies", ()=>cleanCookies);
parcelHelpers.export(exports, "parseCookies", ()=>parseCookies);
parcelHelpers.export(exports, "isParsingCookie", ()=>isParsingCookie);
parcelHelpers.export(exports, "readCookie", ()=>readCookie);
var _cookie = require("cookie");
function hasDocumentCookie() {
    // Can we get/set cookies on document.cookie?
    return typeof document === "object" && typeof document.cookie === "string";
}
function cleanCookies() {
    document.cookie.split(";").forEach(function(c) {
        document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
    });
}
function parseCookies(cookies, options) {
    if (typeof cookies === "string") return _cookie.parse(cookies, options);
    else if (typeof cookies === "object" && cookies !== null) return cookies;
    else return {};
}
function isParsingCookie(value, doNotParse) {
    if (typeof doNotParse === "undefined") // We guess if the cookie start with { or [, it has been serialized
    doNotParse = !value || value[0] !== "{" && value[0] !== "[" && value[0] !== '"';
    return !doNotParse;
}
function readCookie(value, options) {
    if (options === void 0) options = {};
    var cleanValue = cleanupCookieValue(value);
    if (isParsingCookie(cleanValue, options.doNotParse)) try {
        return JSON.parse(cleanValue);
    } catch (e) {
    // At least we tried
    }
    // Ignore clean value if we failed the deserialization
    // It is not relevant anymore to trim those values
    return value;
}
function cleanupCookieValue(value) {
    // express prepend j: before serializing a cookie
    if (value && value[0] === "j" && value[1] === ":") return value.substr(2);
    return value;
}

},{"cookie":"luAip","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"51piL":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Auth", ()=>(0, _auth.Auth));
parcelHelpers.export(exports, "CognitoUser", ()=>(0, _amazonCognitoIdentityJs.CognitoUser));
parcelHelpers.export(exports, "CookieStorage", ()=>(0, _amazonCognitoIdentityJs.CookieStorage));
parcelHelpers.export(exports, "CognitoHostedUIIdentityProvider", ()=>(0, _auth1.CognitoHostedUIIdentityProvider));
parcelHelpers.export(exports, "appendToCognitoUserAgent", ()=>(0, _amazonCognitoIdentityJs.appendToCognitoUserAgent));
parcelHelpers.export(exports, "AuthErrorStrings", ()=>(0, _authErrorStrings.AuthErrorStrings));
var _auth = require("./Auth");
var _auth1 = require("./types/Auth");
var _amazonCognitoIdentityJs = require("amazon-cognito-identity-js");
var _authErrorStrings = require("./common/AuthErrorStrings");
/**
 * @deprecated use named import
 */ exports.default = (0, _auth.Auth);

},{"./Auth":"6E7Qm","./types/Auth":false,"amazon-cognito-identity-js":"i9HVr","./common/AuthErrorStrings":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6E7Qm":[function(require,module,exports) {
/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *	 http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthClass", ()=>AuthClass);
parcelHelpers.export(exports, "Auth", ()=>Auth);
var _types = require("./types");
var _core = require("@aws-amplify/core");
var _amazonCognitoIdentityJs = require("amazon-cognito-identity-js");
var _url = require("url");
var _oauth = require("./OAuth/OAuth");
var _oauthDefault = parcelHelpers.interopDefault(_oauth);
var _urlListener = require("./urlListener");
var _urlListenerDefault = parcelHelpers.interopDefault(_urlListener);
var _errors = require("./Errors");
var _auth = require("./types/Auth");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var logger = new (0, _core.ConsoleLogger)("AuthClass");
var USER_ADMIN_SCOPE = "aws.cognito.signin.user.admin";
// 10 sec, following this guide https://www.nngroup.com/articles/response-times-3-important-limits/
var OAUTH_FLOW_MS_TIMEOUT = 10000;
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchAuthEvent = function(event, data, message) {
    (0, _core.Hub).dispatch("auth", {
        event: event,
        data: data,
        message: message
    }, "Auth", AMPLIFY_SYMBOL);
};
// Cognito Documentation for max device
// tslint:disable-next-line:max-line-length
// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax
var MAX_DEVICES = 60;
/**
 * Provide authentication steps
 */ var AuthClass = /** @class */ function() {
    /**
     * Initialize Auth with AWS configurations
     * @param {Object} config - Configuration of the Auth
     */ function AuthClass(config) {
        var _this = this;
        this.userPool = null;
        this.user = null;
        this.oAuthFlowInProgress = false;
        this.Credentials = (0, _core.Credentials);
        this.wrapRefreshSessionCallback = function(callback) {
            var wrapped = function(error, data) {
                if (data) dispatchAuthEvent("tokenRefresh", undefined, "New token retrieved");
                else dispatchAuthEvent("tokenRefresh_failure", error, "Failed to retrieve new token");
                return callback(error, data);
            };
            return wrapped;
        }; // prettier-ignore
        this.configure(config);
        this.currentCredentials = this.currentCredentials.bind(this);
        this.currentUserCredentials = this.currentUserCredentials.bind(this);
        (0, _core.Hub).listen("auth", function(_a) {
            var payload = _a.payload;
            var event = payload.event;
            switch(event){
                case "signIn":
                    _this._storage.setItem("amplify-signin-with-hostedUI", "false");
                    break;
                case "signOut":
                    _this._storage.removeItem("amplify-signin-with-hostedUI");
                    break;
                case "cognitoHostedUI":
                    _this._storage.setItem("amplify-signin-with-hostedUI", "true");
                    break;
            }
        });
    }
    AuthClass.prototype.getModuleName = function() {
        return "Auth";
    };
    AuthClass.prototype.configure = function(config) {
        var _this = this;
        if (!config) return this._config || {};
        logger.debug("configure Auth");
        var conf = Object.assign({}, this._config, (0, _core.Parser).parseMobilehubConfig(config).Auth, config);
        this._config = conf;
        var _a = this._config, userPoolId = _a.userPoolId, userPoolWebClientId = _a.userPoolWebClientId, cookieStorage = _a.cookieStorage, oauth = _a.oauth, region = _a.region, identityPoolId = _a.identityPoolId, mandatorySignIn = _a.mandatorySignIn, refreshHandlers = _a.refreshHandlers, identityPoolRegion = _a.identityPoolRegion, clientMetadata = _a.clientMetadata, endpoint = _a.endpoint;
        if (!this._config.storage) {
            // backward compatability
            if (cookieStorage) this._storage = new (0, _amazonCognitoIdentityJs.CookieStorage)(cookieStorage);
            else this._storage = config.ssr ? new (0, _core.UniversalStorage)() : new (0, _core.StorageHelper)().getStorage();
        } else {
            if (!this._isValidAuthStorage(this._config.storage)) {
                logger.error("The storage in the Auth config is not valid!");
                throw new Error("Empty storage object");
            }
            this._storage = this._config.storage;
        }
        this._storageSync = Promise.resolve();
        if (typeof this._storage["sync"] === "function") this._storageSync = this._storage["sync"]();
        if (userPoolId) {
            var userPoolData = {
                UserPoolId: userPoolId,
                ClientId: userPoolWebClientId,
                endpoint: endpoint
            };
            userPoolData.Storage = this._storage;
            this.userPool = new (0, _amazonCognitoIdentityJs.CognitoUserPool)(userPoolData, this.wrapRefreshSessionCallback);
        }
        this.Credentials.configure({
            mandatorySignIn: mandatorySignIn,
            region: identityPoolRegion || region,
            userPoolId: userPoolId,
            identityPoolId: identityPoolId,
            refreshHandlers: refreshHandlers,
            storage: this._storage
        });
        // initialize cognitoauth client if hosted ui options provided
        // to keep backward compatibility:
        var cognitoHostedUIConfig = oauth ? (0, _types.isCognitoHostedOpts)(this._config.oauth) ? oauth : oauth.awsCognito : undefined;
        if (cognitoHostedUIConfig) {
            var cognitoAuthParams = Object.assign({
                cognitoClientId: userPoolWebClientId,
                UserPoolId: userPoolId,
                domain: cognitoHostedUIConfig["domain"],
                scopes: cognitoHostedUIConfig["scope"],
                redirectSignIn: cognitoHostedUIConfig["redirectSignIn"],
                redirectSignOut: cognitoHostedUIConfig["redirectSignOut"],
                responseType: cognitoHostedUIConfig["responseType"],
                Storage: this._storage,
                urlOpener: cognitoHostedUIConfig["urlOpener"],
                clientMetadata: clientMetadata
            }, cognitoHostedUIConfig["options"]);
            this._oAuthHandler = new (0, _oauthDefault.default)({
                scopes: cognitoAuthParams.scopes,
                config: cognitoAuthParams,
                cognitoClientId: cognitoAuthParams.cognitoClientId
            });
            // **NOTE** - Remove this in a future major release as it is a breaking change
            // Prevents _handleAuthResponse from being called multiple times in Expo
            // See https://github.com/aws-amplify/amplify-js/issues/4388
            var usedResponseUrls_1 = {};
            (0, _urlListenerDefault.default)(function(_a) {
                var url = _a.url;
                if (usedResponseUrls_1[url]) return;
                usedResponseUrls_1[url] = true;
                _this._handleAuthResponse(url);
            });
        }
        dispatchAuthEvent("configured", null, "The Auth category has been configured successfully");
        return this._config;
    };
    /**
     * Sign up with username, password and other attributes like phone, email
     * @param {String | object} params - The user attributes used for signin
     * @param {String[]} restOfAttrs - for the backward compatability
     * @return - A promise resolves callback data if success
     */ AuthClass.prototype.signUp = function(params) {
        var _this = this;
        var restOfAttrs = [];
        for(var _i = 1; _i < arguments.length; _i++)restOfAttrs[_i - 1] = arguments[_i];
        if (!this.userPool) return this.rejectNoUserPool();
        var username = null;
        var password = null;
        var attributes = [];
        var validationData = null;
        var clientMetadata;
        if (params && typeof params === "string") {
            username = params;
            password = restOfAttrs ? restOfAttrs[0] : null;
            var email = restOfAttrs ? restOfAttrs[1] : null;
            var phone_number = restOfAttrs ? restOfAttrs[2] : null;
            if (email) attributes.push(new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)({
                Name: "email",
                Value: email
            }));
            if (phone_number) attributes.push(new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)({
                Name: "phone_number",
                Value: phone_number
            }));
        } else if (params && typeof params === "object") {
            username = params["username"];
            password = params["password"];
            if (params && params.clientMetadata) clientMetadata = params.clientMetadata;
            else if (this._config.clientMetadata) clientMetadata = this._config.clientMetadata;
            var attrs_1 = params["attributes"];
            if (attrs_1) Object.keys(attrs_1).map(function(key) {
                attributes.push(new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)({
                    Name: key,
                    Value: attrs_1[key]
                }));
            });
            var validationDataObject_1 = params["validationData"];
            if (validationDataObject_1) {
                validationData = [];
                Object.keys(validationDataObject_1).map(function(key) {
                    validationData.push(new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)({
                        Name: key,
                        Value: validationDataObject_1[key]
                    }));
                });
            }
        } else return this.rejectAuthError((0, _auth.AuthErrorTypes).SignUpError);
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        if (!password) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyPassword);
        logger.debug("signUp attrs:", attributes);
        logger.debug("signUp validation data:", validationData);
        return new Promise(function(resolve, reject) {
            _this.userPool.signUp(username, password, attributes, validationData, function(err, data) {
                if (err) {
                    dispatchAuthEvent("signUp_failure", err, username + " failed to signup");
                    reject(err);
                } else {
                    dispatchAuthEvent("signUp", data, username + " has signed up successfully");
                    resolve(data);
                }
            }, clientMetadata);
        });
    };
    /**
     * Send the verification code to confirm sign up
     * @param {String} username - The username to be confirmed
     * @param {String} code - The verification code
     * @param {ConfirmSignUpOptions} options - other options for confirm signup
     * @return - A promise resolves callback data if success
     */ AuthClass.prototype.confirmSignUp = function(username, code, options) {
        if (!this.userPool) return this.rejectNoUserPool();
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        if (!code) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyCode);
        var user = this.createCognitoUser(username);
        var forceAliasCreation = options && typeof options.forceAliasCreation === "boolean" ? options.forceAliasCreation : true;
        var clientMetadata;
        if (options && options.clientMetadata) clientMetadata = options.clientMetadata;
        else if (this._config.clientMetadata) clientMetadata = this._config.clientMetadata;
        return new Promise(function(resolve, reject) {
            user.confirmRegistration(code, forceAliasCreation, function(err, data) {
                if (err) reject(err);
                else resolve(data);
            }, clientMetadata);
        });
    };
    /**
     * Resend the verification code
     * @param {String} username - The username to be confirmed
     * @param {ClientMetadata} clientMetadata - Metadata to be passed to Cognito Lambda triggers
     * @return - A promise resolves code delivery details if successful
     */ AuthClass.prototype.resendSignUp = function(username, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        var user = this.createCognitoUser(username);
        return new Promise(function(resolve, reject) {
            user.resendConfirmationCode(function(err, data) {
                if (err) reject(err);
                else resolve(data);
            }, clientMetadata);
        });
    };
    /**
     * Sign in
     * @param {String | SignInOpts} usernameOrSignInOpts - The username to be signed in or the sign in options
     * @param {String} password - The password of the username
     * @return - A promise resolves the CognitoUser
     */ AuthClass.prototype.signIn = function(usernameOrSignInOpts, pw, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        var username = null;
        var password = null;
        var validationData = {};
        // for backward compatibility
        if (typeof usernameOrSignInOpts === "string") {
            username = usernameOrSignInOpts;
            password = pw;
        } else if ((0, _types.isUsernamePasswordOpts)(usernameOrSignInOpts)) {
            if (typeof pw !== "undefined") logger.warn("The password should be defined under the first parameter object!");
            username = usernameOrSignInOpts.username;
            password = usernameOrSignInOpts.password;
            validationData = usernameOrSignInOpts.validationData;
        } else return this.rejectAuthError((0, _auth.AuthErrorTypes).InvalidUsername);
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        var authDetails = new (0, _amazonCognitoIdentityJs.AuthenticationDetails)({
            Username: username,
            Password: password,
            ValidationData: validationData,
            ClientMetadata: clientMetadata
        });
        if (password) return this.signInWithPassword(authDetails);
        else return this.signInWithoutPassword(authDetails);
    };
    /**
     * Return an object with the authentication callbacks
     * @param {CognitoUser} user - the cognito user object
     * @param {} resolve - function called when resolving the current step
     * @param {} reject - function called when rejecting the current step
     * @return - an object with the callback methods for user authentication
     */ AuthClass.prototype.authCallbacks = function(user, resolve, reject) {
        var _this = this;
        var that = this;
        return {
            onSuccess: function(session) {
                return __awaiter(_this, void 0, void 0, function() {
                    var cred, e_1, currentUser, e_2;
                    return __generator(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                logger.debug(session);
                                delete user["challengeName"];
                                delete user["challengeParam"];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([
                                    1,
                                    4,
                                    5,
                                    9
                                ]);
                                return [
                                    4 /*yield*/ ,
                                    this.Credentials.clear()
                                ];
                            case 2:
                                _a.sent();
                                return [
                                    4 /*yield*/ ,
                                    this.Credentials.set(session, "session")
                                ];
                            case 3:
                                cred = _a.sent();
                                logger.debug("succeed to get cognito credentials", cred);
                                return [
                                    3 /*break*/ ,
                                    9
                                ];
                            case 4:
                                e_1 = _a.sent();
                                logger.debug("cannot get cognito credentials", e_1);
                                return [
                                    3 /*break*/ ,
                                    9
                                ];
                            case 5:
                                _a.trys.push([
                                    5,
                                    7,
                                    ,
                                    8
                                ]);
                                return [
                                    4 /*yield*/ ,
                                    this.currentUserPoolUser()
                                ];
                            case 6:
                                currentUser = _a.sent();
                                that.user = currentUser;
                                dispatchAuthEvent("signIn", currentUser, "A user " + user.getUsername() + " has been signed in");
                                resolve(currentUser);
                                return [
                                    3 /*break*/ ,
                                    8
                                ];
                            case 7:
                                e_2 = _a.sent();
                                logger.error("Failed to get the signed in user", e_2);
                                reject(e_2);
                                return [
                                    3 /*break*/ ,
                                    8
                                ];
                            case 8:
                                return [
                                    7 /*endfinally*/ 
                                ];
                            case 9:
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            },
            onFailure: function(err) {
                logger.debug("signIn failure", err);
                dispatchAuthEvent("signIn_failure", err, user.getUsername() + " failed to signin");
                reject(err);
            },
            customChallenge: function(challengeParam) {
                logger.debug("signIn custom challenge answer required");
                user["challengeName"] = "CUSTOM_CHALLENGE";
                user["challengeParam"] = challengeParam;
                resolve(user);
            },
            mfaRequired: function(challengeName, challengeParam) {
                logger.debug("signIn MFA required");
                user["challengeName"] = challengeName;
                user["challengeParam"] = challengeParam;
                resolve(user);
            },
            mfaSetup: function(challengeName, challengeParam) {
                logger.debug("signIn mfa setup", challengeName);
                user["challengeName"] = challengeName;
                user["challengeParam"] = challengeParam;
                resolve(user);
            },
            newPasswordRequired: function(userAttributes, requiredAttributes) {
                logger.debug("signIn new password");
                user["challengeName"] = "NEW_PASSWORD_REQUIRED";
                user["challengeParam"] = {
                    userAttributes: userAttributes,
                    requiredAttributes: requiredAttributes
                };
                resolve(user);
            },
            totpRequired: function(challengeName, challengeParam) {
                logger.debug("signIn totpRequired");
                user["challengeName"] = challengeName;
                user["challengeParam"] = challengeParam;
                resolve(user);
            },
            selectMFAType: function(challengeName, challengeParam) {
                logger.debug("signIn selectMFAType", challengeName);
                user["challengeName"] = challengeName;
                user["challengeParam"] = challengeParam;
                resolve(user);
            }
        };
    };
    /**
     * Sign in with a password
     * @private
     * @param {AuthenticationDetails} authDetails - the user sign in data
     * @return - A promise resolves the CognitoUser object if success or mfa required
     */ AuthClass.prototype.signInWithPassword = function(authDetails) {
        var _this = this;
        if (this.pendingSignIn) throw new Error("Pending sign-in attempt already in progress");
        var user = this.createCognitoUser(authDetails.getUsername());
        this.pendingSignIn = new Promise(function(resolve, reject) {
            user.authenticateUser(authDetails, _this.authCallbacks(user, function(value) {
                _this.pendingSignIn = null;
                resolve(value);
            }, function(error) {
                _this.pendingSignIn = null;
                reject(error);
            }));
        });
        return this.pendingSignIn;
    };
    /**
     * Sign in without a password
     * @private
     * @param {AuthenticationDetails} authDetails - the user sign in data
     * @return - A promise resolves the CognitoUser object if success or mfa required
     */ AuthClass.prototype.signInWithoutPassword = function(authDetails) {
        var _this = this;
        var user = this.createCognitoUser(authDetails.getUsername());
        user.setAuthenticationFlowType("CUSTOM_AUTH");
        return new Promise(function(resolve, reject) {
            user.initiateAuth(authDetails, _this.authCallbacks(user, resolve, reject));
        });
    };
    /**
     * This was previously used by an authenticated user to get MFAOptions,
     * but no longer returns a meaningful response. Refer to the documentation for
     * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js
     * @deprecated
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves the current preferred mfa option if success
     */ AuthClass.prototype.getMFAOptions = function(user) {
        return new Promise(function(res, rej) {
            user.getMFAOptions(function(err, mfaOptions) {
                if (err) {
                    logger.debug("get MFA Options failed", err);
                    rej(err);
                    return;
                }
                logger.debug("get MFA options success", mfaOptions);
                res(mfaOptions);
                return;
            });
        });
    };
    /**
     * get preferred mfa method
     * @param {CognitoUser} user - the current cognito user
     * @param {GetPreferredMFAOpts} params - options for getting the current user preferred MFA
     */ AuthClass.prototype.getPreferredMFA = function(user, params) {
        var _this = this;
        var that = this;
        return new Promise(function(res, rej) {
            var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
            var bypassCache = params ? params.bypassCache : false;
            user.getUserData(function(err, data) {
                if (err) {
                    logger.debug("getting preferred mfa failed", err);
                    rej(err);
                    return;
                }
                var mfaType = that._getMfaTypeFromUserData(data);
                if (!mfaType) {
                    rej("invalid MFA Type");
                    return;
                } else {
                    res(mfaType);
                    return;
                }
            }, {
                bypassCache: bypassCache,
                clientMetadata: clientMetadata
            });
        });
    };
    AuthClass.prototype._getMfaTypeFromUserData = function(data) {
        var ret = null;
        var preferredMFA = data.PreferredMfaSetting;
        // if the user has used Auth.setPreferredMFA() to setup the mfa type
        // then the "PreferredMfaSetting" would exist in the response
        if (preferredMFA) ret = preferredMFA;
        else {
            // if mfaList exists but empty, then its noMFA
            var mfaList = data.UserMFASettingList;
            if (!mfaList) {
                // if SMS was enabled by using Auth.enableSMS(),
                // the response would contain MFAOptions
                // as for now Cognito only supports for SMS, so we will say it is 'SMS_MFA'
                // if it does not exist, then it should be NOMFA
                var MFAOptions = data.MFAOptions;
                if (MFAOptions) ret = "SMS_MFA";
                else ret = "NOMFA";
            } else if (mfaList.length === 0) ret = "NOMFA";
            else logger.debug("invalid case for getPreferredMFA", data);
        }
        return ret;
    };
    AuthClass.prototype._getUserData = function(user, params) {
        return new Promise(function(res, rej) {
            user.getUserData(function(err, data) {
                if (err) {
                    logger.debug("getting user data failed", err);
                    rej(err);
                    return;
                } else {
                    res(data);
                    return;
                }
            }, params);
        });
    };
    /**
     * set preferred MFA method
     * @param {CognitoUser} user - the current Cognito user
     * @param {string} mfaMethod - preferred mfa method
     * @return - A promise resolve if success
     */ AuthClass.prototype.setPreferredMFA = function(user, mfaMethod) {
        return __awaiter(this, void 0, void 0, function() {
            var clientMetadata, userData, smsMfaSettings, totpMfaSettings, _a, mfaList, currentMFAType, that;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        clientMetadata = this._config.clientMetadata;
                        return [
                            4 /*yield*/ ,
                            this._getUserData(user, {
                                bypassCache: true,
                                clientMetadata: clientMetadata
                            })
                        ];
                    case 1:
                        userData = _b.sent();
                        smsMfaSettings = null;
                        totpMfaSettings = null;
                        _a = mfaMethod;
                        switch(_a){
                            case "TOTP":
                                return [
                                    3 /*break*/ ,
                                    2
                                ];
                            case "SOFTWARE_TOKEN_MFA":
                                return [
                                    3 /*break*/ ,
                                    2
                                ];
                            case "SMS":
                                return [
                                    3 /*break*/ ,
                                    3
                                ];
                            case "SMS_MFA":
                                return [
                                    3 /*break*/ ,
                                    3
                                ];
                            case "NOMFA":
                                return [
                                    3 /*break*/ ,
                                    4
                                ];
                        }
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 2:
                        totpMfaSettings = {
                            PreferredMfa: true,
                            Enabled: true
                        };
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 3:
                        smsMfaSettings = {
                            PreferredMfa: true,
                            Enabled: true
                        };
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 4:
                        mfaList = userData["UserMFASettingList"];
                        return [
                            4 /*yield*/ ,
                            this._getMfaTypeFromUserData(userData)
                        ];
                    case 5:
                        currentMFAType = _b.sent();
                        if (currentMFAType === "NOMFA") return [
                            2 /*return*/ ,
                            Promise.resolve("No change for mfa type")
                        ];
                        else if (currentMFAType === "SMS_MFA") smsMfaSettings = {
                            PreferredMfa: false,
                            Enabled: false
                        };
                        else if (currentMFAType === "SOFTWARE_TOKEN_MFA") totpMfaSettings = {
                            PreferredMfa: false,
                            Enabled: false
                        };
                        else return [
                            2 /*return*/ ,
                            this.rejectAuthError((0, _auth.AuthErrorTypes).InvalidMFA)
                        ];
                        // if there is a UserMFASettingList in the response
                        // we need to disable every mfa type in that list
                        if (mfaList && mfaList.length !== 0) // to disable SMS or TOTP if exists in that list
                        mfaList.forEach(function(mfaType) {
                            if (mfaType === "SMS_MFA") smsMfaSettings = {
                                PreferredMfa: false,
                                Enabled: false
                            };
                            else if (mfaType === "SOFTWARE_TOKEN_MFA") totpMfaSettings = {
                                PreferredMfa: false,
                                Enabled: false
                            };
                        });
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 6:
                        logger.debug("no validmfa method provided");
                        return [
                            2 /*return*/ ,
                            this.rejectAuthError((0, _auth.AuthErrorTypes).NoMFA)
                        ];
                    case 7:
                        that = this;
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                user.setUserMfaPreference(smsMfaSettings, totpMfaSettings, function(err, result) {
                                    if (err) {
                                        logger.debug("Set user mfa preference error", err);
                                        return rej(err);
                                    }
                                    logger.debug("Set user mfa success", result);
                                    logger.debug("Caching the latest user data into local");
                                    // cache the latest result into user data
                                    user.getUserData(function(err, data) {
                                        if (err) {
                                            logger.debug("getting user data failed", err);
                                            return rej(err);
                                        } else return res(result);
                                    }, {
                                        bypassCache: true,
                                        clientMetadata: clientMetadata
                                    });
                                });
                            })
                        ];
                }
            });
        });
    };
    /**
     * disable SMS
     * @deprecated
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves is success
     */ AuthClass.prototype.disableSMS = function(user) {
        return new Promise(function(res, rej) {
            user.disableMFA(function(err, data) {
                if (err) {
                    logger.debug("disable mfa failed", err);
                    rej(err);
                    return;
                }
                logger.debug("disable mfa succeed", data);
                res(data);
                return;
            });
        });
    };
    /**
     * enable SMS
     * @deprecated
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves is success
     */ AuthClass.prototype.enableSMS = function(user) {
        return new Promise(function(res, rej) {
            user.enableMFA(function(err, data) {
                if (err) {
                    logger.debug("enable mfa failed", err);
                    rej(err);
                    return;
                }
                logger.debug("enable mfa succeed", data);
                res(data);
                return;
            });
        });
    };
    /**
     * Setup TOTP
     * @param {CognitoUser} user - the current user
     * @return - A promise resolves with the secret code if success
     */ AuthClass.prototype.setupTOTP = function(user) {
        return new Promise(function(res, rej) {
            user.associateSoftwareToken({
                onFailure: function(err) {
                    logger.debug("associateSoftwareToken failed", err);
                    rej(err);
                    return;
                },
                associateSecretCode: function(secretCode) {
                    logger.debug("associateSoftwareToken sucess", secretCode);
                    res(secretCode);
                    return;
                }
            });
        });
    };
    /**
     * verify TOTP setup
     * @param {CognitoUser} user - the current user
     * @param {string} challengeAnswer - challenge answer
     * @return - A promise resolves is success
     */ AuthClass.prototype.verifyTotpToken = function(user, challengeAnswer) {
        logger.debug("verification totp token", user, challengeAnswer);
        return new Promise(function(res, rej) {
            user.verifySoftwareToken(challengeAnswer, "My TOTP device", {
                onFailure: function(err) {
                    logger.debug("verifyTotpToken failed", err);
                    rej(err);
                    return;
                },
                onSuccess: function(data) {
                    dispatchAuthEvent("signIn", user, "A user " + user.getUsername() + " has been signed in");
                    logger.debug("verifyTotpToken success", data);
                    res(data);
                    return;
                }
            });
        });
    };
    /**
     * Send MFA code to confirm sign in
     * @param {Object} user - The CognitoUser object
     * @param {String} code - The confirmation code
     */ AuthClass.prototype.confirmSignIn = function(user, code, mfaType, clientMetadata) {
        var _this = this;
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!code) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyCode);
        var that = this;
        return new Promise(function(resolve, reject) {
            user.sendMFACode(code, {
                onSuccess: function(session) {
                    return __awaiter(_this, void 0, void 0, function() {
                        var cred, e_3;
                        return __generator(this, function(_a) {
                            switch(_a.label){
                                case 0:
                                    logger.debug(session);
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([
                                        1,
                                        4,
                                        5,
                                        6
                                    ]);
                                    return [
                                        4 /*yield*/ ,
                                        this.Credentials.clear()
                                    ];
                                case 2:
                                    _a.sent();
                                    return [
                                        4 /*yield*/ ,
                                        this.Credentials.set(session, "session")
                                    ];
                                case 3:
                                    cred = _a.sent();
                                    logger.debug("succeed to get cognito credentials", cred);
                                    return [
                                        3 /*break*/ ,
                                        6
                                    ];
                                case 4:
                                    e_3 = _a.sent();
                                    logger.debug("cannot get cognito credentials", e_3);
                                    return [
                                        3 /*break*/ ,
                                        6
                                    ];
                                case 5:
                                    that.user = user;
                                    dispatchAuthEvent("signIn", user, "A user " + user.getUsername() + " has been signed in");
                                    resolve(user);
                                    return [
                                        7 /*endfinally*/ 
                                    ];
                                case 6:
                                    return [
                                        2 /*return*/ 
                                    ];
                            }
                        });
                    });
                },
                onFailure: function(err) {
                    logger.debug("confirm signIn failure", err);
                    reject(err);
                }
            }, mfaType, clientMetadata);
        });
    };
    AuthClass.prototype.completeNewPassword = function(user, password, requiredAttributes, clientMetadata) {
        var _this = this;
        if (requiredAttributes === void 0) requiredAttributes = {};
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!password) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyPassword);
        var that = this;
        return new Promise(function(resolve, reject) {
            user.completeNewPasswordChallenge(password, requiredAttributes, {
                onSuccess: function(session) {
                    return __awaiter(_this, void 0, void 0, function() {
                        var cred, e_4;
                        return __generator(this, function(_a) {
                            switch(_a.label){
                                case 0:
                                    logger.debug(session);
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([
                                        1,
                                        4,
                                        5,
                                        6
                                    ]);
                                    return [
                                        4 /*yield*/ ,
                                        this.Credentials.clear()
                                    ];
                                case 2:
                                    _a.sent();
                                    return [
                                        4 /*yield*/ ,
                                        this.Credentials.set(session, "session")
                                    ];
                                case 3:
                                    cred = _a.sent();
                                    logger.debug("succeed to get cognito credentials", cred);
                                    return [
                                        3 /*break*/ ,
                                        6
                                    ];
                                case 4:
                                    e_4 = _a.sent();
                                    logger.debug("cannot get cognito credentials", e_4);
                                    return [
                                        3 /*break*/ ,
                                        6
                                    ];
                                case 5:
                                    that.user = user;
                                    dispatchAuthEvent("signIn", user, "A user " + user.getUsername() + " has been signed in");
                                    resolve(user);
                                    return [
                                        7 /*endfinally*/ 
                                    ];
                                case 6:
                                    return [
                                        2 /*return*/ 
                                    ];
                            }
                        });
                    });
                },
                onFailure: function(err) {
                    logger.debug("completeNewPassword failure", err);
                    dispatchAuthEvent("completeNewPassword_failure", err, _this.user + " failed to complete the new password flow");
                    reject(err);
                },
                mfaRequired: function(challengeName, challengeParam) {
                    logger.debug("signIn MFA required");
                    user["challengeName"] = challengeName;
                    user["challengeParam"] = challengeParam;
                    resolve(user);
                },
                mfaSetup: function(challengeName, challengeParam) {
                    logger.debug("signIn mfa setup", challengeName);
                    user["challengeName"] = challengeName;
                    user["challengeParam"] = challengeParam;
                    resolve(user);
                },
                totpRequired: function(challengeName, challengeParam) {
                    logger.debug("signIn mfa setup", challengeName);
                    user["challengeName"] = challengeName;
                    user["challengeParam"] = challengeParam;
                    resolve(user);
                }
            }, clientMetadata);
        });
    };
    /**
     * Send the answer to a custom challenge
     * @param {CognitoUser} user - The CognitoUser object
     * @param {String} challengeResponses - The confirmation code
     */ AuthClass.prototype.sendCustomChallengeAnswer = function(user, challengeResponses, clientMetadata) {
        var _this = this;
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        if (!challengeResponses) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyChallengeResponse);
        var that = this;
        return new Promise(function(resolve, reject) {
            user.sendCustomChallengeAnswer(challengeResponses, _this.authCallbacks(user, resolve, reject), clientMetadata);
        });
    };
    /**
     * Delete an authenticated users' attributes
     * @param {CognitoUser} - The currently logged in user object
     * @return {Promise}
     **/ AuthClass.prototype.deleteUserAttributes = function(user, attributeNames) {
        var that = this;
        return new Promise(function(resolve, reject) {
            that.userSession(user).then(function(session) {
                user.deleteAttributes(attributeNames, function(err, result) {
                    if (err) return reject(err);
                    else return resolve(result);
                });
            });
        });
    };
    /**
     * Update an authenticated users' attributes
     * @param {CognitoUser} - The currently logged in user object
     * @return {Promise}
     **/ AuthClass.prototype.updateUserAttributes = function(user, attributes, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        var attributeList = [];
        var that = this;
        return new Promise(function(resolve, reject) {
            that.userSession(user).then(function(session) {
                for(var key in attributes)if (key !== "sub" && key.indexOf("_verified") < 0) {
                    var attr = {
                        Name: key,
                        Value: attributes[key]
                    };
                    attributeList.push(attr);
                }
                user.updateAttributes(attributeList, function(err, result) {
                    if (err) return reject(err);
                    else return resolve(result);
                }, clientMetadata);
            });
        });
    };
    /**
     * Return user attributes
     * @param {Object} user - The CognitoUser object
     * @return - A promise resolves to user attributes if success
     */ AuthClass.prototype.userAttributes = function(user) {
        var _this = this;
        return new Promise(function(resolve, reject) {
            _this.userSession(user).then(function(session) {
                user.getUserAttributes(function(err, attributes) {
                    if (err) reject(err);
                    else resolve(attributes);
                });
            });
        });
    };
    AuthClass.prototype.verifiedContact = function(user) {
        var that = this;
        return this.userAttributes(user).then(function(attributes) {
            var attrs = that.attributesToObject(attributes);
            var unverified = {};
            var verified = {};
            if (attrs["email"]) {
                if (attrs["email_verified"]) verified["email"] = attrs["email"];
                else unverified["email"] = attrs["email"];
            }
            if (attrs["phone_number"]) {
                if (attrs["phone_number_verified"]) verified["phone_number"] = attrs["phone_number"];
                else unverified["phone_number"] = attrs["phone_number"];
            }
            return {
                verified: verified,
                unverified: unverified
            };
        });
    };
    /**
     * Get current authenticated user
     * @return - A promise resolves to current authenticated CognitoUser if success
     */ AuthClass.prototype.currentUserPoolUser = function(params) {
        var _this = this;
        if (!this.userPool) return this.rejectNoUserPool();
        return new Promise(function(res, rej) {
            _this._storageSync.then(function() {
                return __awaiter(_this, void 0, void 0, function() {
                    var user, clientMetadata;
                    var _this = this;
                    return __generator(this, function(_a) {
                        switch(_a.label){
                            case 0:
                                if (!this.isOAuthInProgress()) return [
                                    3 /*break*/ ,
                                    2
                                ];
                                logger.debug("OAuth signIn in progress, waiting for resolution...");
                                return [
                                    4 /*yield*/ ,
                                    new Promise(function(res) {
                                        var timeoutId = setTimeout(function() {
                                            logger.debug("OAuth signIn in progress timeout");
                                            (0, _core.Hub).remove("auth", hostedUISignCallback);
                                            res();
                                        }, OAUTH_FLOW_MS_TIMEOUT);
                                        (0, _core.Hub).listen("auth", hostedUISignCallback);
                                        function hostedUISignCallback(_a) {
                                            var payload = _a.payload;
                                            var event = payload.event;
                                            if (event === "cognitoHostedUI" || event === "cognitoHostedUI_failure") {
                                                logger.debug("OAuth signIn resolved: " + event);
                                                clearTimeout(timeoutId);
                                                (0, _core.Hub).remove("auth", hostedUISignCallback);
                                                res();
                                            }
                                        }
                                    })
                                ];
                            case 1:
                                _a.sent();
                                _a.label = 2;
                            case 2:
                                user = this.userPool.getCurrentUser();
                                if (!user) {
                                    logger.debug("Failed to get user from user pool");
                                    rej("No current user");
                                    return [
                                        2 /*return*/ 
                                    ];
                                }
                                clientMetadata = this._config.clientMetadata;
                                // refresh the session if the session expired.
                                user.getSession(function(err, session) {
                                    return __awaiter(_this, void 0, void 0, function() {
                                        var bypassCache, clientMetadata, _a, scope;
                                        var _this = this;
                                        return __generator(this, function(_b) {
                                            switch(_b.label){
                                                case 0:
                                                    if (err) {
                                                        logger.debug("Failed to get the user session", err);
                                                        rej(err);
                                                        return [
                                                            2 /*return*/ 
                                                        ];
                                                    }
                                                    bypassCache = params ? params.bypassCache : false;
                                                    if (!bypassCache) return [
                                                        3 /*break*/ ,
                                                        2
                                                    ];
                                                    return [
                                                        4 /*yield*/ ,
                                                        this.Credentials.clear()
                                                    ];
                                                case 1:
                                                    _b.sent();
                                                    _b.label = 2;
                                                case 2:
                                                    clientMetadata = this._config.clientMetadata;
                                                    _a = session.getAccessToken().decodePayload().scope, scope = _a === void 0 ? "" : _a;
                                                    if (scope.split(" ").includes(USER_ADMIN_SCOPE)) user.getUserData(function(err, data) {
                                                        if (err) {
                                                            logger.debug("getting user data failed", err);
                                                            // Make sure the user is still valid
                                                            if (err.message === "User is disabled." || err.message === "User does not exist." || err.message === "Access Token has been revoked" // Session revoked by another app
                                                            ) rej(err);
                                                            else // the error may also be thrown when lack of permissions to get user info etc
                                                            // in that case we just bypass the error
                                                            res(user);
                                                            return;
                                                        }
                                                        var preferredMFA = data.PreferredMfaSetting || "NOMFA";
                                                        var attributeList = [];
                                                        for(var i = 0; i < data.UserAttributes.length; i++){
                                                            var attribute = {
                                                                Name: data.UserAttributes[i].Name,
                                                                Value: data.UserAttributes[i].Value
                                                            };
                                                            var userAttribute = new (0, _amazonCognitoIdentityJs.CognitoUserAttribute)(attribute);
                                                            attributeList.push(userAttribute);
                                                        }
                                                        var attributes = _this.attributesToObject(attributeList);
                                                        Object.assign(user, {
                                                            attributes: attributes,
                                                            preferredMFA: preferredMFA
                                                        });
                                                        return res(user);
                                                    }, {
                                                        bypassCache: bypassCache,
                                                        clientMetadata: clientMetadata
                                                    });
                                                    else {
                                                        logger.debug("Unable to get the user data because the " + USER_ADMIN_SCOPE + " " + "is not in the scopes of the access token");
                                                        return [
                                                            2 /*return*/ ,
                                                            res(user)
                                                        ];
                                                    }
                                                    return [
                                                        2 /*return*/ 
                                                    ];
                                            }
                                        });
                                    });
                                }, {
                                    clientMetadata: clientMetadata
                                });
                                return [
                                    2 /*return*/ 
                                ];
                        }
                    });
                });
            }).catch(function(e) {
                logger.debug("Failed to sync cache info into memory", e);
                return rej(e);
            });
        });
    };
    AuthClass.prototype.isOAuthInProgress = function() {
        return this.oAuthFlowInProgress;
    };
    /**
     * Get current authenticated user
     * @param {CurrentUserOpts} - options for getting the current user
     * @return - A promise resolves to current authenticated CognitoUser if success
     */ AuthClass.prototype.currentAuthenticatedUser = function(params) {
        return __awaiter(this, void 0, void 0, function() {
            var federatedUser, e_5, federatedInfo, user, e_6;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        logger.debug("getting current authenticated user");
                        federatedUser = null;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_5 = _a.sent();
                        logger.debug("Failed to sync cache info into memory", e_5);
                        throw e_5;
                    case 4:
                        try {
                            federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
                            if (federatedInfo) federatedUser = __assign(__assign({}, federatedInfo.user), {
                                token: federatedInfo.token
                            });
                        } catch (e) {
                            logger.debug("cannot load federated user from auth storage");
                        }
                        if (!federatedUser) return [
                            3 /*break*/ ,
                            5
                        ];
                        this.user = federatedUser;
                        logger.debug("get current authenticated federated user", this.user);
                        return [
                            2 /*return*/ ,
                            this.user
                        ];
                    case 5:
                        logger.debug("get current authenticated userpool user");
                        user = null;
                        _a.label = 6;
                    case 6:
                        _a.trys.push([
                            6,
                            8,
                            ,
                            9
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser(params)
                        ];
                    case 7:
                        user = _a.sent();
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 8:
                        e_6 = _a.sent();
                        if (e_6 === "No userPool") logger.error("Cannot get the current user because the user pool is missing. Please make sure the Auth module is configured with a valid Cognito User Pool ID");
                        logger.debug("The user is not authenticated by the error", e_6);
                        return [
                            2 /*return*/ ,
                            Promise.reject("The user is not authenticated")
                        ];
                    case 9:
                        this.user = user;
                        return [
                            2 /*return*/ ,
                            this.user
                        ];
                }
            });
        });
    };
    /**
     * Get current user's session
     * @return - A promise resolves to session object if success
     */ AuthClass.prototype.currentSession = function() {
        var that = this;
        logger.debug("Getting current session");
        // Purposely not calling the reject method here because we don't need a console error
        if (!this.userPool) return Promise.reject();
        return new Promise(function(res, rej) {
            that.currentUserPoolUser().then(function(user) {
                that.userSession(user).then(function(session) {
                    res(session);
                    return;
                }).catch(function(e) {
                    logger.debug("Failed to get the current session", e);
                    rej(e);
                    return;
                });
            }).catch(function(e) {
                logger.debug("Failed to get the current user", e);
                rej(e);
                return;
            });
        });
    };
    /**
     * Get the corresponding user session
     * @param {Object} user - The CognitoUser object
     * @return - A promise resolves to the session
     */ AuthClass.prototype.userSession = function(user) {
        if (!user) {
            logger.debug("the user is null");
            return this.rejectAuthError((0, _auth.AuthErrorTypes).NoUserSession);
        }
        var clientMetadata = this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
        return new Promise(function(resolve, reject) {
            logger.debug("Getting the session from this user:", user);
            user.getSession(function(err, session) {
                if (err) {
                    logger.debug("Failed to get the session from user", user);
                    reject(err);
                    return;
                } else {
                    logger.debug("Succeed to get the user session", session);
                    resolve(session);
                    return;
                }
            }, {
                clientMetadata: clientMetadata
            });
        });
    };
    /**
     * Get authenticated credentials of current user.
     * @return - A promise resolves to be current user's credentials
     */ AuthClass.prototype.currentUserCredentials = function() {
        return __awaiter(this, void 0, void 0, function() {
            var e_7, federatedInfo;
            var _this = this;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        logger.debug("Getting current user credentials");
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        e_7 = _a.sent();
                        logger.debug("Failed to sync cache info into memory", e_7);
                        throw e_7;
                    case 4:
                        federatedInfo = null;
                        try {
                            federatedInfo = JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"));
                        } catch (e) {
                            logger.debug("failed to get or parse item aws-amplify-federatedInfo", e);
                        }
                        if (federatedInfo) // refresh the jwt token here if necessary
                        return [
                            2 /*return*/ ,
                            this.Credentials.refreshFederatedToken(federatedInfo)
                        ];
                        else return [
                            2 /*return*/ ,
                            this.currentSession().then(function(session) {
                                logger.debug("getting session success", session);
                                return _this.Credentials.set(session, "session");
                            }).catch(function(error) {
                                logger.debug("getting session failed", error);
                                return _this.Credentials.set(null, "guest");
                            })
                        ];
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AuthClass.prototype.currentCredentials = function() {
        logger.debug("getting current credentials");
        return this.Credentials.get();
    };
    /**
     * Initiate an attribute confirmation request
     * @param {Object} user - The CognitoUser
     * @param {Object} attr - The attributes to be verified
     * @return - A promise resolves to callback data if success
     */ AuthClass.prototype.verifyUserAttribute = function(user, attr, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        return new Promise(function(resolve, reject) {
            user.getAttributeVerificationCode(attr, {
                onSuccess: function(success) {
                    return resolve(success);
                },
                onFailure: function(err) {
                    return reject(err);
                }
            }, clientMetadata);
        });
    };
    /**
     * Confirm an attribute using a confirmation code
     * @param {Object} user - The CognitoUser
     * @param {Object} attr - The attribute to be verified
     * @param {String} code - The confirmation code
     * @return - A promise resolves to callback data if success
     */ AuthClass.prototype.verifyUserAttributeSubmit = function(user, attr, code) {
        if (!code) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyCode);
        return new Promise(function(resolve, reject) {
            user.verifyAttribute(attr, code, {
                onSuccess: function(data) {
                    resolve(data);
                    return;
                },
                onFailure: function(err) {
                    reject(err);
                    return;
                }
            });
        });
    };
    AuthClass.prototype.verifyCurrentUserAttribute = function(attr) {
        var that = this;
        return that.currentUserPoolUser().then(function(user) {
            return that.verifyUserAttribute(user, attr);
        });
    };
    /**
     * Confirm current user's attribute using a confirmation code
     * @param {Object} attr - The attribute to be verified
     * @param {String} code - The confirmation code
     * @return - A promise resolves to callback data if success
     */ AuthClass.prototype.verifyCurrentUserAttributeSubmit = function(attr, code) {
        var that = this;
        return that.currentUserPoolUser().then(function(user) {
            return that.verifyUserAttributeSubmit(user, attr, code);
        });
    };
    AuthClass.prototype.cognitoIdentitySignOut = function(opts, user) {
        return __awaiter(this, void 0, void 0, function() {
            var e_8, isSignedInHostedUI;
            var _this = this;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._storageSync
                        ];
                    case 1:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        e_8 = _a.sent();
                        logger.debug("Failed to sync cache info into memory", e_8);
                        throw e_8;
                    case 3:
                        isSignedInHostedUI = this._oAuthHandler && this._storage.getItem("amplify-signin-with-hostedUI") === "true";
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                if (opts && opts.global) {
                                    logger.debug("user global sign out", user);
                                    // in order to use global signout
                                    // we must validate the user as an authenticated user by using getSession
                                    var clientMetadata = _this._config.clientMetadata; // TODO: verify behavior if this is override during signIn
                                    user.getSession(function(err, result) {
                                        if (err) {
                                            logger.debug("failed to get the user session", err);
                                            return rej(err);
                                        }
                                        user.globalSignOut({
                                            onSuccess: function(data) {
                                                logger.debug("global sign out success");
                                                if (isSignedInHostedUI) _this.oAuthSignOutRedirect(res, rej);
                                                else return res();
                                            },
                                            onFailure: function(err) {
                                                logger.debug("global sign out failed", err);
                                                return rej(err);
                                            }
                                        });
                                    }, {
                                        clientMetadata: clientMetadata
                                    });
                                } else {
                                    logger.debug("user sign out", user);
                                    user.signOut(function() {
                                        if (isSignedInHostedUI) _this.oAuthSignOutRedirect(res, rej);
                                        else return res();
                                    });
                                }
                            })
                        ];
                }
            });
        });
    };
    AuthClass.prototype.oAuthSignOutRedirect = function(resolve, reject) {
        var isBrowser = (0, _core.JS).browserOrNode().isBrowser;
        if (isBrowser) this.oAuthSignOutRedirectOrReject(reject);
        else this.oAuthSignOutAndResolve(resolve);
    };
    AuthClass.prototype.oAuthSignOutAndResolve = function(resolve) {
        this._oAuthHandler.signOut();
        resolve();
    };
    AuthClass.prototype.oAuthSignOutRedirectOrReject = function(reject) {
        this._oAuthHandler.signOut(); // this method redirects url
        // App should be redirected to another url otherwise it will reject
        setTimeout(function() {
            return reject("Signout timeout fail");
        }, 3000);
    };
    /**
     * Sign out method
     * @
     * @return - A promise resolved if success
     */ AuthClass.prototype.signOut = function(opts) {
        return __awaiter(this, void 0, void 0, function() {
            var e_9, user;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.cleanCachedItems()
                        ];
                    case 1:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        e_9 = _a.sent();
                        logger.debug("failed to clear cached items");
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 3:
                        if (!this.userPool) return [
                            3 /*break*/ ,
                            7
                        ];
                        user = this.userPool.getCurrentUser();
                        if (!user) return [
                            3 /*break*/ ,
                            5
                        ];
                        return [
                            4 /*yield*/ ,
                            this.cognitoIdentitySignOut(opts, user)
                        ];
                    case 4:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 5:
                        logger.debug("no current Cognito user");
                        _a.label = 6;
                    case 6:
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        logger.debug("no Congito User pool");
                        _a.label = 8;
                    case 8:
                        /**
                         * Note for future refactor - no reliable way to get username with
                         * Cognito User Pools vs Identity when federating with Social Providers
                         * This is why we need a well structured session object that can be inspected
                         * and information passed back in the message below for Hub dispatch
                         */ dispatchAuthEvent("signOut", this.user, "A user has been signed out");
                        this.user = null;
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AuthClass.prototype.cleanCachedItems = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        // clear cognito cached item
                        return [
                            4 /*yield*/ ,
                            this.Credentials.clear()
                        ];
                    case 1:
                        // clear cognito cached item
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Change a password for an authenticated user
     * @param {Object} user - The CognitoUser object
     * @param {String} oldPassword - the current password
     * @param {String} newPassword - the requested new password
     * @return - A promise resolves if success
     */ AuthClass.prototype.changePassword = function(user, oldPassword, newPassword, clientMetadata) {
        var _this = this;
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        return new Promise(function(resolve, reject) {
            _this.userSession(user).then(function(session) {
                user.changePassword(oldPassword, newPassword, function(err, data) {
                    if (err) {
                        logger.debug("change password failure", err);
                        return reject(err);
                    } else return resolve(data);
                }, clientMetadata);
            });
        });
    };
    /**
     * Initiate a forgot password request
     * @param {String} username - the username to change password
     * @return - A promise resolves if success
     */ AuthClass.prototype.forgotPassword = function(username, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        var user = this.createCognitoUser(username);
        return new Promise(function(resolve, reject) {
            user.forgotPassword({
                onSuccess: function() {
                    resolve();
                    return;
                },
                onFailure: function(err) {
                    logger.debug("forgot password failure", err);
                    dispatchAuthEvent("forgotPassword_failure", err, username + " forgotPassword failed");
                    reject(err);
                    return;
                },
                inputVerificationCode: function(data) {
                    dispatchAuthEvent("forgotPassword", user, username + " has initiated forgot password flow");
                    resolve(data);
                    return;
                }
            }, clientMetadata);
        });
    };
    /**
     * Confirm a new password using a confirmation Code
     * @param {String} username - The username
     * @param {String} code - The confirmation code
     * @param {String} password - The new password
     * @return - A promise that resolves if success
     */ AuthClass.prototype.forgotPasswordSubmit = function(username, code, password, clientMetadata) {
        if (clientMetadata === void 0) clientMetadata = this._config.clientMetadata;
        if (!this.userPool) return this.rejectNoUserPool();
        if (!username) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyUsername);
        if (!code) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyCode);
        if (!password) return this.rejectAuthError((0, _auth.AuthErrorTypes).EmptyPassword);
        var user = this.createCognitoUser(username);
        return new Promise(function(resolve, reject) {
            user.confirmPassword(code, password, {
                onSuccess: function(success) {
                    dispatchAuthEvent("forgotPasswordSubmit", user, username + " forgotPasswordSubmit successful");
                    resolve(success);
                    return;
                },
                onFailure: function(err) {
                    dispatchAuthEvent("forgotPasswordSubmit_failure", err, username + " forgotPasswordSubmit failed");
                    reject(err);
                    return;
                }
            }, clientMetadata);
        });
    };
    /**
     * Get user information
     * @async
     * @return {Object }- current User's information
     */ AuthClass.prototype.currentUserInfo = function() {
        return __awaiter(this, void 0, void 0, function() {
            var source, user, attributes, userAttrs, credentials, e_10, info, err_1, user;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        source = this.Credentials.getCredSource();
                        if (!(!source || source === "aws" || source === "userPool")) return [
                            3 /*break*/ ,
                            9
                        ];
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser().catch(function(err) {
                                return logger.error(err);
                            })
                        ];
                    case 1:
                        user = _a.sent();
                        if (!user) return [
                            2 /*return*/ ,
                            null
                        ];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            8,
                            ,
                            9
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.userAttributes(user)
                        ];
                    case 3:
                        attributes = _a.sent();
                        userAttrs = this.attributesToObject(attributes);
                        credentials = null;
                        _a.label = 4;
                    case 4:
                        _a.trys.push([
                            4,
                            6,
                            ,
                            7
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentCredentials()
                        ];
                    case 5:
                        credentials = _a.sent();
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 6:
                        e_10 = _a.sent();
                        logger.debug("Failed to retrieve credentials while getting current user info", e_10);
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 7:
                        info = {
                            id: credentials ? credentials.identityId : undefined,
                            username: user.getUsername(),
                            attributes: userAttrs
                        };
                        return [
                            2 /*return*/ ,
                            info
                        ];
                    case 8:
                        err_1 = _a.sent();
                        logger.error("currentUserInfo error", err_1);
                        return [
                            2 /*return*/ ,
                            {}
                        ];
                    case 9:
                        if (source === "federated") {
                            user = this.user;
                            return [
                                2 /*return*/ ,
                                user ? user : {}
                            ];
                        }
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AuthClass.prototype.federatedSignIn = function(providerOrOptions, response, user) {
        return __awaiter(this, void 0, void 0, function() {
            var options, provider, customState, client_id, redirect_uri, provider, loggedInUser, token, identity_id, expires_at, credentials, currentUser;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!this._config.identityPoolId && !this._config.userPoolId) throw new Error("Federation requires either a User Pool or Identity Pool in config");
                        // Ensure backwards compatability
                        if (typeof providerOrOptions === "undefined") {
                            if (this._config.identityPoolId && !this._config.userPoolId) throw new Error("Federation with Identity Pools requires tokens passed as arguments");
                        }
                        if (!((0, _types.isFederatedSignInOptions)(providerOrOptions) || (0, _types.isFederatedSignInOptionsCustom)(providerOrOptions) || (0, _types.hasCustomState)(providerOrOptions) || typeof providerOrOptions === "undefined")) return [
                            3 /*break*/ ,
                            1
                        ];
                        options = providerOrOptions || {
                            provider: (0, _auth.CognitoHostedUIIdentityProvider).Cognito
                        };
                        provider = (0, _types.isFederatedSignInOptions)(options) ? options.provider : options.customProvider;
                        customState = (0, _types.isFederatedSignInOptions)(options) ? options.customState : options.customState;
                        if (this._config.userPoolId) {
                            client_id = (0, _types.isCognitoHostedOpts)(this._config.oauth) ? this._config.userPoolWebClientId : this._config.oauth.clientID;
                            redirect_uri = (0, _types.isCognitoHostedOpts)(this._config.oauth) ? this._config.oauth.redirectSignIn : this._config.oauth.redirectUri;
                            this._oAuthHandler.oauthSignIn(this._config.oauth.responseType, this._config.oauth.domain, redirect_uri, client_id, provider, customState);
                        }
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 1:
                        provider = providerOrOptions;
                        // To check if the user is already logged in
                        try {
                            loggedInUser = JSON.stringify(JSON.parse(this._storage.getItem("aws-amplify-federatedInfo")).user);
                            if (loggedInUser) logger.warn("There is already a signed in user: " + loggedInUser + " in your app.\n																	You should not call Auth.federatedSignIn method again as it may cause unexpected behavior.");
                        } catch (e) {}
                        token = response.token, identity_id = response.identity_id, expires_at = response.expires_at;
                        return [
                            4 /*yield*/ ,
                            this.Credentials.set({
                                provider: provider,
                                token: token,
                                identity_id: identity_id,
                                user: user,
                                expires_at: expires_at
                            }, "federation")
                        ];
                    case 2:
                        credentials = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.currentAuthenticatedUser()
                        ];
                    case 3:
                        currentUser = _a.sent();
                        dispatchAuthEvent("signIn", currentUser, "A user " + currentUser.username + " has been signed in");
                        logger.debug("federated sign in credentials", credentials);
                        return [
                            2 /*return*/ ,
                            credentials
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Used to complete the OAuth flow with or without the Cognito Hosted UI
     * @param {String} URL - optional parameter for customers to pass in the response URL
     */ AuthClass.prototype._handleAuthResponse = function(URL) {
        return __awaiter(this, void 0, void 0, function() {
            var currentUrl, hasCodeOrError, hasTokenOrError, _a, accessToken, idToken, refreshToken, state, session, credentials, isCustomStateIncluded, currentUser, customState, err_2;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        if (this.oAuthFlowInProgress) {
                            logger.debug("Skipping URL " + URL + " current flow in progress");
                            return [
                                2 /*return*/ 
                            ];
                        }
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            ,
                            8,
                            9
                        ]);
                        this.oAuthFlowInProgress = true;
                        if (!this._config.userPoolId) throw new Error("OAuth responses require a User Pool defined in config");
                        dispatchAuthEvent("parsingCallbackUrl", {
                            url: URL
                        }, "The callback url is being parsed");
                        currentUrl = URL || ((0, _core.JS).browserOrNode().isBrowser ? window.location.href : "");
                        hasCodeOrError = !!((0, _url.parse)(currentUrl).query || "").split("&").map(function(entry) {
                            return entry.split("=");
                        }).find(function(_a) {
                            var _b = __read(_a, 1), k = _b[0];
                            return k === "code" || k === "error";
                        });
                        hasTokenOrError = !!((0, _url.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(entry) {
                            return entry.split("=");
                        }).find(function(_a) {
                            var _b = __read(_a, 1), k = _b[0];
                            return k === "access_token" || k === "error";
                        });
                        if (!(hasCodeOrError || hasTokenOrError)) return [
                            3 /*break*/ ,
                            7
                        ];
                        this._storage.setItem("amplify-redirected-from-hosted-ui", "true");
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            6,
                            ,
                            7
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._oAuthHandler.handleAuthResponse(currentUrl)
                        ];
                    case 3:
                        _a = _b.sent(), accessToken = _a.accessToken, idToken = _a.idToken, refreshToken = _a.refreshToken, state = _a.state;
                        session = new (0, _amazonCognitoIdentityJs.CognitoUserSession)({
                            IdToken: new (0, _amazonCognitoIdentityJs.CognitoIdToken)({
                                IdToken: idToken
                            }),
                            RefreshToken: new (0, _amazonCognitoIdentityJs.CognitoRefreshToken)({
                                RefreshToken: refreshToken
                            }),
                            AccessToken: new (0, _amazonCognitoIdentityJs.CognitoAccessToken)({
                                AccessToken: accessToken
                            })
                        });
                        credentials = void 0;
                        if (!this._config.identityPoolId) return [
                            3 /*break*/ ,
                            5
                        ];
                        return [
                            4 /*yield*/ ,
                            this.Credentials.set(session, "session")
                        ];
                    case 4:
                        credentials = _b.sent();
                        logger.debug("AWS credentials", credentials);
                        _b.label = 5;
                    case 5:
                        isCustomStateIncluded = /-/.test(state);
                        currentUser = this.createCognitoUser(session.getIdToken().decodePayload()["cognito:username"]);
                        // This calls cacheTokens() in Cognito SDK
                        currentUser.setSignInUserSession(session);
                        if (window && typeof window.history !== "undefined") window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
                        dispatchAuthEvent("signIn", currentUser, "A user " + currentUser.getUsername() + " has been signed in");
                        dispatchAuthEvent("cognitoHostedUI", currentUser, "A user " + currentUser.getUsername() + " has been signed in via Cognito Hosted UI");
                        if (isCustomStateIncluded) {
                            customState = state.split("-").splice(1).join("-");
                            dispatchAuthEvent("customOAuthState", (0, _core.urlSafeDecode)(customState), "State for user " + currentUser.getUsername());
                        }
                        //#endregion
                        return [
                            2 /*return*/ ,
                            credentials
                        ];
                    case 6:
                        err_2 = _b.sent();
                        logger.debug("Error in cognito hosted auth response", err_2);
                        // Just like a successful handling of `?code`, replace the window history to "dispose" of the `code`.
                        // Otherwise, reloading the page will throw errors as the `code` has already been spent.
                        if (window && typeof window.history !== "undefined") window.history.replaceState({}, null, this._config.oauth.redirectSignIn);
                        dispatchAuthEvent("signIn_failure", err_2, "The OAuth response flow failed");
                        dispatchAuthEvent("cognitoHostedUI_failure", err_2, "A failure occurred when returning to the Cognito Hosted UI");
                        dispatchAuthEvent("customState_failure", err_2, "A failure occurred when returning state");
                        return [
                            3 /*break*/ ,
                            7
                        ];
                    case 7:
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 8:
                        this.oAuthFlowInProgress = false;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 9:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Compact version of credentials
     * @param {Object} credentials
     * @return {Object} - Credentials
     */ AuthClass.prototype.essentialCredentials = function(credentials) {
        return {
            accessKeyId: credentials.accessKeyId,
            sessionToken: credentials.sessionToken,
            secretAccessKey: credentials.secretAccessKey,
            identityId: credentials.identityId,
            authenticated: credentials.authenticated
        };
    };
    AuthClass.prototype.attributesToObject = function(attributes) {
        var _this = this;
        var obj = {};
        if (attributes) attributes.map(function(attribute) {
            if (attribute.Name === "email_verified" || attribute.Name === "phone_number_verified") obj[attribute.Name] = _this.isTruthyString(attribute.Value) || attribute.Value === true;
            else obj[attribute.Name] = attribute.Value;
        });
        return obj;
    };
    AuthClass.prototype.isTruthyString = function(value) {
        return typeof value.toLowerCase === "function" && value.toLowerCase() === "true";
    };
    AuthClass.prototype.createCognitoUser = function(username) {
        var userData = {
            Username: username,
            Pool: this.userPool
        };
        userData.Storage = this._storage;
        var authenticationFlowType = this._config.authenticationFlowType;
        var user = new (0, _amazonCognitoIdentityJs.CognitoUser)(userData);
        if (authenticationFlowType) user.setAuthenticationFlowType(authenticationFlowType);
        return user;
    };
    AuthClass.prototype._isValidAuthStorage = function(obj) {
        // We need to check if the obj has the functions of Storage
        return !!obj && typeof obj.getItem === "function" && typeof obj.setItem === "function" && typeof obj.removeItem === "function" && typeof obj.clear === "function";
    };
    AuthClass.prototype.noUserPoolErrorHandler = function(config) {
        if (config) {
            if (!config.userPoolId || !config.identityPoolId) return (0, _auth.AuthErrorTypes).MissingAuthConfig;
        }
        return (0, _auth.AuthErrorTypes).NoConfig;
    };
    AuthClass.prototype.rejectAuthError = function(type) {
        return Promise.reject(new (0, _errors.AuthError)(type));
    };
    AuthClass.prototype.rejectNoUserPool = function() {
        var type = this.noUserPoolErrorHandler(this._config);
        return Promise.reject(new (0, _errors.NoUserPoolError)(type));
    };
    AuthClass.prototype.rememberDevice = function() {
        return __awaiter(this, void 0, void 0, function() {
            var currUser, error_1;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser()
                        ];
                    case 1:
                        currUser = _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        error_1 = _a.sent();
                        logger.debug("The user is not authenticated by the error", error_1);
                        return [
                            2 /*return*/ ,
                            Promise.reject("The user is not authenticated")
                        ];
                    case 3:
                        currUser.getCachedDeviceKeyAndPassword();
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                currUser.setDeviceStatusRemembered({
                                    onSuccess: function(data) {
                                        res(data);
                                    },
                                    onFailure: function(err) {
                                        if (err.code === "InvalidParameterException") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).DeviceConfig));
                                        else if (err.code === "NetworkError") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).NetworkError));
                                        else rej(err);
                                    }
                                });
                            })
                        ];
                }
            });
        });
    };
    AuthClass.prototype.forgetDevice = function() {
        return __awaiter(this, void 0, void 0, function() {
            var currUser, error_2;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser()
                        ];
                    case 1:
                        currUser = _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        error_2 = _a.sent();
                        logger.debug("The user is not authenticated by the error", error_2);
                        return [
                            2 /*return*/ ,
                            Promise.reject("The user is not authenticated")
                        ];
                    case 3:
                        currUser.getCachedDeviceKeyAndPassword();
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                currUser.forgetDevice({
                                    onSuccess: function(data) {
                                        res(data);
                                    },
                                    onFailure: function(err) {
                                        if (err.code === "InvalidParameterException") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).DeviceConfig));
                                        else if (err.code === "NetworkError") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).NetworkError));
                                        else rej(err);
                                    }
                                });
                            })
                        ];
                }
            });
        });
    };
    AuthClass.prototype.fetchDevices = function() {
        return __awaiter(this, void 0, void 0, function() {
            var currUser, error_3;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.currentUserPoolUser()
                        ];
                    case 1:
                        currUser = _a.sent();
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        error_3 = _a.sent();
                        logger.debug("The user is not authenticated by the error", error_3);
                        throw new Error("The user is not authenticated");
                    case 3:
                        currUser.getCachedDeviceKeyAndPassword();
                        return [
                            2 /*return*/ ,
                            new Promise(function(res, rej) {
                                var cb = {
                                    onSuccess: function(data) {
                                        var deviceList = data.Devices.map(function(device) {
                                            var deviceName = device.DeviceAttributes.find(function(_a) {
                                                var Name = _a.Name;
                                                return Name === "device_name";
                                            }) || {};
                                            var deviceInfo = {
                                                id: device.DeviceKey,
                                                name: deviceName.Value
                                            };
                                            return deviceInfo;
                                        });
                                        res(deviceList);
                                    },
                                    onFailure: function(err) {
                                        if (err.code === "InvalidParameterException") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).DeviceConfig));
                                        else if (err.code === "NetworkError") rej(new (0, _errors.AuthError)((0, _auth.AuthErrorTypes).NetworkError));
                                        else rej(err);
                                    }
                                };
                                currUser.listDevices(MAX_DEVICES, null, cb);
                            })
                        ];
                }
            });
        });
    };
    return AuthClass;
}();
var Auth = new AuthClass(null);
(0, _core.Amplify).register(Auth);

},{"./types":"2YabP","@aws-amplify/core":"hZcAF","amazon-cognito-identity-js":"i9HVr","url":"7qjc7","./OAuth/OAuth":"6m7rL","./urlListener":"9a84K","./Errors":"QNLY3","./types/Auth":"2MR8p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2YabP":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _auth = require("./Auth");
parcelHelpers.exportAll(_auth, exports);

},{"./Auth":"2MR8p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2MR8p":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoHostedUIIdentityProvider", ()=>CognitoHostedUIIdentityProvider);
parcelHelpers.export(exports, "isFederatedSignInOptions", ()=>isFederatedSignInOptions);
parcelHelpers.export(exports, "isFederatedSignInOptionsCustom", ()=>isFederatedSignInOptionsCustom);
parcelHelpers.export(exports, "hasCustomState", ()=>hasCustomState);
parcelHelpers.export(exports, "isCognitoHostedOpts", ()=>isCognitoHostedOpts);
parcelHelpers.export(exports, "AuthErrorTypes", ()=>AuthErrorTypes);
parcelHelpers.export(exports, "isUsernamePasswordOpts", ()=>isUsernamePasswordOpts);
var CognitoHostedUIIdentityProvider;
(function(CognitoHostedUIIdentityProvider) {
    CognitoHostedUIIdentityProvider["Cognito"] = "COGNITO";
    CognitoHostedUIIdentityProvider["Google"] = "Google";
    CognitoHostedUIIdentityProvider["Facebook"] = "Facebook";
    CognitoHostedUIIdentityProvider["Amazon"] = "LoginWithAmazon";
    CognitoHostedUIIdentityProvider["Apple"] = "SignInWithApple";
})(CognitoHostedUIIdentityProvider || (CognitoHostedUIIdentityProvider = {}));
function isFederatedSignInOptions(obj) {
    var keys = [
        "provider"
    ];
    return obj && !!keys.find(function(k) {
        return obj.hasOwnProperty(k);
    });
}
function isFederatedSignInOptionsCustom(obj) {
    var keys = [
        "customProvider"
    ];
    return obj && !!keys.find(function(k) {
        return obj.hasOwnProperty(k);
    });
}
function hasCustomState(obj) {
    var keys = [
        "customState"
    ];
    return obj && !!keys.find(function(k) {
        return obj.hasOwnProperty(k);
    });
}
function isCognitoHostedOpts(oauth) {
    return oauth.redirectSignIn !== undefined;
}
var AuthErrorTypes;
(function(AuthErrorTypes) {
    AuthErrorTypes["NoConfig"] = "noConfig";
    AuthErrorTypes["MissingAuthConfig"] = "missingAuthConfig";
    AuthErrorTypes["EmptyUsername"] = "emptyUsername";
    AuthErrorTypes["InvalidUsername"] = "invalidUsername";
    AuthErrorTypes["EmptyPassword"] = "emptyPassword";
    AuthErrorTypes["EmptyCode"] = "emptyCode";
    AuthErrorTypes["SignUpError"] = "signUpError";
    AuthErrorTypes["NoMFA"] = "noMFA";
    AuthErrorTypes["InvalidMFA"] = "invalidMFA";
    AuthErrorTypes["EmptyChallengeResponse"] = "emptyChallengeResponse";
    AuthErrorTypes["NoUserSession"] = "noUserSession";
    AuthErrorTypes["Default"] = "default";
    AuthErrorTypes["DeviceConfig"] = "deviceConfig";
    AuthErrorTypes["NetworkError"] = "networkError";
})(AuthErrorTypes || (AuthErrorTypes = {}));
function isUsernamePasswordOpts(obj) {
    return !!obj.username;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"i9HVr":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthenticationDetails", ()=>(0, _authenticationDetailsDefault.default));
parcelHelpers.export(exports, "AuthenticationHelper", ()=>(0, _authenticationHelperDefault.default));
parcelHelpers.export(exports, "CognitoAccessToken", ()=>(0, _cognitoAccessTokenDefault.default));
parcelHelpers.export(exports, "CognitoIdToken", ()=>(0, _cognitoIdTokenDefault.default));
parcelHelpers.export(exports, "CognitoRefreshToken", ()=>(0, _cognitoRefreshTokenDefault.default));
parcelHelpers.export(exports, "CognitoUser", ()=>(0, _cognitoUserDefault.default));
parcelHelpers.export(exports, "CognitoUserAttribute", ()=>(0, _cognitoUserAttributeDefault.default));
parcelHelpers.export(exports, "CognitoUserPool", ()=>(0, _cognitoUserPoolDefault.default));
parcelHelpers.export(exports, "CognitoUserSession", ()=>(0, _cognitoUserSessionDefault.default));
parcelHelpers.export(exports, "CookieStorage", ()=>(0, _cookieStorageDefault.default));
parcelHelpers.export(exports, "DateHelper", ()=>(0, _dateHelperDefault.default));
parcelHelpers.export(exports, "appendToCognitoUserAgent", ()=>(0, _userAgent.appendToCognitoUserAgent));
parcelHelpers.export(exports, "WordArray", ()=>(0, _wordArrayDefault.default));
var _authenticationDetails = require("./AuthenticationDetails");
var _authenticationDetailsDefault = parcelHelpers.interopDefault(_authenticationDetails);
var _authenticationHelper = require("./AuthenticationHelper");
var _authenticationHelperDefault = parcelHelpers.interopDefault(_authenticationHelper);
var _cognitoAccessToken = require("./CognitoAccessToken");
var _cognitoAccessTokenDefault = parcelHelpers.interopDefault(_cognitoAccessToken);
var _cognitoIdToken = require("./CognitoIdToken");
var _cognitoIdTokenDefault = parcelHelpers.interopDefault(_cognitoIdToken);
var _cognitoRefreshToken = require("./CognitoRefreshToken");
var _cognitoRefreshTokenDefault = parcelHelpers.interopDefault(_cognitoRefreshToken);
var _cognitoUser = require("./CognitoUser");
var _cognitoUserDefault = parcelHelpers.interopDefault(_cognitoUser);
var _cognitoUserAttribute = require("./CognitoUserAttribute");
var _cognitoUserAttributeDefault = parcelHelpers.interopDefault(_cognitoUserAttribute);
var _cognitoUserPool = require("./CognitoUserPool");
var _cognitoUserPoolDefault = parcelHelpers.interopDefault(_cognitoUserPool);
var _cognitoUserSession = require("./CognitoUserSession");
var _cognitoUserSessionDefault = parcelHelpers.interopDefault(_cognitoUserSession);
var _cookieStorage = require("./CookieStorage");
var _cookieStorageDefault = parcelHelpers.interopDefault(_cookieStorage);
var _dateHelper = require("./DateHelper");
var _dateHelperDefault = parcelHelpers.interopDefault(_dateHelper);
var _userAgent = require("./UserAgent");
var _wordArray = require("./utils/WordArray");
var _wordArrayDefault = parcelHelpers.interopDefault(_wordArray);

},{"./AuthenticationDetails":"3iRed","./AuthenticationHelper":"9Wq2x","./CognitoAccessToken":"dojqu","./CognitoIdToken":"7Exnm","./CognitoRefreshToken":"3nCMJ","./CognitoUser":"cbaip","./CognitoUserAttribute":"jk8tg","./CognitoUserPool":"8MOGu","./CognitoUserSession":"1kQ4I","./CookieStorage":"7YjE8","./DateHelper":"93GWr","./UserAgent":"a9rVz","./utils/WordArray":"eRhxc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3iRed":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ /** @class */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>AuthenticationDetails);
var AuthenticationDetails = /*#__PURE__*/ function() {
    /**
   * Constructs a new AuthenticationDetails object
   * @param {object=} data Creation options.
   * @param {string} data.Username User being authenticated.
   * @param {string} data.Password Plain-text password to authenticate with.
   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.
   * @param {(AttributeArg[])?} data.AuthParamaters Authentication paramaters for custom auth.
   */ function AuthenticationDetails(data) {
        var _ref = data || {}, ValidationData = _ref.ValidationData, Username = _ref.Username, Password = _ref.Password, AuthParameters = _ref.AuthParameters, ClientMetadata = _ref.ClientMetadata;
        this.validationData = ValidationData || {};
        this.authParameters = AuthParameters || {};
        this.clientMetadata = ClientMetadata || {};
        this.username = Username;
        this.password = Password;
    }
    /**
   * @returns {string} the record's username
   */ var _proto = AuthenticationDetails.prototype;
    _proto.getUsername = function getUsername() {
        return this.username;
    } /**
   * @returns {string} the record's password
   */ ;
    _proto.getPassword = function getPassword() {
        return this.password;
    } /**
   * @returns {Array} the record's validationData
   */ ;
    _proto.getValidationData = function getValidationData() {
        return this.validationData;
    } /**
   * @returns {Array} the record's authParameters
   */ ;
    _proto.getAuthParameters = function getAuthParameters() {
        return this.authParameters;
    } /**
   * @returns {ClientMetadata} the clientMetadata for a Lambda trigger
   */ ;
    _proto.getClientMetadata = function getClientMetadata() {
        return this.clientMetadata;
    };
    return AuthenticationDetails;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9Wq2x":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>AuthenticationHelper);
var _buffer = require("buffer");
var _core = require("crypto-js/core");
var _coreDefault = parcelHelpers.interopDefault(_core);
var _libTypedarrays = require("crypto-js/lib-typedarrays"); // necessary for crypto js
var _sha256 = require("crypto-js/sha256");
var _sha256Default = parcelHelpers.interopDefault(_sha256);
var _hmacSha256 = require("crypto-js/hmac-sha256");
var _hmacSha256Default = parcelHelpers.interopDefault(_hmacSha256);
var _wordArray = require("./utils/WordArray");
var _wordArrayDefault = parcelHelpers.interopDefault(_wordArray);
var _bigInteger = require("./BigInteger");
var _bigIntegerDefault = parcelHelpers.interopDefault(_bigInteger);
/**
 * Returns a Buffer with a sequence of random nBytes
 *
 * @param {number} nBytes
 * @returns {Buffer} fixed-length sequence of random bytes
 */ function randomBytes(nBytes) {
    return (0, _buffer.Buffer).from(new (0, _wordArrayDefault.default)().random(nBytes).toString(), "hex");
}
/**
 * Tests if a hex string has it most significant bit set (case-insensitive regex)
 */ var HEX_MSB_REGEX = /^[89a-f]/i;
var initN = "FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF";
var newPasswordRequiredChallengeUserAttributePrefix = "userAttributes.";
/** @class */ var AuthenticationHelper = /*#__PURE__*/ function() {
    /**
   * Constructs a new AuthenticationHelper object
   * @param {string} PoolName Cognito user pool name.
   */ function AuthenticationHelper(PoolName) {
        this.N = new (0, _bigIntegerDefault.default)(initN, 16);
        this.g = new (0, _bigIntegerDefault.default)("2", 16);
        this.k = new (0, _bigIntegerDefault.default)(this.hexHash("" + this.padHex(this.N) + this.padHex(this.g)), 16);
        this.smallAValue = this.generateRandomSmallA();
        this.getLargeAValue(function() {});
        this.infoBits = (0, _buffer.Buffer).from("Caldera Derived Key", "utf8");
        this.poolName = PoolName;
    }
    /**
   * @returns {BigInteger} small A, a random number
   */ var _proto = AuthenticationHelper.prototype;
    _proto.getSmallAValue = function getSmallAValue() {
        return this.smallAValue;
    } /**
   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)
   * @returns {void}
   */ ;
    _proto.getLargeAValue = function getLargeAValue(callback) {
        var _this = this;
        if (this.largeAValue) callback(null, this.largeAValue);
        else this.calculateA(this.smallAValue, function(err, largeAValue) {
            if (err) callback(err, null);
            _this.largeAValue = largeAValue;
            callback(null, _this.largeAValue);
        });
    } /**
   * helper function to generate a random big integer
   * @returns {BigInteger} a random value.
   * @private
   */ ;
    _proto.generateRandomSmallA = function generateRandomSmallA() {
        // This will be interpreted as a postive 128-bit integer
        var hexRandom = randomBytes(128).toString("hex");
        var randomBigInt = new (0, _bigIntegerDefault.default)(hexRandom, 16); // There is no need to do randomBigInt.mod(this.N - 1) as N (3072-bit) is > 128 bytes (1024-bit)
        return randomBigInt;
    } /**
   * helper function to generate a random string
   * @returns {string} a random value.
   * @private
   */ ;
    _proto.generateRandomString = function generateRandomString() {
        return randomBytes(40).toString("base64");
    } /**
   * @returns {string} Generated random value included in password hash.
   */ ;
    _proto.getRandomPassword = function getRandomPassword() {
        return this.randomPassword;
    } /**
   * @returns {string} Generated random value included in devices hash.
   */ ;
    _proto.getSaltDevices = function getSaltDevices() {
        return this.SaltToHashDevices;
    } /**
   * @returns {string} Value used to verify devices.
   */ ;
    _proto.getVerifierDevices = function getVerifierDevices() {
        return this.verifierDevices;
    } /**
   * Generate salts and compute verifier.
   * @param {string} deviceGroupKey Devices to generate verifier for.
   * @param {string} username User to generate verifier for.
   * @param {nodeCallback<null>} callback Called with (err, null)
   * @returns {void}
   */ ;
    _proto.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {
        var _this2 = this;
        this.randomPassword = this.generateRandomString();
        var combinedString = "" + deviceGroupKey + username + ":" + this.randomPassword;
        var hashedString = this.hash(combinedString);
        var hexRandom = randomBytes(16).toString("hex"); // The random hex will be unambiguously represented as a postive integer
        this.SaltToHashDevices = this.padHex(new (0, _bigIntegerDefault.default)(hexRandom, 16));
        this.g.modPow(new (0, _bigIntegerDefault.default)(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function(err, verifierDevicesNotPadded) {
            if (err) callback(err, null);
            _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);
            callback(null, null);
        });
    } /**
   * Calculate the client's public value A = g^a%N
   * with the generated random number a
   * @param {BigInteger} a Randomly generated small A.
   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)
   * @returns {void}
   * @private
   */ ;
    _proto.calculateA = function calculateA(a, callback) {
        var _this3 = this;
        this.g.modPow(a, this.N, function(err, A) {
            if (err) callback(err, null);
            if (A.mod(_this3.N).equals((0, _bigIntegerDefault.default).ZERO)) callback(new Error("Illegal paramater. A mod N cannot be 0."), null);
            callback(null, A);
        });
    } /**
   * Calculate the client's value U which is the hash of A and B
   * @param {BigInteger} A Large A value.
   * @param {BigInteger} B Server B value.
   * @returns {BigInteger} Computed U value.
   * @private
   */ ;
    _proto.calculateU = function calculateU(A, B) {
        this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));
        var finalU = new (0, _bigIntegerDefault.default)(this.UHexHash, 16);
        return finalU;
    } /**
   * Calculate a hash from a bitArray
   * @param {Buffer} buf Value to hash.
   * @returns {String} Hex-encoded hash.
   * @private
   */ ;
    _proto.hash = function hash(buf) {
        var str = buf instanceof (0, _buffer.Buffer) ? (0, _coreDefault.default).lib.WordArray.create(buf) : buf;
        var hashHex = (0, _sha256Default.default)(str).toString();
        return new Array(64 - hashHex.length).join("0") + hashHex;
    } /**
   * Calculate a hash from a hex string
   * @param {String} hexStr Value to hash.
   * @returns {String} Hex-encoded hash.
   * @private
   */ ;
    _proto.hexHash = function hexHash(hexStr) {
        return this.hash((0, _buffer.Buffer).from(hexStr, "hex"));
    } /**
   * Standard hkdf algorithm
   * @param {Buffer} ikm Input key material.
   * @param {Buffer} salt Salt value.
   * @returns {Buffer} Strong key material.
   * @private
   */ ;
    _proto.computehkdf = function computehkdf(ikm, salt) {
        var infoBitsWordArray = (0, _coreDefault.default).lib.WordArray.create((0, _buffer.Buffer).concat([
            this.infoBits,
            (0, _buffer.Buffer).from(String.fromCharCode(1), "utf8")
        ]));
        var ikmWordArray = ikm instanceof (0, _buffer.Buffer) ? (0, _coreDefault.default).lib.WordArray.create(ikm) : ikm;
        var saltWordArray = salt instanceof (0, _buffer.Buffer) ? (0, _coreDefault.default).lib.WordArray.create(salt) : salt;
        var prk = (0, _hmacSha256Default.default)(ikmWordArray, saltWordArray);
        var hmac = (0, _hmacSha256Default.default)(infoBitsWordArray, prk);
        return (0, _buffer.Buffer).from(hmac.toString(), "hex").slice(0, 16);
    } /**
   * Calculates the final hkdf based on computed S value, and computed U value and the key
   * @param {String} username Username.
   * @param {String} password Password.
   * @param {BigInteger} serverBValue Server B value.
   * @param {BigInteger} salt Generated salt.
   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)
   * @returns {void}
   */ ;
    _proto.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {
        var _this4 = this;
        if (serverBValue.mod(this.N).equals((0, _bigIntegerDefault.default).ZERO)) throw new Error("B cannot be zero.");
        this.UValue = this.calculateU(this.largeAValue, serverBValue);
        if (this.UValue.equals((0, _bigIntegerDefault.default).ZERO)) throw new Error("U cannot be zero.");
        var usernamePassword = "" + this.poolName + username + ":" + password;
        var usernamePasswordHash = this.hash(usernamePassword);
        var xValue = new (0, _bigIntegerDefault.default)(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);
        this.calculateS(xValue, serverBValue, function(err, sValue) {
            if (err) callback(err, null);
            var hkdf = _this4.computehkdf((0, _buffer.Buffer).from(_this4.padHex(sValue), "hex"), (0, _buffer.Buffer).from(_this4.padHex(_this4.UValue), "hex"));
            callback(null, hkdf);
        });
    } /**
   * Calculates the S value used in getPasswordAuthenticationKey
   * @param {BigInteger} xValue Salted password hash value.
   * @param {BigInteger} serverBValue Server B value.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.calculateS = function calculateS(xValue, serverBValue, callback) {
        var _this5 = this;
        this.g.modPow(xValue, this.N, function(err, gModPowXN) {
            if (err) callback(err, null);
            var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));
            intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function(err2, result) {
                if (err2) callback(err2, null);
                callback(null, result.mod(_this5.N));
            });
        });
    } /**
   * Return constant newPasswordRequiredChallengeUserAttributePrefix
   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value
   */ ;
    _proto.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {
        return newPasswordRequiredChallengeUserAttributePrefix;
    } /**
   * Returns an unambiguous, even-length hex string of the two's complement encoding of an integer.
   *
   * It is compatible with the hex encoding of Java's BigInteger's toByteArray(), wich returns a
   * byte array containing the two's-complement representation of a BigInteger. The array contains
   * the minimum number of bytes required to represent the BigInteger, including at least one sign bit.
   *
   * Examples showing how ambiguity is avoided by left padding with:
   * 	"00" (for positive values where the most-significant-bit is set)
   *  "FF" (for negative values where the most-significant-bit is set)
   *
   * padHex(bigInteger.fromInt(-236))  === "FF14"
   * padHex(bigInteger.fromInt(20))    === "14"
   *
   * padHex(bigInteger.fromInt(-200))  === "FF38"
   * padHex(bigInteger.fromInt(56))    === "38"
   *
   * padHex(bigInteger.fromInt(-20))   === "EC"
   * padHex(bigInteger.fromInt(236))   === "00EC"
   *
   * padHex(bigInteger.fromInt(-56))   === "C8"
   * padHex(bigInteger.fromInt(200))   === "00C8"
   *
   * @param {BigInteger} bigInt Number to encode.
   * @returns {String} even-length hex string of the two's complement encoding.
   */ ;
    _proto.padHex = function padHex(bigInt) {
        if (!(bigInt instanceof (0, _bigIntegerDefault.default))) throw new Error("Not a BigInteger");
        var isNegative = bigInt.compareTo((0, _bigIntegerDefault.default).ZERO) < 0;
        /* Get a hex string for abs(bigInt) */ var hexStr = bigInt.abs().toString(16);
        /* Pad hex to even length if needed */ hexStr = hexStr.length % 2 !== 0 ? "0" + hexStr : hexStr;
        /* Prepend "00" if the most significant bit is set */ hexStr = HEX_MSB_REGEX.test(hexStr) ? "00" + hexStr : hexStr;
        if (isNegative) {
            /* Flip the bits of the representation */ var invertedNibbles = hexStr.split("").map(function(x) {
                var invertedNibble = ~parseInt(x, 16) & 0xf;
                return "0123456789ABCDEF".charAt(invertedNibble);
            }).join("");
            /* After flipping the bits, add one to get the 2's complement representation */ var flippedBitsBI = new (0, _bigIntegerDefault.default)(invertedNibbles, 16).add((0, _bigIntegerDefault.default).ONE);
            hexStr = flippedBitsBI.toString(16);
            /*
      For hex strings starting with 'FF8', 'FF' can be dropped, e.g. 0xFFFF80=0xFF80=0x80=-128
      		Any sequence of '1' bits on the left can always be substituted with a single '1' bit
      without changing the represented value.
      		This only happens in the case when the input is 80...00
      */ if (hexStr.toUpperCase().startsWith("FF8")) hexStr = hexStr.substring(2);
        }
        return hexStr;
    };
    return AuthenticationHelper;
}();

},{"buffer":"lysBy","crypto-js/core":"gcdtm","crypto-js/lib-typedarrays":"9WUg2","crypto-js/sha256":"lNj7D","crypto-js/hmac-sha256":"5pVhU","./utils/WordArray":"eRhxc","./BigInteger":"iUmkO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lysBy":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ var global = arguments[3];
"use strict";
var base64 = require("2eef3896765c9283");
var ieee754 = require("3f12005c1e1b81ab");
var isArray = require("4375d8445b71f5dc");
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */ Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */ exports.kMaxLength = kMaxLength();
function typedArraySupport() {
    try {
        var arr = new Uint8Array(1);
        arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function() {
                return 42;
            }
        };
        return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === "function" && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
        ;
    } catch (e) {
        return false;
    }
}
function kMaxLength() {
    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}
function createBuffer(that, length) {
    if (kMaxLength() < length) throw new RangeError("Invalid typed array length");
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
    } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) that = new Buffer(length);
        that.length = length;
    }
    return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) return new Buffer(arg, encodingOrOffset, length);
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new Error("If encoding is specified then the first argument must be a string");
        return allocUnsafe(this, arg);
    }
    return from(this, arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function(arr) {
    arr.__proto__ = Buffer.prototype;
    return arr;
};
function from(that, value, encodingOrOffset, length) {
    if (typeof value === "number") throw new TypeError('"value" argument must not be a number');
    if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) return fromArrayBuffer(that, value, encodingOrOffset, length);
    if (typeof value === "string") return fromString(that, value, encodingOrOffset);
    return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length);
};
if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
    if (typeof Symbol !== "undefined" && Symbol.species && Buffer[Symbol.species] === Buffer) // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
        value: null,
        configurable: true
    });
}
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be a number');
    else if (size < 0) throw new RangeError('"size" argument must not be negative');
}
function alloc(that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(that, size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === "string" ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
    return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(null, size, fill, encoding);
};
function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) for(var i = 0; i < size; ++i)that[i] = 0;
    return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError('"encoding" must be a valid string encoding');
    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
    return that;
}
function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for(var i = 0; i < length; i += 1)that[i] = array[i] & 255;
    return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength // this throws if `array` is not a valid ArrayBuffer
    ;
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("'offset' is out of bounds");
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("'length' is out of bounds");
    if (byteOffset === undefined && length === undefined) array = new Uint8Array(array);
    else if (length === undefined) array = new Uint8Array(array, byteOffset);
    else array = new Uint8Array(array, byteOffset, length);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
    } else // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
    return that;
}
function fromObject(that, obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);
        if (that.length === 0) return that;
        obj.copy(that, 0, 0, len);
        return that;
    }
    if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
            if (typeof obj.length !== "number" || isnan(obj.length)) return createBuffer(that, 0);
            return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && isArray(obj.data)) return fromArrayLike(that, obj.data);
    }
    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function checked(length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return !!(b != null && b._isBuffer);
};
Buffer.compare = function compare(a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError("Arguments must be Buffers");
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") string = "" + string;
    var len = string.length;
    if (len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
        case undefined:
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length | 0;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = exports.INSPECT_MAX_BYTES;
    if (this.length > 0) {
        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
        if (this.length > max) str += " ... ";
    }
    return "<Buffer " + str + ">";
};
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (!Buffer.isBuffer(target)) throw new TypeError("Argument must be a Buffer");
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (isNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
            length = length | 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
            return asciiWrite(this, string, offset, length);
        case "latin1":
        case "binary":
            return latin1Write(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += toHex(buf[i]);
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    for(var i = 0; i < bytes.length; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
    } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for(var i = 0; i < sliceLen; ++i)newBuf[i] = this[i + start];
    }
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = value & 0xff;
    return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for(var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i)buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
    } else objectWriteUInt16(this, value, offset, true);
    return offset + 2;
};
Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
    } else objectWriteUInt16(this, value, offset, false);
    return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for(var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i)buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 0xff;
    } else objectWriteUInt32(this, value, offset, true);
    return offset + 4;
};
Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
    } else objectWriteUInt32(this, value, offset, false);
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
    } else objectWriteUInt16(this, value, offset, true);
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
    } else objectWriteUInt16(this, value, offset, false);
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
    } else objectWriteUInt32(this, value, offset, true);
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
    } else objectWriteUInt32(this, value, offset, false);
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    var i;
    if (this === target && start < targetStart && targetStart < end) // descending copy from end
    for(i = len - 1; i >= 0; --i)target[i + targetStart] = this[i + start];
    else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) // ascending copy from start
    for(i = 0; i < len; ++i)target[i + targetStart] = this[i + start];
    else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (code < 256) val = code;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    } else if (typeof val === "number") val = val & 255;
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
    if (n < 16) return "0" + n.toString(16);
    return n.toString(16);
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
function isnan(val) {
    return val !== val // eslint-disable-line no-self-compare
    ;
}

},{"2eef3896765c9283":"eIiSV","3f12005c1e1b81ab":"cO95r","4375d8445b71f5dc":"lDWwx"}],"lDWwx":[function(require,module,exports) {
var toString = {}.toString;
module.exports = Array.isArray || function(arr) {
    return toString.call(arr) == "[object Array]";
};

},{}],"gcdtm":[function(require,module,exports) {
var global = arguments[3];
(function(root, factory) {
    // CommonJS
    module.exports = exports = factory();
})(this, function() {
    /*globals window, global, require*/ /**
	 * CryptoJS core components.
	 */ var CryptoJS = CryptoJS || function(Math1, undefined) {
        var crypto;
        // Native crypto from window (Browser)
        if (typeof window !== "undefined" && window.crypto) crypto = window.crypto;
        // Native crypto in web worker (Browser)
        if (typeof self !== "undefined" && self.crypto) crypto = self.crypto;
        // Native crypto from worker
        if (typeof globalThis !== "undefined" && globalThis.crypto) crypto = globalThis.crypto;
        // Native (experimental IE 11) crypto from window (Browser)
        if (!crypto && typeof window !== "undefined" && window.msCrypto) crypto = window.msCrypto;
        // Native crypto from global (NodeJS)
        if (!crypto && typeof global !== "undefined" && global.crypto) crypto = global.crypto;
        // Native crypto import via require (NodeJS)
        if (!crypto && true) try {
            crypto = require("b7760e5f0b7216d4");
        } catch (err) {}
        /*
	     * Cryptographically secure pseudorandom number generator
	     *
	     * As Math.random() is cryptographically not safe to use
	     */ var cryptoSecureRandomInt = function() {
            if (crypto) {
                // Use getRandomValues method (Browser)
                if (typeof crypto.getRandomValues === "function") try {
                    return crypto.getRandomValues(new Uint32Array(1))[0];
                } catch (err) {}
                // Use randomBytes method (NodeJS)
                if (typeof crypto.randomBytes === "function") try {
                    return crypto.randomBytes(4).readInt32LE();
                } catch (err) {}
            }
            throw new Error("Native crypto module could not be used to get secure random number.");
        };
        /*
	     * Local polyfill of Object.create

	     */ var create = Object.create || function() {
            function F() {}
            return function(obj) {
                var subtype;
                F.prototype = obj;
                subtype = new F();
                F.prototype = null;
                return subtype;
            };
        }();
        /**
	     * CryptoJS namespace.
	     */ var C = {};
        /**
	     * Library namespace.
	     */ var C_lib = C.lib = {};
        /**
	     * Base object for prototypal inheritance.
	     */ var Base = C_lib.Base = function() {
            return {
                /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */ extend: function(overrides) {
                    // Spawn
                    var subtype = create(this);
                    // Augment
                    if (overrides) subtype.mixIn(overrides);
                    // Create default initializer
                    if (!subtype.hasOwnProperty("init") || this.init === subtype.init) subtype.init = function() {
                        subtype.$super.init.apply(this, arguments);
                    };
                    // Initializer's prototype is the subtype object
                    subtype.init.prototype = subtype;
                    // Reference supertype
                    subtype.$super = this;
                    return subtype;
                },
                /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */ create: function() {
                    var instance = this.extend();
                    instance.init.apply(instance, arguments);
                    return instance;
                },
                /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */ init: function() {},
                /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */ mixIn: function(properties) {
                    for(var propertyName in properties)if (properties.hasOwnProperty(propertyName)) this[propertyName] = properties[propertyName];
                    // IE won't copy toString using the loop above
                    if (properties.hasOwnProperty("toString")) this.toString = properties.toString;
                },
                /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */ clone: function() {
                    return this.init.prototype.extend(this);
                }
            };
        }();
        /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */ var WordArray = C_lib.WordArray = Base.extend({
            /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */ init: function(words, sigBytes) {
                words = this.words = words || [];
                if (sigBytes != undefined) this.sigBytes = sigBytes;
                else this.sigBytes = words.length * 4;
            },
            /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */ toString: function(encoder) {
                return (encoder || Hex).stringify(this);
            },
            /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */ concat: function(wordArray) {
                // Shortcuts
                var thisWords = this.words;
                var thatWords = wordArray.words;
                var thisSigBytes = this.sigBytes;
                var thatSigBytes = wordArray.sigBytes;
                // Clamp excess bits
                this.clamp();
                // Concat
                if (thisSigBytes % 4) // Copy one byte at a time
                for(var i = 0; i < thatSigBytes; i++){
                    var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
                }
                else // Copy one word at a time
                for(var j = 0; j < thatSigBytes; j += 4)thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
                this.sigBytes += thatSigBytes;
                // Chainable
                return this;
            },
            /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */ clamp: function() {
                // Shortcuts
                var words = this.words;
                var sigBytes = this.sigBytes;
                // Clamp
                words[sigBytes >>> 2] &= 0xffffffff << 32 - sigBytes % 4 * 8;
                words.length = Math1.ceil(sigBytes / 4);
            },
            /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */ clone: function() {
                var clone = Base.clone.call(this);
                clone.words = this.words.slice(0);
                return clone;
            },
            /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */ random: function(nBytes) {
                var words = [];
                for(var i = 0; i < nBytes; i += 4)words.push(cryptoSecureRandomInt());
                return new WordArray.init(words, nBytes);
            }
        });
        /**
	     * Encoder namespace.
	     */ var C_enc = C.enc = {};
        /**
	     * Hex encoding strategy.
	     */ var Hex = C_enc.Hex = {
            /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */ stringify: function(wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var hexChars = [];
                for(var i = 0; i < sigBytes; i++){
                    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    hexChars.push((bite >>> 4).toString(16));
                    hexChars.push((bite & 0x0f).toString(16));
                }
                return hexChars.join("");
            },
            /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */ parse: function(hexStr) {
                // Shortcut
                var hexStrLength = hexStr.length;
                // Convert
                var words = [];
                for(var i = 0; i < hexStrLength; i += 2)words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
                return new WordArray.init(words, hexStrLength / 2);
            }
        };
        /**
	     * Latin1 encoding strategy.
	     */ var Latin1 = C_enc.Latin1 = {
            /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */ stringify: function(wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                // Convert
                var latin1Chars = [];
                for(var i = 0; i < sigBytes; i++){
                    var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    latin1Chars.push(String.fromCharCode(bite));
                }
                return latin1Chars.join("");
            },
            /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */ parse: function(latin1Str) {
                // Shortcut
                var latin1StrLength = latin1Str.length;
                // Convert
                var words = [];
                for(var i = 0; i < latin1StrLength; i++)words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << 24 - i % 4 * 8;
                return new WordArray.init(words, latin1StrLength);
            }
        };
        /**
	     * UTF-8 encoding strategy.
	     */ var Utf8 = C_enc.Utf8 = {
            /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */ stringify: function(wordArray) {
                try {
                    return decodeURIComponent(escape(Latin1.stringify(wordArray)));
                } catch (e) {
                    throw new Error("Malformed UTF-8 data");
                }
            },
            /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */ parse: function(utf8Str) {
                return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
            }
        };
        /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */ var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
            /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */ reset: function() {
                // Initial values
                this._data = new WordArray.init();
                this._nDataBytes = 0;
            },
            /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */ _append: function(data) {
                // Convert string to WordArray, else assume WordArray already
                if (typeof data == "string") data = Utf8.parse(data);
                // Append
                this._data.concat(data);
                this._nDataBytes += data.sigBytes;
            },
            /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */ _process: function(doFlush) {
                var processedWords;
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var dataSigBytes = data.sigBytes;
                var blockSize = this.blockSize;
                var blockSizeBytes = blockSize * 4;
                // Count blocks ready
                var nBlocksReady = dataSigBytes / blockSizeBytes;
                if (doFlush) // Round up to include partial blocks
                nBlocksReady = Math1.ceil(nBlocksReady);
                else // Round down to include only full blocks,
                // less the number of blocks that must remain in the buffer
                nBlocksReady = Math1.max((nBlocksReady | 0) - this._minBufferSize, 0);
                // Count words ready
                var nWordsReady = nBlocksReady * blockSize;
                // Count bytes ready
                var nBytesReady = Math1.min(nWordsReady * 4, dataSigBytes);
                // Process blocks
                if (nWordsReady) {
                    for(var offset = 0; offset < nWordsReady; offset += blockSize)// Perform concrete-algorithm logic
                    this._doProcessBlock(dataWords, offset);
                    // Remove processed words
                    processedWords = dataWords.splice(0, nWordsReady);
                    data.sigBytes -= nBytesReady;
                }
                // Return processed words
                return new WordArray.init(processedWords, nBytesReady);
            },
            /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */ clone: function() {
                var clone = Base.clone.call(this);
                clone._data = this._data.clone();
                return clone;
            },
            _minBufferSize: 0
        });
        /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */ var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
            /**
	         * Configuration options.
	         */ cfg: Base.extend(),
            /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */ init: function(cfg) {
                // Apply config defaults
                this.cfg = this.cfg.extend(cfg);
                // Set initial values
                this.reset();
            },
            /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */ reset: function() {
                // Reset data buffer
                BufferedBlockAlgorithm.reset.call(this);
                // Perform concrete-hasher logic
                this._doReset();
            },
            /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */ update: function(messageUpdate) {
                // Append
                this._append(messageUpdate);
                // Update the hash
                this._process();
                // Chainable
                return this;
            },
            /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */ finalize: function(messageUpdate) {
                // Final message update
                if (messageUpdate) this._append(messageUpdate);
                // Perform concrete-hasher logic
                var hash = this._doFinalize();
                return hash;
            },
            blockSize: 16,
            /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */ _createHelper: function(hasher) {
                return function(message, cfg) {
                    return new hasher.init(cfg).finalize(message);
                };
            },
            /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */ _createHmacHelper: function(hasher) {
                return function(message, key) {
                    return new C_algo.HMAC.init(hasher, key).finalize(message);
                };
            }
        });
        /**
	     * Algorithm namespace.
	     */ var C_algo = C.algo = {};
        return C;
    }(Math);
    return CryptoJS;
});

},{"b7760e5f0b7216d4":"jhUEF"}],"jhUEF":[function(require,module,exports) {
"use strict";

},{}],"9WUg2":[function(require,module,exports) {
(function(root, factory) {
    // CommonJS
    module.exports = exports = factory(require("300da5cb0ae97e38"));
})(this, function(CryptoJS) {
    (function() {
        // Check if typed arrays are supported
        if (typeof ArrayBuffer != "function") return;
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        // Reference original init
        var superInit = WordArray.init;
        // Augment WordArray.init to handle typed arrays
        var subInit = WordArray.init = function(typedArray) {
            // Convert buffers to uint8
            if (typedArray instanceof ArrayBuffer) typedArray = new Uint8Array(typedArray);
            // Convert other array views to uint8
            if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
            // Handle Uint8Array
            if (typedArray instanceof Uint8Array) {
                // Shortcut
                var typedArrayByteLength = typedArray.byteLength;
                // Extract bytes
                var words = [];
                for(var i = 0; i < typedArrayByteLength; i++)words[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
                // Initialize this word array
                superInit.call(this, words, typedArrayByteLength);
            } else // Else call normal init
            superInit.apply(this, arguments);
        };
        subInit.prototype = WordArray;
    })();
    return CryptoJS.lib.WordArray;
});

},{"300da5cb0ae97e38":"gcdtm"}],"lNj7D":[function(require,module,exports) {
(function(root, factory) {
    // CommonJS
    module.exports = exports = factory(require("cd9e8447cb14a145"));
})(this, function(CryptoJS) {
    (function(Math1) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Initialization and round constants tables
        var H = [];
        var K = [];
        // Compute constants
        (function() {
            function isPrime(n) {
                var sqrtN = Math1.sqrt(n);
                for(var factor = 2; factor <= sqrtN; factor++){
                    if (!(n % factor)) return false;
                }
                return true;
            }
            function getFractionalBits(n) {
                return (n - (n | 0)) * 0x100000000 | 0;
            }
            var n = 2;
            var nPrime = 0;
            while(nPrime < 64){
                if (isPrime(n)) {
                    if (nPrime < 8) H[nPrime] = getFractionalBits(Math1.pow(n, 0.5));
                    K[nPrime] = getFractionalBits(Math1.pow(n, 1 / 3));
                    nPrime++;
                }
                n++;
            }
        })();
        // Reusable object
        var W = [];
        /**
	     * SHA-256 hash algorithm.
	     */ var SHA256 = C_algo.SHA256 = Hasher.extend({
            _doReset: function() {
                this._hash = new WordArray.init(H.slice(0));
            },
            _doProcessBlock: function(M, offset) {
                // Shortcut
                var H = this._hash.words;
                // Working variables
                var a = H[0];
                var b = H[1];
                var c = H[2];
                var d = H[3];
                var e = H[4];
                var f = H[5];
                var g = H[6];
                var h = H[7];
                // Computation
                for(var i = 0; i < 64; i++){
                    if (i < 16) W[i] = M[offset + i] | 0;
                    else {
                        var gamma0x = W[i - 15];
                        var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                        var gamma1x = W[i - 2];
                        var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                        W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
                    }
                    var ch = e & f ^ ~e & g;
                    var maj = a & b ^ a & c ^ b & c;
                    var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
                    var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
                    var t1 = h + sigma1 + ch + K[i] + W[i];
                    var t2 = sigma0 + maj;
                    h = g;
                    g = f;
                    f = e;
                    e = d + t1 | 0;
                    d = c;
                    c = b;
                    b = a;
                    a = t1 + t2 | 0;
                }
                // Intermediate hash value
                H[0] = H[0] + a | 0;
                H[1] = H[1] + b | 0;
                H[2] = H[2] + c | 0;
                H[3] = H[3] + d | 0;
                H[4] = H[4] + e | 0;
                H[5] = H[5] + f | 0;
                H[6] = H[6] + g | 0;
                H[7] = H[7] + h | 0;
            },
            _doFinalize: function() {
                // Shortcuts
                var data = this._data;
                var dataWords = data.words;
                var nBitsTotal = this._nDataBytes * 8;
                var nBitsLeft = data.sigBytes * 8;
                // Add padding
                dataWords[nBitsLeft >>> 5] |= 0x80 << 24 - nBitsLeft % 32;
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math1.floor(nBitsTotal / 0x100000000);
                dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
                data.sigBytes = dataWords.length * 4;
                // Hash final blocks
                this._process();
                // Return final computed hash
                return this._hash;
            },
            clone: function() {
                var clone = Hasher.clone.call(this);
                clone._hash = this._hash.clone();
                return clone;
            }
        });
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.SHA256('message');
	     *     var hash = CryptoJS.SHA256(wordArray);
	     */ C.SHA256 = Hasher._createHelper(SHA256);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacSHA256(message, key);
	     */ C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
    })(Math);
    return CryptoJS.SHA256;
});

},{"cd9e8447cb14a145":"gcdtm"}],"5pVhU":[function(require,module,exports) {
(function(root, factory, undef) {
    // CommonJS
    module.exports = exports = factory(require("833d6bc98de65929"), require("dfdc4c4799c66011"), require("4088ec920e322900"));
})(this, function(CryptoJS) {
    return CryptoJS.HmacSHA256;
});

},{"833d6bc98de65929":"gcdtm","dfdc4c4799c66011":"lNj7D","4088ec920e322900":"fhnYJ"}],"fhnYJ":[function(require,module,exports) {
(function(root, factory) {
    // CommonJS
    module.exports = exports = factory(require("7479609d4f7429fa"));
})(this, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        /**
	     * HMAC algorithm.
	     */ var HMAC = C_algo.HMAC = Base.extend({
            /**
	         * Initializes a newly created HMAC.
	         *
	         * @param {Hasher} hasher The hash algorithm to use.
	         * @param {WordArray|string} key The secret key.
	         *
	         * @example
	         *
	         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);
	         */ init: function(hasher, key) {
                // Init hasher
                hasher = this._hasher = new hasher.init();
                // Convert string to WordArray, else assume WordArray already
                if (typeof key == "string") key = Utf8.parse(key);
                // Shortcuts
                var hasherBlockSize = hasher.blockSize;
                var hasherBlockSizeBytes = hasherBlockSize * 4;
                // Allow arbitrary length keys
                if (key.sigBytes > hasherBlockSizeBytes) key = hasher.finalize(key);
                // Clamp excess bits
                key.clamp();
                // Clone key for inner and outer pads
                var oKey = this._oKey = key.clone();
                var iKey = this._iKey = key.clone();
                // Shortcuts
                var oKeyWords = oKey.words;
                var iKeyWords = iKey.words;
                // XOR keys with pad constants
                for(var i = 0; i < hasherBlockSize; i++){
                    oKeyWords[i] ^= 0x5c5c5c5c;
                    iKeyWords[i] ^= 0x36363636;
                }
                oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
                // Set initial values
                this.reset();
            },
            /**
	         * Resets this HMAC to its initial state.
	         *
	         * @example
	         *
	         *     hmacHasher.reset();
	         */ reset: function() {
                // Shortcut
                var hasher = this._hasher;
                // Reset
                hasher.reset();
                hasher.update(this._iKey);
            },
            /**
	         * Updates this HMAC with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {HMAC} This HMAC instance.
	         *
	         * @example
	         *
	         *     hmacHasher.update('message');
	         *     hmacHasher.update(wordArray);
	         */ update: function(messageUpdate) {
                this._hasher.update(messageUpdate);
                // Chainable
                return this;
            },
            /**
	         * Finalizes the HMAC computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The HMAC.
	         *
	         * @example
	         *
	         *     var hmac = hmacHasher.finalize();
	         *     var hmac = hmacHasher.finalize('message');
	         *     var hmac = hmacHasher.finalize(wordArray);
	         */ finalize: function(messageUpdate) {
                // Shortcut
                var hasher = this._hasher;
                // Compute HMAC
                var innerHash = hasher.finalize(messageUpdate);
                hasher.reset();
                var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
                return hmac;
            }
        });
    })();
});

},{"7479609d4f7429fa":"gcdtm"}],"eRhxc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>WordArray);
var _cryptoSecureRandomInt = require("./cryptoSecureRandomInt");
var _cryptoSecureRandomIntDefault = parcelHelpers.interopDefault(_cryptoSecureRandomInt);
/**
 * Hex encoding strategy.
 * Converts a word array to a hex string.
 * @param {WordArray} wordArray The word array.
 * @return {string} The hex string.
 * @static
 */ function hexStringify(wordArray) {
    // Shortcuts
    var words = wordArray.words;
    var sigBytes = wordArray.sigBytes; // Convert
    var hexChars = [];
    for(var i = 0; i < sigBytes; i++){
        var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
        hexChars.push((bite >>> 4).toString(16));
        hexChars.push((bite & 0x0f).toString(16));
    }
    return hexChars.join("");
}
var WordArray = /*#__PURE__*/ function() {
    function WordArray(words, sigBytes) {
        words = this.words = words || [];
        if (sigBytes != undefined) this.sigBytes = sigBytes;
        else this.sigBytes = words.length * 4;
    }
    var _proto = WordArray.prototype;
    _proto.random = function random(nBytes) {
        var words = [];
        for(var i = 0; i < nBytes; i += 4)words.push((0, _cryptoSecureRandomIntDefault.default)());
        return new WordArray(words, nBytes);
    };
    _proto.toString = function toString() {
        return hexStringify(this);
    };
    return WordArray;
}();

},{"./cryptoSecureRandomInt":"dkf5t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dkf5t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>cryptoSecureRandomInt);
var global = arguments[3];
var crypto; // Native crypto from window (Browser)
if (typeof window !== "undefined" && window.crypto) crypto = window.crypto;
 // Native (experimental IE 11) crypto from window (Browser)
if (!crypto && typeof window !== "undefined" && window.msCrypto) crypto = window.msCrypto;
 // Native crypto from global (NodeJS)
if (!crypto && typeof global !== "undefined" && global.crypto) crypto = global.crypto;
 // Native crypto import via require (NodeJS)
if (!crypto && true) try {
    crypto = require("161b1906c5522933");
} catch (err) {}
function cryptoSecureRandomInt() {
    if (crypto) {
        // Use getRandomValues method (Browser)
        if (typeof crypto.getRandomValues === "function") try {
            return crypto.getRandomValues(new Uint32Array(1))[0];
        } catch (err) {}
         // Use randomBytes method (NodeJS)
        if (typeof crypto.randomBytes === "function") try {
            return crypto.randomBytes(4).readInt32LE();
        } catch (err) {}
    }
    throw new Error("Native crypto module could not be used to get secure random number.");
}

},{"161b1906c5522933":"jhUEF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iUmkO":[function(require,module,exports) {
// A small implementation of BigInteger based on http://www-cs-students.stanford.edu/~tjw/jsbn/
//
// All public methods have been removed except the following:
//   new BigInteger(a, b) (only radix 2, 4, 8, 16 and 32 supported)
//   toString (only radix 2, 4, 8, 16 and 32 supported)
//   negate
//   abs
//   compareTo
//   bitLength
//   mod
//   equals
//   add
//   subtract
//   multiply
//   divide
//   modPow
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = BigInteger;
/*
 * Copyright (c) 2003-2005  Tom Wu
 * All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY
 * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
 * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
 * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
 * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
 * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * In addition, the following condition applies:
 *
 * All redistributions must retain an intact copy of this copyright notice
 * and disclaimer.
 */ // (public) Constructor
function BigInteger(a, b) {
    if (a != null) this.fromString(a, b);
} // return new, unset BigInteger
function nbi() {
    return new BigInteger(null);
} // Bits per digit
var dbits; // JavaScript engine analysis
var canary = 0xdeadbeefcafe;
var j_lm = (canary & 0xffffff) == 0xefcafe; // am: Compute w_j += (x*this_i), propagate carries,
// c is initial carry, returns final carry.
// c < 3*dvalue, x < 2*dvalue, this_i < dvalue
// We need to select the fastest one that works in this environment.
// am1: use a single mult and divide to get the high bits,
// max digit bits should be 26 because
// max internal value = 2*dvalue^2-2*dvalue (< 2^53)
function am1(i, x, w, j, c, n) {
    while(--n >= 0){
        var v = x * this[i++] + w[j] + c;
        c = Math.floor(v / 0x4000000);
        w[j++] = v & 0x3ffffff;
    }
    return c;
} // am2 avoids a big mult-and-extract completely.
// Max digit bits should be <= 30 because we do bitwise ops
// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
function am2(i, x, w, j, c, n) {
    var xl = x & 0x7fff, xh = x >> 15;
    while(--n >= 0){
        var l = this[i] & 0x7fff;
        var h = this[i++] >> 15;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);
        c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);
        w[j++] = l & 0x3fffffff;
    }
    return c;
} // Alternately, set max digit bits to 28 since some
// browsers slow down when dealing with 32-bit numbers.
function am3(i, x, w, j, c, n) {
    var xl = x & 0x3fff, xh = x >> 14;
    while(--n >= 0){
        var l = this[i] & 0x3fff;
        var h = this[i++] >> 14;
        var m = xh * l + h * xl;
        l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;
        c = (l >> 28) + (m >> 14) + xh * h;
        w[j++] = l & 0xfffffff;
    }
    return c;
}
var inBrowser = typeof navigator !== "undefined";
if (inBrowser && j_lm && navigator.appName == "Microsoft Internet Explorer") {
    BigInteger.prototype.am = am2;
    dbits = 30;
} else if (inBrowser && j_lm && navigator.appName != "Netscape") {
    BigInteger.prototype.am = am1;
    dbits = 26;
} else {
    // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
}
BigInteger.prototype.DB = dbits;
BigInteger.prototype.DM = (1 << dbits) - 1;
BigInteger.prototype.DV = 1 << dbits;
var BI_FP = 52;
BigInteger.prototype.FV = Math.pow(2, BI_FP);
BigInteger.prototype.F1 = BI_FP - dbits;
BigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions
var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
var BI_RC = new Array();
var rr, vv;
rr = "0".charCodeAt(0);
for(vv = 0; vv <= 9; ++vv)BI_RC[rr++] = vv;
rr = "a".charCodeAt(0);
for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
rr = "A".charCodeAt(0);
for(vv = 10; vv < 36; ++vv)BI_RC[rr++] = vv;
function int2char(n) {
    return BI_RM.charAt(n);
}
function intAt(s, i) {
    var c = BI_RC[s.charCodeAt(i)];
    return c == null ? -1 : c;
} // (protected) copy this to r
function bnpCopyTo(r) {
    for(var i = this.t - 1; i >= 0; --i)r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
} // (protected) set from integer value x, -DV <= x < DV
function bnpFromInt(x) {
    this.t = 1;
    this.s = x < 0 ? -1 : 0;
    if (x > 0) this[0] = x;
    else if (x < -1) this[0] = x + this.DV;
    else this.t = 0;
} // return bigint initialized to value
function nbv(i) {
    var r = nbi();
    r.fromInt(i);
    return r;
} // (protected) set from string and radix
function bnpFromString(s, b) {
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0){
        var x = intAt(s, i);
        if (x < 0) {
            if (s.charAt(i) == "-") mi = true;
            continue;
        }
        mi = false;
        if (sh == 0) this[this.t++] = x;
        else if (sh + k > this.DB) {
            this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;
            this[this.t++] = x >> this.DB - sh;
        } else this[this.t - 1] |= x << sh;
        sh += k;
        if (sh >= this.DB) sh -= this.DB;
    }
    this.clamp();
    if (mi) BigInteger.ZERO.subTo(this, this);
} // (protected) clamp off excess high words
function bnpClamp() {
    var c = this.s & this.DM;
    while(this.t > 0 && this[this.t - 1] == c)--this.t;
} // (public) return string representation in given radix
function bnToString(b) {
    if (this.s < 0) return "-" + this.negate().toString(b);
    var k;
    if (b == 16) k = 4;
    else if (b == 8) k = 3;
    else if (b == 2) k = 1;
    else if (b == 32) k = 5;
    else if (b == 4) k = 2;
    else throw new Error("Only radix 2, 4, 8, 16, 32 are supported");
    var km = (1 << k) - 1, d, m = false, r = "", i = this.t;
    var p = this.DB - i * this.DB % k;
    if (i-- > 0) {
        if (p < this.DB && (d = this[i] >> p) > 0) {
            m = true;
            r = int2char(d);
        }
        while(i >= 0){
            if (p < k) {
                d = (this[i] & (1 << p) - 1) << k - p;
                d |= this[--i] >> (p += this.DB - k);
            } else {
                d = this[i] >> (p -= k) & km;
                if (p <= 0) {
                    p += this.DB;
                    --i;
                }
            }
            if (d > 0) m = true;
            if (m) r += int2char(d);
        }
    }
    return m ? r : "0";
} // (public) -this
function bnNegate() {
    var r = nbi();
    BigInteger.ZERO.subTo(this, r);
    return r;
} // (public) |this|
function bnAbs() {
    return this.s < 0 ? this.negate() : this;
} // (public) return + if this > a, - if this < a, 0 if equal
function bnCompareTo(a) {
    var r = this.s - a.s;
    if (r != 0) return r;
    var i = this.t;
    r = i - a.t;
    if (r != 0) return this.s < 0 ? -r : r;
    while(--i >= 0){
        if ((r = this[i] - a[i]) != 0) return r;
    }
    return 0;
} // returns bit length of the integer x
function nbits(x) {
    var r = 1, t;
    if ((t = x >>> 16) != 0) {
        x = t;
        r += 16;
    }
    if ((t = x >> 8) != 0) {
        x = t;
        r += 8;
    }
    if ((t = x >> 4) != 0) {
        x = t;
        r += 4;
    }
    if ((t = x >> 2) != 0) {
        x = t;
        r += 2;
    }
    if ((t = x >> 1) != 0) {
        x = t;
        r += 1;
    }
    return r;
} // (public) return the number of bits in "this"
function bnBitLength() {
    if (this.t <= 0) return 0;
    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);
} // (protected) r = this << n*DB
function bnpDLShiftTo(n, r) {
    var i;
    for(i = this.t - 1; i >= 0; --i)r[i + n] = this[i];
    for(i = n - 1; i >= 0; --i)r[i] = 0;
    r.t = this.t + n;
    r.s = this.s;
} // (protected) r = this >> n*DB
function bnpDRShiftTo(n, r) {
    for(var i = n; i < this.t; ++i)r[i - n] = this[i];
    r.t = Math.max(this.t - n, 0);
    r.s = this.s;
} // (protected) r = this << n
function bnpLShiftTo(n, r) {
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << cbs) - 1;
    var ds = Math.floor(n / this.DB), c = this.s << bs & this.DM, i;
    for(i = this.t - 1; i >= 0; --i){
        r[i + ds + 1] = this[i] >> cbs | c;
        c = (this[i] & bm) << bs;
    }
    for(i = ds - 1; i >= 0; --i)r[i] = 0;
    r[ds] = c;
    r.t = this.t + ds + 1;
    r.s = this.s;
    r.clamp();
} // (protected) r = this >> n
function bnpRShiftTo(n, r) {
    r.s = this.s;
    var ds = Math.floor(n / this.DB);
    if (ds >= this.t) {
        r.t = 0;
        return;
    }
    var bs = n % this.DB;
    var cbs = this.DB - bs;
    var bm = (1 << bs) - 1;
    r[0] = this[ds] >> bs;
    for(var i = ds + 1; i < this.t; ++i){
        r[i - ds - 1] |= (this[i] & bm) << cbs;
        r[i - ds] = this[i] >> bs;
    }
    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;
    r.t = this.t - ds;
    r.clamp();
} // (protected) r = this - a
function bnpSubTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while(i < m){
        c += this[i] - a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c -= a.s;
        while(i < this.t){
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    } else {
        c += this.s;
        while(i < a.t){
            c -= a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c -= a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c < -1) r[i++] = this.DV + c;
    else if (c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
} // (protected) r = this * a, r != this,a (HAC 14.12)
// "this" should be the larger one if appropriate.
function bnpMultiplyTo(a, r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i + y.t;
    while(--i >= 0)r[i] = 0;
    for(i = 0; i < y.t; ++i)r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);
    r.s = 0;
    r.clamp();
    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);
} // (protected) r = this^2, r != this (HAC 14.16)
function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2 * x.t;
    while(--i >= 0)r[i] = 0;
    for(i = 0; i < x.t - 1; ++i){
        var c = x.am(i, x[i], r, 2 * i, 0, 1);
        if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {
            r[i + x.t] -= x.DV;
            r[i + x.t + 1] = 1;
        }
    }
    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);
    r.s = 0;
    r.clamp();
} // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
// r != q, this != m.  q or r may be null.
function bnpDivRemTo(m, q, r) {
    var pm = m.abs();
    if (pm.t <= 0) return;
    var pt = this.abs();
    if (pt.t < pm.t) {
        if (q != null) q.fromInt(0);
        if (r != null) this.copyTo(r);
        return;
    }
    if (r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus
    if (nsh > 0) {
        pm.lShiftTo(nsh, y);
        pt.lShiftTo(nsh, r);
    } else {
        pm.copyTo(y);
        pt.copyTo(r);
    }
    var ys = y.t;
    var y0 = y[ys - 1];
    if (y0 == 0) return;
    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);
    var d1 = this.FV / yt, d2 = (1 << this.F1) / yt, e = 1 << this.F2;
    var i = r.t, j = i - ys, t = q == null ? nbi() : q;
    y.dlShiftTo(j, t);
    if (r.compareTo(t) >= 0) {
        r[r.t++] = 1;
        r.subTo(t, r);
    }
    BigInteger.ONE.dlShiftTo(ys, t);
    t.subTo(y, y); // "negative" y so we can replace sub with am later
    while(y.t < ys)y[y.t++] = 0;
    while(--j >= 0){
        // Estimate quotient digit
        var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);
        if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {
            // Try it out
            y.dlShiftTo(j, t);
            r.subTo(t, r);
            while(r[i] < --qd)r.subTo(t, r);
        }
    }
    if (q != null) {
        r.drShiftTo(ys, q);
        if (ts != ms) BigInteger.ZERO.subTo(q, q);
    }
    r.t = ys;
    r.clamp();
    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder
    if (ts < 0) BigInteger.ZERO.subTo(r, r);
} // (public) this mod a
function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a, null, r);
    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);
    return r;
} // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
// justification:
//         xy == 1 (mod m)
//         xy =  1+km
//   xy(2-xy) = (1+km)(1-km)
// x[y(2-xy)] = 1-k^2m^2
// x[y(2-xy)] == 1 (mod m^2)
// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
// JS multiply "overflows" differently from C/C++, so care is needed here.
function bnpInvDigit() {
    if (this.t < 1) return 0;
    var x = this[0];
    if ((x & 1) == 0) return 0;
    var y = x & 3; // y == 1/x mod 2^2
    y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4
    y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8
    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return y > 0 ? this.DV - y : -y;
}
function bnEquals(a) {
    return this.compareTo(a) == 0;
} // (protected) r = this + a
function bnpAddTo(a, r) {
    var i = 0, c = 0, m = Math.min(a.t, this.t);
    while(i < m){
        c += this[i] + a[i];
        r[i++] = c & this.DM;
        c >>= this.DB;
    }
    if (a.t < this.t) {
        c += a.s;
        while(i < this.t){
            c += this[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += this.s;
    } else {
        c += this.s;
        while(i < a.t){
            c += a[i];
            r[i++] = c & this.DM;
            c >>= this.DB;
        }
        c += a.s;
    }
    r.s = c < 0 ? -1 : 0;
    if (c > 0) r[i++] = c;
    else if (c < -1) r[i++] = this.DV + c;
    r.t = i;
    r.clamp();
} // (public) this + a
function bnAdd(a) {
    var r = nbi();
    this.addTo(a, r);
    return r;
} // (public) this - a
function bnSubtract(a) {
    var r = nbi();
    this.subTo(a, r);
    return r;
} // (public) this * a
function bnMultiply(a) {
    var r = nbi();
    this.multiplyTo(a, r);
    return r;
} // (public) this / a
function bnDivide(a) {
    var r = nbi();
    this.divRemTo(a, r, null);
    return r;
} // Montgomery reduction
function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp & 0x7fff;
    this.mph = this.mp >> 15;
    this.um = (1 << m.DB - 15) - 1;
    this.mt2 = 2 * m.t;
} // xR mod m
function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t, r);
    r.divRemTo(this.m, null, r);
    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);
    return r;
} // x/R mod m
function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
} // x = x/R mod m (HAC 14.32)
function montReduce(x) {
    while(x.t <= this.mt2)// pad x so am has enough room later
    x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i){
        // faster way of calculating u0 = x[i]*mp mod DV
        var j = x[i] & 0x7fff;
        var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call
        j = i + this.m.t;
        x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry
        while(x[j] >= x.DV){
            x[j] -= x.DV;
            x[++j]++;
        }
    }
    x.clamp();
    x.drShiftTo(this.m.t, x);
    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);
} // r = "x^2/R mod m"; x != r
function montSqrTo(x, r) {
    x.squareTo(r);
    this.reduce(r);
} // r = "xy/R mod m"; x,y != r
function montMulTo(x, y, r) {
    x.multiplyTo(y, r);
    this.reduce(r);
}
Montgomery.prototype.convert = montConvert;
Montgomery.prototype.revert = montRevert;
Montgomery.prototype.reduce = montReduce;
Montgomery.prototype.mulTo = montMulTo;
Montgomery.prototype.sqrTo = montSqrTo; // (public) this^e % m (HAC 14.85)
function bnModPow(e, m, callback) {
    var i = e.bitLength(), k, r = nbv(1), z = new Montgomery(m);
    if (i <= 0) return r;
    else if (i < 18) k = 1;
    else if (i < 48) k = 3;
    else if (i < 144) k = 4;
    else if (i < 768) k = 5;
    else k = 6; // precomputation
    var g = new Array(), n = 3, k1 = k - 1, km = (1 << k) - 1;
    g[1] = z.convert(this);
    if (k > 1) {
        var g2 = nbi();
        z.sqrTo(g[1], g2);
        while(n <= km){
            g[n] = nbi();
            z.mulTo(g2, g[n - 2], g[n]);
            n += 2;
        }
    }
    var j = e.t - 1, w, is1 = true, r2 = nbi(), t;
    i = nbits(e[j]) - 1;
    while(j >= 0){
        if (i >= k1) w = e[j] >> i - k1 & km;
        else {
            w = (e[j] & (1 << i + 1) - 1) << k1 - i;
            if (j > 0) w |= e[j - 1] >> this.DB + i - k1;
        }
        n = k;
        while((w & 1) == 0){
            w >>= 1;
            --n;
        }
        if ((i -= n) < 0) {
            i += this.DB;
            --j;
        }
        if (is1) {
            // ret == 1, don't bother squaring or multiplying it
            g[w].copyTo(r);
            is1 = false;
        } else {
            while(n > 1){
                z.sqrTo(r, r2);
                z.sqrTo(r2, r);
                n -= 2;
            }
            if (n > 0) z.sqrTo(r, r2);
            else {
                t = r;
                r = r2;
                r2 = t;
            }
            z.mulTo(r2, g[w], r);
        }
        while(j >= 0 && (e[j] & 1 << i) == 0){
            z.sqrTo(r, r2);
            t = r;
            r = r2;
            r2 = t;
            if (--i < 0) {
                i = this.DB - 1;
                --j;
            }
        }
    }
    var result = z.revert(r);
    callback(null, result);
    return result;
} // protected
BigInteger.prototype.copyTo = bnpCopyTo;
BigInteger.prototype.fromInt = bnpFromInt;
BigInteger.prototype.fromString = bnpFromString;
BigInteger.prototype.clamp = bnpClamp;
BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
BigInteger.prototype.drShiftTo = bnpDRShiftTo;
BigInteger.prototype.lShiftTo = bnpLShiftTo;
BigInteger.prototype.rShiftTo = bnpRShiftTo;
BigInteger.prototype.subTo = bnpSubTo;
BigInteger.prototype.multiplyTo = bnpMultiplyTo;
BigInteger.prototype.squareTo = bnpSquareTo;
BigInteger.prototype.divRemTo = bnpDivRemTo;
BigInteger.prototype.invDigit = bnpInvDigit;
BigInteger.prototype.addTo = bnpAddTo; // public
BigInteger.prototype.toString = bnToString;
BigInteger.prototype.negate = bnNegate;
BigInteger.prototype.abs = bnAbs;
BigInteger.prototype.compareTo = bnCompareTo;
BigInteger.prototype.bitLength = bnBitLength;
BigInteger.prototype.mod = bnMod;
BigInteger.prototype.equals = bnEquals;
BigInteger.prototype.add = bnAdd;
BigInteger.prototype.subtract = bnSubtract;
BigInteger.prototype.multiply = bnMultiply;
BigInteger.prototype.divide = bnDivide;
BigInteger.prototype.modPow = bnModPow; // "constants"
BigInteger.ZERO = nbv(0);
BigInteger.ONE = nbv(1);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dojqu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoAccessToken);
/*
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ var _cognitoJwtToken = require("./CognitoJwtToken");
var _cognitoJwtTokenDefault = parcelHelpers.interopDefault(_cognitoJwtToken);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
/** @class */ var CognitoAccessToken = /*#__PURE__*/ function(_CognitoJwtToken) {
    _inheritsLoose(CognitoAccessToken, _CognitoJwtToken);
    /**
   * Constructs a new CognitoAccessToken object
   * @param {string=} AccessToken The JWT access token.
   */ function CognitoAccessToken(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, AccessToken = _ref.AccessToken;
        return _CognitoJwtToken.call(this, AccessToken || "") || this;
    }
    return CognitoAccessToken;
}((0, _cognitoJwtTokenDefault.default));

},{"./CognitoJwtToken":"cvipU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cvipU":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoJwtToken);
var _buffer = require("buffer");
/** @class */ var CognitoJwtToken = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoJwtToken object
   * @param {string=} token The JWT token.
   */ function CognitoJwtToken(token) {
        // Assign object
        this.jwtToken = token || "";
        this.payload = this.decodePayload();
    }
    /**
   * @returns {string} the record's token.
   */ var _proto = CognitoJwtToken.prototype;
    _proto.getJwtToken = function getJwtToken() {
        return this.jwtToken;
    } /**
   * @returns {int} the token's expiration (exp member).
   */ ;
    _proto.getExpiration = function getExpiration() {
        return this.payload.exp;
    } /**
   * @returns {int} the token's "issued at" (iat member).
   */ ;
    _proto.getIssuedAt = function getIssuedAt() {
        return this.payload.iat;
    } /**
   * @returns {object} the token's payload.
   */ ;
    _proto.decodePayload = function decodePayload() {
        var payload = this.jwtToken.split(".")[1];
        try {
            return JSON.parse((0, _buffer.Buffer).from(payload, "base64").toString("utf8"));
        } catch (err) {
            return {};
        }
    };
    return CognitoJwtToken;
}();

},{"buffer":"lysBy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Exnm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoIdToken);
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ var _cognitoJwtToken = require("./CognitoJwtToken");
var _cognitoJwtTokenDefault = parcelHelpers.interopDefault(_cognitoJwtToken);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
/** @class */ var CognitoIdToken = /*#__PURE__*/ function(_CognitoJwtToken) {
    _inheritsLoose(CognitoIdToken, _CognitoJwtToken);
    /**
   * Constructs a new CognitoIdToken object
   * @param {string=} IdToken The JWT Id token
   */ function CognitoIdToken(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken;
        return _CognitoJwtToken.call(this, IdToken || "") || this;
    }
    return CognitoIdToken;
}((0, _cognitoJwtTokenDefault.default));

},{"./CognitoJwtToken":"cvipU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3nCMJ":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ /** @class */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoRefreshToken);
var CognitoRefreshToken = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoRefreshToken object
   * @param {string=} RefreshToken The JWT refresh token.
   */ function CognitoRefreshToken(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, RefreshToken = _ref.RefreshToken;
        // Assign object
        this.token = RefreshToken || "";
    }
    /**
   * @returns {string} the record's token.
   */ var _proto = CognitoRefreshToken.prototype;
    _proto.getToken = function getToken() {
        return this.token;
    };
    return CognitoRefreshToken;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cbaip":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoUser);
var _buffer = require("buffer");
var _core = require("crypto-js/core");
var _coreDefault = parcelHelpers.interopDefault(_core);
var _libTypedarrays = require("crypto-js/lib-typedarrays"); // necessary for crypto js
var _libTypedarraysDefault = parcelHelpers.interopDefault(_libTypedarrays);
var _encBase64 = require("crypto-js/enc-base64");
var _encBase64Default = parcelHelpers.interopDefault(_encBase64);
var _hmacSha256 = require("crypto-js/hmac-sha256");
var _hmacSha256Default = parcelHelpers.interopDefault(_hmacSha256);
var _bigInteger = require("./BigInteger");
var _bigIntegerDefault = parcelHelpers.interopDefault(_bigInteger);
var _authenticationHelper = require("./AuthenticationHelper");
var _authenticationHelperDefault = parcelHelpers.interopDefault(_authenticationHelper);
var _cognitoAccessToken = require("./CognitoAccessToken");
var _cognitoAccessTokenDefault = parcelHelpers.interopDefault(_cognitoAccessToken);
var _cognitoIdToken = require("./CognitoIdToken");
var _cognitoIdTokenDefault = parcelHelpers.interopDefault(_cognitoIdToken);
var _cognitoRefreshToken = require("./CognitoRefreshToken");
var _cognitoRefreshTokenDefault = parcelHelpers.interopDefault(_cognitoRefreshToken);
var _cognitoUserSession = require("./CognitoUserSession");
var _cognitoUserSessionDefault = parcelHelpers.interopDefault(_cognitoUserSession);
var _dateHelper = require("./DateHelper");
var _dateHelperDefault = parcelHelpers.interopDefault(_dateHelper);
var _cognitoUserAttribute = require("./CognitoUserAttribute");
var _cognitoUserAttributeDefault = parcelHelpers.interopDefault(_cognitoUserAttribute);
var _storageHelper = require("./StorageHelper");
var _storageHelperDefault = parcelHelpers.interopDefault(_storageHelper);
/**
 * @callback nodeCallback
 * @template T result
 * @param {*} err The operation failure reason, or null.
 * @param {T} result The operation result.
 */ /**
 * @callback onFailure
 * @param {*} err Failure reason.
 */ /**
 * @callback onSuccess
 * @template T result
 * @param {T} result The operation result.
 */ /**
 * @callback mfaRequired
 * @param {*} details MFA challenge details.
 */ /**
 * @callback customChallenge
 * @param {*} details Custom challenge details.
 */ /**
 * @callback inputVerificationCode
 * @param {*} data Server response.
 */ /**
 * @callback authSuccess
 * @param {CognitoUserSession} session The new session.
 * @param {bool=} userConfirmationNecessary User must be confirmed.
 */ var isBrowser = typeof navigator !== "undefined";
var userAgent = isBrowser ? navigator.userAgent : "nodejs";
/** @class */ var CognitoUser = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoUser object
   * @param {object} data Creation options
   * @param {string} data.Username The user's username.
   * @param {CognitoUserPool} data.Pool Pool containing the user.
   * @param {object} data.Storage Optional storage object.
   */ function CognitoUser(data) {
        if (data == null || data.Username == null || data.Pool == null) throw new Error("Username and Pool information are required.");
        this.username = data.Username || "";
        this.pool = data.Pool;
        this.Session = null;
        this.client = data.Pool.client;
        this.signInUserSession = null;
        this.authenticationFlowType = "USER_SRP_AUTH";
        this.storage = data.Storage || new (0, _storageHelperDefault.default)().getStorage();
        this.keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        this.userDataKey = this.keyPrefix + "." + this.username + ".userData";
    }
    /**
   * Sets the session for this user
   * @param {CognitoUserSession} signInUserSession the session
   * @returns {void}
   */ var _proto = CognitoUser.prototype;
    _proto.setSignInUserSession = function setSignInUserSession(signInUserSession) {
        this.clearCachedUserData();
        this.signInUserSession = signInUserSession;
        this.cacheTokens();
    } /**
   * @returns {CognitoUserSession} the current session for this user
   */ ;
    _proto.getSignInUserSession = function getSignInUserSession() {
        return this.signInUserSession;
    } /**
   * @returns {string} the user's username
   */ ;
    _proto.getUsername = function getUsername() {
        return this.username;
    } /**
   * @returns {String} the authentication flow type
   */ ;
    _proto.getAuthenticationFlowType = function getAuthenticationFlowType() {
        return this.authenticationFlowType;
    } /**
   * sets authentication flow type
   * @param {string} authenticationFlowType New value.
   * @returns {void}
   */ ;
    _proto.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {
        this.authenticationFlowType = authenticationFlowType;
    } /**
   * This is used for authenticating the user through the custom authentication flow.
   * @param {AuthenticationDetails} authDetails Contains the authentication data
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {customChallenge} callback.customChallenge Custom challenge
   *        response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @returns {void}
   */ ;
    _proto.initiateAuth = function initiateAuth(authDetails, callback) {
        var _this = this;
        var authParameters = authDetails.getAuthParameters();
        authParameters.USERNAME = this.username;
        var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
        var jsonReq = {
            AuthFlow: "CUSTOM_AUTH",
            ClientId: this.pool.getClientId(),
            AuthParameters: authParameters,
            ClientMetadata: clientMetaData
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("InitiateAuth", jsonReq, function(err, data) {
            if (err) return callback.onFailure(err);
            var challengeName = data.ChallengeName;
            var challengeParameters = data.ChallengeParameters;
            if (challengeName === "CUSTOM_CHALLENGE") {
                _this.Session = data.Session;
                return callback.customChallenge(challengeParameters);
            }
            _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);
            _this.cacheTokens();
            return callback.onSuccess(_this.signInUserSession);
        });
    } /**
   * This is used for authenticating the user.
   * stuff
   * @param {AuthenticationDetails} authDetails Contains the authentication data
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {newPasswordRequired} callback.newPasswordRequired new
   *        password and any required attributes are required to continue
   * @param {mfaRequired} callback.mfaRequired MFA code
   *        required to continue.
   * @param {customChallenge} callback.customChallenge Custom challenge
   *        response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @returns {void}
   */ ;
    _proto.authenticateUser = function authenticateUser(authDetails, callback) {
        if (this.authenticationFlowType === "USER_PASSWORD_AUTH") return this.authenticateUserPlainUsernamePassword(authDetails, callback);
        else if (this.authenticationFlowType === "USER_SRP_AUTH" || this.authenticationFlowType === "CUSTOM_AUTH") return this.authenticateUserDefaultAuth(authDetails, callback);
        return callback.onFailure(new Error("Authentication flow type is invalid."));
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   * It calls the AuthenticationHelper for SRP related
   * stuff
   * @param {AuthenticationDetails} authDetails Contains the authentication data
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {newPasswordRequired} callback.newPasswordRequired new
   *        password and any required attributes are required to continue
   * @param {mfaRequired} callback.mfaRequired MFA code
   *        required to continue.
   * @param {customChallenge} callback.customChallenge Custom challenge
   *        response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @returns {void}
   */ ;
    _proto.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {
        var _this2 = this;
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.pool.getUserPoolId().split("_")[1]);
        var dateHelper = new (0, _dateHelperDefault.default)();
        var serverBValue;
        var salt;
        var authParameters = {};
        if (this.deviceKey != null) authParameters.DEVICE_KEY = this.deviceKey;
        authParameters.USERNAME = this.username;
        authenticationHelper.getLargeAValue(function(errOnAValue, aValue) {
            // getLargeAValue callback start
            if (errOnAValue) callback.onFailure(errOnAValue);
            authParameters.SRP_A = aValue.toString(16);
            if (_this2.authenticationFlowType === "CUSTOM_AUTH") authParameters.CHALLENGE_NAME = "SRP_A";
            var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
            var jsonReq = {
                AuthFlow: _this2.authenticationFlowType,
                ClientId: _this2.pool.getClientId(),
                AuthParameters: authParameters,
                ClientMetadata: clientMetaData
            };
            if (_this2.getUserContextData(_this2.username)) jsonReq.UserContextData = _this2.getUserContextData(_this2.username);
            _this2.client.request("InitiateAuth", jsonReq, function(err, data) {
                if (err) return callback.onFailure(err);
                var challengeParameters = data.ChallengeParameters;
                _this2.username = challengeParameters.USER_ID_FOR_SRP;
                _this2.userDataKey = _this2.keyPrefix + "." + _this2.username + ".userData";
                serverBValue = new (0, _bigIntegerDefault.default)(challengeParameters.SRP_B, 16);
                salt = new (0, _bigIntegerDefault.default)(challengeParameters.SALT, 16);
                _this2.getCachedDeviceKeyAndPassword();
                authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function(errOnHkdf, hkdf) {
                    // getPasswordAuthenticationKey callback start
                    if (errOnHkdf) callback.onFailure(errOnHkdf);
                    var dateNow = dateHelper.getNowString();
                    var message = (0, _coreDefault.default).lib.WordArray.create((0, _buffer.Buffer).concat([
                        (0, _buffer.Buffer).from(_this2.pool.getUserPoolId().split("_")[1], "utf8"),
                        (0, _buffer.Buffer).from(_this2.username, "utf8"),
                        (0, _buffer.Buffer).from(challengeParameters.SECRET_BLOCK, "base64"),
                        (0, _buffer.Buffer).from(dateNow, "utf8")
                    ]));
                    var key = (0, _coreDefault.default).lib.WordArray.create(hkdf);
                    var signatureString = (0, _encBase64Default.default).stringify((0, _hmacSha256Default.default)(message, key));
                    var challengeResponses = {};
                    challengeResponses.USERNAME = _this2.username;
                    challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
                    challengeResponses.TIMESTAMP = dateNow;
                    challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
                    if (_this2.deviceKey != null) challengeResponses.DEVICE_KEY = _this2.deviceKey;
                    var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {
                        return _this2.client.request("RespondToAuthChallenge", challenge, function(errChallenge, dataChallenge) {
                            if (errChallenge && errChallenge.code === "ResourceNotFoundException" && errChallenge.message.toLowerCase().indexOf("device") !== -1) {
                                challengeResponses.DEVICE_KEY = null;
                                _this2.deviceKey = null;
                                _this2.randomPassword = null;
                                _this2.deviceGroupKey = null;
                                _this2.clearCachedDeviceKeyAndPassword();
                                return respondToAuthChallenge(challenge, challengeCallback);
                            }
                            return challengeCallback(errChallenge, dataChallenge);
                        });
                    };
                    var jsonReqResp = {
                        ChallengeName: "PASSWORD_VERIFIER",
                        ClientId: _this2.pool.getClientId(),
                        ChallengeResponses: challengeResponses,
                        Session: data.Session,
                        ClientMetadata: clientMetaData
                    };
                    if (_this2.getUserContextData()) jsonReqResp.UserContextData = _this2.getUserContextData();
                    respondToAuthChallenge(jsonReqResp, function(errAuthenticate, dataAuthenticate) {
                        if (errAuthenticate) return callback.onFailure(errAuthenticate);
                        return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
                    });
                    return undefined; // getPasswordAuthenticationKey callback end
                });
                return undefined;
            }); // getLargeAValue callback end
        });
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   * @param {AuthenticationDetails} authDetails Contains the authentication data.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {mfaRequired} callback.mfaRequired MFA code
   *        required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @returns {void}
   */ ;
    _proto.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {
        var _this3 = this;
        var authParameters = {};
        authParameters.USERNAME = this.username;
        authParameters.PASSWORD = authDetails.getPassword();
        if (!authParameters.PASSWORD) {
            callback.onFailure(new Error("PASSWORD parameter is required"));
            return;
        }
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.pool.getUserPoolId().split("_")[1]);
        this.getCachedDeviceKeyAndPassword();
        if (this.deviceKey != null) authParameters.DEVICE_KEY = this.deviceKey;
        var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();
        var jsonReq = {
            AuthFlow: "USER_PASSWORD_AUTH",
            ClientId: this.pool.getClientId(),
            AuthParameters: authParameters,
            ClientMetadata: clientMetaData
        };
        if (this.getUserContextData(this.username)) jsonReq.UserContextData = this.getUserContextData(this.username);
         // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,
        // Cognito UserPools verifies password and returns tokens.
        this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
            if (err) return callback.onFailure(err);
            return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);
        });
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   * @param {object} dataAuthenticate authentication data
   * @param {object} authenticationHelper helper created
   * @param {callback} callback passed on from caller
   * @returns {void}
   */ ;
    _proto.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {
        var _this4 = this;
        var challengeName = dataAuthenticate.ChallengeName;
        var challengeParameters = dataAuthenticate.ChallengeParameters;
        if (challengeName === "SMS_MFA") {
            this.Session = dataAuthenticate.Session;
            return callback.mfaRequired(challengeName, challengeParameters);
        }
        if (challengeName === "SELECT_MFA_TYPE") {
            this.Session = dataAuthenticate.Session;
            return callback.selectMFAType(challengeName, challengeParameters);
        }
        if (challengeName === "MFA_SETUP") {
            this.Session = dataAuthenticate.Session;
            return callback.mfaSetup(challengeName, challengeParameters);
        }
        if (challengeName === "SOFTWARE_TOKEN_MFA") {
            this.Session = dataAuthenticate.Session;
            return callback.totpRequired(challengeName, challengeParameters);
        }
        if (challengeName === "CUSTOM_CHALLENGE") {
            this.Session = dataAuthenticate.Session;
            return callback.customChallenge(challengeParameters);
        }
        if (challengeName === "NEW_PASSWORD_REQUIRED") {
            this.Session = dataAuthenticate.Session;
            var userAttributes = null;
            var rawRequiredAttributes = null;
            var requiredAttributes = [];
            var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
            if (challengeParameters) {
                userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);
                rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);
            }
            if (rawRequiredAttributes) for(var i = 0; i < rawRequiredAttributes.length; i++)requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);
            return callback.newPasswordRequired(userAttributes, requiredAttributes);
        }
        if (challengeName === "DEVICE_SRP_AUTH") {
            this.Session = dataAuthenticate.Session;
            this.getDeviceResponse(callback);
            return undefined;
        }
        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
        this.challengeName = challengeName;
        this.cacheTokens();
        var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;
        if (newDeviceMetadata == null) return callback.onSuccess(this.signInUserSession);
        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
            if (errGenHash) return callback.onFailure(errGenHash);
            var deviceSecretVerifierConfig = {
                Salt: (0, _buffer.Buffer).from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
                PasswordVerifier: (0, _buffer.Buffer).from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
            };
            _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
            _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;
            _this4.randomPassword = authenticationHelper.getRandomPassword();
            _this4.client.request("ConfirmDevice", {
                DeviceKey: newDeviceMetadata.DeviceKey,
                AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),
                DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
                DeviceName: userAgent
            }, function(errConfirm, dataConfirm) {
                if (errConfirm) return callback.onFailure(errConfirm);
                _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
                _this4.cacheDeviceKeyAndPassword();
                if (dataConfirm.UserConfirmationNecessary === true) return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);
                return callback.onSuccess(_this4.signInUserSession);
            });
            return undefined;
        });
        return undefined;
    } /**
   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.
   * Pass the new password with any new user attributes to be updated.
   * User attribute keys must be of format userAttributes.<attribute_name>.
   * @param {string} newPassword new password for this user
   * @param {object} requiredAttributeData map with values for all required attributes
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.
   * @param {customChallenge} callback.customChallenge Custom challenge
   *         response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {
        var _this5 = this;
        if (!newPassword) return callback.onFailure(new Error("New password is required."));
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.pool.getUserPoolId().split("_")[1]);
        var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();
        var finalUserAttributes = {};
        if (requiredAttributeData) Object.keys(requiredAttributeData).forEach(function(key) {
            finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];
        });
        finalUserAttributes.NEW_PASSWORD = newPassword;
        finalUserAttributes.USERNAME = this.username;
        var jsonReq = {
            ChallengeName: "NEW_PASSWORD_REQUIRED",
            ClientId: this.pool.getClientId(),
            ChallengeResponses: finalUserAttributes,
            Session: this.Session,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("RespondToAuthChallenge", jsonReq, function(errAuthenticate, dataAuthenticate) {
            if (errAuthenticate) return callback.onFailure(errAuthenticate);
            return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);
        });
        return undefined;
    } /**
   * This is used to get a session using device authentication. It is called at the end of user
   * authentication
   *
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   * @private
   */ ;
    _proto.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {
        var _this6 = this;
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.deviceGroupKey);
        var dateHelper = new (0, _dateHelperDefault.default)();
        var authParameters = {};
        authParameters.USERNAME = this.username;
        authParameters.DEVICE_KEY = this.deviceKey;
        authenticationHelper.getLargeAValue(function(errAValue, aValue) {
            // getLargeAValue callback start
            if (errAValue) callback.onFailure(errAValue);
            authParameters.SRP_A = aValue.toString(16);
            var jsonReq = {
                ChallengeName: "DEVICE_SRP_AUTH",
                ClientId: _this6.pool.getClientId(),
                ChallengeResponses: authParameters,
                ClientMetadata: clientMetadata,
                Session: _this6.Session
            };
            if (_this6.getUserContextData()) jsonReq.UserContextData = _this6.getUserContextData();
            _this6.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
                if (err) return callback.onFailure(err);
                var challengeParameters = data.ChallengeParameters;
                var serverBValue = new (0, _bigIntegerDefault.default)(challengeParameters.SRP_B, 16);
                var salt = new (0, _bigIntegerDefault.default)(challengeParameters.SALT, 16);
                authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function(errHkdf, hkdf) {
                    // getPasswordAuthenticationKey callback start
                    if (errHkdf) return callback.onFailure(errHkdf);
                    var dateNow = dateHelper.getNowString();
                    var message = (0, _coreDefault.default).lib.WordArray.create((0, _buffer.Buffer).concat([
                        (0, _buffer.Buffer).from(_this6.deviceGroupKey, "utf8"),
                        (0, _buffer.Buffer).from(_this6.deviceKey, "utf8"),
                        (0, _buffer.Buffer).from(challengeParameters.SECRET_BLOCK, "base64"),
                        (0, _buffer.Buffer).from(dateNow, "utf8")
                    ]));
                    var key = (0, _coreDefault.default).lib.WordArray.create(hkdf);
                    var signatureString = (0, _encBase64Default.default).stringify((0, _hmacSha256Default.default)(message, key));
                    var challengeResponses = {};
                    challengeResponses.USERNAME = _this6.username;
                    challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;
                    challengeResponses.TIMESTAMP = dateNow;
                    challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;
                    challengeResponses.DEVICE_KEY = _this6.deviceKey;
                    var jsonReqResp = {
                        ChallengeName: "DEVICE_PASSWORD_VERIFIER",
                        ClientId: _this6.pool.getClientId(),
                        ChallengeResponses: challengeResponses,
                        Session: data.Session
                    };
                    if (_this6.getUserContextData()) jsonReqResp.UserContextData = _this6.getUserContextData();
                    _this6.client.request("RespondToAuthChallenge", jsonReqResp, function(errAuthenticate, dataAuthenticate) {
                        if (errAuthenticate) return callback.onFailure(errAuthenticate);
                        _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
                        _this6.cacheTokens();
                        return callback.onSuccess(_this6.signInUserSession);
                    });
                    return undefined; // getPasswordAuthenticationKey callback end
                });
                return undefined;
            }); // getLargeAValue callback end
        });
    } /**
   * This is used for a certain user to confirm the registration by using a confirmation code
   * @param {string} confirmationCode Code entered by user.
   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            ConfirmationCode: confirmationCode,
            Username: this.username,
            ForceAliasCreation: forceAliasCreation,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("ConfirmSignUp", jsonReq, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
    } /**
   * This is used by the user once he has the responses to a custom challenge
   * @param {string} answerChallenge The custom challenge answer.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {customChallenge} callback.customChallenge
   *    Custom challenge response required to continue.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {
        var _this7 = this;
        var challengeResponses = {};
        challengeResponses.USERNAME = this.username;
        challengeResponses.ANSWER = answerChallenge;
        var authenticationHelper = new (0, _authenticationHelperDefault.default)(this.pool.getUserPoolId().split("_")[1]);
        this.getCachedDeviceKeyAndPassword();
        if (this.deviceKey != null) challengeResponses.DEVICE_KEY = this.deviceKey;
        var jsonReq = {
            ChallengeName: "CUSTOM_CHALLENGE",
            ChallengeResponses: challengeResponses,
            ClientId: this.pool.getClientId(),
            Session: this.Session,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
            if (err) return callback.onFailure(err);
            return _this7.authenticateUserInternal(data, authenticationHelper, callback);
        });
    } /**
   * This is used by the user once he has an MFA code
   * @param {string} confirmationCode The MFA code entered by the user.
   * @param {object} callback Result callback map.
   * @param {string} mfaType The mfa we are replying to.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {authSuccess} callback.onSuccess Called on success with the new session.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {
        var _this8 = this;
        var challengeResponses = {};
        challengeResponses.USERNAME = this.username;
        challengeResponses.SMS_MFA_CODE = confirmationCode;
        var mfaTypeSelection = mfaType || "SMS_MFA";
        if (mfaTypeSelection === "SOFTWARE_TOKEN_MFA") challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;
        if (this.deviceKey != null) challengeResponses.DEVICE_KEY = this.deviceKey;
        var jsonReq = {
            ChallengeName: mfaTypeSelection,
            ChallengeResponses: challengeResponses,
            ClientId: this.pool.getClientId(),
            Session: this.Session,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("RespondToAuthChallenge", jsonReq, function(err, dataAuthenticate) {
            if (err) return callback.onFailure(err);
            var challengeName = dataAuthenticate.ChallengeName;
            if (challengeName === "DEVICE_SRP_AUTH") {
                _this8.getDeviceResponse(callback);
                return undefined;
            }
            _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);
            _this8.cacheTokens();
            if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) return callback.onSuccess(_this8.signInUserSession);
            var authenticationHelper = new (0, _authenticationHelperDefault.default)(_this8.pool.getUserPoolId().split("_")[1]);
            authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function(errGenHash) {
                if (errGenHash) return callback.onFailure(errGenHash);
                var deviceSecretVerifierConfig = {
                    Salt: (0, _buffer.Buffer).from(authenticationHelper.getSaltDevices(), "hex").toString("base64"),
                    PasswordVerifier: (0, _buffer.Buffer).from(authenticationHelper.getVerifierDevices(), "hex").toString("base64")
                };
                _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;
                _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;
                _this8.randomPassword = authenticationHelper.getRandomPassword();
                _this8.client.request("ConfirmDevice", {
                    DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,
                    AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),
                    DeviceSecretVerifierConfig: deviceSecretVerifierConfig,
                    DeviceName: userAgent
                }, function(errConfirm, dataConfirm) {
                    if (errConfirm) return callback.onFailure(errConfirm);
                    _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;
                    _this8.cacheDeviceKeyAndPassword();
                    if (dataConfirm.UserConfirmationNecessary === true) return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);
                    return callback.onSuccess(_this8.signInUserSession);
                });
                return undefined;
            });
            return undefined;
        });
    } /**
   * This is used by an authenticated user to change the current password
   * @param {string} oldUserPassword The current password.
   * @param {string} newUserPassword The requested new password.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) return callback(new Error("User is not authenticated"), null);
        this.client.request("ChangePassword", {
            PreviousPassword: oldUserPassword,
            ProposedPassword: newUserPassword,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            ClientMetadata: clientMetadata
        }, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to enable MFA for itself
   * @deprecated
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.enableMFA = function enableMFA(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        var mfaOptions = [];
        var mfaEnabled = {
            DeliveryMedium: "SMS",
            AttributeName: "phone_number"
        };
        mfaOptions.push(mfaEnabled);
        this.client.request("SetUserSettings", {
            MFAOptions: mfaOptions,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to enable MFA for itself
   * @param {IMfaSettings} smsMfaSettings the sms mfa settings
   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        this.client.request("SetUserMFAPreference", {
            SMSMfaSettings: smsMfaSettings,
            SoftwareTokenMfaSettings: softwareTokenMfaSettings,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to disable MFA for itself
   * @deprecated
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.disableMFA = function disableMFA(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        var mfaOptions = [];
        this.client.request("SetUserSettings", {
            MFAOptions: mfaOptions,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback(err, null);
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to delete itself
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.deleteUser = function deleteUser(callback, clientMetadata) {
        var _this9 = this;
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        this.client.request("DeleteUser", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            ClientMetadata: clientMetadata
        }, function(err) {
            if (err) return callback(err, null);
            _this9.clearCachedUser();
            return callback(null, "SUCCESS");
        });
        return undefined;
    } /**
   * This is used by an authenticated user to change a list of attributes
   * @param {AttributeArg[]} attributes A list of the new user attributes.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {
        var _this10 = this;
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback(new Error("User is not authenticated"), null);
        this.client.request("UpdateUserAttributes", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            UserAttributes: attributes,
            ClientMetadata: clientMetadata
        }, function(err) {
            if (err) return callback(err, null);
             // update cached user
            return _this10.getUserData(function() {
                return callback(null, "SUCCESS");
            }, {
                bypassCache: true
            });
        });
        return undefined;
    } /**
   * This is used by an authenticated user to get a list of attributes
   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.getUserAttributes = function getUserAttributes(callback) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) return callback(new Error("User is not authenticated"), null);
        this.client.request("GetUser", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err, userData) {
            if (err) return callback(err, null);
            var attributeList = [];
            for(var i = 0; i < userData.UserAttributes.length; i++){
                var attribute = {
                    Name: userData.UserAttributes[i].Name,
                    Value: userData.UserAttributes[i].Value
                };
                var userAttribute = new (0, _cognitoUserAttributeDefault.default)(attribute);
                attributeList.push(userAttribute);
            }
            return callback(null, attributeList);
        });
        return undefined;
    } /**
   * This was previously used by an authenticated user to get MFAOptions,
   * but no longer returns a meaningful response. Refer to the documentation for
   * how to setup and use MFA: https://docs.amplify.aws/lib/auth/mfa/q/platform/js
   * @deprecated
   * @param {nodeCallback<MFAOptions>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.getMFAOptions = function getMFAOptions(callback) {
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) return callback(new Error("User is not authenticated"), null);
        this.client.request("GetUser", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err, userData) {
            if (err) return callback(err, null);
            return callback(null, userData.MFAOptions);
        });
        return undefined;
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.createGetUserRequest = function createGetUserRequest() {
        return this.client.promisifyRequest("GetUser", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        });
    } /**
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.refreshSessionIfPossible = function refreshSessionIfPossible(options) {
        var _this11 = this;
        if (options === void 0) options = {};
        // best effort, if not possible
        return new Promise(function(resolve) {
            var refresh = _this11.signInUserSession.getRefreshToken();
            if (refresh && refresh.getToken()) _this11.refreshSession(refresh, resolve, options.clientMetadata);
            else resolve();
        });
    } /**
   * This is used by an authenticated users to get the userData
   * @param {nodeCallback<UserData>} callback Called on success or error.
   * @param {GetUserDataOptions} params
   * @returns {void}
   */ ;
    _proto.getUserData = function getUserData(callback, params) {
        var _this12 = this;
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {
            this.clearCachedUserData();
            return callback(new Error("User is not authenticated"), null);
        }
        var userData = this.getUserDataFromCache();
        if (!userData) {
            this.fetchUserData().then(function(data) {
                callback(null, data);
            })["catch"](callback);
            return;
        }
        if (this.isFetchUserDataAndTokenRequired(params)) {
            this.fetchUserData().then(function(data) {
                return _this12.refreshSessionIfPossible(params).then(function() {
                    return data;
                });
            }).then(function(data) {
                return callback(null, data);
            })["catch"](callback);
            return;
        }
        try {
            callback(null, JSON.parse(userData));
            return;
        } catch (err) {
            this.clearCachedUserData();
            callback(err, null);
            return;
        }
    } /**
   *
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.getUserDataFromCache = function getUserDataFromCache() {
        var userData = this.storage.getItem(this.userDataKey);
        return userData;
    } /**
   *
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.isFetchUserDataAndTokenRequired = function isFetchUserDataAndTokenRequired(params) {
        var _ref = params || {}, _ref$bypassCache = _ref.bypassCache, bypassCache = _ref$bypassCache === void 0 ? false : _ref$bypassCache;
        return bypassCache;
    } /**
   *
   * PRIVATE ONLY: This is an internal only method and should not
   * be directly called by the consumers.
   */ ;
    _proto.fetchUserData = function fetchUserData() {
        var _this13 = this;
        return this.createGetUserRequest().then(function(data) {
            _this13.cacheUserData(data);
            return data;
        });
    } /**
   * This is used by an authenticated user to delete a list of attributes
   * @param {string[]} attributeList Names of the attributes to delete.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.deleteAttributes = function deleteAttributes(attributeList, callback) {
        var _this14 = this;
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) return callback(new Error("User is not authenticated"), null);
        this.client.request("DeleteUserAttributes", {
            UserAttributeNames: attributeList,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback(err, null);
             // update cached user
            return _this14.getUserData(function() {
                return callback(null, "SUCCESS");
            }, {
                bypassCache: true
            });
        });
        return undefined;
    } /**
   * This is used by a user to resend a confirmation code
   * @param {nodeCallback<string>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            Username: this.username,
            ClientMetadata: clientMetadata
        };
        this.client.request("ResendConfirmationCode", jsonReq, function(err, result) {
            if (err) return callback(err, null);
            return callback(null, result);
        });
    } /**
   * This is used to get a session, either from the session object
   * or from  the local storage, or by using a refresh token
   *
   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.
   * @param {GetSessionOptions} options
   * @returns {void}
   */ ;
    _proto.getSession = function getSession(callback, options) {
        if (options === void 0) options = {};
        if (this.username == null) return callback(new Error("Username is null. Cannot retrieve a new session"), null);
        if (this.signInUserSession != null && this.signInUserSession.isValid()) return callback(null, this.signInUserSession);
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var idTokenKey = keyPrefix + ".idToken";
        var accessTokenKey = keyPrefix + ".accessToken";
        var refreshTokenKey = keyPrefix + ".refreshToken";
        var clockDriftKey = keyPrefix + ".clockDrift";
        if (this.storage.getItem(idTokenKey)) {
            var idToken = new (0, _cognitoIdTokenDefault.default)({
                IdToken: this.storage.getItem(idTokenKey)
            });
            var accessToken = new (0, _cognitoAccessTokenDefault.default)({
                AccessToken: this.storage.getItem(accessTokenKey)
            });
            var refreshToken = new (0, _cognitoRefreshTokenDefault.default)({
                RefreshToken: this.storage.getItem(refreshTokenKey)
            });
            var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;
            var sessionData = {
                IdToken: idToken,
                AccessToken: accessToken,
                RefreshToken: refreshToken,
                ClockDrift: clockDrift
            };
            var cachedSession = new (0, _cognitoUserSessionDefault.default)(sessionData);
            if (cachedSession.isValid()) {
                this.signInUserSession = cachedSession;
                return callback(null, this.signInUserSession);
            }
            if (!refreshToken.getToken()) return callback(new Error("Cannot retrieve a new session. Please authenticate."), null);
            this.refreshSession(refreshToken, callback, options.clientMetadata);
        } else callback(new Error("Local storage is missing an ID Token, Please authenticate"), null);
        return undefined;
    } /**
   * This uses the refreshToken to retrieve a new session
   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.
   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {
        var _this15 = this;
        var wrappedCallback = this.pool.wrapRefreshSessionCallback ? this.pool.wrapRefreshSessionCallback(callback) : callback;
        var authParameters = {};
        authParameters.REFRESH_TOKEN = refreshToken.getToken();
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        var lastUserKey = keyPrefix + ".LastAuthUser";
        if (this.storage.getItem(lastUserKey)) {
            this.username = this.storage.getItem(lastUserKey);
            var deviceKeyKey = keyPrefix + "." + this.username + ".deviceKey";
            this.deviceKey = this.storage.getItem(deviceKeyKey);
            authParameters.DEVICE_KEY = this.deviceKey;
        }
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            AuthFlow: "REFRESH_TOKEN_AUTH",
            AuthParameters: authParameters,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("InitiateAuth", jsonReq, function(err, authResult) {
            if (err) {
                if (err.code === "NotAuthorizedException") _this15.clearCachedUser();
                return wrappedCallback(err, null);
            }
            if (authResult) {
                var authenticationResult = authResult.AuthenticationResult;
                if (!Object.prototype.hasOwnProperty.call(authenticationResult, "RefreshToken")) authenticationResult.RefreshToken = refreshToken.getToken();
                _this15.signInUserSession = _this15.getCognitoUserSession(authenticationResult);
                _this15.cacheTokens();
                return wrappedCallback(null, _this15.signInUserSession);
            }
            return undefined;
        });
    } /**
   * This is used to save the session tokens to local storage
   * @returns {void}
   */ ;
    _proto.cacheTokens = function cacheTokens() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        var idTokenKey = keyPrefix + "." + this.username + ".idToken";
        var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
        var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
        var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
        var lastUserKey = keyPrefix + ".LastAuthUser";
        this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());
        this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());
        this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());
        this.storage.setItem(clockDriftKey, "" + this.signInUserSession.getClockDrift());
        this.storage.setItem(lastUserKey, this.username);
    } /**
   * This is to cache user data
   */ ;
    _proto.cacheUserData = function cacheUserData(userData) {
        this.storage.setItem(this.userDataKey, JSON.stringify(userData));
    } /**
   * This is to remove cached user data
   */ ;
    _proto.clearCachedUserData = function clearCachedUserData() {
        this.storage.removeItem(this.userDataKey);
    };
    _proto.clearCachedUser = function clearCachedUser() {
        this.clearCachedTokens();
        this.clearCachedUserData();
    } /**
   * This is used to cache the device key and device group and device password
   * @returns {void}
   */ ;
    _proto.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var deviceKeyKey = keyPrefix + ".deviceKey";
        var randomPasswordKey = keyPrefix + ".randomPasswordKey";
        var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
        this.storage.setItem(deviceKeyKey, this.deviceKey);
        this.storage.setItem(randomPasswordKey, this.randomPassword);
        this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);
    } /**
   * This is used to get current device key and device group and device password
   * @returns {void}
   */ ;
    _proto.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var deviceKeyKey = keyPrefix + ".deviceKey";
        var randomPasswordKey = keyPrefix + ".randomPasswordKey";
        var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
        if (this.storage.getItem(deviceKeyKey)) {
            this.deviceKey = this.storage.getItem(deviceKeyKey);
            this.randomPassword = this.storage.getItem(randomPasswordKey);
            this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);
        }
    } /**
   * This is used to clear the device key info from local storage
   * @returns {void}
   */ ;
    _proto.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId() + "." + this.username;
        var deviceKeyKey = keyPrefix + ".deviceKey";
        var randomPasswordKey = keyPrefix + ".randomPasswordKey";
        var deviceGroupKeyKey = keyPrefix + ".deviceGroupKey";
        this.storage.removeItem(deviceKeyKey);
        this.storage.removeItem(randomPasswordKey);
        this.storage.removeItem(deviceGroupKeyKey);
    } /**
   * This is used to clear the session tokens from local storage
   * @returns {void}
   */ ;
    _proto.clearCachedTokens = function clearCachedTokens() {
        var keyPrefix = "CognitoIdentityServiceProvider." + this.pool.getClientId();
        var idTokenKey = keyPrefix + "." + this.username + ".idToken";
        var accessTokenKey = keyPrefix + "." + this.username + ".accessToken";
        var refreshTokenKey = keyPrefix + "." + this.username + ".refreshToken";
        var lastUserKey = keyPrefix + ".LastAuthUser";
        var clockDriftKey = keyPrefix + "." + this.username + ".clockDrift";
        this.storage.removeItem(idTokenKey);
        this.storage.removeItem(accessTokenKey);
        this.storage.removeItem(refreshTokenKey);
        this.storage.removeItem(lastUserKey);
        this.storage.removeItem(clockDriftKey);
    } /**
   * This is used to build a user session from tokens retrieved in the authentication result
   * @param {object} authResult Successful auth response from server.
   * @returns {CognitoUserSession} The new user session.
   * @private
   */ ;
    _proto.getCognitoUserSession = function getCognitoUserSession(authResult) {
        var idToken = new (0, _cognitoIdTokenDefault.default)(authResult);
        var accessToken = new (0, _cognitoAccessTokenDefault.default)(authResult);
        var refreshToken = new (0, _cognitoRefreshTokenDefault.default)(authResult);
        var sessionData = {
            IdToken: idToken,
            AccessToken: accessToken,
            RefreshToken: refreshToken
        };
        return new (0, _cognitoUserSessionDefault.default)(sessionData);
    } /**
   * This is used to initiate a forgot password request
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {inputVerificationCode?} callback.inputVerificationCode
   *    Optional callback raised instead of onSuccess with response data.
   * @param {onSuccess} callback.onSuccess Called on success.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.forgotPassword = function forgotPassword(callback, clientMetadata) {
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            Username: this.username,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("ForgotPassword", jsonReq, function(err, data) {
            if (err) return callback.onFailure(err);
            if (typeof callback.inputVerificationCode === "function") return callback.inputVerificationCode(data);
            return callback.onSuccess(data);
        });
    } /**
   * This is used to confirm a new password using a confirmationCode
   * @param {string} confirmationCode Code entered by user.
   * @param {string} newPassword Confirm new password.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<void>} callback.onSuccess Called on success.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {
        var jsonReq = {
            ClientId: this.pool.getClientId(),
            Username: this.username,
            ConfirmationCode: confirmationCode,
            Password: newPassword,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("ConfirmForgotPassword", jsonReq, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
    } /**
   * This is used to initiate an attribute confirmation request
   * @param {string} attributeName User attribute that needs confirmation.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("GetUserAttributeVerificationCode", {
            AttributeName: attributeName,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            ClientMetadata: clientMetadata
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            if (typeof callback.inputVerificationCode === "function") return callback.inputVerificationCode(data);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to confirm an attribute using a confirmation code
   * @param {string} attributeName Attribute being confirmed.
   * @param {string} confirmationCode Code entered by user.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("VerifyUserAttribute", {
            AttributeName: attributeName,
            Code: confirmationCode,
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to get the device information using the current device key
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.
   * @returns {void}
   */ ;
    _proto.getDevice = function getDevice(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("GetDevice", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            DeviceKey: this.deviceKey
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess(data);
        });
        return undefined;
    } /**
   * This is used to forget a specific device
   * @param {string} deviceKey Device key.
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("ForgetDevice", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            DeviceKey: deviceKey
        }, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to forget the current device
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.forgetDevice = function forgetDevice(callback) {
        var _this16 = this;
        this.forgetSpecificDevice(this.deviceKey, {
            onFailure: callback.onFailure,
            onSuccess: function onSuccess(result) {
                _this16.deviceKey = null;
                _this16.deviceGroupKey = null;
                _this16.randomPassword = null;
                _this16.clearCachedDeviceKeyAndPassword();
                return callback.onSuccess(result);
            }
        });
    } /**
   * This is used to set the device status as remembered
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("UpdateDeviceStatus", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            DeviceKey: this.deviceKey,
            DeviceRememberedStatus: "remembered"
        }, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to set the device status as not remembered
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("UpdateDeviceStatus", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            DeviceKey: this.deviceKey,
            DeviceRememberedStatus: "not_remembered"
        }, function(err) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used to list all devices for a user
   *
   * @param {int} limit the number of devices returned in a call
   * @param {string | null} paginationToken the pagination token in case any was returned before
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.
   * @returns {void}
   */ ;
    _proto.listDevices = function listDevices(limit, paginationToken, callback) {
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        var requestParams = {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            Limit: limit
        };
        if (paginationToken) requestParams.PaginationToken = paginationToken;
        this.client.request("ListDevices", requestParams, function(err, data) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess(data);
        });
        return undefined;
    } /**
   * This is used to globally revoke all tokens issued to a user
   * @param {object} callback Result callback map.
   * @param {onFailure} callback.onFailure Called on any error.
   * @param {onSuccess<string>} callback.onSuccess Called on success.
   * @returns {void}
   */ ;
    _proto.globalSignOut = function globalSignOut(callback) {
        var _this17 = this;
        if (this.signInUserSession == null || !this.signInUserSession.isValid()) return callback.onFailure(new Error("User is not authenticated"));
        this.client.request("GlobalSignOut", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err) {
            if (err) return callback.onFailure(err);
            _this17.clearCachedUser();
            return callback.onSuccess("SUCCESS");
        });
        return undefined;
    } /**
   * This is used for the user to signOut of the application and clear the cached tokens.
   * @returns {void}
   */ ;
    _proto.signOut = function signOut(revokeTokenCallback) {
        var _this18 = this;
        // If tokens won't be revoked, we just clean the client data.
        if (!revokeTokenCallback || typeof revokeTokenCallback !== "function") {
            this.cleanClientData();
            return;
        }
        this.getSession(function(error, _session) {
            if (error) return revokeTokenCallback(error);
            _this18.revokeTokens(function(err) {
                _this18.cleanClientData();
                revokeTokenCallback(err);
            });
        });
    };
    _proto.revokeTokens = function revokeTokens(revokeTokenCallback) {
        if (revokeTokenCallback === void 0) revokeTokenCallback = function revokeTokenCallback() {};
        if (typeof revokeTokenCallback !== "function") throw new Error("Invalid revokeTokenCallback. It should be a function.");
        var tokensToBeRevoked = [];
        if (!this.signInUserSession) {
            var error = new Error("User is not authenticated");
            return revokeTokenCallback(error);
        }
        if (!this.signInUserSession.getAccessToken()) {
            var _error = new Error("No Access token available");
            return revokeTokenCallback(_error);
        }
        var refreshToken = this.signInUserSession.getRefreshToken().getToken();
        var accessToken = this.signInUserSession.getAccessToken();
        if (this.isSessionRevocable(accessToken)) {
            if (refreshToken) return this.revokeToken({
                token: refreshToken,
                callback: revokeTokenCallback
            });
        }
        revokeTokenCallback();
    };
    _proto.isSessionRevocable = function isSessionRevocable(token) {
        if (token && typeof token.decodePayload === "function") try {
            var _token$decodePayload = token.decodePayload(), origin_jti = _token$decodePayload.origin_jti;
            return !!origin_jti;
        } catch (err) {}
        return false;
    };
    _proto.cleanClientData = function cleanClientData() {
        this.signInUserSession = null;
        this.clearCachedUser();
    };
    _proto.revokeToken = function revokeToken(_ref2) {
        var token = _ref2.token, callback = _ref2.callback;
        this.client.requestWithRetry("RevokeToken", {
            Token: token,
            ClientId: this.pool.getClientId()
        }, function(err) {
            if (err) return callback(err);
            callback();
        });
    } /**
   * This is used by a user trying to select a given MFA
   * @param {string} answerChallenge the mfa the user wants
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {
        var _this19 = this;
        var challengeResponses = {};
        challengeResponses.USERNAME = this.username;
        challengeResponses.ANSWER = answerChallenge;
        var jsonReq = {
            ChallengeName: "SELECT_MFA_TYPE",
            ChallengeResponses: challengeResponses,
            ClientId: this.pool.getClientId(),
            Session: this.Session
        };
        if (this.getUserContextData()) jsonReq.UserContextData = this.getUserContextData();
        this.client.request("RespondToAuthChallenge", jsonReq, function(err, data) {
            if (err) return callback.onFailure(err);
            _this19.Session = data.Session;
            if (answerChallenge === "SMS_MFA") return callback.mfaRequired(data.ChallengeName, data.ChallengeParameters);
            if (answerChallenge === "SOFTWARE_TOKEN_MFA") return callback.totpRequired(data.ChallengeName, data.ChallengeParameters);
            return undefined;
        });
    } /**
   * This returns the user context data for advanced security feature.
   * @returns {string} the user context data from CognitoUserPool
   */ ;
    _proto.getUserContextData = function getUserContextData() {
        var pool = this.pool;
        return pool.getUserContextData(this.username);
    } /**
   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.associateSoftwareToken = function associateSoftwareToken(callback) {
        var _this20 = this;
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) this.client.request("AssociateSoftwareToken", {
            Session: this.Session
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            _this20.Session = data.Session;
            return callback.associateSecretCode(data.SecretCode);
        });
        else this.client.request("AssociateSoftwareToken", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken()
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            return callback.associateSecretCode(data.SecretCode);
        });
    } /**
   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA
   * @param {string} totpCode The MFA code entered by the user.
   * @param {string} friendlyDeviceName The device name we are assigning to the device.
   * @param {nodeCallback<string>} callback Called on success or error.
   * @returns {void}
   */ ;
    _proto.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {
        var _this21 = this;
        if (!(this.signInUserSession != null && this.signInUserSession.isValid())) this.client.request("VerifySoftwareToken", {
            Session: this.Session,
            UserCode: totpCode,
            FriendlyDeviceName: friendlyDeviceName
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            _this21.Session = data.Session;
            var challengeResponses = {};
            challengeResponses.USERNAME = _this21.username;
            var jsonReq = {
                ChallengeName: "MFA_SETUP",
                ClientId: _this21.pool.getClientId(),
                ChallengeResponses: challengeResponses,
                Session: _this21.Session
            };
            if (_this21.getUserContextData()) jsonReq.UserContextData = _this21.getUserContextData();
            _this21.client.request("RespondToAuthChallenge", jsonReq, function(errRespond, dataRespond) {
                if (errRespond) return callback.onFailure(errRespond);
                _this21.signInUserSession = _this21.getCognitoUserSession(dataRespond.AuthenticationResult);
                _this21.cacheTokens();
                return callback.onSuccess(_this21.signInUserSession);
            });
            return undefined;
        });
        else this.client.request("VerifySoftwareToken", {
            AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),
            UserCode: totpCode,
            FriendlyDeviceName: friendlyDeviceName
        }, function(err, data) {
            if (err) return callback.onFailure(err);
            return callback.onSuccess(data);
        });
    };
    return CognitoUser;
}();

},{"buffer":"lysBy","crypto-js/core":"gcdtm","crypto-js/lib-typedarrays":"9WUg2","crypto-js/enc-base64":"1XZVI","crypto-js/hmac-sha256":"5pVhU","./BigInteger":"iUmkO","./AuthenticationHelper":"9Wq2x","./CognitoAccessToken":"dojqu","./CognitoIdToken":"7Exnm","./CognitoRefreshToken":"3nCMJ","./CognitoUserSession":"1kQ4I","./DateHelper":"93GWr","./CognitoUserAttribute":"jk8tg","./StorageHelper":"jOffj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1XZVI":[function(require,module,exports) {
(function(root, factory) {
    // CommonJS
    module.exports = exports = factory(require("6c67d43f833ec62e"));
})(this, function(CryptoJS) {
    (function() {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        /**
	     * Base64 encoding strategy.
	     */ var Base64 = C_enc.Base64 = {
            /**
	         * Converts a word array to a Base64 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Base64 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);
	         */ stringify: function(wordArray) {
                // Shortcuts
                var words = wordArray.words;
                var sigBytes = wordArray.sigBytes;
                var map = this._map;
                // Clamp excess bits
                wordArray.clamp();
                // Convert
                var base64Chars = [];
                for(var i = 0; i < sigBytes; i += 3){
                    var byte1 = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;
                    var byte2 = words[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 0xff;
                    var byte3 = words[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 0xff;
                    var triplet = byte1 << 16 | byte2 << 8 | byte3;
                    for(var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++)base64Chars.push(map.charAt(triplet >>> 6 * (3 - j) & 0x3f));
                }
                // Add padding
                var paddingChar = map.charAt(64);
                if (paddingChar) while(base64Chars.length % 4)base64Chars.push(paddingChar);
                return base64Chars.join("");
            },
            /**
	         * Converts a Base64 string to a word array.
	         *
	         * @param {string} base64Str The Base64 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);
	         */ parse: function(base64Str) {
                // Shortcuts
                var base64StrLength = base64Str.length;
                var map = this._map;
                var reverseMap = this._reverseMap;
                if (!reverseMap) {
                    reverseMap = this._reverseMap = [];
                    for(var j = 0; j < map.length; j++)reverseMap[map.charCodeAt(j)] = j;
                }
                // Ignore padding
                var paddingChar = map.charAt(64);
                if (paddingChar) {
                    var paddingIndex = base64Str.indexOf(paddingChar);
                    if (paddingIndex !== -1) base64StrLength = paddingIndex;
                }
                // Convert
                return parseLoop(base64Str, base64StrLength, reverseMap);
            },
            _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
            var words = [];
            var nBytes = 0;
            for(var i = 0; i < base64StrLength; i++)if (i % 4) {
                var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
                var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
                var bitsCombined = bits1 | bits2;
                words[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
                nBytes++;
            }
            return WordArray.create(words, nBytes);
        }
    })();
    return CryptoJS.enc.Base64;
});

},{"6c67d43f833ec62e":"gcdtm"}],"1kQ4I":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ /** @class */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoUserSession);
var CognitoUserSession = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoUserSession object
   * @param {CognitoIdToken} IdToken The session's Id token.
   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.
   * @param {CognitoAccessToken} AccessToken The session's access token.
   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.
   */ function CognitoUserSession(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, IdToken = _ref.IdToken, RefreshToken = _ref.RefreshToken, AccessToken = _ref.AccessToken, ClockDrift = _ref.ClockDrift;
        if (AccessToken == null || IdToken == null) throw new Error("Id token and Access Token must be present.");
        this.idToken = IdToken;
        this.refreshToken = RefreshToken;
        this.accessToken = AccessToken;
        this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;
    }
    /**
   * @returns {CognitoIdToken} the session's Id token
   */ var _proto = CognitoUserSession.prototype;
    _proto.getIdToken = function getIdToken() {
        return this.idToken;
    } /**
   * @returns {CognitoRefreshToken} the session's refresh token
   */ ;
    _proto.getRefreshToken = function getRefreshToken() {
        return this.refreshToken;
    } /**
   * @returns {CognitoAccessToken} the session's access token
   */ ;
    _proto.getAccessToken = function getAccessToken() {
        return this.accessToken;
    } /**
   * @returns {int} the session's clock drift
   */ ;
    _proto.getClockDrift = function getClockDrift() {
        return this.clockDrift;
    } /**
   * @returns {int} the computer's clock drift
   */ ;
    _proto.calculateClockDrift = function calculateClockDrift() {
        var now = Math.floor(new Date() / 1000);
        var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());
        return now - iat;
    } /**
   * Checks to see if the session is still valid based on session expiry information found
   * in tokens and the current time (adjusted with clock drift)
   * @returns {boolean} if the session is still valid
   */ ;
    _proto.isValid = function isValid() {
        var now = Math.floor(new Date() / 1000);
        var adjusted = now - this.clockDrift;
        return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();
    };
    return CognitoUserSession;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"93GWr":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>DateHelper);
var monthNames = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
var weekNames = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
];
/** @class */ var DateHelper = /*#__PURE__*/ function() {
    function DateHelper() {}
    var _proto = DateHelper.prototype;
    /**
   * @returns {string} The current time in "ddd MMM D HH:mm:ss UTC YYYY" format.
   */ _proto.getNowString = function getNowString() {
        var now = new Date();
        var weekDay = weekNames[now.getUTCDay()];
        var month = monthNames[now.getUTCMonth()];
        var day = now.getUTCDate();
        var hours = now.getUTCHours();
        if (hours < 10) hours = "0" + hours;
        var minutes = now.getUTCMinutes();
        if (minutes < 10) minutes = "0" + minutes;
        var seconds = now.getUTCSeconds();
        if (seconds < 10) seconds = "0" + seconds;
        var year = now.getUTCFullYear(); // ddd MMM D HH:mm:ss UTC YYYY
        var dateNow = weekDay + " " + month + " " + day + " " + hours + ":" + minutes + ":" + seconds + " UTC " + year;
        return dateNow;
    };
    return DateHelper;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jk8tg":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ /** @class */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoUserAttribute);
var CognitoUserAttribute = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoUserAttribute object
   * @param {string=} Name The record's name
   * @param {string=} Value The record's value
   */ function CognitoUserAttribute(_temp) {
        var _ref = _temp === void 0 ? {} : _temp, Name = _ref.Name, Value = _ref.Value;
        this.Name = Name || "";
        this.Value = Value || "";
    }
    /**
   * @returns {string} the record's value.
   */ var _proto = CognitoUserAttribute.prototype;
    _proto.getValue = function getValue() {
        return this.Value;
    } /**
   * Sets the record's value.
   * @param {string} value The new value.
   * @returns {CognitoUserAttribute} The record for method chaining.
   */ ;
    _proto.setValue = function setValue(value) {
        this.Value = value;
        return this;
    } /**
   * @returns {string} the record's name.
   */ ;
    _proto.getName = function getName() {
        return this.Name;
    } /**
   * Sets the record's name
   * @param {string} name The new name.
   * @returns {CognitoUserAttribute} The record for method chaining.
   */ ;
    _proto.setName = function setName(name) {
        this.Name = name;
        return this;
    } /**
   * @returns {string} a string representation of the record.
   */ ;
    _proto.toString = function toString() {
        return JSON.stringify(this);
    } /**
   * @returns {object} a flat object representing the record.
   */ ;
    _proto.toJSON = function toJSON() {
        return {
            Name: this.Name,
            Value: this.Value
        };
    };
    return CognitoUserAttribute;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOffj":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MemoryStorage", ()=>MemoryStorage);
parcelHelpers.export(exports, "default", ()=>StorageHelper);
var dataMemory = {};
var MemoryStorage = /*#__PURE__*/ function() {
    function MemoryStorage() {}
    /**
   * This is used to set a specific item in storage
   * @param {string} key - the key for the item
   * @param {object} value - the value
   * @returns {string} value that was set
   */ MemoryStorage.setItem = function setItem(key, value) {
        dataMemory[key] = value;
        return dataMemory[key];
    } /**
   * This is used to get a specific key from storage
   * @param {string} key - the key for the item
   * This is used to clear the storage
   * @returns {string} the data item
   */ ;
    MemoryStorage.getItem = function getItem(key) {
        return Object.prototype.hasOwnProperty.call(dataMemory, key) ? dataMemory[key] : undefined;
    } /**
   * This is used to remove an item from storage
   * @param {string} key - the key being set
   * @returns {boolean} return true
   */ ;
    MemoryStorage.removeItem = function removeItem(key) {
        return delete dataMemory[key];
    } /**
   * This is used to clear the storage
   * @returns {string} nothing
   */ ;
    MemoryStorage.clear = function clear() {
        dataMemory = {};
        return dataMemory;
    };
    return MemoryStorage;
}();
/** @class */ var StorageHelper = /*#__PURE__*/ function() {
    /**
   * This is used to get a storage object
   * @returns {object} the storage
   */ function StorageHelper() {
        try {
            this.storageWindow = window.localStorage;
            this.storageWindow.setItem("aws.cognito.test-ls", 1);
            this.storageWindow.removeItem("aws.cognito.test-ls");
        } catch (exception) {
            this.storageWindow = MemoryStorage;
        }
    }
    /**
   * This is used to return the storage
   * @returns {object} the storage
   */ var _proto = StorageHelper.prototype;
    _proto.getStorage = function getStorage() {
        return this.storageWindow;
    };
    return StorageHelper;
}();

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8MOGu":[function(require,module,exports) {
/*!
 * Copyright 2016 Amazon.com,
 * Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Amazon Software License (the "License").
 * You may not use this file except in compliance with the
 * License. A copy of the License is located at
 *
 *     http://aws.amazon.com/asl/
 *
 * or in the "license" file accompanying this file. This file is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, express or implied. See the License
 * for the specific language governing permissions and
 * limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CognitoUserPool);
var _client = require("./Client");
var _clientDefault = parcelHelpers.interopDefault(_client);
var _cognitoUser = require("./CognitoUser");
var _cognitoUserDefault = parcelHelpers.interopDefault(_cognitoUser);
var _storageHelper = require("./StorageHelper");
var _storageHelperDefault = parcelHelpers.interopDefault(_storageHelper);
var USER_POOL_ID_MAX_LENGTH = 55;
/** @class */ var CognitoUserPool = /*#__PURE__*/ function() {
    /**
   * Constructs a new CognitoUserPool object
   * @param {object} data Creation options.
   * @param {string} data.UserPoolId Cognito user pool id.
   * @param {string} data.ClientId User pool application client id.
   * @param {string} data.endpoint Optional custom service endpoint.
   * @param {object} data.fetchOptions Optional options for fetch API.
   *        (only credentials option is supported)
   * @param {object} data.Storage Optional storage object.
   * @param {boolean} data.AdvancedSecurityDataCollectionFlag Optional:
   *        boolean flag indicating if the data collection is enabled
   *        to support cognito advanced security features. By default, this
   *        flag is set to true.
   */ function CognitoUserPool(data, wrapRefreshSessionCallback) {
        var _ref = data || {}, UserPoolId = _ref.UserPoolId, ClientId = _ref.ClientId, endpoint = _ref.endpoint, fetchOptions = _ref.fetchOptions, AdvancedSecurityDataCollectionFlag = _ref.AdvancedSecurityDataCollectionFlag;
        if (!UserPoolId || !ClientId) throw new Error("Both UserPoolId and ClientId are required.");
        if (UserPoolId.length > USER_POOL_ID_MAX_LENGTH || !/^[\w-]+_[0-9a-zA-Z]+$/.test(UserPoolId)) throw new Error("Invalid UserPoolId format.");
        var region = UserPoolId.split("_")[0];
        this.userPoolId = UserPoolId;
        this.clientId = ClientId;
        this.client = new (0, _clientDefault.default)(region, endpoint, fetchOptions);
        /**
     * By default, AdvancedSecurityDataCollectionFlag is set to true,
     * if no input value is provided.
     */ this.advancedSecurityDataCollectionFlag = AdvancedSecurityDataCollectionFlag !== false;
        this.storage = data.Storage || new (0, _storageHelperDefault.default)().getStorage();
        if (wrapRefreshSessionCallback) this.wrapRefreshSessionCallback = wrapRefreshSessionCallback;
    }
    /**
   * @returns {string} the user pool id
   */ var _proto = CognitoUserPool.prototype;
    _proto.getUserPoolId = function getUserPoolId() {
        return this.userPoolId;
    } /**
   * @returns {string} the client id
   */ ;
    _proto.getClientId = function getClientId() {
        return this.clientId;
    } /**
   * method for signing up a user
   * @param {string} username User's username.
   * @param {string} password Plain-text initial password entered by user.
   * @param {(AttributeArg[])=} userAttributes New user attributes.
   * @param {(AttributeArg[])=} validationData Application metadata.
   * @param {(AttributeArg[])=} clientMetadata Client metadata.
   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.
   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger
   * @returns {void}
   */ ;
    _proto.signUp = function signUp(username, password, userAttributes, validationData, callback, clientMetadata) {
        var _this = this;
        var jsonReq = {
            ClientId: this.clientId,
            Username: username,
            Password: password,
            UserAttributes: userAttributes,
            ValidationData: validationData,
            ClientMetadata: clientMetadata
        };
        if (this.getUserContextData(username)) jsonReq.UserContextData = this.getUserContextData(username);
        this.client.request("SignUp", jsonReq, function(err, data) {
            if (err) return callback(err, null);
            var cognitoUser = {
                Username: username,
                Pool: _this,
                Storage: _this.storage
            };
            var returnData = {
                user: new (0, _cognitoUserDefault.default)(cognitoUser),
                userConfirmed: data.UserConfirmed,
                userSub: data.UserSub,
                codeDeliveryDetails: data.CodeDeliveryDetails
            };
            return callback(null, returnData);
        });
    } /**
   * method for getting the current user of the application from the local storage
   *
   * @returns {CognitoUser} the user retrieved from storage
   */ ;
    _proto.getCurrentUser = function getCurrentUser() {
        var lastUserKey = "CognitoIdentityServiceProvider." + this.clientId + ".LastAuthUser";
        var lastAuthUser = this.storage.getItem(lastUserKey);
        if (lastAuthUser) {
            var cognitoUser = {
                Username: lastAuthUser,
                Pool: this,
                Storage: this.storage
            };
            return new (0, _cognitoUserDefault.default)(cognitoUser);
        }
        return null;
    } /**
   * This method returns the encoded data string used for cognito advanced security feature.
   * This would be generated only when developer has included the JS used for collecting the
   * data on their client. Please refer to documentation to know more about using AdvancedSecurity
   * features
   * @param {string} username the username for the context data
   * @returns {string} the user context data
   **/ ;
    _proto.getUserContextData = function getUserContextData(username) {
        if (typeof AmazonCognitoAdvancedSecurityData === "undefined") return undefined;
        /* eslint-disable */ var amazonCognitoAdvancedSecurityDataConst = AmazonCognitoAdvancedSecurityData;
        /* eslint-enable */ if (this.advancedSecurityDataCollectionFlag) {
            var advancedSecurityData = amazonCognitoAdvancedSecurityDataConst.getData(username, this.userPoolId, this.clientId);
            if (advancedSecurityData) {
                var userContextData = {
                    EncodedData: advancedSecurityData
                };
                return userContextData;
            }
        }
        return {};
    };
    return CognitoUserPool;
}();

},{"./Client":"hwr8E","./CognitoUser":"cbaip","./StorageHelper":"jOffj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hwr8E":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>Client);
var _isomorphicUnfetch = require("isomorphic-unfetch");
var _userAgent = require("./UserAgent");
var _userAgentDefault = parcelHelpers.interopDefault(_userAgent);
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _wrapNativeSuper(Class) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    _wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return _construct(Class, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return _setPrototypeOf(Wrapper, Class);
    };
    return _wrapNativeSuper(Class);
}
function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) _construct = Reflect.construct;
    else _construct = function _construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return _construct.apply(null, arguments);
}
function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function _isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o, p);
}
function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
}
var CognitoError = /*#__PURE__*/ function(_Error) {
    _inheritsLoose(CognitoError, _Error);
    function CognitoError(message, code, name, statusCode) {
        var _this;
        _this = _Error.call(this, message) || this;
        _this.code = code;
        _this.name = name;
        _this.statusCode = statusCode;
        return _this;
    }
    return CognitoError;
}(/*#__PURE__*/ _wrapNativeSuper(Error));
/** @class */ var Client = /*#__PURE__*/ function() {
    /**
   * Constructs a new AWS Cognito Identity Provider client object
   * @param {string} region AWS region
   * @param {string} endpoint endpoint
   * @param {object} fetchOptions options for fetch API (only credentials is supported)
   */ function Client(region, endpoint, fetchOptions) {
        this.endpoint = endpoint || "https://cognito-idp." + region + ".amazonaws.com/";
        var _ref = fetchOptions || {}, credentials = _ref.credentials;
        this.fetchOptions = credentials ? {
            credentials: credentials
        } : {};
    }
    /**
   * Makes an unauthenticated request on AWS Cognito Identity Provider API
   * using fetch
   * @param {string} operation API operation
   * @param {object} params Input parameters
   * @returns Promise<object>
   */ var _proto = Client.prototype;
    _proto.promisifyRequest = function promisifyRequest(operation, params) {
        var _this2 = this;
        return new Promise(function(resolve, reject) {
            _this2.request(operation, params, function(err, data) {
                if (err) reject(new CognitoError(err.message, err.code, err.name, err.statusCode));
                else resolve(data);
            });
        });
    };
    _proto.requestWithRetry = function requestWithRetry(operation, params, callback) {
        var _this3 = this;
        var MAX_DELAY_IN_MILLIS = 5000;
        jitteredExponentialRetry(function(p) {
            return new Promise(function(res, rej) {
                _this3.request(operation, p, function(error, result) {
                    if (error) rej(error);
                    else res(result);
                });
            });
        }, [
            params
        ], MAX_DELAY_IN_MILLIS).then(function(result) {
            return callback(null, result);
        })["catch"](function(error) {
            return callback(error);
        });
    } /**
   * Makes an unauthenticated request on AWS Cognito Identity Provider API
   * using fetch
   * @param {string} operation API operation
   * @param {object} params Input parameters
   * @param {function} callback Callback called when a response is returned
   * @returns {void}
   */ ;
    _proto.request = function request(operation, params, callback) {
        var headers = {
            "Content-Type": "application/x-amz-json-1.1",
            "X-Amz-Target": "AWSCognitoIdentityProviderService." + operation,
            "X-Amz-User-Agent": (0, _userAgentDefault.default).prototype.userAgent
        };
        var options = Object.assign({}, this.fetchOptions, {
            headers: headers,
            method: "POST",
            mode: "cors",
            cache: "no-cache",
            body: JSON.stringify(params)
        });
        var response;
        var responseJsonData;
        fetch(this.endpoint, options).then(function(resp) {
            response = resp;
            return resp;
        }, function(err) {
            // If error happens here, the request failed
            // if it is TypeError throw network error
            if (err instanceof TypeError) throw new Error("Network error");
            throw err;
        }).then(function(resp) {
            return resp.json()["catch"](function() {
                return {};
            });
        }).then(function(data) {
            // return parsed body stream
            if (response.ok) return callback(null, data);
            responseJsonData = data; // Taken from aws-sdk-js/lib/protocol/json.js
            // eslint-disable-next-line no-underscore-dangle
            var code = (data.__type || data.code).split("#").pop();
            var error = new Error(data.message || data.Message || null);
            error.name = code;
            error.code = code;
            return callback(error);
        })["catch"](function(err) {
            // first check if we have a service error
            if (response && response.headers && response.headers.get("x-amzn-errortype")) try {
                var code = response.headers.get("x-amzn-errortype").split(":")[0];
                var error = new Error(response.status ? response.status.toString() : null);
                error.code = code;
                error.name = code;
                error.statusCode = response.status;
                return callback(error);
            } catch (ex) {
                return callback(err);
            } // otherwise check if error is Network error
            else if (err instanceof Error && err.message === "Network error") err.code = "NetworkError";
            return callback(err);
        });
    };
    return Client;
}();
var logger = {
    debug: function debug() {}
};
/**
 * For now, all errors are retryable.
 */ var NonRetryableError = /*#__PURE__*/ function(_Error2) {
    _inheritsLoose(NonRetryableError, _Error2);
    function NonRetryableError(message) {
        var _this4;
        _this4 = _Error2.call(this, message) || this;
        _this4.nonRetryable = true;
        return _this4;
    }
    return NonRetryableError;
}(/*#__PURE__*/ _wrapNativeSuper(Error));
var isNonRetryableError = function isNonRetryableError(obj) {
    var key = "nonRetryable";
    return obj && obj[key];
};
function retry(functionToRetry, args, delayFn, attempt) {
    if (attempt === void 0) attempt = 1;
    if (typeof functionToRetry !== "function") throw Error("functionToRetry must be a function");
    logger.debug(functionToRetry.name + " attempt #" + attempt + " with args: " + JSON.stringify(args));
    return functionToRetry.apply(void 0, args)["catch"](function(err) {
        logger.debug("error on " + functionToRetry.name, err);
        if (isNonRetryableError(err)) {
            logger.debug(functionToRetry.name + " non retryable error", err);
            throw err;
        }
        var retryIn = delayFn(attempt, args, err);
        logger.debug(functionToRetry.name + " retrying in " + retryIn + " ms");
        if (retryIn !== false) return new Promise(function(res) {
            return setTimeout(res, retryIn);
        }).then(function() {
            return retry(functionToRetry, args, delayFn, attempt + 1);
        });
        else throw err;
    });
}
function jitteredBackoff(maxDelayMs) {
    var BASE_TIME_MS = 100;
    var JITTER_FACTOR = 100;
    return function(attempt) {
        var delay = Math.pow(2, attempt) * BASE_TIME_MS + JITTER_FACTOR * Math.random();
        return delay > maxDelayMs ? false : delay;
    };
}
var MAX_DELAY_MS = 300000;
function jitteredExponentialRetry(functionToRetry, args, maxDelayMs) {
    if (maxDelayMs === void 0) maxDelayMs = MAX_DELAY_MS;
    return retry(functionToRetry, args, jitteredBackoff(maxDelayMs));
}

},{"isomorphic-unfetch":"7ubfS","./UserAgent":"a9rVz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ubfS":[function(require,module,exports) {
module.exports = self.fetch || (self.fetch = require("b3738725eb27f9ce").default || require("b3738725eb27f9ce"));

},{"b3738725eb27f9ce":"6OTEM"}],"6OTEM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>function(e, n) {
        return n = n || {}, new Promise(function(t, r) {
            var s = new XMLHttpRequest, o = [], u = [], i = {}, a = function() {
                return {
                    ok: 2 == (s.status / 100 | 0),
                    statusText: s.statusText,
                    status: s.status,
                    url: s.responseURL,
                    text: function() {
                        return Promise.resolve(s.responseText);
                    },
                    json: function() {
                        return Promise.resolve(s.responseText).then(JSON.parse);
                    },
                    blob: function() {
                        return Promise.resolve(new Blob([
                            s.response
                        ]));
                    },
                    clone: a,
                    headers: {
                        keys: function() {
                            return o;
                        },
                        entries: function() {
                            return u;
                        },
                        get: function(e) {
                            return i[e.toLowerCase()];
                        },
                        has: function(e) {
                            return e.toLowerCase() in i;
                        }
                    }
                };
            };
            for(var l in s.open(n.method || "get", e, !0), s.onload = function() {
                s.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function(e, n, t) {
                    o.push(n = n.toLowerCase()), u.push([
                        n,
                        t
                    ]), i[n] = i[n] ? i[n] + "," + t : t;
                }), t(a());
            }, s.onerror = r, s.withCredentials = "include" == n.credentials, n.headers)s.setRequestHeader(l, n.headers[l]);
            s.send(n.body || null);
        });
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a9rVz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "appendToCognitoUserAgent", ()=>appendToCognitoUserAgent);
var _platform = require("./Platform"); // constructor
function UserAgent() {} // public
UserAgent.prototype.userAgent = (0, _platform.getUserAgent)();
var appendToCognitoUserAgent = function appendToCognitoUserAgent(content) {
    if (!content) return;
    if (UserAgent.prototype.userAgent && !UserAgent.prototype.userAgent.includes(content)) UserAgent.prototype.userAgent = UserAgent.prototype.userAgent.concat(" ", content);
    if (!UserAgent.prototype.userAgent || UserAgent.prototype.userAgent === "") UserAgent.prototype.userAgent = content;
}; // class for defining the amzn user-agent
exports.default = UserAgent;

},{"./Platform":"6v7mG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6v7mG":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Platform", ()=>Platform);
parcelHelpers.export(exports, "getUserAgent", ()=>getUserAgent);
var _version = require("./version");
var BASE_USER_AGENT = "aws-amplify/" + (0, _version.version);
var Platform = {
    userAgent: BASE_USER_AGENT + " js",
    product: "",
    navigator: null,
    isReactNative: false
};
if (typeof navigator !== "undefined" && navigator.product) {
    Platform.product = navigator.product || "";
    Platform.navigator = navigator || null;
    switch(navigator.product){
        case "ReactNative":
            Platform.userAgent = BASE_USER_AGENT + " react-native";
            Platform.isReactNative = true;
            break;
        default:
            Platform.userAgent = BASE_USER_AGENT + " js";
            Platform.isReactNative = false;
            break;
    }
}
var getUserAgent = function getUserAgent() {
    return Platform.userAgent;
};
/**
 * @deprecated use named import
 */ exports.default = Platform;

},{"./version":"4uxNS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4uxNS":[function(require,module,exports) {
// generated by genversion
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "version", ()=>version);
var version = "5.0.4";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7YjE8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "default", ()=>CookieStorage);
var _jsCookie = require("js-cookie");
/** @class */ var CookieStorage = /*#__PURE__*/ function() {
    /**
   * Constructs a new CookieStorage object
   * @param {object} data Creation options.
   * @param {string} data.domain Cookies domain (mandatory).
   * @param {string} data.path Cookies path (default: '/')
   * @param {integer} data.expires Cookie expiration (in days, default: 365)
   * @param {boolean} data.secure Cookie secure flag (default: true)
   * @param {string} data.sameSite Cookie request behaviour (default: null)
   */ function CookieStorage(data) {
        if (data.domain) this.domain = data.domain;
        else throw new Error("The domain of cookieStorage can not be undefined.");
        if (data.path) this.path = data.path;
        else this.path = "/";
        if (Object.prototype.hasOwnProperty.call(data, "expires")) this.expires = data.expires;
        else this.expires = 365;
        if (Object.prototype.hasOwnProperty.call(data, "secure")) this.secure = data.secure;
        else this.secure = true;
        if (Object.prototype.hasOwnProperty.call(data, "sameSite")) {
            if (![
                "strict",
                "lax",
                "none"
            ].includes(data.sameSite)) throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');
            if (data.sameSite === "none" && !this.secure) throw new Error("sameSite = None requires the Secure attribute in latest browser versions.");
            this.sameSite = data.sameSite;
        } else this.sameSite = null;
    }
    /**
   * This is used to set a specific item in storage
   * @param {string} key - the key for the item
   * @param {object} value - the value
   * @returns {string} value that was set
   */ var _proto = CookieStorage.prototype;
    _proto.setItem = function setItem(key, value) {
        var options = {
            path: this.path,
            expires: this.expires,
            domain: this.domain,
            secure: this.secure
        };
        if (this.sameSite) options.sameSite = this.sameSite;
        _jsCookie.set(key, value, options);
        return _jsCookie.get(key);
    } /**
   * This is used to get a specific key from storage
   * @param {string} key - the key for the item
   * This is used to clear the storage
   * @returns {string} the data item
   */ ;
    _proto.getItem = function getItem(key) {
        return _jsCookie.get(key);
    } /**
   * This is used to remove an item from storage
   * @param {string} key - the key being set
   * @returns {string} value - value that was deleted
   */ ;
    _proto.removeItem = function removeItem(key) {
        var options = {
            path: this.path,
            expires: this.expires,
            domain: this.domain,
            secure: this.secure
        };
        if (this.sameSite) options.sameSite = this.sameSite;
        return _jsCookie.remove(key, options);
    } /**
   * This is used to clear the storage of optional
   * items that were previously set
   * @returns {} an empty object
   */ ;
    _proto.clear = function clear() {
        var cookies = _jsCookie.get();
        var numKeys = Object.keys(cookies).length;
        for(var index = 0; index < numKeys; ++index)this.removeItem(Object.keys(cookies)[index]);
        return {};
    };
    return CookieStorage;
}();

},{"js-cookie":"491w8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"491w8":[function(require,module,exports) {
(function(factory) {
    var registeredInModuleLoader;
    if (typeof define === "function" && define.amd) {
        define(factory);
        registeredInModuleLoader = true;
    }
    module.exports = factory();
    registeredInModuleLoader = true;
    if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function() {
            window.Cookies = OldCookies;
            return api;
        };
    }
})(function() {
    function extend() {
        var i = 0;
        var result = {};
        for(; i < arguments.length; i++){
            var attributes = arguments[i];
            for(var key in attributes)result[key] = attributes[key];
        }
        return result;
    }
    function decode(s) {
        return s.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
    }
    function init(converter) {
        function api() {}
        function set(key, value, attributes) {
            if (typeof document === "undefined") return;
            attributes = extend({
                path: "/"
            }, api.defaults, attributes);
            if (typeof attributes.expires === "number") attributes.expires = new Date(new Date() * 1 + attributes.expires * 864e+5);
            // We're using "expires" because "max-age" is not supported by IE
            attributes.expires = attributes.expires ? attributes.expires.toUTCString() : "";
            try {
                var result = JSON.stringify(value);
                if (/^[\{\[]/.test(result)) value = result;
            } catch (e) {}
            value = converter.write ? converter.write(value, key) : encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
            key = encodeURIComponent(String(key)).replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent).replace(/[\(\)]/g, escape);
            var stringifiedAttributes = "";
            for(var attributeName in attributes){
                if (!attributes[attributeName]) continue;
                stringifiedAttributes += "; " + attributeName;
                if (attributes[attributeName] === true) continue;
                // Considers RFC 6265 section 5.2:
                // ...
                // 3.  If the remaining unparsed-attributes contains a %x3B (";")
                //     character:
                // Consume the characters of the unparsed-attributes up to,
                // not including, the first %x3B (";") character.
                // ...
                stringifiedAttributes += "=" + attributes[attributeName].split(";")[0];
            }
            return document.cookie = key + "=" + value + stringifiedAttributes;
        }
        function get(key, json) {
            if (typeof document === "undefined") return;
            var jar = {};
            // To prevent the for loop in the first place assign an empty array
            // in case there are no cookies at all.
            var cookies = document.cookie ? document.cookie.split("; ") : [];
            var i = 0;
            for(; i < cookies.length; i++){
                var parts = cookies[i].split("=");
                var cookie = parts.slice(1).join("=");
                if (!json && cookie.charAt(0) === '"') cookie = cookie.slice(1, -1);
                try {
                    var name = decode(parts[0]);
                    cookie = (converter.read || converter)(cookie, name) || decode(cookie);
                    if (json) try {
                        cookie = JSON.parse(cookie);
                    } catch (e) {}
                    jar[name] = cookie;
                    if (key === name) break;
                } catch (e) {}
            }
            return key ? jar[key] : jar;
        }
        api.set = set;
        api.get = function(key) {
            return get(key, false);
        };
        api.getJSON = function(key) {
            return get(key, true);
        };
        api.remove = function(key, attributes) {
            set(key, "", extend(attributes, {
                expires: -1
            }));
        };
        api.defaults = {};
        api.withConverter = init;
        return api;
    }
    return init(function() {});
});

},{}],"7qjc7":[function(require,module,exports) {
/*
 * Copyright Joyent, Inc. and other Node contributors.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the
 * "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to permit
 * persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
 * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
 * USE OR OTHER DEALINGS IN THE SOFTWARE.
 */ "use strict";
var punycode = require("50de7006740ce793");
function Url() {
    this.protocol = null;
    this.slashes = null;
    this.auth = null;
    this.host = null;
    this.port = null;
    this.hostname = null;
    this.hash = null;
    this.search = null;
    this.query = null;
    this.pathname = null;
    this.path = null;
    this.href = null;
}
// Reference: RFC 3986, RFC 1808, RFC 2396
/*
 * define these here so at least they only have to be
 * compiled once on the first module load.
 */ var protocolPattern = /^([a-z0-9.+-]+:)/i, portPattern = /:[0-9]*$/, // Special case for a simple path URL
simplePathPattern = /^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/, /*
   * RFC 2396: characters reserved for delimiting URLs.
   * We actually just auto-escape these.
   */ delims = [
    "<",
    ">",
    '"',
    "`",
    " ",
    "\r",
    "\n",
    "	"
], // RFC 2396: characters not allowed for various reasons.
unwise = [
    "{",
    "}",
    "|",
    "\\",
    "^",
    "`"
].concat(delims), // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
autoEscape = [
    "'"
].concat(unwise), /*
   * Characters that are never ever allowed in a hostname.
   * Note that any invalid chars are also handled, but these
   * are the ones that are *expected* to be seen, so we fast-path
   * them.
   */ nonHostChars = [
    "%",
    "/",
    "?",
    ";",
    "#"
].concat(autoEscape), hostEndingChars = [
    "/",
    "?",
    "#"
], hostnameMaxLen = 255, hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/, hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/, // protocols that can allow "unsafe" and "unwise" chars.
unsafeProtocol = {
    javascript: true,
    "javascript:": true
}, // protocols that never have a hostname.
hostlessProtocol = {
    javascript: true,
    "javascript:": true
}, // protocols that always contain a // bit.
slashedProtocol = {
    http: true,
    https: true,
    ftp: true,
    gopher: true,
    file: true,
    "http:": true,
    "https:": true,
    "ftp:": true,
    "gopher:": true,
    "file:": true
}, querystring = require("6724c84b9b69726b");
function urlParse(url, parseQueryString, slashesDenoteHost) {
    if (url && typeof url === "object" && url instanceof Url) return url;
    var u = new Url();
    u.parse(url, parseQueryString, slashesDenoteHost);
    return u;
}
Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
    if (typeof url !== "string") throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
    /*
   * Copy chrome, IE, opera backslash-handling behavior.
   * Back slashes before the query string get converted to forward slashes
   * See: https://code.google.com/p/chromium/issues/detail?id=25916
   */ var queryIndex = url.indexOf("?"), splitter = queryIndex !== -1 && queryIndex < url.indexOf("#") ? "?" : "#", uSplit = url.split(splitter), slashRegex = /\\/g;
    uSplit[0] = uSplit[0].replace(slashRegex, "/");
    url = uSplit.join(splitter);
    var rest = url;
    /*
   * trim before proceeding.
   * This is to support parse stuff like "  http://foo.com  \n"
   */ rest = rest.trim();
    if (!slashesDenoteHost && url.split("#").length === 1) {
        // Try fast path regexp
        var simplePath = simplePathPattern.exec(rest);
        if (simplePath) {
            this.path = rest;
            this.href = rest;
            this.pathname = simplePath[1];
            if (simplePath[2]) {
                this.search = simplePath[2];
                if (parseQueryString) this.query = querystring.parse(this.search.substr(1));
                else this.query = this.search.substr(1);
            } else if (parseQueryString) {
                this.search = "";
                this.query = {};
            }
            return this;
        }
    }
    var proto = protocolPattern.exec(rest);
    if (proto) {
        proto = proto[0];
        var lowerProto = proto.toLowerCase();
        this.protocol = lowerProto;
        rest = rest.substr(proto.length);
    }
    /*
   * figure out if it's got a host
   * user@server is *always* interpreted as a hostname, and url
   * resolution will treat //foo/bar as host=foo,path=bar because that's
   * how the browser resolves relative URLs.
   */ if (slashesDenoteHost || proto || rest.match(/^\/\/[^@/]+@[^@/]+/)) {
        var slashes = rest.substr(0, 2) === "//";
        if (slashes && !(proto && hostlessProtocol[proto])) {
            rest = rest.substr(2);
            this.slashes = true;
        }
    }
    if (!hostlessProtocol[proto] && (slashes || proto && !slashedProtocol[proto])) {
        /*
     * there's a hostname.
     * the first instance of /, ?, ;, or # ends the host.
     *
     * If there is an @ in the hostname, then non-host chars *are* allowed
     * to the left of the last @ sign, unless some host-ending character
     * comes *before* the @-sign.
     * URLs are obnoxious.
     *
     * ex:
     * http://a@b@c/ => user:a@b host:c
     * http://a@b?@c => user:a host:c path:/?@c
     */ /*
     * v0.12 TODO(isaacs): This is not quite how Chrome does things.
     * Review our test case against browsers more comprehensively.
     */ // find the first instance of any hostEndingChars
        var hostEnd = -1;
        for(var i = 0; i < hostEndingChars.length; i++){
            var hec = rest.indexOf(hostEndingChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        /*
     * at this point, either we have an explicit point where the
     * auth portion cannot go past, or the last @ char is the decider.
     */ var auth, atSign;
        if (hostEnd === -1) // atSign can be anywhere.
        atSign = rest.lastIndexOf("@");
        else /*
       * atSign must be in auth portion.
       * http://a@b/c@d => host:b auth:a path:/c@d
       */ atSign = rest.lastIndexOf("@", hostEnd);
        /*
     * Now we have a portion which is definitely the auth.
     * Pull that off.
     */ if (atSign !== -1) {
            auth = rest.slice(0, atSign);
            rest = rest.slice(atSign + 1);
            this.auth = decodeURIComponent(auth);
        }
        // the host is the remaining to the left of the first non-host char
        hostEnd = -1;
        for(var i = 0; i < nonHostChars.length; i++){
            var hec = rest.indexOf(nonHostChars[i]);
            if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) hostEnd = hec;
        }
        // if we still have not hit it, then the entire thing is a host.
        if (hostEnd === -1) hostEnd = rest.length;
        this.host = rest.slice(0, hostEnd);
        rest = rest.slice(hostEnd);
        // pull out port.
        this.parseHost();
        /*
     * we've indicated that there is a hostname,
     * so even if it's empty, it has to be present.
     */ this.hostname = this.hostname || "";
        /*
     * if hostname begins with [ and ends with ]
     * assume that it's an IPv6 address.
     */ var ipv6Hostname = this.hostname[0] === "[" && this.hostname[this.hostname.length - 1] === "]";
        // validate a little.
        if (!ipv6Hostname) {
            var hostparts = this.hostname.split(/\./);
            for(var i = 0, l = hostparts.length; i < l; i++){
                var part = hostparts[i];
                if (!part) continue;
                if (!part.match(hostnamePartPattern)) {
                    var newpart = "";
                    for(var j = 0, k = part.length; j < k; j++)if (part.charCodeAt(j) > 127) /*
               * we replace non-ASCII char with a temporary placeholder
               * we need this to make sure size of hostname is not
               * broken by replacing non-ASCII by nothing
               */ newpart += "x";
                    else newpart += part[j];
                    // we test again with ASCII char only
                    if (!newpart.match(hostnamePartPattern)) {
                        var validParts = hostparts.slice(0, i);
                        var notHost = hostparts.slice(i + 1);
                        var bit = part.match(hostnamePartStart);
                        if (bit) {
                            validParts.push(bit[1]);
                            notHost.unshift(bit[2]);
                        }
                        if (notHost.length) rest = "/" + notHost.join(".") + rest;
                        this.hostname = validParts.join(".");
                        break;
                    }
                }
            }
        }
        if (this.hostname.length > hostnameMaxLen) this.hostname = "";
        else // hostnames are always lower case.
        this.hostname = this.hostname.toLowerCase();
        if (!ipv6Hostname) /*
       * IDNA Support: Returns a punycoded representation of "domain".
       * It only converts parts of the domain name that
       * have non-ASCII characters, i.e. it doesn't matter if
       * you call it with a domain that already is ASCII-only.
       */ this.hostname = punycode.toASCII(this.hostname);
        var p = this.port ? ":" + this.port : "";
        var h = this.hostname || "";
        this.host = h + p;
        this.href += this.host;
        /*
     * strip [ and ] from the hostname
     * the host field still retains them, though
     */ if (ipv6Hostname) {
            this.hostname = this.hostname.substr(1, this.hostname.length - 2);
            if (rest[0] !== "/") rest = "/" + rest;
        }
    }
    /*
   * now rest is set to the post-host stuff.
   * chop off any delim chars.
   */ if (!unsafeProtocol[lowerProto]) /*
     * First, make 100% sure that any "autoEscape" chars get
     * escaped, even if encodeURIComponent doesn't think they
     * need to be.
     */ for(var i = 0, l = autoEscape.length; i < l; i++){
        var ae = autoEscape[i];
        if (rest.indexOf(ae) === -1) continue;
        var esc = encodeURIComponent(ae);
        if (esc === ae) esc = escape(ae);
        rest = rest.split(ae).join(esc);
    }
    // chop off from the tail first.
    var hash = rest.indexOf("#");
    if (hash !== -1) {
        // got a fragment string.
        this.hash = rest.substr(hash);
        rest = rest.slice(0, hash);
    }
    var qm = rest.indexOf("?");
    if (qm !== -1) {
        this.search = rest.substr(qm);
        this.query = rest.substr(qm + 1);
        if (parseQueryString) this.query = querystring.parse(this.query);
        rest = rest.slice(0, qm);
    } else if (parseQueryString) {
        // no query string, but parseQueryString still requested
        this.search = "";
        this.query = {};
    }
    if (rest) this.pathname = rest;
    if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) this.pathname = "/";
    // to support http.request
    if (this.pathname || this.search) {
        var p = this.pathname || "";
        var s = this.search || "";
        this.path = p + s;
    }
    // finally, reconstruct the href based on what has been validated.
    this.href = this.format();
    return this;
};
// format a parsed object into a url string
function urlFormat(obj) {
    /*
   * ensure it's an object, and not a string url.
   * If it's an obj, this is a no-op.
   * this way, you can call url_format() on strings
   * to clean up potentially wonky urls.
   */ if (typeof obj === "string") obj = urlParse(obj);
    if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
    return obj.format();
}
Url.prototype.format = function() {
    var auth = this.auth || "";
    if (auth) {
        auth = encodeURIComponent(auth);
        auth = auth.replace(/%3A/i, ":");
        auth += "@";
    }
    var protocol = this.protocol || "", pathname = this.pathname || "", hash = this.hash || "", host = false, query = "";
    if (this.host) host = auth + this.host;
    else if (this.hostname) {
        host = auth + (this.hostname.indexOf(":") === -1 ? this.hostname : "[" + this.hostname + "]");
        if (this.port) host += ":" + this.port;
    }
    if (this.query && typeof this.query === "object" && Object.keys(this.query).length) query = querystring.stringify(this.query, {
        arrayFormat: "repeat",
        addQueryPrefix: false
    });
    var search = this.search || query && "?" + query || "";
    if (protocol && protocol.substr(-1) !== ":") protocol += ":";
    /*
   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
   * unless they had them to begin with.
   */ if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {
        host = "//" + (host || "");
        if (pathname && pathname.charAt(0) !== "/") pathname = "/" + pathname;
    } else if (!host) host = "";
    if (hash && hash.charAt(0) !== "#") hash = "#" + hash;
    if (search && search.charAt(0) !== "?") search = "?" + search;
    pathname = pathname.replace(/[?#]/g, function(match) {
        return encodeURIComponent(match);
    });
    search = search.replace("#", "%23");
    return protocol + host + pathname + search + hash;
};
function urlResolve(source, relative) {
    return urlParse(source, false, true).resolve(relative);
}
Url.prototype.resolve = function(relative) {
    return this.resolveObject(urlParse(relative, false, true)).format();
};
function urlResolveObject(source, relative) {
    if (!source) return relative;
    return urlParse(source, false, true).resolveObject(relative);
}
Url.prototype.resolveObject = function(relative) {
    if (typeof relative === "string") {
        var rel = new Url();
        rel.parse(relative, false, true);
        relative = rel;
    }
    var result = new Url();
    var tkeys = Object.keys(this);
    for(var tk = 0; tk < tkeys.length; tk++){
        var tkey = tkeys[tk];
        result[tkey] = this[tkey];
    }
    /*
   * hash is always overridden, no matter what.
   * even href="" will remove it.
   */ result.hash = relative.hash;
    // if the relative url is empty, then there's nothing left to do here.
    if (relative.href === "") {
        result.href = result.format();
        return result;
    }
    // hrefs like //foo/bar always cut to the protocol.
    if (relative.slashes && !relative.protocol) {
        // take everything except the protocol from relative
        var rkeys = Object.keys(relative);
        for(var rk = 0; rk < rkeys.length; rk++){
            var rkey = rkeys[rk];
            if (rkey !== "protocol") result[rkey] = relative[rkey];
        }
        // urlParse appends trailing / to urls like http://www.example.com
        if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {
            result.pathname = "/";
            result.path = result.pathname;
        }
        result.href = result.format();
        return result;
    }
    if (relative.protocol && relative.protocol !== result.protocol) {
        /*
     * if it's a known url protocol, then changing
     * the protocol does weird things
     * first, if it's not file:, then we MUST have a host,
     * and if there was a path
     * to begin with, then we MUST have a path.
     * if it is file:, then the host is dropped,
     * because that's known to be hostless.
     * anything else is assumed to be absolute.
     */ if (!slashedProtocol[relative.protocol]) {
            var keys = Object.keys(relative);
            for(var v = 0; v < keys.length; v++){
                var k = keys[v];
                result[k] = relative[k];
            }
            result.href = result.format();
            return result;
        }
        result.protocol = relative.protocol;
        if (!relative.host && !hostlessProtocol[relative.protocol]) {
            var relPath = (relative.pathname || "").split("/");
            while(relPath.length && !(relative.host = relPath.shift()));
            if (!relative.host) relative.host = "";
            if (!relative.hostname) relative.hostname = "";
            if (relPath[0] !== "") relPath.unshift("");
            if (relPath.length < 2) relPath.unshift("");
            result.pathname = relPath.join("/");
        } else result.pathname = relative.pathname;
        result.search = relative.search;
        result.query = relative.query;
        result.host = relative.host || "";
        result.auth = relative.auth;
        result.hostname = relative.hostname || relative.host;
        result.port = relative.port;
        // to support http.request
        if (result.pathname || result.search) {
            var p = result.pathname || "";
            var s = result.search || "";
            result.path = p + s;
        }
        result.slashes = result.slashes || relative.slashes;
        result.href = result.format();
        return result;
    }
    var isSourceAbs = result.pathname && result.pathname.charAt(0) === "/", isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === "/", mustEndAbs = isRelAbs || isSourceAbs || result.host && relative.pathname, removeAllDots = mustEndAbs, srcPath = result.pathname && result.pathname.split("/") || [], relPath = relative.pathname && relative.pathname.split("/") || [], psychotic = result.protocol && !slashedProtocol[result.protocol];
    /*
   * if the url is a non-slashed url, then relative
   * links like ../.. should be able
   * to crawl up to the hostname, as well.  This is strange.
   * result.protocol has already been set by now.
   * Later on, put the first path part into the host field.
   */ if (psychotic) {
        result.hostname = "";
        result.port = null;
        if (result.host) {
            if (srcPath[0] === "") srcPath[0] = result.host;
            else srcPath.unshift(result.host);
        }
        result.host = "";
        if (relative.protocol) {
            relative.hostname = null;
            relative.port = null;
            if (relative.host) {
                if (relPath[0] === "") relPath[0] = relative.host;
                else relPath.unshift(relative.host);
            }
            relative.host = null;
        }
        mustEndAbs = mustEndAbs && (relPath[0] === "" || srcPath[0] === "");
    }
    if (isRelAbs) {
        // it's absolute.
        result.host = relative.host || relative.host === "" ? relative.host : result.host;
        result.hostname = relative.hostname || relative.hostname === "" ? relative.hostname : result.hostname;
        result.search = relative.search;
        result.query = relative.query;
        srcPath = relPath;
    // fall through to the dot-handling below.
    } else if (relPath.length) {
        /*
     * it's relative
     * throw away the existing file, and take the new path instead.
     */ if (!srcPath) srcPath = [];
        srcPath.pop();
        srcPath = srcPath.concat(relPath);
        result.search = relative.search;
        result.query = relative.query;
    } else if (relative.search != null) {
        /*
     * just pull out the search.
     * like href='?foo'.
     * Put this after the other two cases because it simplifies the booleans
     */ if (psychotic) {
            result.host = srcPath.shift();
            result.hostname = result.host;
            /*
       * occationaly the auth can get stuck only in host
       * this especially happens in cases like
       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
       */ var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
            if (authInHost) {
                result.auth = authInHost.shift();
                result.hostname = authInHost.shift();
                result.host = result.hostname;
            }
        }
        result.search = relative.search;
        result.query = relative.query;
        // to support http.request
        if (result.pathname !== null || result.search !== null) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
        result.href = result.format();
        return result;
    }
    if (!srcPath.length) {
        /*
     * no path at all.  easy.
     * we've already handled the other stuff above.
     */ result.pathname = null;
        // to support http.request
        if (result.search) result.path = "/" + result.search;
        else result.path = null;
        result.href = result.format();
        return result;
    }
    /*
   * if a url ENDs in . or .., then it must get a trailing slash.
   * however, if it ends in anything else non-slashy,
   * then it must NOT get a trailing slash.
   */ var last = srcPath.slice(-1)[0];
    var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === "." || last === "..") || last === "";
    /*
   * strip single dots, resolve double dots to parent dir
   * if the path tries to go above the root, `up` ends up > 0
   */ var up = 0;
    for(var i = srcPath.length; i >= 0; i--){
        last = srcPath[i];
        if (last === ".") srcPath.splice(i, 1);
        else if (last === "..") {
            srcPath.splice(i, 1);
            up++;
        } else if (up) {
            srcPath.splice(i, 1);
            up--;
        }
    }
    // if the path is allowed to go above the root, restore leading ..s
    if (!mustEndAbs && !removeAllDots) for(; up--; up)srcPath.unshift("..");
    if (mustEndAbs && srcPath[0] !== "" && (!srcPath[0] || srcPath[0].charAt(0) !== "/")) srcPath.unshift("");
    if (hasTrailingSlash && srcPath.join("/").substr(-1) !== "/") srcPath.push("");
    var isAbsolute = srcPath[0] === "" || srcPath[0] && srcPath[0].charAt(0) === "/";
    // put the host back
    if (psychotic) {
        result.hostname = isAbsolute ? "" : srcPath.length ? srcPath.shift() : "";
        result.host = result.hostname;
        /*
     * occationaly the auth can get stuck only in host
     * this especially happens in cases like
     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')
     */ var authInHost = result.host && result.host.indexOf("@") > 0 ? result.host.split("@") : false;
        if (authInHost) {
            result.auth = authInHost.shift();
            result.hostname = authInHost.shift();
            result.host = result.hostname;
        }
    }
    mustEndAbs = mustEndAbs || result.host && srcPath.length;
    if (mustEndAbs && !isAbsolute) srcPath.unshift("");
    if (srcPath.length > 0) result.pathname = srcPath.join("/");
    else {
        result.pathname = null;
        result.path = null;
    }
    // to support request.http
    if (result.pathname !== null || result.search !== null) result.path = (result.pathname ? result.pathname : "") + (result.search ? result.search : "");
    result.auth = relative.auth || result.auth;
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
};
Url.prototype.parseHost = function() {
    var host = this.host;
    var port = portPattern.exec(host);
    if (port) {
        port = port[0];
        if (port !== ":") this.port = port.substr(1);
        host = host.substr(0, host.length - port.length);
    }
    if (host) this.hostname = host;
};
exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;
exports.Url = Url;

},{"50de7006740ce793":"4SwIZ","6724c84b9b69726b":"kW4GH"}],"4SwIZ":[function(require,module,exports) {
var global = arguments[3];
(function(root) {
    /** Detect free variables */ var freeExports = exports && !exports.nodeType && exports;
    var freeModule = module && !module.nodeType && module;
    var freeGlobal = typeof global == "object" && global;
    if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal) root = freeGlobal;
    /**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */ var punycode, /** Highest positive signed 32-bit float value */ maxInt = 2147483647, /** Bootstring parameters */ base = 36, tMin = 1, tMax = 26, skew = 38, damp = 700, initialBias = 72, initialN = 128, delimiter = "-", /** Regular expressions */ regexPunycode = /^xn--/, regexNonASCII = /[^\x20-\x7E]/, regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, /** Error messages */ errors = {
        "overflow": "Overflow: input needs wider integers to process",
        "not-basic": "Illegal input >= 0x80 (not a basic code point)",
        "invalid-input": "Invalid input"
    }, /** Convenience shortcuts */ baseMinusTMin = base - tMin, floor = Math.floor, stringFromCharCode = String.fromCharCode, /** Temporary variable */ key;
    /*--------------------------------------------------------------------------*/ /**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */ function error(type) {
        throw new RangeError(errors[type]);
    }
    /**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */ function map(array, fn) {
        var length = array.length;
        var result = [];
        while(length--)result[length] = fn(array[length]);
        return result;
    }
    /**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */ function mapDomain(string, fn) {
        var parts = string.split("@");
        var result = "";
        if (parts.length > 1) {
            // In email addresses, only the domain name should be punycoded. Leave
            // the local part (i.e. everything up to `@`) intact.
            result = parts[0] + "@";
            string = parts[1];
        }
        // Avoid `split(regex)` for IE8 compatibility. See #17.
        string = string.replace(regexSeparators, ".");
        var labels = string.split(".");
        var encoded = map(labels, fn).join(".");
        return result + encoded;
    }
    /**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */ function ucs2decode(string) {
        var output = [], counter = 0, length = string.length, value, extra;
        while(counter < length){
            value = string.charCodeAt(counter++);
            if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
                // high surrogate, and there is a next character
                extra = string.charCodeAt(counter++);
                if ((extra & 0xFC00) == 0xDC00) output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
                else {
                    // unmatched surrogate; only append this code unit, in case the next
                    // code unit is the high surrogate of a surrogate pair
                    output.push(value);
                    counter--;
                }
            } else output.push(value);
        }
        return output;
    }
    /**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */ function ucs2encode(array) {
        return map(array, function(value) {
            var output = "";
            if (value > 0xFFFF) {
                value -= 0x10000;
                output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
                value = 0xDC00 | value & 0x3FF;
            }
            output += stringFromCharCode(value);
            return output;
        }).join("");
    }
    /**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */ function basicToDigit(codePoint) {
        if (codePoint - 48 < 10) return codePoint - 22;
        if (codePoint - 65 < 26) return codePoint - 65;
        if (codePoint - 97 < 26) return codePoint - 97;
        return base;
    }
    /**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */ function digitToBasic(digit, flag) {
        //  0..25 map to ASCII a..z or A..Z
        // 26..35 map to ASCII 0..9
        return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    }
    /**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */ function adapt(delta, numPoints, firstTime) {
        var k = 0;
        delta = firstTime ? floor(delta / damp) : delta >> 1;
        delta += floor(delta / numPoints);
        for(; delta > baseMinusTMin * tMax >> 1; k += base)delta = floor(delta / baseMinusTMin);
        return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    }
    /**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */ function decode(input) {
        // Don't use UCS-2
        var output = [], inputLength = input.length, out, i = 0, n = initialN, bias = initialBias, basic, j, index, oldi, w, k, digit, t, /** Cached calculation results */ baseMinusT;
        // Handle the basic code points: let `basic` be the number of input code
        // points before the last delimiter, or `0` if there is none, then copy
        // the first basic code points to the output.
        basic = input.lastIndexOf(delimiter);
        if (basic < 0) basic = 0;
        for(j = 0; j < basic; ++j){
            // if it's not a basic code point
            if (input.charCodeAt(j) >= 0x80) error("not-basic");
            output.push(input.charCodeAt(j));
        }
        // Main decoding loop: start just after the last delimiter if any basic code
        // points were copied; start at the beginning otherwise.
        for(index = basic > 0 ? basic + 1 : 0; index < inputLength;){
            // `index` is the index of the next character to be consumed.
            // Decode a generalized variable-length integer into `delta`,
            // which gets added to `i`. The overflow checking is easier
            // if we increase `i` as we go, then subtract off its starting
            // value at the end to obtain `delta`.
            for(oldi = i, w = 1, k = base;; k += base){
                if (index >= inputLength) error("invalid-input");
                digit = basicToDigit(input.charCodeAt(index++));
                if (digit >= base || digit > floor((maxInt - i) / w)) error("overflow");
                i += digit * w;
                t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (digit < t) break;
                baseMinusT = base - t;
                if (w > floor(maxInt / baseMinusT)) error("overflow");
                w *= baseMinusT;
            }
            out = output.length + 1;
            bias = adapt(i - oldi, out, oldi == 0);
            // `i` was supposed to wrap around from `out` to `0`,
            // incrementing `n` each time, so we'll fix that now:
            if (floor(i / out) > maxInt - n) error("overflow");
            n += floor(i / out);
            i %= out;
            // Insert `n` at position `i` of the output
            output.splice(i++, 0, n);
        }
        return ucs2encode(output);
    }
    /**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */ function encode(input) {
        var n, delta, handledCPCount, basicLength, bias, j, m, q, k, t, currentValue, output = [], /** `inputLength` will hold the number of code points in `input`. */ inputLength, /** Cached calculation results */ handledCPCountPlusOne, baseMinusT, qMinusT;
        // Convert the input in UCS-2 to Unicode
        input = ucs2decode(input);
        // Cache the length
        inputLength = input.length;
        // Initialize the state
        n = initialN;
        delta = 0;
        bias = initialBias;
        // Handle the basic code points
        for(j = 0; j < inputLength; ++j){
            currentValue = input[j];
            if (currentValue < 0x80) output.push(stringFromCharCode(currentValue));
        }
        handledCPCount = basicLength = output.length;
        // `handledCPCount` is the number of code points that have been handled;
        // `basicLength` is the number of basic code points.
        // Finish the basic string - if it is not empty - with a delimiter
        if (basicLength) output.push(delimiter);
        // Main encoding loop:
        while(handledCPCount < inputLength){
            // All non-basic code points < n have been handled already. Find the next
            // larger one:
            for(m = maxInt, j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue >= n && currentValue < m) m = currentValue;
            }
            // Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
            // but guard against overflow
            handledCPCountPlusOne = handledCPCount + 1;
            if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) error("overflow");
            delta += (m - n) * handledCPCountPlusOne;
            n = m;
            for(j = 0; j < inputLength; ++j){
                currentValue = input[j];
                if (currentValue < n && ++delta > maxInt) error("overflow");
                if (currentValue == n) {
                    // Represent delta as a generalized variable-length integer
                    for(q = delta, k = base;; k += base){
                        t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                        if (q < t) break;
                        qMinusT = q - t;
                        baseMinusT = base - t;
                        output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                        q = floor(qMinusT / baseMinusT);
                    }
                    output.push(stringFromCharCode(digitToBasic(q, 0)));
                    bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
                    delta = 0;
                    ++handledCPCount;
                }
            }
            ++delta;
            ++n;
        }
        return output.join("");
    }
    /**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */ function toUnicode(input) {
        return mapDomain(input, function(string) {
            return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
        });
    }
    /**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */ function toASCII(input) {
        return mapDomain(input, function(string) {
            return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
        });
    }
    /*--------------------------------------------------------------------------*/ /** Define the public API */ punycode = {
        /**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */ "version": "1.4.1",
        /**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */ "ucs2": {
            "decode": ucs2decode,
            "encode": ucs2encode
        },
        "decode": decode,
        "encode": encode,
        "toASCII": toASCII,
        "toUnicode": toUnicode
    };
    /** Expose `punycode` */ // Some AMD build optimizers, like r.js, check for specific condition patterns
    // like the following:
    if (typeof define == "function" && typeof define.amd == "object" && define.amd) define("punycode", function() {
        return punycode;
    });
    else if (freeExports && freeModule) {
        if (module.exports == freeExports) // in Node.js, io.js, or RingoJS v0.8.0+
        freeModule.exports = punycode;
        else // in Narwhal or RingoJS v0.7.0-
        for(key in punycode)punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
    } else // in Rhino or a web browser
    root.punycode = punycode;
})(this);

},{}],"kW4GH":[function(require,module,exports) {
"use strict";
var stringify = require("a472ccaa2f2351e9");
var parse = require("7ffa4249597bf32b");
var formats = require("454df9476704f887");
module.exports = {
    formats: formats,
    parse: parse,
    stringify: stringify
};

},{"a472ccaa2f2351e9":"aJuQi","7ffa4249597bf32b":"fSZqi","454df9476704f887":"d7Ogf"}],"aJuQi":[function(require,module,exports) {
"use strict";
var getSideChannel = require("6246bbb805756d41");
var utils = require("44263cc7b702ebf");
var formats = require("929f8531a94a537c");
var has = Object.prototype.hasOwnProperty;
var arrayPrefixGenerators = {
    brackets: function brackets(prefix) {
        return prefix + "[]";
    },
    comma: "comma",
    indices: function indices(prefix, key) {
        return prefix + "[" + key + "]";
    },
    repeat: function repeat(prefix) {
        return prefix;
    }
};
var isArray = Array.isArray;
var push = Array.prototype.push;
var pushToArray = function(arr, valueOrArray) {
    push.apply(arr, isArray(valueOrArray) ? valueOrArray : [
        valueOrArray
    ]);
};
var toISO = Date.prototype.toISOString;
var defaultFormat = formats["default"];
var defaults = {
    addQueryPrefix: false,
    allowDots: false,
    allowEmptyArrays: false,
    arrayFormat: "indices",
    charset: "utf-8",
    charsetSentinel: false,
    delimiter: "&",
    encode: true,
    encodeDotInKeys: false,
    encoder: utils.encode,
    encodeValuesOnly: false,
    format: defaultFormat,
    formatter: formats.formatters[defaultFormat],
    // deprecated
    indices: false,
    serializeDate: function serializeDate(date) {
        return toISO.call(date);
    },
    skipNulls: false,
    strictNullHandling: false
};
var isNonNullishPrimitive = function isNonNullishPrimitive(v) {
    return typeof v === "string" || typeof v === "number" || typeof v === "boolean" || typeof v === "symbol" || typeof v === "bigint";
};
var sentinel = {};
var stringify = function stringify(object, prefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, sideChannel) {
    var obj = object;
    var tmpSc = sideChannel;
    var step = 0;
    var findFlag = false;
    while((tmpSc = tmpSc.get(sentinel)) !== void 0 && !findFlag){
        // Where object last appeared in the ref tree
        var pos = tmpSc.get(object);
        step += 1;
        if (typeof pos !== "undefined") {
            if (pos === step) throw new RangeError("Cyclic object value");
            else findFlag = true; // Break while
        }
        if (typeof tmpSc.get(sentinel) === "undefined") step = 0;
    }
    if (typeof filter === "function") obj = filter(prefix, obj);
    else if (obj instanceof Date) obj = serializeDate(obj);
    else if (generateArrayPrefix === "comma" && isArray(obj)) obj = utils.maybeMap(obj, function(value) {
        if (value instanceof Date) return serializeDate(value);
        return value;
    });
    if (obj === null) {
        if (strictNullHandling) return encoder && !encodeValuesOnly ? encoder(prefix, defaults.encoder, charset, "key", format) : prefix;
        obj = "";
    }
    if (isNonNullishPrimitive(obj) || utils.isBuffer(obj)) {
        if (encoder) {
            var keyValue = encodeValuesOnly ? prefix : encoder(prefix, defaults.encoder, charset, "key", format);
            return [
                formatter(keyValue) + "=" + formatter(encoder(obj, defaults.encoder, charset, "value", format))
            ];
        }
        return [
            formatter(prefix) + "=" + formatter(String(obj))
        ];
    }
    var values = [];
    if (typeof obj === "undefined") return values;
    var objKeys;
    if (generateArrayPrefix === "comma" && isArray(obj)) {
        // we need to join elements in
        if (encodeValuesOnly && encoder) obj = utils.maybeMap(obj, encoder);
        objKeys = [
            {
                value: obj.length > 0 ? obj.join(",") || null : void 0
            }
        ];
    } else if (isArray(filter)) objKeys = filter;
    else {
        var keys = Object.keys(obj);
        objKeys = sort ? keys.sort(sort) : keys;
    }
    var encodedPrefix = encodeDotInKeys ? prefix.replace(/\./g, "%2E") : prefix;
    var adjustedPrefix = commaRoundTrip && isArray(obj) && obj.length === 1 ? encodedPrefix + "[]" : encodedPrefix;
    if (allowEmptyArrays && isArray(obj) && obj.length === 0) return adjustedPrefix + "[]";
    for(var j = 0; j < objKeys.length; ++j){
        var key = objKeys[j];
        var value = typeof key === "object" && typeof key.value !== "undefined" ? key.value : obj[key];
        if (skipNulls && value === null) continue;
        var encodedKey = allowDots && encodeDotInKeys ? key.replace(/\./g, "%2E") : key;
        var keyPrefix = isArray(obj) ? typeof generateArrayPrefix === "function" ? generateArrayPrefix(adjustedPrefix, encodedKey) : adjustedPrefix : adjustedPrefix + (allowDots ? "." + encodedKey : "[" + encodedKey + "]");
        sideChannel.set(object, step);
        var valueSideChannel = getSideChannel();
        valueSideChannel.set(sentinel, sideChannel);
        pushToArray(values, stringify(value, keyPrefix, generateArrayPrefix, commaRoundTrip, allowEmptyArrays, strictNullHandling, skipNulls, encodeDotInKeys, generateArrayPrefix === "comma" && encodeValuesOnly && isArray(obj) ? null : encoder, filter, sort, allowDots, serializeDate, format, formatter, encodeValuesOnly, charset, valueSideChannel));
    }
    return values;
};
var normalizeStringifyOptions = function normalizeStringifyOptions(opts) {
    if (!opts) return defaults;
    if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
    if (typeof opts.encodeDotInKeys !== "undefined" && typeof opts.encodeDotInKeys !== "boolean") throw new TypeError("`encodeDotInKeys` option can only be `true` or `false`, when provided");
    if (opts.encoder !== null && typeof opts.encoder !== "undefined" && typeof opts.encoder !== "function") throw new TypeError("Encoder has to be a function.");
    var charset = opts.charset || defaults.charset;
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    var format = formats["default"];
    if (typeof opts.format !== "undefined") {
        if (!has.call(formats.formatters, opts.format)) throw new TypeError("Unknown format option provided.");
        format = opts.format;
    }
    var formatter = formats.formatters[format];
    var filter = defaults.filter;
    if (typeof opts.filter === "function" || isArray(opts.filter)) filter = opts.filter;
    var arrayFormat;
    if (opts.arrayFormat in arrayPrefixGenerators) arrayFormat = opts.arrayFormat;
    else if ("indices" in opts) arrayFormat = opts.indices ? "indices" : "repeat";
    else arrayFormat = defaults.arrayFormat;
    if ("commaRoundTrip" in opts && typeof opts.commaRoundTrip !== "boolean") throw new TypeError("`commaRoundTrip` must be a boolean, or absent");
    var allowDots = typeof opts.allowDots === "undefined" ? opts.encodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
    return {
        addQueryPrefix: typeof opts.addQueryPrefix === "boolean" ? opts.addQueryPrefix : defaults.addQueryPrefix,
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        arrayFormat: arrayFormat,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        commaRoundTrip: opts.commaRoundTrip,
        delimiter: typeof opts.delimiter === "undefined" ? defaults.delimiter : opts.delimiter,
        encode: typeof opts.encode === "boolean" ? opts.encode : defaults.encode,
        encodeDotInKeys: typeof opts.encodeDotInKeys === "boolean" ? opts.encodeDotInKeys : defaults.encodeDotInKeys,
        encoder: typeof opts.encoder === "function" ? opts.encoder : defaults.encoder,
        encodeValuesOnly: typeof opts.encodeValuesOnly === "boolean" ? opts.encodeValuesOnly : defaults.encodeValuesOnly,
        filter: filter,
        format: format,
        formatter: formatter,
        serializeDate: typeof opts.serializeDate === "function" ? opts.serializeDate : defaults.serializeDate,
        skipNulls: typeof opts.skipNulls === "boolean" ? opts.skipNulls : defaults.skipNulls,
        sort: typeof opts.sort === "function" ? opts.sort : null,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
};
module.exports = function(object, opts) {
    var obj = object;
    var options = normalizeStringifyOptions(opts);
    var objKeys;
    var filter;
    if (typeof options.filter === "function") {
        filter = options.filter;
        obj = filter("", obj);
    } else if (isArray(options.filter)) {
        filter = options.filter;
        objKeys = filter;
    }
    var keys = [];
    if (typeof obj !== "object" || obj === null) return "";
    var generateArrayPrefix = arrayPrefixGenerators[options.arrayFormat];
    var commaRoundTrip = generateArrayPrefix === "comma" && options.commaRoundTrip;
    if (!objKeys) objKeys = Object.keys(obj);
    if (options.sort) objKeys.sort(options.sort);
    var sideChannel = getSideChannel();
    for(var i = 0; i < objKeys.length; ++i){
        var key = objKeys[i];
        if (options.skipNulls && obj[key] === null) continue;
        pushToArray(keys, stringify(obj[key], key, generateArrayPrefix, commaRoundTrip, options.allowEmptyArrays, options.strictNullHandling, options.skipNulls, options.encodeDotInKeys, options.encode ? options.encoder : null, options.filter, options.sort, options.allowDots, options.serializeDate, options.format, options.formatter, options.encodeValuesOnly, options.charset, sideChannel));
    }
    var joined = keys.join(options.delimiter);
    var prefix = options.addQueryPrefix === true ? "?" : "";
    if (options.charsetSentinel) {
        if (options.charset === "iso-8859-1") // encodeURIComponent('&#10003;'), the "numeric entity" representation of a checkmark
        prefix += "utf8=%26%2310003%3B&";
        else // encodeURIComponent('✓')
        prefix += "utf8=%E2%9C%93&";
    }
    return joined.length > 0 ? prefix + joined : "";
};

},{"6246bbb805756d41":"1zs9d","44263cc7b702ebf":"chmkc","929f8531a94a537c":"d7Ogf"}],"1zs9d":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("7911ec51a2dc9f3e");
var callBound = require("125062ab9035288f");
var inspect = require("9f4f5a92d8c6543");
var $TypeError = require("1d3f7a3f029b095e");
var $WeakMap = GetIntrinsic("%WeakMap%", true);
var $Map = GetIntrinsic("%Map%", true);
var $weakMapGet = callBound("WeakMap.prototype.get", true);
var $weakMapSet = callBound("WeakMap.prototype.set", true);
var $weakMapHas = callBound("WeakMap.prototype.has", true);
var $mapGet = callBound("Map.prototype.get", true);
var $mapSet = callBound("Map.prototype.set", true);
var $mapHas = callBound("Map.prototype.has", true);
/*
* This function traverses the list returning the node corresponding to the given key.
*
* That node is also moved to the head of the list, so that if it's accessed again we don't need to traverse the whole list. By doing so, all the recently used nodes can be accessed relatively quickly.
*/ /** @type {import('.').listGetNode} */ var listGetNode = function(list, key) {
    /** @type {typeof list | NonNullable<(typeof list)['next']>} */ var prev = list;
    /** @type {(typeof list)['next']} */ var curr;
    for(; (curr = prev.next) !== null; prev = curr)if (curr.key === key) {
        prev.next = curr.next;
        // eslint-disable-next-line no-extra-parens
        curr.next = /** @type {NonNullable<typeof list.next>} */ list.next;
        list.next = curr; // eslint-disable-line no-param-reassign
        return curr;
    }
};
/** @type {import('.').listGet} */ var listGet = function(objects, key) {
    var node = listGetNode(objects, key);
    return node && node.value;
};
/** @type {import('.').listSet} */ var listSet = function(objects, key, value) {
    var node = listGetNode(objects, key);
    if (node) node.value = value;
    else // Prepend the new node to the beginning of the list
    objects.next = /** @type {import('.').ListNode<typeof value>} */ {
        key: key,
        next: objects.next,
        value: value
    };
};
/** @type {import('.').listHas} */ var listHas = function(objects, key) {
    return !!listGetNode(objects, key);
};
/** @type {import('.')} */ module.exports = function getSideChannel() {
    /** @type {WeakMap<object, unknown>} */ var $wm;
    /** @type {Map<object, unknown>} */ var $m;
    /** @type {import('.').RootNode<unknown>} */ var $o;
    /** @type {import('.').Channel} */ var channel = {
        assert: function(key) {
            if (!channel.has(key)) throw new $TypeError("Side channel does not contain " + inspect(key));
        },
        get: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if ($wm) return $weakMapGet($wm, key);
            } else if ($Map) {
                if ($m) return $mapGet($m, key);
            } else {
                if ($o) return listGet($o, key);
            }
        },
        has: function(key) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if ($wm) return $weakMapHas($wm, key);
            } else if ($Map) {
                if ($m) return $mapHas($m, key);
            } else {
                if ($o) return listHas($o, key);
            }
            return false;
        },
        set: function(key, value) {
            if ($WeakMap && key && (typeof key === "object" || typeof key === "function")) {
                if (!$wm) $wm = new $WeakMap();
                $weakMapSet($wm, key, value);
            } else if ($Map) {
                if (!$m) $m = new $Map();
                $mapSet($m, key, value);
            } else {
                if (!$o) // Initialize the linked list as an empty node, so that we don't have to special-case handling of the first node: we can always refer to it as (previous node).next, instead of something like (list).head
                $o = {
                    key: {},
                    next: null
                };
                listSet($o, key, value);
            }
        }
    };
    return channel;
};

},{"7911ec51a2dc9f3e":"dZb05","125062ab9035288f":"5yYiF","9f4f5a92d8c6543":"kS3SE","1d3f7a3f029b095e":"6oWLR"}],"dZb05":[function(require,module,exports) {
"use strict";
var undefined1;
var $Error = require("ff34c740859aa28e");
var $EvalError = require("349515b7ea9b6cef");
var $RangeError = require("9da01653b2dd9abf");
var $ReferenceError = require("68586abd6b0136da");
var $SyntaxError = require("662263fdbc077fc8");
var $TypeError = require("abdfc34e5f6bb86");
var $URIError = require("daca1f932429e03e");
var $Function = Function;
// eslint-disable-next-line consistent-return
var getEvalledConstructor = function(expressionSyntax) {
    try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {}
};
var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) try {
    $gOPD({}, "");
} catch (e) {
    $gOPD = null; // this is IE 8, which has a broken gOPD
}
var throwTypeError = function() {
    throw new $TypeError();
};
var ThrowTypeError = $gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
            return throwTypeError;
        }
    }
}() : throwTypeError;
var hasSymbols = require("1f00f712d594ccf")();
var hasProto = require("23730654306aa64c")();
var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
    return x.__proto__;
} // eslint-disable-line no-proto
 : null);
var needsEval = {};
var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined : getProto(Uint8Array);
var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
    "%AsyncFromSyncIteratorPrototype%": undefined,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    "%EvalError%": $EvalError,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
    "%JSON%": typeof JSON === "object" ? JSON : undefined,
    "%Map%": typeof Map === "undefined" ? undefined : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": Object,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined,
    "%Symbol%": hasSymbols ? Symbol : undefined,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined : WeakSet
};
if (getProto) try {
    null.error; // eslint-disable-line no-unused-expressions
} catch (e) {
    // https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
    var errorProto = getProto(getProto(e));
    INTRINSICS["%Error.prototype%"] = errorProto;
}
var doEval = function doEval(name) {
    var value;
    if (name === "%AsyncFunction%") value = getEvalledConstructor("async function () {}");
    else if (name === "%GeneratorFunction%") value = getEvalledConstructor("function* () {}");
    else if (name === "%AsyncGeneratorFunction%") value = getEvalledConstructor("async function* () {}");
    else if (name === "%AsyncGenerator%") {
        var fn = doEval("%AsyncGeneratorFunction%");
        if (fn) value = fn.prototype;
    } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval("%AsyncGenerator%");
        if (gen && getProto) value = getProto(gen.prototype);
    }
    INTRINSICS[name] = value;
    return value;
};
var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": [
        "ArrayBuffer",
        "prototype"
    ],
    "%ArrayPrototype%": [
        "Array",
        "prototype"
    ],
    "%ArrayProto_entries%": [
        "Array",
        "prototype",
        "entries"
    ],
    "%ArrayProto_forEach%": [
        "Array",
        "prototype",
        "forEach"
    ],
    "%ArrayProto_keys%": [
        "Array",
        "prototype",
        "keys"
    ],
    "%ArrayProto_values%": [
        "Array",
        "prototype",
        "values"
    ],
    "%AsyncFunctionPrototype%": [
        "AsyncFunction",
        "prototype"
    ],
    "%AsyncGenerator%": [
        "AsyncGeneratorFunction",
        "prototype"
    ],
    "%AsyncGeneratorPrototype%": [
        "AsyncGeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%BooleanPrototype%": [
        "Boolean",
        "prototype"
    ],
    "%DataViewPrototype%": [
        "DataView",
        "prototype"
    ],
    "%DatePrototype%": [
        "Date",
        "prototype"
    ],
    "%ErrorPrototype%": [
        "Error",
        "prototype"
    ],
    "%EvalErrorPrototype%": [
        "EvalError",
        "prototype"
    ],
    "%Float32ArrayPrototype%": [
        "Float32Array",
        "prototype"
    ],
    "%Float64ArrayPrototype%": [
        "Float64Array",
        "prototype"
    ],
    "%FunctionPrototype%": [
        "Function",
        "prototype"
    ],
    "%Generator%": [
        "GeneratorFunction",
        "prototype"
    ],
    "%GeneratorPrototype%": [
        "GeneratorFunction",
        "prototype",
        "prototype"
    ],
    "%Int8ArrayPrototype%": [
        "Int8Array",
        "prototype"
    ],
    "%Int16ArrayPrototype%": [
        "Int16Array",
        "prototype"
    ],
    "%Int32ArrayPrototype%": [
        "Int32Array",
        "prototype"
    ],
    "%JSONParse%": [
        "JSON",
        "parse"
    ],
    "%JSONStringify%": [
        "JSON",
        "stringify"
    ],
    "%MapPrototype%": [
        "Map",
        "prototype"
    ],
    "%NumberPrototype%": [
        "Number",
        "prototype"
    ],
    "%ObjectPrototype%": [
        "Object",
        "prototype"
    ],
    "%ObjProto_toString%": [
        "Object",
        "prototype",
        "toString"
    ],
    "%ObjProto_valueOf%": [
        "Object",
        "prototype",
        "valueOf"
    ],
    "%PromisePrototype%": [
        "Promise",
        "prototype"
    ],
    "%PromiseProto_then%": [
        "Promise",
        "prototype",
        "then"
    ],
    "%Promise_all%": [
        "Promise",
        "all"
    ],
    "%Promise_reject%": [
        "Promise",
        "reject"
    ],
    "%Promise_resolve%": [
        "Promise",
        "resolve"
    ],
    "%RangeErrorPrototype%": [
        "RangeError",
        "prototype"
    ],
    "%ReferenceErrorPrototype%": [
        "ReferenceError",
        "prototype"
    ],
    "%RegExpPrototype%": [
        "RegExp",
        "prototype"
    ],
    "%SetPrototype%": [
        "Set",
        "prototype"
    ],
    "%SharedArrayBufferPrototype%": [
        "SharedArrayBuffer",
        "prototype"
    ],
    "%StringPrototype%": [
        "String",
        "prototype"
    ],
    "%SymbolPrototype%": [
        "Symbol",
        "prototype"
    ],
    "%SyntaxErrorPrototype%": [
        "SyntaxError",
        "prototype"
    ],
    "%TypedArrayPrototype%": [
        "TypedArray",
        "prototype"
    ],
    "%TypeErrorPrototype%": [
        "TypeError",
        "prototype"
    ],
    "%Uint8ArrayPrototype%": [
        "Uint8Array",
        "prototype"
    ],
    "%Uint8ClampedArrayPrototype%": [
        "Uint8ClampedArray",
        "prototype"
    ],
    "%Uint16ArrayPrototype%": [
        "Uint16Array",
        "prototype"
    ],
    "%Uint32ArrayPrototype%": [
        "Uint32Array",
        "prototype"
    ],
    "%URIErrorPrototype%": [
        "URIError",
        "prototype"
    ],
    "%WeakMapPrototype%": [
        "WeakMap",
        "prototype"
    ],
    "%WeakSetPrototype%": [
        "WeakSet",
        "prototype"
    ]
};
var bind = require("7c5e688e48cd07b0");
var hasOwn = require("af36d49b4b8c6c7c");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var stringToPath = function stringToPath(string) {
    var first = $strSlice(string, 0, 1);
    var last = $strSlice(string, -1);
    if (first === "%" && last !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    else if (last === "%" && first !== "%") throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    var result = [];
    $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
    });
    return result;
};
/* end adaptation */ var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) value = doEval(intrinsicName);
        if (typeof value === "undefined" && !allowMissing) throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $SyntaxError("intrinsic " + name + " does not exist!");
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== "string" || name.length === 0) throw new $TypeError("intrinsic name must be a non-empty string");
    if (arguments.length > 1 && typeof allowMissing !== "boolean") throw new $TypeError('"allowMissing" argument must be a boolean');
    if ($exec(/^%?[^%]*%?$/, name) === null) throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    var parts = stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || last === '"' || last === "'" || last === "`") && first !== last) throw new $SyntaxError("property names with quotes must have matching quotes");
        if (part === "constructor" || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) value = INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
                return void 0;
            }
            if ($gOPD && i + 1 >= parts.length) {
                var desc = $gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && "get" in desc && !("originalValue" in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = hasOwn(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

},{"ff34c740859aa28e":"eDsor","349515b7ea9b6cef":"hIiFU","9da01653b2dd9abf":"11MNe","68586abd6b0136da":"2YV8d","662263fdbc077fc8":"8jeeH","abdfc34e5f6bb86":"6oWLR","daca1f932429e03e":"a04Um","1f00f712d594ccf":"3dK91","23730654306aa64c":"6eZiF","7c5e688e48cd07b0":"6J4ob","af36d49b4b8c6c7c":"9Wb6f"}],"eDsor":[function(require,module,exports) {
"use strict";
/** @type {import('.')} */ module.exports = Error;

},{}],"hIiFU":[function(require,module,exports) {
"use strict";
/** @type {import('./eval')} */ module.exports = EvalError;

},{}],"11MNe":[function(require,module,exports) {
"use strict";
/** @type {import('./range')} */ module.exports = RangeError;

},{}],"2YV8d":[function(require,module,exports) {
"use strict";
/** @type {import('./ref')} */ module.exports = ReferenceError;

},{}],"8jeeH":[function(require,module,exports) {
"use strict";
/** @type {import('./syntax')} */ module.exports = SyntaxError;

},{}],"6oWLR":[function(require,module,exports) {
"use strict";
/** @type {import('./type')} */ module.exports = TypeError;

},{}],"a04Um":[function(require,module,exports) {
"use strict";
/** @type {import('./uri')} */ module.exports = URIError;

},{}],"3dK91":[function(require,module,exports) {
"use strict";
var origSymbol = typeof Symbol !== "undefined" && Symbol;
var hasSymbolSham = require("3fb25678c62d2fce");
module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") return false;
    if (typeof Symbol !== "function") return false;
    if (typeof origSymbol("foo") !== "symbol") return false;
    if (typeof Symbol("bar") !== "symbol") return false;
    return hasSymbolSham();
};

},{"3fb25678c62d2fce":"euYk7"}],"euYk7":[function(require,module,exports) {
"use strict";
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") return false;
    if (typeof Symbol.iterator === "symbol") return true;
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") return false;
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") return false;
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

},{}],"6eZiF":[function(require,module,exports) {
"use strict";
var test = {
    __proto__: null,
    foo: {}
};
var $Object = Object;
/** @type {import('.')} */ module.exports = function hasProto() {
    // @ts-expect-error: TS errors on an inherited property for some reason
    return ({
        __proto__: test
    }).foo === test.foo && !(test instanceof $Object);
};

},{}],"6J4ob":[function(require,module,exports) {
"use strict";
var implementation = require("12e173b4dbaee960");
module.exports = Function.prototype.bind || implementation;

},{"12e173b4dbaee960":"jwaxQ"}],"jwaxQ":[function(require,module,exports) {
"use strict";
/* eslint no-invalid-this: 1 */ var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
var toStr = Object.prototype.toString;
var max = Math.max;
var funcType = "[object Function]";
var concatty = function concatty(a, b) {
    var arr = [];
    for(var i = 0; i < a.length; i += 1)arr[i] = a[i];
    for(var j = 0; j < b.length; j += 1)arr[j + a.length] = b[j];
    return arr;
};
var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for(var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1)arr[j] = arrLike[i];
    return arr;
};
var joiny = function(arr, joiner) {
    var str = "";
    for(var i = 0; i < arr.length; i += 1){
        str += arr[i];
        if (i + 1 < arr.length) str += joiner;
    }
    return str;
};
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) throw new TypeError(ERROR_MESSAGE + target);
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, concatty(args, arguments));
            if (Object(result) === result) return result;
            return this;
        }
        return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs[i] = "$" + i;
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

},{}],"9Wb6f":[function(require,module,exports) {
"use strict";
var call = Function.prototype.call;
var $hasOwn = Object.prototype.hasOwnProperty;
var bind = require("126cb75e62f8e17b");
/** @type {import('.')} */ module.exports = bind.call(call, $hasOwn);

},{"126cb75e62f8e17b":"6J4ob"}],"5yYiF":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("8b08ecb81cf4de17");
var callBind = require("266fc50410cfc4a");
var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = GetIntrinsic(name, !!allowMissing);
    if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) return callBind(intrinsic);
    return intrinsic;
};

},{"8b08ecb81cf4de17":"dZb05","266fc50410cfc4a":"bfo8D"}],"bfo8D":[function(require,module,exports) {
"use strict";
var bind = require("4f9d84d5de4909bc");
var GetIntrinsic = require("68d2ad3775278f43");
var setFunctionLength = require("f4b53071c102d4e");
var $TypeError = require("761613670c43be80");
var $apply = GetIntrinsic("%Function.prototype.apply%");
var $call = GetIntrinsic("%Function.prototype.call%");
var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
var $defineProperty = require("3426ee59b177cf96");
var $max = GetIntrinsic("%Math.max%");
module.exports = function callBind(originalFunction) {
    if (typeof originalFunction !== "function") throw new $TypeError("a function is required");
    var func = $reflectApply(bind, $call, arguments);
    return setFunctionLength(func, 1 + $max(0, originalFunction.length - (arguments.length - 1)), true);
};
var applyBind = function applyBind() {
    return $reflectApply(bind, $apply, arguments);
};
if ($defineProperty) $defineProperty(module.exports, "apply", {
    value: applyBind
});
else module.exports.apply = applyBind;

},{"4f9d84d5de4909bc":"6J4ob","68d2ad3775278f43":"dZb05","f4b53071c102d4e":"9IKoX","761613670c43be80":"6oWLR","3426ee59b177cf96":"5SmXK"}],"9IKoX":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("8b1c9107ef1524f2");
var define = require("37dd1486f0f556ef");
var hasDescriptors = require("6a9d2b46085df706")();
var gOPD = require("2d412b0f532d1834");
var $TypeError = require("4352c534d27fe477");
var $floor = GetIntrinsic("%Math.floor%");
/** @type {import('.')} */ module.exports = function setFunctionLength(fn, length) {
    if (typeof fn !== "function") throw new $TypeError("`fn` is not a function");
    if (typeof length !== "number" || length < 0 || length > 0xFFFFFFFF || $floor(length) !== length) throw new $TypeError("`length` must be a positive 32-bit integer");
    var loose = arguments.length > 2 && !!arguments[2];
    var functionLengthIsConfigurable = true;
    var functionLengthIsWritable = true;
    if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) functionLengthIsConfigurable = false;
        if (desc && !desc.writable) functionLengthIsWritable = false;
    }
    if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) define(/** @type {Parameters<define>[0]} */ fn, "length", length, true, true);
        else define(/** @type {Parameters<define>[0]} */ fn, "length", length);
    }
    return fn;
};

},{"8b1c9107ef1524f2":"dZb05","37dd1486f0f556ef":"6cEff","6a9d2b46085df706":"esBLZ","2d412b0f532d1834":"eOTQB","4352c534d27fe477":"6oWLR"}],"6cEff":[function(require,module,exports) {
"use strict";
var $defineProperty = require("f17fd23367965521");
var $SyntaxError = require("50f12088ee0f6bb");
var $TypeError = require("45c79de2b2f9c949");
var gopd = require("3f9bd39335781ec7");
/** @type {import('.')} */ module.exports = function defineDataProperty(obj, property, value) {
    if (!obj || typeof obj !== "object" && typeof obj !== "function") throw new $TypeError("`obj` must be an object or a function`");
    if (typeof property !== "string" && typeof property !== "symbol") throw new $TypeError("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] !== "boolean") throw new $TypeError("`loose`, if provided, must be a boolean");
    var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
    var nonWritable = arguments.length > 4 ? arguments[4] : null;
    var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
    var loose = arguments.length > 6 ? arguments[6] : false;
    /* @type {false | TypedPropertyDescriptor<unknown>} */ var desc = !!gopd && gopd(obj, property);
    if ($defineProperty) $defineProperty(obj, property, {
        configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
        enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
        value: value,
        writable: nonWritable === null && desc ? desc.writable : !nonWritable
    });
    else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) // must fall back to [[Set]], and was not explicitly asked to make non-enumerable, non-writable, or non-configurable
    obj[property] = value; // eslint-disable-line no-param-reassign
    else throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
};

},{"f17fd23367965521":"5SmXK","50f12088ee0f6bb":"8jeeH","45c79de2b2f9c949":"6oWLR","3f9bd39335781ec7":"eOTQB"}],"5SmXK":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("8e0b8e4026aaf38a");
/** @type {import('.')} */ var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
if ($defineProperty) try {
    $defineProperty({}, "a", {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $defineProperty = false;
}
module.exports = $defineProperty;

},{"8e0b8e4026aaf38a":"dZb05"}],"eOTQB":[function(require,module,exports) {
"use strict";
var GetIntrinsic = require("693e651525841e04");
var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
if ($gOPD) try {
    $gOPD([], "length");
} catch (e) {
    // IE 8 has a broken gOPD
    $gOPD = null;
}
module.exports = $gOPD;

},{"693e651525841e04":"dZb05"}],"esBLZ":[function(require,module,exports) {
"use strict";
var $defineProperty = require("1c3b0ce871129f60");
var hasPropertyDescriptors = function hasPropertyDescriptors() {
    return !!$defineProperty;
};
hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
    // node v0.6 has a bug where array lengths can be Set but not Defined
    if (!$defineProperty) return null;
    try {
        return $defineProperty([], "length", {
            value: 1
        }).length !== 1;
    } catch (e) {
        // In Firefox 4-22, defining length on an array throws an exception.
        return true;
    }
};
module.exports = hasPropertyDescriptors;

},{"1c3b0ce871129f60":"5SmXK"}],"kS3SE":[function(require,module,exports) {
var global = arguments[3];
var hasMap = typeof Map === "function" && Map.prototype;
var mapSizeDescriptor = Object.getOwnPropertyDescriptor && hasMap ? Object.getOwnPropertyDescriptor(Map.prototype, "size") : null;
var mapSize = hasMap && mapSizeDescriptor && typeof mapSizeDescriptor.get === "function" ? mapSizeDescriptor.get : null;
var mapForEach = hasMap && Map.prototype.forEach;
var hasSet = typeof Set === "function" && Set.prototype;
var setSizeDescriptor = Object.getOwnPropertyDescriptor && hasSet ? Object.getOwnPropertyDescriptor(Set.prototype, "size") : null;
var setSize = hasSet && setSizeDescriptor && typeof setSizeDescriptor.get === "function" ? setSizeDescriptor.get : null;
var setForEach = hasSet && Set.prototype.forEach;
var hasWeakMap = typeof WeakMap === "function" && WeakMap.prototype;
var weakMapHas = hasWeakMap ? WeakMap.prototype.has : null;
var hasWeakSet = typeof WeakSet === "function" && WeakSet.prototype;
var weakSetHas = hasWeakSet ? WeakSet.prototype.has : null;
var hasWeakRef = typeof WeakRef === "function" && WeakRef.prototype;
var weakRefDeref = hasWeakRef ? WeakRef.prototype.deref : null;
var booleanValueOf = Boolean.prototype.valueOf;
var objectToString = Object.prototype.toString;
var functionToString = Function.prototype.toString;
var $match = String.prototype.match;
var $slice = String.prototype.slice;
var $replace = String.prototype.replace;
var $toUpperCase = String.prototype.toUpperCase;
var $toLowerCase = String.prototype.toLowerCase;
var $test = RegExp.prototype.test;
var $concat = Array.prototype.concat;
var $join = Array.prototype.join;
var $arrSlice = Array.prototype.slice;
var $floor = Math.floor;
var bigIntValueOf = typeof BigInt === "function" ? BigInt.prototype.valueOf : null;
var gOPS = Object.getOwnPropertySymbols;
var symToString = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? Symbol.prototype.toString : null;
var hasShammedSymbols = typeof Symbol === "function" && typeof Symbol.iterator === "object";
// ie, `has-tostringtag/shams
var toStringTag = typeof Symbol === "function" && Symbol.toStringTag && (typeof Symbol.toStringTag === hasShammedSymbols ? "object" : "symbol") ? Symbol.toStringTag : null;
var isEnumerable = Object.prototype.propertyIsEnumerable;
var gPO = (typeof Reflect === "function" ? Reflect.getPrototypeOf : Object.getPrototypeOf) || ([].__proto__ === Array.prototype // eslint-disable-line no-proto
 ? function(O) {
    return O.__proto__; // eslint-disable-line no-proto
} : null);
function addNumericSeparator(num, str) {
    if (num === Infinity || num === -Infinity || num !== num || num && num > -1000 && num < 1000 || $test.call(/e/, str)) return str;
    var sepRegex = /[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;
    if (typeof num === "number") {
        var int = num < 0 ? -$floor(-num) : $floor(num); // trunc(num)
        if (int !== num) {
            var intStr = String(int);
            var dec = $slice.call(str, intStr.length + 1);
            return $replace.call(intStr, sepRegex, "$&_") + "." + $replace.call($replace.call(dec, /([0-9]{3})/g, "$&_"), /_$/, "");
        }
    }
    return $replace.call(str, sepRegex, "$&_");
}
var utilInspect = require("faefcb1694f2ad90");
var inspectCustom = utilInspect.custom;
var inspectSymbol = isSymbol(inspectCustom) ? inspectCustom : null;
module.exports = function inspect_(obj, options, depth, seen) {
    var opts = options || {};
    if (has(opts, "quoteStyle") && opts.quoteStyle !== "single" && opts.quoteStyle !== "double") throw new TypeError('option "quoteStyle" must be "single" or "double"');
    if (has(opts, "maxStringLength") && (typeof opts.maxStringLength === "number" ? opts.maxStringLength < 0 && opts.maxStringLength !== Infinity : opts.maxStringLength !== null)) throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');
    var customInspect = has(opts, "customInspect") ? opts.customInspect : true;
    if (typeof customInspect !== "boolean" && customInspect !== "symbol") throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");
    if (has(opts, "indent") && opts.indent !== null && opts.indent !== "	" && !(parseInt(opts.indent, 10) === opts.indent && opts.indent > 0)) throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');
    if (has(opts, "numericSeparator") && typeof opts.numericSeparator !== "boolean") throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');
    var numericSeparator = opts.numericSeparator;
    if (typeof obj === "undefined") return "undefined";
    if (obj === null) return "null";
    if (typeof obj === "boolean") return obj ? "true" : "false";
    if (typeof obj === "string") return inspectString(obj, opts);
    if (typeof obj === "number") {
        if (obj === 0) return Infinity / obj > 0 ? "0" : "-0";
        var str = String(obj);
        return numericSeparator ? addNumericSeparator(obj, str) : str;
    }
    if (typeof obj === "bigint") {
        var bigIntStr = String(obj) + "n";
        return numericSeparator ? addNumericSeparator(obj, bigIntStr) : bigIntStr;
    }
    var maxDepth = typeof opts.depth === "undefined" ? 5 : opts.depth;
    if (typeof depth === "undefined") depth = 0;
    if (depth >= maxDepth && maxDepth > 0 && typeof obj === "object") return isArray(obj) ? "[Array]" : "[Object]";
    var indent = getIndent(opts, depth);
    if (typeof seen === "undefined") seen = [];
    else if (indexOf(seen, obj) >= 0) return "[Circular]";
    function inspect(value, from, noIndent) {
        if (from) {
            seen = $arrSlice.call(seen);
            seen.push(from);
        }
        if (noIndent) {
            var newOpts = {
                depth: opts.depth
            };
            if (has(opts, "quoteStyle")) newOpts.quoteStyle = opts.quoteStyle;
            return inspect_(value, newOpts, depth + 1, seen);
        }
        return inspect_(value, opts, depth + 1, seen);
    }
    if (typeof obj === "function" && !isRegExp(obj)) {
        var name = nameOf(obj);
        var keys = arrObjKeys(obj, inspect);
        return "[Function" + (name ? ": " + name : " (anonymous)") + "]" + (keys.length > 0 ? " { " + $join.call(keys, ", ") + " }" : "");
    }
    if (isSymbol(obj)) {
        var symString = hasShammedSymbols ? $replace.call(String(obj), /^(Symbol\(.*\))_[^)]*$/, "$1") : symToString.call(obj);
        return typeof obj === "object" && !hasShammedSymbols ? markBoxed(symString) : symString;
    }
    if (isElement(obj)) {
        var s = "<" + $toLowerCase.call(String(obj.nodeName));
        var attrs = obj.attributes || [];
        for(var i = 0; i < attrs.length; i++)s += " " + attrs[i].name + "=" + wrapQuotes(quote(attrs[i].value), "double", opts);
        s += ">";
        if (obj.childNodes && obj.childNodes.length) s += "...";
        s += "</" + $toLowerCase.call(String(obj.nodeName)) + ">";
        return s;
    }
    if (isArray(obj)) {
        if (obj.length === 0) return "[]";
        var xs = arrObjKeys(obj, inspect);
        if (indent && !singleLineValues(xs)) return "[" + indentedJoin(xs, indent) + "]";
        return "[ " + $join.call(xs, ", ") + " ]";
    }
    if (isError(obj)) {
        var parts = arrObjKeys(obj, inspect);
        if (!("cause" in Error.prototype) && "cause" in obj && !isEnumerable.call(obj, "cause")) return "{ [" + String(obj) + "] " + $join.call($concat.call("[cause]: " + inspect(obj.cause), parts), ", ") + " }";
        if (parts.length === 0) return "[" + String(obj) + "]";
        return "{ [" + String(obj) + "] " + $join.call(parts, ", ") + " }";
    }
    if (typeof obj === "object" && customInspect) {
        if (inspectSymbol && typeof obj[inspectSymbol] === "function" && utilInspect) return utilInspect(obj, {
            depth: maxDepth - depth
        });
        else if (customInspect !== "symbol" && typeof obj.inspect === "function") return obj.inspect();
    }
    if (isMap(obj)) {
        var mapParts = [];
        if (mapForEach) mapForEach.call(obj, function(value, key) {
            mapParts.push(inspect(key, obj, true) + " => " + inspect(value, obj));
        });
        return collectionOf("Map", mapSize.call(obj), mapParts, indent);
    }
    if (isSet(obj)) {
        var setParts = [];
        if (setForEach) setForEach.call(obj, function(value) {
            setParts.push(inspect(value, obj));
        });
        return collectionOf("Set", setSize.call(obj), setParts, indent);
    }
    if (isWeakMap(obj)) return weakCollectionOf("WeakMap");
    if (isWeakSet(obj)) return weakCollectionOf("WeakSet");
    if (isWeakRef(obj)) return weakCollectionOf("WeakRef");
    if (isNumber(obj)) return markBoxed(inspect(Number(obj)));
    if (isBigInt(obj)) return markBoxed(inspect(bigIntValueOf.call(obj)));
    if (isBoolean(obj)) return markBoxed(booleanValueOf.call(obj));
    if (isString(obj)) return markBoxed(inspect(String(obj)));
    // note: in IE 8, sometimes `global !== window` but both are the prototypes of each other
    /* eslint-env browser */ if (typeof window !== "undefined" && obj === window) return "{ [object Window] }";
    if (typeof globalThis !== "undefined" && obj === globalThis || typeof global !== "undefined" && obj === global) return "{ [object globalThis] }";
    if (!isDate(obj) && !isRegExp(obj)) {
        var ys = arrObjKeys(obj, inspect);
        var isPlainObject = gPO ? gPO(obj) === Object.prototype : obj instanceof Object || obj.constructor === Object;
        var protoTag = obj instanceof Object ? "" : "null prototype";
        var stringTag = !isPlainObject && toStringTag && Object(obj) === obj && toStringTag in obj ? $slice.call(toStr(obj), 8, -1) : protoTag ? "Object" : "";
        var constructorTag = isPlainObject || typeof obj.constructor !== "function" ? "" : obj.constructor.name ? obj.constructor.name + " " : "";
        var tag = constructorTag + (stringTag || protoTag ? "[" + $join.call($concat.call([], stringTag || [], protoTag || []), ": ") + "] " : "");
        if (ys.length === 0) return tag + "{}";
        if (indent) return tag + "{" + indentedJoin(ys, indent) + "}";
        return tag + "{ " + $join.call(ys, ", ") + " }";
    }
    return String(obj);
};
function wrapQuotes(s, defaultStyle, opts) {
    var quoteChar = (opts.quoteStyle || defaultStyle) === "double" ? '"' : "'";
    return quoteChar + s + quoteChar;
}
function quote(s) {
    return $replace.call(String(s), /"/g, "&quot;");
}
function isArray(obj) {
    return toStr(obj) === "[object Array]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isDate(obj) {
    return toStr(obj) === "[object Date]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isRegExp(obj) {
    return toStr(obj) === "[object RegExp]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isError(obj) {
    return toStr(obj) === "[object Error]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isString(obj) {
    return toStr(obj) === "[object String]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isNumber(obj) {
    return toStr(obj) === "[object Number]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
function isBoolean(obj) {
    return toStr(obj) === "[object Boolean]" && (!toStringTag || !(typeof obj === "object" && toStringTag in obj));
}
// Symbol and BigInt do have Symbol.toStringTag by spec, so that can't be used to eliminate false positives
function isSymbol(obj) {
    if (hasShammedSymbols) return obj && typeof obj === "object" && obj instanceof Symbol;
    if (typeof obj === "symbol") return true;
    if (!obj || typeof obj !== "object" || !symToString) return false;
    try {
        symToString.call(obj);
        return true;
    } catch (e) {}
    return false;
}
function isBigInt(obj) {
    if (!obj || typeof obj !== "object" || !bigIntValueOf) return false;
    try {
        bigIntValueOf.call(obj);
        return true;
    } catch (e) {}
    return false;
}
var hasOwn = Object.prototype.hasOwnProperty || function(key) {
    return key in this;
};
function has(obj, key) {
    return hasOwn.call(obj, key);
}
function toStr(obj) {
    return objectToString.call(obj);
}
function nameOf(f) {
    if (f.name) return f.name;
    var m = $match.call(functionToString.call(f), /^function\s*([\w$]+)/);
    if (m) return m[1];
    return null;
}
function indexOf(xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}
function isMap(x) {
    if (!mapSize || !x || typeof x !== "object") return false;
    try {
        mapSize.call(x);
        try {
            setSize.call(x);
        } catch (s) {
            return true;
        }
        return x instanceof Map; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function isWeakMap(x) {
    if (!weakMapHas || !x || typeof x !== "object") return false;
    try {
        weakMapHas.call(x, weakMapHas);
        try {
            weakSetHas.call(x, weakSetHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakMap; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function isWeakRef(x) {
    if (!weakRefDeref || !x || typeof x !== "object") return false;
    try {
        weakRefDeref.call(x);
        return true;
    } catch (e) {}
    return false;
}
function isSet(x) {
    if (!setSize || !x || typeof x !== "object") return false;
    try {
        setSize.call(x);
        try {
            mapSize.call(x);
        } catch (m) {
            return true;
        }
        return x instanceof Set; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function isWeakSet(x) {
    if (!weakSetHas || !x || typeof x !== "object") return false;
    try {
        weakSetHas.call(x, weakSetHas);
        try {
            weakMapHas.call(x, weakMapHas);
        } catch (s) {
            return true;
        }
        return x instanceof WeakSet; // core-js workaround, pre-v2.5.0
    } catch (e) {}
    return false;
}
function isElement(x) {
    if (!x || typeof x !== "object") return false;
    if (typeof HTMLElement !== "undefined" && x instanceof HTMLElement) return true;
    return typeof x.nodeName === "string" && typeof x.getAttribute === "function";
}
function inspectString(str, opts) {
    if (str.length > opts.maxStringLength) {
        var remaining = str.length - opts.maxStringLength;
        var trailer = "... " + remaining + " more character" + (remaining > 1 ? "s" : "");
        return inspectString($slice.call(str, 0, opts.maxStringLength), opts) + trailer;
    }
    // eslint-disable-next-line no-control-regex
    var s = $replace.call($replace.call(str, /(['\\])/g, "\\$1"), /[\x00-\x1f]/g, lowbyte);
    return wrapQuotes(s, "single", opts);
}
function lowbyte(c) {
    var n = c.charCodeAt(0);
    var x = {
        8: "b",
        9: "t",
        10: "n",
        12: "f",
        13: "r"
    }[n];
    if (x) return "\\" + x;
    return "\\x" + (n < 0x10 ? "0" : "") + $toUpperCase.call(n.toString(16));
}
function markBoxed(str) {
    return "Object(" + str + ")";
}
function weakCollectionOf(type) {
    return type + " { ? }";
}
function collectionOf(type, size, entries, indent) {
    var joinedEntries = indent ? indentedJoin(entries, indent) : $join.call(entries, ", ");
    return type + " (" + size + ") {" + joinedEntries + "}";
}
function singleLineValues(xs) {
    for(var i = 0; i < xs.length; i++){
        if (indexOf(xs[i], "\n") >= 0) return false;
    }
    return true;
}
function getIndent(opts, depth) {
    var baseIndent;
    if (opts.indent === "	") baseIndent = "	";
    else if (typeof opts.indent === "number" && opts.indent > 0) baseIndent = $join.call(Array(opts.indent + 1), " ");
    else return null;
    return {
        base: baseIndent,
        prev: $join.call(Array(depth + 1), baseIndent)
    };
}
function indentedJoin(xs, indent) {
    if (xs.length === 0) return "";
    var lineJoiner = "\n" + indent.prev + indent.base;
    return lineJoiner + $join.call(xs, "," + lineJoiner) + "\n" + indent.prev;
}
function arrObjKeys(obj, inspect) {
    var isArr = isArray(obj);
    var xs = [];
    if (isArr) {
        xs.length = obj.length;
        for(var i = 0; i < obj.length; i++)xs[i] = has(obj, i) ? inspect(obj[i], obj) : "";
    }
    var syms = typeof gOPS === "function" ? gOPS(obj) : [];
    var symMap;
    if (hasShammedSymbols) {
        symMap = {};
        for(var k = 0; k < syms.length; k++)symMap["$" + syms[k]] = syms[k];
    }
    for(var key in obj){
        if (!has(obj, key)) continue;
         // eslint-disable-line no-restricted-syntax, no-continue
        if (isArr && String(Number(key)) === key && key < obj.length) continue;
         // eslint-disable-line no-restricted-syntax, no-continue
        if (hasShammedSymbols && symMap["$" + key] instanceof Symbol) continue; // eslint-disable-line no-restricted-syntax, no-continue
        else if ($test.call(/[^\w$]/, key)) xs.push(inspect(key, obj) + ": " + inspect(obj[key], obj));
        else xs.push(key + ": " + inspect(obj[key], obj));
    }
    if (typeof gOPS === "function") {
        for(var j = 0; j < syms.length; j++)if (isEnumerable.call(obj, syms[j])) xs.push("[" + inspect(syms[j]) + "]: " + inspect(obj[syms[j]], obj));
    }
    return xs;
}

},{"faefcb1694f2ad90":"jhUEF"}],"chmkc":[function(require,module,exports) {
"use strict";
var formats = require("7adf3674f81a2c87");
var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var hexTable = function() {
    var array = [];
    for(var i = 0; i < 256; ++i)array.push("%" + ((i < 16 ? "0" : "") + i.toString(16)).toUpperCase());
    return array;
}();
var compactQueue = function compactQueue(queue) {
    while(queue.length > 1){
        var item = queue.pop();
        var obj = item.obj[item.prop];
        if (isArray(obj)) {
            var compacted = [];
            for(var j = 0; j < obj.length; ++j)if (typeof obj[j] !== "undefined") compacted.push(obj[j]);
            item.obj[item.prop] = compacted;
        }
    }
};
var arrayToObject = function arrayToObject(source, options) {
    var obj = options && options.plainObjects ? Object.create(null) : {};
    for(var i = 0; i < source.length; ++i)if (typeof source[i] !== "undefined") obj[i] = source[i];
    return obj;
};
var merge = function merge(target, source, options) {
    /* eslint no-param-reassign: 0 */ if (!source) return target;
    if (typeof source !== "object") {
        if (isArray(target)) target.push(source);
        else if (target && typeof target === "object") {
            if (options && (options.plainObjects || options.allowPrototypes) || !has.call(Object.prototype, source)) target[source] = true;
        } else return [
            target,
            source
        ];
        return target;
    }
    if (!target || typeof target !== "object") return [
        target
    ].concat(source);
    var mergeTarget = target;
    if (isArray(target) && !isArray(source)) mergeTarget = arrayToObject(target, options);
    if (isArray(target) && isArray(source)) {
        source.forEach(function(item, i) {
            if (has.call(target, i)) {
                var targetItem = target[i];
                if (targetItem && typeof targetItem === "object" && item && typeof item === "object") target[i] = merge(targetItem, item, options);
                else target.push(item);
            } else target[i] = item;
        });
        return target;
    }
    return Object.keys(source).reduce(function(acc, key) {
        var value = source[key];
        if (has.call(acc, key)) acc[key] = merge(acc[key], value, options);
        else acc[key] = value;
        return acc;
    }, mergeTarget);
};
var assign = function assignSingleSource(target, source) {
    return Object.keys(source).reduce(function(acc, key) {
        acc[key] = source[key];
        return acc;
    }, target);
};
var decode = function(str, decoder, charset) {
    var strWithoutPlus = str.replace(/\+/g, " ");
    if (charset === "iso-8859-1") // unescape never throws, no try...catch needed:
    return strWithoutPlus.replace(/%[0-9a-f]{2}/gi, unescape);
    // utf-8
    try {
        return decodeURIComponent(strWithoutPlus);
    } catch (e) {
        return strWithoutPlus;
    }
};
var limit = 1024;
/* eslint operator-linebreak: [2, "before"] */ var encode = function encode(str, defaultEncoder, charset, kind, format) {
    // This code was originally written by Brian White (mscdex) for the io.js core querystring library.
    // It has been adapted here for stricter adherence to RFC 3986
    if (str.length === 0) return str;
    var string = str;
    if (typeof str === "symbol") string = Symbol.prototype.toString.call(str);
    else if (typeof str !== "string") string = String(str);
    if (charset === "iso-8859-1") return escape(string).replace(/%u[0-9a-f]{4}/gi, function($0) {
        return "%26%23" + parseInt($0.slice(2), 16) + "%3B";
    });
    var out = "";
    for(var j = 0; j < string.length; j += limit){
        var segment = string.length >= limit ? string.slice(j, j + limit) : string;
        var arr = [];
        for(var i = 0; i < segment.length; ++i){
            var c = segment.charCodeAt(i);
            if (c === 0x2D // -
             || c === 0x2E // .
             || c === 0x5F // _
             || c === 0x7E // ~
             || c >= 0x30 && c <= 0x39 // 0-9
             || c >= 0x41 && c <= 0x5A // a-z
             || c >= 0x61 && c <= 0x7A // A-Z
             || format === formats.RFC1738 && (c === 0x28 || c === 0x29) // ( )
            ) {
                arr[arr.length] = segment.charAt(i);
                continue;
            }
            if (c < 0x80) {
                arr[arr.length] = hexTable[c];
                continue;
            }
            if (c < 0x800) {
                arr[arr.length] = hexTable[0xC0 | c >> 6] + hexTable[0x80 | c & 0x3F];
                continue;
            }
            if (c < 0xD800 || c >= 0xE000) {
                arr[arr.length] = hexTable[0xE0 | c >> 12] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
                continue;
            }
            i += 1;
            c = 0x10000 + ((c & 0x3FF) << 10 | segment.charCodeAt(i) & 0x3FF);
            arr[arr.length] = hexTable[0xF0 | c >> 18] + hexTable[0x80 | c >> 12 & 0x3F] + hexTable[0x80 | c >> 6 & 0x3F] + hexTable[0x80 | c & 0x3F];
        }
        out += arr.join("");
    }
    return out;
};
var compact = function compact(value) {
    var queue = [
        {
            obj: {
                o: value
            },
            prop: "o"
        }
    ];
    var refs = [];
    for(var i = 0; i < queue.length; ++i){
        var item = queue[i];
        var obj = item.obj[item.prop];
        var keys = Object.keys(obj);
        for(var j = 0; j < keys.length; ++j){
            var key = keys[j];
            var val = obj[key];
            if (typeof val === "object" && val !== null && refs.indexOf(val) === -1) {
                queue.push({
                    obj: obj,
                    prop: key
                });
                refs.push(val);
            }
        }
    }
    compactQueue(queue);
    return value;
};
var isRegExp = function isRegExp(obj) {
    return Object.prototype.toString.call(obj) === "[object RegExp]";
};
var isBuffer = function isBuffer(obj) {
    if (!obj || typeof obj !== "object") return false;
    return !!(obj.constructor && obj.constructor.isBuffer && obj.constructor.isBuffer(obj));
};
var combine = function combine(a, b) {
    return [].concat(a, b);
};
var maybeMap = function maybeMap(val, fn) {
    if (isArray(val)) {
        var mapped = [];
        for(var i = 0; i < val.length; i += 1)mapped.push(fn(val[i]));
        return mapped;
    }
    return fn(val);
};
module.exports = {
    arrayToObject: arrayToObject,
    assign: assign,
    combine: combine,
    compact: compact,
    decode: decode,
    encode: encode,
    isBuffer: isBuffer,
    isRegExp: isRegExp,
    maybeMap: maybeMap,
    merge: merge
};

},{"7adf3674f81a2c87":"d7Ogf"}],"d7Ogf":[function(require,module,exports) {
"use strict";
var replace = String.prototype.replace;
var percentTwenties = /%20/g;
var Format = {
    RFC1738: "RFC1738",
    RFC3986: "RFC3986"
};
module.exports = {
    "default": Format.RFC3986,
    formatters: {
        RFC1738: function(value) {
            return replace.call(value, percentTwenties, "+");
        },
        RFC3986: function(value) {
            return String(value);
        }
    },
    RFC1738: Format.RFC1738,
    RFC3986: Format.RFC3986
};

},{}],"fSZqi":[function(require,module,exports) {
"use strict";
var utils = require("e76649c95dd0e736");
var has = Object.prototype.hasOwnProperty;
var isArray = Array.isArray;
var defaults = {
    allowDots: false,
    allowEmptyArrays: false,
    allowPrototypes: false,
    allowSparse: false,
    arrayLimit: 20,
    charset: "utf-8",
    charsetSentinel: false,
    comma: false,
    decodeDotInKeys: false,
    decoder: utils.decode,
    delimiter: "&",
    depth: 5,
    duplicates: "combine",
    ignoreQueryPrefix: false,
    interpretNumericEntities: false,
    parameterLimit: 1000,
    parseArrays: true,
    plainObjects: false,
    strictDepth: false,
    strictNullHandling: false
};
var interpretNumericEntities = function(str) {
    return str.replace(/&#(\d+);/g, function($0, numberStr) {
        return String.fromCharCode(parseInt(numberStr, 10));
    });
};
var parseArrayValue = function(val, options) {
    if (val && typeof val === "string" && options.comma && val.indexOf(",") > -1) return val.split(",");
    return val;
};
// This is what browsers will submit when the ✓ character occurs in an
// application/x-www-form-urlencoded body and the encoding of the page containing
// the form is iso-8859-1, or when the submitted form has an accept-charset
// attribute of iso-8859-1. Presumably also with other charsets that do not contain
// the ✓ character, such as us-ascii.
var isoSentinel = "utf8=%26%2310003%3B"; // encodeURIComponent('&#10003;')
// These are the percent-encoded utf-8 octets representing a checkmark, indicating that the request actually is utf-8 encoded.
var charsetSentinel = "utf8=%E2%9C%93"; // encodeURIComponent('✓')
var parseValues = function parseQueryStringValues(str, options) {
    var obj = {
        __proto__: null
    };
    var cleanStr = options.ignoreQueryPrefix ? str.replace(/^\?/, "") : str;
    cleanStr = cleanStr.replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    var limit = options.parameterLimit === Infinity ? undefined : options.parameterLimit;
    var parts = cleanStr.split(options.delimiter, limit);
    var skipIndex = -1; // Keep track of where the utf8 sentinel was found
    var i;
    var charset = options.charset;
    if (options.charsetSentinel) {
        for(i = 0; i < parts.length; ++i)if (parts[i].indexOf("utf8=") === 0) {
            if (parts[i] === charsetSentinel) charset = "utf-8";
            else if (parts[i] === isoSentinel) charset = "iso-8859-1";
            skipIndex = i;
            i = parts.length; // The eslint settings do not allow break;
        }
    }
    for(i = 0; i < parts.length; ++i){
        if (i === skipIndex) continue;
        var part = parts[i];
        var bracketEqualsPos = part.indexOf("]=");
        var pos = bracketEqualsPos === -1 ? part.indexOf("=") : bracketEqualsPos + 1;
        var key, val;
        if (pos === -1) {
            key = options.decoder(part, defaults.decoder, charset, "key");
            val = options.strictNullHandling ? null : "";
        } else {
            key = options.decoder(part.slice(0, pos), defaults.decoder, charset, "key");
            val = utils.maybeMap(parseArrayValue(part.slice(pos + 1), options), function(encodedVal) {
                return options.decoder(encodedVal, defaults.decoder, charset, "value");
            });
        }
        if (val && options.interpretNumericEntities && charset === "iso-8859-1") val = interpretNumericEntities(val);
        if (part.indexOf("[]=") > -1) val = isArray(val) ? [
            val
        ] : val;
        var existing = has.call(obj, key);
        if (existing && options.duplicates === "combine") obj[key] = utils.combine(obj[key], val);
        else if (!existing || options.duplicates === "last") obj[key] = val;
    }
    return obj;
};
var parseObject = function(chain, val, options, valuesParsed) {
    var leaf = valuesParsed ? val : parseArrayValue(val, options);
    for(var i = chain.length - 1; i >= 0; --i){
        var obj;
        var root = chain[i];
        if (root === "[]" && options.parseArrays) obj = options.allowEmptyArrays && (leaf === "" || options.strictNullHandling && leaf === null) ? [] : [].concat(leaf);
        else {
            obj = options.plainObjects ? Object.create(null) : {};
            var cleanRoot = root.charAt(0) === "[" && root.charAt(root.length - 1) === "]" ? root.slice(1, -1) : root;
            var decodedRoot = options.decodeDotInKeys ? cleanRoot.replace(/%2E/g, ".") : cleanRoot;
            var index = parseInt(decodedRoot, 10);
            if (!options.parseArrays && decodedRoot === "") obj = {
                0: leaf
            };
            else if (!isNaN(index) && root !== decodedRoot && String(index) === decodedRoot && index >= 0 && options.parseArrays && index <= options.arrayLimit) {
                obj = [];
                obj[index] = leaf;
            } else if (decodedRoot !== "__proto__") obj[decodedRoot] = leaf;
        }
        leaf = obj;
    }
    return leaf;
};
var parseKeys = function parseQueryStringKeys(givenKey, val, options, valuesParsed) {
    if (!givenKey) return;
    // Transform dot notation to bracket notation
    var key = options.allowDots ? givenKey.replace(/\.([^.[]+)/g, "[$1]") : givenKey;
    // The regex chunks
    var brackets = /(\[[^[\]]*])/;
    var child = /(\[[^[\]]*])/g;
    // Get the parent
    var segment = options.depth > 0 && brackets.exec(key);
    var parent = segment ? key.slice(0, segment.index) : key;
    // Stash the parent if it exists
    var keys = [];
    if (parent) {
        // If we aren't using plain objects, optionally prefix keys that would overwrite object prototype properties
        if (!options.plainObjects && has.call(Object.prototype, parent)) {
            if (!options.allowPrototypes) return;
        }
        keys.push(parent);
    }
    // Loop through children appending to the array until we hit depth
    var i = 0;
    while(options.depth > 0 && (segment = child.exec(key)) !== null && i < options.depth){
        i += 1;
        if (!options.plainObjects && has.call(Object.prototype, segment[1].slice(1, -1))) {
            if (!options.allowPrototypes) return;
        }
        keys.push(segment[1]);
    }
    // If there's a remainder, check strictDepth option for throw, else just add whatever is left
    if (segment) {
        if (options.strictDepth === true) throw new RangeError("Input depth exceeded depth option of " + options.depth + " and strictDepth is true");
        keys.push("[" + key.slice(segment.index) + "]");
    }
    return parseObject(keys, val, options, valuesParsed);
};
var normalizeParseOptions = function normalizeParseOptions(opts) {
    if (!opts) return defaults;
    if (typeof opts.allowEmptyArrays !== "undefined" && typeof opts.allowEmptyArrays !== "boolean") throw new TypeError("`allowEmptyArrays` option can only be `true` or `false`, when provided");
    if (typeof opts.decodeDotInKeys !== "undefined" && typeof opts.decodeDotInKeys !== "boolean") throw new TypeError("`decodeDotInKeys` option can only be `true` or `false`, when provided");
    if (opts.decoder !== null && typeof opts.decoder !== "undefined" && typeof opts.decoder !== "function") throw new TypeError("Decoder has to be a function.");
    if (typeof opts.charset !== "undefined" && opts.charset !== "utf-8" && opts.charset !== "iso-8859-1") throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");
    var charset = typeof opts.charset === "undefined" ? defaults.charset : opts.charset;
    var duplicates = typeof opts.duplicates === "undefined" ? defaults.duplicates : opts.duplicates;
    if (duplicates !== "combine" && duplicates !== "first" && duplicates !== "last") throw new TypeError("The duplicates option must be either combine, first, or last");
    var allowDots = typeof opts.allowDots === "undefined" ? opts.decodeDotInKeys === true ? true : defaults.allowDots : !!opts.allowDots;
    return {
        allowDots: allowDots,
        allowEmptyArrays: typeof opts.allowEmptyArrays === "boolean" ? !!opts.allowEmptyArrays : defaults.allowEmptyArrays,
        allowPrototypes: typeof opts.allowPrototypes === "boolean" ? opts.allowPrototypes : defaults.allowPrototypes,
        allowSparse: typeof opts.allowSparse === "boolean" ? opts.allowSparse : defaults.allowSparse,
        arrayLimit: typeof opts.arrayLimit === "number" ? opts.arrayLimit : defaults.arrayLimit,
        charset: charset,
        charsetSentinel: typeof opts.charsetSentinel === "boolean" ? opts.charsetSentinel : defaults.charsetSentinel,
        comma: typeof opts.comma === "boolean" ? opts.comma : defaults.comma,
        decodeDotInKeys: typeof opts.decodeDotInKeys === "boolean" ? opts.decodeDotInKeys : defaults.decodeDotInKeys,
        decoder: typeof opts.decoder === "function" ? opts.decoder : defaults.decoder,
        delimiter: typeof opts.delimiter === "string" || utils.isRegExp(opts.delimiter) ? opts.delimiter : defaults.delimiter,
        // eslint-disable-next-line no-implicit-coercion, no-extra-parens
        depth: typeof opts.depth === "number" || opts.depth === false ? +opts.depth : defaults.depth,
        duplicates: duplicates,
        ignoreQueryPrefix: opts.ignoreQueryPrefix === true,
        interpretNumericEntities: typeof opts.interpretNumericEntities === "boolean" ? opts.interpretNumericEntities : defaults.interpretNumericEntities,
        parameterLimit: typeof opts.parameterLimit === "number" ? opts.parameterLimit : defaults.parameterLimit,
        parseArrays: opts.parseArrays !== false,
        plainObjects: typeof opts.plainObjects === "boolean" ? opts.plainObjects : defaults.plainObjects,
        strictDepth: typeof opts.strictDepth === "boolean" ? !!opts.strictDepth : defaults.strictDepth,
        strictNullHandling: typeof opts.strictNullHandling === "boolean" ? opts.strictNullHandling : defaults.strictNullHandling
    };
};
module.exports = function(str, opts) {
    var options = normalizeParseOptions(opts);
    if (str === "" || str === null || typeof str === "undefined") return options.plainObjects ? Object.create(null) : {};
    var tempObj = typeof str === "string" ? parseValues(str, options) : str;
    var obj = options.plainObjects ? Object.create(null) : {};
    // Iterate over the keys and setup the new object
    var keys = Object.keys(tempObj);
    for(var i = 0; i < keys.length; ++i){
        var key = keys[i];
        var newObj = parseKeys(key, tempObj[key], options, typeof str === "string");
        obj = utils.merge(obj, newObj, options);
    }
    if (options.allowSparse === true) return obj;
    return utils.compact(obj);
};

},{"e76649c95dd0e736":"chmkc"}],"6m7rL":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _url = require("url"); // Used for OAuth parsing of Cognito Hosted UI
var _urlOpener = require("./urlOpener");
var _oauthStorage = require("./oauthStorage");
var _auth = require("../types/Auth");
var _core = require("@aws-amplify/core");
var _sha256 = require("crypto-js/sha256");
var _sha256Default = parcelHelpers.interopDefault(_sha256);
var _encBase64 = require("crypto-js/enc-base64");
var _encBase64Default = parcelHelpers.interopDefault(_encBase64);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var dispatchAuthEvent = function(event, data, message) {
    (0, _core.Hub).dispatch("auth", {
        event: event,
        data: data,
        message: message
    }, "Auth", AMPLIFY_SYMBOL);
};
var logger = new (0, _core.ConsoleLogger)("OAuth");
var OAuth = /** @class */ function() {
    function OAuth(_a) {
        var config = _a.config, cognitoClientId = _a.cognitoClientId, _b = _a.scopes, scopes = _b === void 0 ? [] : _b;
        this._urlOpener = config.urlOpener || (0, _urlOpener.launchUri);
        this._config = config;
        this._cognitoClientId = cognitoClientId;
        if (!this.isValidScopes(scopes)) throw Error("scopes must be a String Array");
        this._scopes = scopes;
    }
    OAuth.prototype.isValidScopes = function(scopes) {
        return Array.isArray(scopes) && scopes.every(function(scope) {
            return typeof scope === "string";
        });
    };
    OAuth.prototype.oauthSignIn = function(responseType, domain, redirectSignIn, clientId, provider, customState) {
        if (responseType === void 0) responseType = "code";
        if (provider === void 0) provider = (0, _auth.CognitoHostedUIIdentityProvider).Cognito;
        var generatedState = this._generateState(32);
        /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito
        single-encodes/decodes url on first sign in and double-encodes/decodes url
        when user already signed in. Using encodeURIComponent, Base32, Base64 add
        characters % or = which on further encoding becomes unsafe. '=' create issue
        for parsing query params.
        Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */ var state = customState ? generatedState + "-" + (0, _core.urlSafeEncode)(customState) : generatedState;
        _oauthStorage.setState(state);
        var pkce_key = this._generateRandom(128);
        _oauthStorage.setPKCE(pkce_key);
        var code_challenge = this._generateChallenge(pkce_key);
        var code_challenge_method = "S256";
        var scopesString = this._scopes.join(" ");
        var queryString = Object.entries(__assign(__assign({
            redirect_uri: redirectSignIn,
            response_type: responseType,
            client_id: clientId,
            identity_provider: provider,
            scope: scopesString,
            state: state
        }, responseType === "code" ? {
            code_challenge: code_challenge
        } : {}), responseType === "code" ? {
            code_challenge_method: code_challenge_method
        } : {})).map(function(_a) {
            var _b = __read(_a, 2), k = _b[0], v = _b[1];
            return encodeURIComponent(k) + "=" + encodeURIComponent(v);
        }).join("&");
        var URL = "https://" + domain + "/oauth2/authorize?" + queryString;
        logger.debug("Redirecting to " + URL);
        this._urlOpener(URL, redirectSignIn);
    };
    OAuth.prototype._handleCodeFlow = function(currentUrl) {
        return __awaiter(this, void 0, void 0, function() {
            var code, currentUrlPathname, redirectSignInPathname, oAuthTokenEndpoint, client_id, redirect_uri, code_verifier, oAuthTokenBody, body, _a, access_token, refresh_token, id_token, error;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        code = ((0, _url.parse)(currentUrl).query || "").split("&").map(function(pairings) {
                            return pairings.split("=");
                        }).reduce(function(accum, _a) {
                            var _b;
                            var _c = __read(_a, 2), k = _c[0], v = _c[1];
                            return __assign(__assign({}, accum), (_b = {}, _b[k] = v, _b));
                        }, {
                            code: undefined
                        }).code;
                        currentUrlPathname = (0, _url.parse)(currentUrl).pathname || "/";
                        redirectSignInPathname = (0, _url.parse)(this._config.redirectSignIn).pathname || "/";
                        if (!code || currentUrlPathname !== redirectSignInPathname) return [
                            2 /*return*/ 
                        ];
                        oAuthTokenEndpoint = "https://" + this._config.domain + "/oauth2/token";
                        dispatchAuthEvent("codeFlow", {}, "Retrieving tokens from " + oAuthTokenEndpoint);
                        client_id = (0, _auth.isCognitoHostedOpts)(this._config) ? this._cognitoClientId : this._config.clientID;
                        redirect_uri = (0, _auth.isCognitoHostedOpts)(this._config) ? this._config.redirectSignIn : this._config.redirectUri;
                        code_verifier = _oauthStorage.getPKCE();
                        oAuthTokenBody = __assign({
                            grant_type: "authorization_code",
                            code: code,
                            client_id: client_id,
                            redirect_uri: redirect_uri
                        }, code_verifier ? {
                            code_verifier: code_verifier
                        } : {});
                        logger.debug("Calling token endpoint: " + oAuthTokenEndpoint + " with", oAuthTokenBody);
                        body = Object.entries(oAuthTokenBody).map(function(_a) {
                            var _b = __read(_a, 2), k = _b[0], v = _b[1];
                            return encodeURIComponent(k) + "=" + encodeURIComponent(v);
                        }).join("&");
                        return [
                            4 /*yield*/ ,
                            fetch(oAuthTokenEndpoint, {
                                method: "POST",
                                headers: {
                                    "Content-Type": "application/x-www-form-urlencoded"
                                },
                                body: body
                            })
                        ];
                    case 1:
                        return [
                            4 /*yield*/ ,
                            _b.sent().json()
                        ];
                    case 2:
                        _a = _b.sent(), access_token = _a.access_token, refresh_token = _a.refresh_token, id_token = _a.id_token, error = _a.error;
                        if (error) throw new Error(error);
                        return [
                            2 /*return*/ ,
                            {
                                accessToken: access_token,
                                refreshToken: refresh_token,
                                idToken: id_token
                            }
                        ];
                }
            });
        });
    };
    OAuth.prototype._handleImplicitFlow = function(currentUrl) {
        return __awaiter(this, void 0, void 0, function() {
            var _a, id_token, access_token;
            return __generator(this, function(_b) {
                _a = ((0, _url.parse)(currentUrl).hash || "#").substr(1) // Remove # from returned code
                .split("&").map(function(pairings) {
                    return pairings.split("=");
                }).reduce(function(accum, _a) {
                    var _b;
                    var _c = __read(_a, 2), k = _c[0], v = _c[1];
                    return __assign(__assign({}, accum), (_b = {}, _b[k] = v, _b));
                }, {
                    id_token: undefined,
                    access_token: undefined
                }), id_token = _a.id_token, access_token = _a.access_token;
                dispatchAuthEvent("implicitFlow", {}, "Got tokens from " + currentUrl);
                logger.debug("Retrieving implicit tokens from " + currentUrl + " with");
                return [
                    2 /*return*/ ,
                    {
                        accessToken: access_token,
                        idToken: id_token,
                        refreshToken: null
                    }
                ];
            });
        });
    };
    OAuth.prototype.handleAuthResponse = function(currentUrl) {
        return __awaiter(this, void 0, void 0, function() {
            var urlParams, error, error_description, state, _a, _b, e_1;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        _c.trys.push([
                            0,
                            5,
                            ,
                            6
                        ]);
                        urlParams = currentUrl ? __assign(__assign({}, ((0, _url.parse)(currentUrl).hash || "#").substr(1).split("&").map(function(entry) {
                            return entry.split("=");
                        }).reduce(function(acc, _a) {
                            var _b = __read(_a, 2), k = _b[0], v = _b[1];
                            return acc[k] = v, acc;
                        }, {})), ((0, _url.parse)(currentUrl).query || "").split("&").map(function(entry) {
                            return entry.split("=");
                        }).reduce(function(acc, _a) {
                            var _b = __read(_a, 2), k = _b[0], v = _b[1];
                            return acc[k] = v, acc;
                        }, {})) : {};
                        error = urlParams.error, error_description = urlParams.error_description;
                        if (error) throw new Error(error_description);
                        state = this._validateState(urlParams);
                        logger.debug("Starting " + this._config.responseType + " flow with " + currentUrl);
                        if (!(this._config.responseType === "code")) return [
                            3 /*break*/ ,
                            2
                        ];
                        _a = [
                            {}
                        ];
                        return [
                            4 /*yield*/ ,
                            this._handleCodeFlow(currentUrl)
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            __assign.apply(void 0, [
                                __assign.apply(void 0, _a.concat([
                                    _c.sent()
                                ])),
                                {
                                    state: state
                                }
                            ])
                        ];
                    case 2:
                        _b = [
                            {}
                        ];
                        return [
                            4 /*yield*/ ,
                            this._handleImplicitFlow(currentUrl)
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            __assign.apply(void 0, [
                                __assign.apply(void 0, _b.concat([
                                    _c.sent()
                                ])),
                                {
                                    state: state
                                }
                            ])
                        ];
                    case 4:
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 5:
                        e_1 = _c.sent();
                        logger.error("Error handling auth response.", e_1);
                        throw e_1;
                    case 6:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    OAuth.prototype._validateState = function(urlParams) {
        if (!urlParams) return;
        var savedState = _oauthStorage.getState();
        var returnedState = urlParams.state;
        // This is because savedState only exists if the flow was initiated by Amplify
        if (savedState && savedState !== returnedState) throw new Error("Invalid state in OAuth flow");
        return returnedState;
    };
    OAuth.prototype.signOut = function() {
        return __awaiter(this, void 0, void 0, function() {
            var oAuthLogoutEndpoint, client_id, signout_uri;
            return __generator(this, function(_a) {
                oAuthLogoutEndpoint = "https://" + this._config.domain + "/logout?";
                client_id = (0, _auth.isCognitoHostedOpts)(this._config) ? this._cognitoClientId : this._config.oauth.clientID;
                signout_uri = (0, _auth.isCognitoHostedOpts)(this._config) ? this._config.redirectSignOut : this._config.returnTo;
                oAuthLogoutEndpoint += Object.entries({
                    client_id: client_id,
                    logout_uri: encodeURIComponent(signout_uri)
                }).map(function(_a) {
                    var _b = __read(_a, 2), k = _b[0], v = _b[1];
                    return k + "=" + v;
                }).join("&");
                dispatchAuthEvent("oAuthSignOut", {
                    oAuth: "signOut"
                }, "Signing out from " + oAuthLogoutEndpoint);
                logger.debug("Signing out from " + oAuthLogoutEndpoint);
                return [
                    2 /*return*/ ,
                    this._urlOpener(oAuthLogoutEndpoint, signout_uri)
                ];
            });
        });
    };
    OAuth.prototype._generateState = function(length) {
        var result = "";
        var i = length;
        var chars = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
        for(; i > 0; --i)result += chars[Math.round(Math.random() * (chars.length - 1))];
        return result;
    };
    OAuth.prototype._generateChallenge = function(code) {
        return this._base64URL((0, _sha256Default.default)(code));
    };
    OAuth.prototype._base64URL = function(string) {
        return string.toString((0, _encBase64Default.default)).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
    };
    OAuth.prototype._generateRandom = function(size) {
        var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~";
        var buffer = new Uint8Array(size);
        if (typeof window !== "undefined" && !!window.crypto) window.crypto.getRandomValues(buffer);
        else for(var i = 0; i < size; i += 1)buffer[i] = Math.random() * CHARSET.length | 0;
        return this._bufferToString(buffer);
    };
    OAuth.prototype._bufferToString = function(buffer) {
        var CHARSET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        var state = [];
        for(var i = 0; i < buffer.byteLength; i += 1){
            var index = buffer[i] % CHARSET.length;
            state.push(CHARSET[index]);
        }
        return state.join("");
    };
    return OAuth;
}();
exports.default = OAuth;

},{"url":"7qjc7","./urlOpener":"dsl2u","./oauthStorage":"8X6Gi","../types/Auth":"2MR8p","@aws-amplify/core":"hZcAF","crypto-js/sha256":"lNj7D","crypto-js/enc-base64":"1XZVI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dsl2u":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "launchUri", ()=>launchUri);
var SELF = "_self";
var launchUri = function(url) {
    var windowProxy = window.open(url, SELF);
    if (windowProxy) return Promise.resolve(windowProxy);
    else return Promise.reject();
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8X6Gi":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "setState", ()=>setState);
parcelHelpers.export(exports, "getState", ()=>getState);
parcelHelpers.export(exports, "setPKCE", ()=>setPKCE);
parcelHelpers.export(exports, "getPKCE", ()=>getPKCE);
parcelHelpers.export(exports, "clearAll", ()=>clearAll);
var setState = function(state) {
    window.sessionStorage.setItem("oauth_state", state);
};
var getState = function() {
    var oauth_state = window.sessionStorage.getItem("oauth_state");
    window.sessionStorage.removeItem("oauth_state");
    return oauth_state;
};
var setPKCE = function(private_key) {
    window.sessionStorage.setItem("ouath_pkce_key", private_key);
};
var getPKCE = function() {
    var ouath_pkce_key = window.sessionStorage.getItem("ouath_pkce_key");
    window.sessionStorage.removeItem("ouath_pkce_key");
    return ouath_pkce_key;
};
var clearAll = function() {
    window.sessionStorage.removeItem("ouath_pkce_key");
    window.sessionStorage.removeItem("oauth_state");
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9a84K":[function(require,module,exports) {
/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _core = require("@aws-amplify/core");
exports.default = function(callback) {
    if ((0, _core.JS).browserOrNode().isBrowser && window.location) {
        var url = window.location.href;
        callback({
            url: url
        });
    } else if ((0, _core.JS).browserOrNode().isNode) ;
    else throw new Error("Not supported");
};

},{"@aws-amplify/core":"hZcAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"QNLY3":[function(require,module,exports) {
/*
 * Copyright 2019-2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthError", ()=>AuthError);
parcelHelpers.export(exports, "NoUserPoolError", ()=>NoUserPoolError);
parcelHelpers.export(exports, "authErrorMessages", ()=>authErrorMessages);
var _core = require("@aws-amplify/core");
var _authErrorStrings = require("./common/AuthErrorStrings");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var logger = new (0, _core.ConsoleLogger)("AuthError");
var AuthError = /** @class */ function(_super) {
    __extends(AuthError, _super);
    function AuthError(type) {
        var _this = this;
        var _a = authErrorMessages[type], message = _a.message, log = _a.log;
        _this = _super.call(this, message) || this;
        // Hack for making the custom error class work when transpiled to es5
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        _this.constructor = AuthError;
        Object.setPrototypeOf(_this, AuthError.prototype);
        _this.name = "AuthError";
        _this.log = log || message;
        logger.error(_this.log);
        return _this;
    }
    return AuthError;
}(Error);
var NoUserPoolError = /** @class */ function(_super) {
    __extends(NoUserPoolError, _super);
    function NoUserPoolError(type) {
        var _this = _super.call(this, type) || this;
        // Hack for making the custom error class work when transpiled to es5
        // TODO: Delete the following 2 lines after we change the build target to >= es2015
        _this.constructor = NoUserPoolError;
        Object.setPrototypeOf(_this, NoUserPoolError.prototype);
        _this.name = "NoUserPoolError";
        return _this;
    }
    return NoUserPoolError;
}(AuthError);
var authErrorMessages = {
    noConfig: {
        message: (0, _authErrorStrings.AuthErrorStrings).DEFAULT_MSG,
        log: "\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n				Refer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        "
    },
    missingAuthConfig: {
        message: (0, _authErrorStrings.AuthErrorStrings).DEFAULT_MSG,
        log: "\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run `amplify push` after adding auth via `amplify add auth`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        "
    },
    emptyUsername: {
        message: (0, _authErrorStrings.AuthErrorStrings).EMPTY_USERNAME
    },
    // TODO: should include a list of valid sign-in types
    invalidUsername: {
        message: (0, _authErrorStrings.AuthErrorStrings).INVALID_USERNAME
    },
    emptyPassword: {
        message: (0, _authErrorStrings.AuthErrorStrings).EMPTY_PASSWORD
    },
    emptyCode: {
        message: (0, _authErrorStrings.AuthErrorStrings).EMPTY_CODE
    },
    signUpError: {
        message: (0, _authErrorStrings.AuthErrorStrings).SIGN_UP_ERROR,
        log: "The first parameter should either be non-null string or object"
    },
    noMFA: {
        message: (0, _authErrorStrings.AuthErrorStrings).NO_MFA
    },
    invalidMFA: {
        message: (0, _authErrorStrings.AuthErrorStrings).INVALID_MFA
    },
    emptyChallengeResponse: {
        message: (0, _authErrorStrings.AuthErrorStrings).EMPTY_CHALLENGE
    },
    noUserSession: {
        message: (0, _authErrorStrings.AuthErrorStrings).NO_USER_SESSION
    },
    deviceConfig: {
        message: (0, _authErrorStrings.AuthErrorStrings).DEVICE_CONFIG
    },
    networkError: {
        message: (0, _authErrorStrings.AuthErrorStrings).NETWORK_ERROR
    },
    default: {
        message: (0, _authErrorStrings.AuthErrorStrings).DEFAULT_MSG
    }
};

},{"@aws-amplify/core":"hZcAF","./common/AuthErrorStrings":"foZC5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"foZC5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AuthErrorStrings", ()=>AuthErrorStrings);
var AuthErrorStrings;
(function(AuthErrorStrings) {
    AuthErrorStrings["DEFAULT_MSG"] = "Authentication Error";
    AuthErrorStrings["EMPTY_EMAIL"] = "Email cannot be empty";
    AuthErrorStrings["EMPTY_PHONE"] = "Phone number cannot be empty";
    AuthErrorStrings["EMPTY_USERNAME"] = "Username cannot be empty";
    AuthErrorStrings["INVALID_USERNAME"] = "The username should either be a string or one of the sign in types";
    AuthErrorStrings["EMPTY_PASSWORD"] = "Password cannot be empty";
    AuthErrorStrings["EMPTY_CODE"] = "Confirmation code cannot be empty";
    AuthErrorStrings["SIGN_UP_ERROR"] = "Error creating account";
    AuthErrorStrings["NO_MFA"] = "No valid MFA method provided";
    AuthErrorStrings["INVALID_MFA"] = "Invalid MFA type";
    AuthErrorStrings["EMPTY_CHALLENGE"] = "Challenge response cannot be empty";
    AuthErrorStrings["NO_USER_SESSION"] = "Failed to get the session because the user is empty";
    AuthErrorStrings["NETWORK_ERROR"] = "Network Error";
    AuthErrorStrings["DEVICE_CONFIG"] = "Device tracking has not been configured in this User Pool";
})(AuthErrorStrings || (AuthErrorStrings = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iXrtJ":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserStorageCache", ()=>(0, _browserStorageCache.BrowserStorageCache));
parcelHelpers.export(exports, "InMemoryCache", ()=>(0, _inMemoryCache.InMemoryCache));
var _core = require("@aws-amplify/core");
var _browserStorageCache = require("./BrowserStorageCache");
var _inMemoryCache = require("./InMemoryCache");
/**
 * @deprecated use named import
 */ exports.default = (0, _browserStorageCache.BrowserStorageCache);
(0, _core.Amplify).register((0, _browserStorageCache.BrowserStorageCache));

},{"@aws-amplify/core":"hZcAF","./BrowserStorageCache":"eXmiW","./InMemoryCache":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eXmiW":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BrowserStorageCacheClass", ()=>BrowserStorageCacheClass);
parcelHelpers.export(exports, "BrowserStorageCache", ()=>BrowserStorageCache);
var _utils = require("./Utils");
var _storageCache = require("./StorageCache");
var _core = require("@aws-amplify/core");
var __extends = undefined && undefined.__extends || function() {
    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d, b);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var logger = new (0, _core.ConsoleLogger)("Cache");
/**
 * Customized storage based on the SessionStorage or LocalStorage with LRU implemented
 */ var BrowserStorageCacheClass = /** @class */ function(_super) {
    __extends(BrowserStorageCacheClass, _super);
    /**
     * initialize the cache
     * @param config - the configuration of the cache
     */ function BrowserStorageCacheClass(config) {
        var _this = this;
        var cacheConfig = config ? Object.assign({}, (0, _utils.defaultConfig), config) : (0, _utils.defaultConfig);
        _this = _super.call(this, cacheConfig) || this;
        _this.config.storage = cacheConfig.storage;
        _this.getItem = _this.getItem.bind(_this);
        _this.setItem = _this.setItem.bind(_this);
        _this.removeItem = _this.removeItem.bind(_this);
        return _this;
    }
    /**
     * decrease current size of the cache
     *
     * @private
     * @param amount - the amount of the cache size which needs to be decreased
     */ BrowserStorageCacheClass.prototype._decreaseCurSizeInBytes = function(amount) {
        var curSize = this.getCacheCurSize();
        this.config.storage.setItem(this.cacheCurSizeKey, (curSize - amount).toString());
    };
    /**
     * increase current size of the cache
     *
     * @private
     * @param amount - the amount of the cache szie which need to be increased
     */ BrowserStorageCacheClass.prototype._increaseCurSizeInBytes = function(amount) {
        var curSize = this.getCacheCurSize();
        this.config.storage.setItem(this.cacheCurSizeKey, (curSize + amount).toString());
    };
    /**
     * update the visited time if item has been visited
     *
     * @private
     * @param item - the item which need to be refreshed
     * @param prefixedKey - the key of the item
     *
     * @return the refreshed item
     */ BrowserStorageCacheClass.prototype._refreshItem = function(item, prefixedKey) {
        item.visitedTime = (0, _utils.getCurrTime)();
        this.config.storage.setItem(prefixedKey, JSON.stringify(item));
        return item;
    };
    /**
     * check wether item is expired
     *
     * @private
     * @param key - the key of the item
     *
     * @return true if the item is expired.
     */ BrowserStorageCacheClass.prototype._isExpired = function(key) {
        var text = this.config.storage.getItem(key);
        var item = JSON.parse(text);
        if ((0, _utils.getCurrTime)() >= item.expires) return true;
        return false;
    };
    /**
     * delete item from cache
     *
     * @private
     * @param prefixedKey - the key of the item
     * @param size - optional, the byte size of the item
     */ BrowserStorageCacheClass.prototype._removeItem = function(prefixedKey, size) {
        var itemSize = size ? size : JSON.parse(this.config.storage.getItem(prefixedKey)).byteSize;
        this._decreaseCurSizeInBytes(itemSize);
        // remove the cache item
        this.config.storage.removeItem(prefixedKey);
    };
    /**
     * put item into cache
     *
     * @private
     * @param prefixedKey - the key of the item
     * @param itemData - the value of the item
     * @param itemSizeInBytes - the byte size of the item
     */ BrowserStorageCacheClass.prototype._setItem = function(prefixedKey, item) {
        // update the cache size
        this._increaseCurSizeInBytes(item.byteSize);
        try {
            this.config.storage.setItem(prefixedKey, JSON.stringify(item));
        } catch (setItemErr) {
            // if failed, we need to rollback the cache size
            this._decreaseCurSizeInBytes(item.byteSize);
            logger.error("Failed to set item " + setItemErr);
        }
    };
    /**
     * total space needed when poping out items
     *
     * @private
     * @param itemSize
     *
     * @return total space needed
     */ BrowserStorageCacheClass.prototype._sizeToPop = function(itemSize) {
        var spaceItemNeed = this.getCacheCurSize() + itemSize - this.config.capacityInBytes;
        var cacheThresholdSpace = (1 - this.config.warningThreshold) * this.config.capacityInBytes;
        return spaceItemNeed > cacheThresholdSpace ? spaceItemNeed : cacheThresholdSpace;
    };
    /**
     * see whether cache is full
     *
     * @private
     * @param itemSize
     *
     * @return true if cache is full
     */ BrowserStorageCacheClass.prototype._isCacheFull = function(itemSize) {
        return itemSize + this.getCacheCurSize() > this.config.capacityInBytes;
    };
    /**
     * scan the storage and find out all the keys owned by this cache
     * also clean the expired keys while scanning
     *
     * @private
     *
     * @return array of keys
     */ BrowserStorageCacheClass.prototype._findValidKeys = function() {
        var keys = [];
        var keyInCache = [];
        // get all keys in Storage
        for(var i = 0; i < this.config.storage.length; i += 1)keyInCache.push(this.config.storage.key(i));
        // find those items which belong to our cache and also clean those expired items
        for(var i = 0; i < keyInCache.length; i += 1){
            var key = keyInCache[i];
            if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) {
                if (this._isExpired(key)) this._removeItem(key);
                else keys.push(key);
            }
        }
        return keys;
    };
    /**
     * get all the items we have, sort them by their priority,
     * if priority is same, sort them by their last visited time
     * pop out items from the low priority (5 is the lowest)
     *
     * @private
     * @param keys - all the keys in this cache
     * @param sizeToPop - the total size of the items which needed to be poped out
     */ BrowserStorageCacheClass.prototype._popOutItems = function(keys, sizeToPop) {
        var items = [];
        var remainedSize = sizeToPop;
        // get the items from Storage
        for(var i = 0; i < keys.length; i += 1){
            var val = this.config.storage.getItem(keys[i]);
            if (val != null) {
                var item = JSON.parse(val);
                items.push(item);
            }
        }
        // first compare priority
        // then compare visited time
        items.sort(function(a, b) {
            if (a.priority > b.priority) return -1;
            else if (a.priority < b.priority) return 1;
            else {
                if (a.visitedTime < b.visitedTime) return -1;
                else return 1;
            }
        });
        for(var i = 0; i < items.length; i += 1){
            // pop out items until we have enough room for new item
            this._removeItem(items[i].key, items[i].byteSize);
            remainedSize -= items[i].byteSize;
            if (remainedSize <= 0) return;
        }
    };
    /**
     * Set item into cache. You can put number, string, boolean or object.
     * The cache will first check whether has the same key.
     * If it has, it will delete the old item and then put the new item in
     * The cache will pop out items if it is full
     * You can specify the cache item options. The cache will abort and output a warning:
     * If the key is invalid
     * If the size of the item exceeds itemMaxSize.
     * If the value is undefined
     * If incorrect cache item configuration
     * If error happened with browser storage
     *
     * @param key - the key of the item
     * @param value - the value of the item
     * @param {Object} [options] - optional, the specified meta-data
     */ BrowserStorageCacheClass.prototype.setItem = function(key, value, options) {
        logger.log("Set item: key is " + key + ", value is " + value + " with options: " + options);
        var prefixedKey = this.config.keyPrefix + key;
        // invalid keys
        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {
            logger.warn("Invalid key: should not be empty or 'CurSize'");
            return;
        }
        if (typeof value === "undefined") {
            logger.warn("The value of item should not be undefined!");
            return;
        }
        var cacheItemOptions = {
            priority: options && options.priority !== undefined ? options.priority : this.config.defaultPriority,
            expires: options && options.expires !== undefined ? options.expires : this.config.defaultTTL + (0, _utils.getCurrTime)()
        };
        if (cacheItemOptions.priority < 1 || cacheItemOptions.priority > 5) {
            logger.warn("Invalid parameter: priority due to out or range. It should be within 1 and 5.");
            return;
        }
        var item = this.fillCacheItem(prefixedKey, value, cacheItemOptions);
        // check wether this item is too big;
        if (item.byteSize > this.config.itemMaxSize) {
            logger.warn("Item with key: " + key + " you are trying to put into is too big!");
            return;
        }
        try {
            // first look into the storage, if it exists, delete it.
            var val = this.config.storage.getItem(prefixedKey);
            if (val) this._removeItem(prefixedKey, JSON.parse(val).byteSize);
            // check whether the cache is full
            if (this._isCacheFull(item.byteSize)) {
                var validKeys = this._findValidKeys();
                // check again and then pop out items
                if (this._isCacheFull(item.byteSize)) {
                    var sizeToPop = this._sizeToPop(item.byteSize);
                    this._popOutItems(validKeys, sizeToPop);
                }
            }
            // put item in the cache
            // may failed due to storage full
            this._setItem(prefixedKey, item);
        } catch (e) {
            logger.warn("setItem failed! " + e);
        }
    };
    /**
     * Get item from cache. It will return null if item doesn’t exist or it has been expired.
     * If you specified callback function in the options,
     * then the function will be executed if no such item in the cache
     * and finally put the return value into cache.
     * Please make sure the callback function will return the value you want to put into the cache.
     * The cache will abort output a warning:
     * If the key is invalid
     * If error happened with browser storage
     *
     * @param key - the key of the item
     * @param {Object} [options] - the options of callback function
     *
     * @return - return the value of the item
     */ BrowserStorageCacheClass.prototype.getItem = function(key, options) {
        logger.log("Get item: key is " + key + " with options " + options);
        var ret = null;
        var prefixedKey = this.config.keyPrefix + key;
        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) {
            logger.warn("Invalid key: should not be empty or 'CurSize'");
            return null;
        }
        try {
            ret = this.config.storage.getItem(prefixedKey);
            if (ret != null) {
                if (this._isExpired(prefixedKey)) {
                    // if expired, remove that item and return null
                    this._removeItem(prefixedKey, JSON.parse(ret).byteSize);
                    ret = null;
                } else {
                    // if not expired, great, return the value and refresh it
                    var item = JSON.parse(ret);
                    item = this._refreshItem(item, prefixedKey);
                    return item.data;
                }
            }
            if (options && options.callback !== undefined) {
                var val = options.callback();
                if (val !== null) this.setItem(key, val, options);
                return val;
            }
            return null;
        } catch (e) {
            logger.warn("getItem failed! " + e);
            return null;
        }
    };
    /**
     * remove item from the cache
     * The cache will abort output a warning:
     * If error happened with browser storage
     * @param key - the key of the item
     */ BrowserStorageCacheClass.prototype.removeItem = function(key) {
        logger.log("Remove item: key is " + key);
        var prefixedKey = this.config.keyPrefix + key;
        if (prefixedKey === this.config.keyPrefix || prefixedKey === this.cacheCurSizeKey) return;
        try {
            var val = this.config.storage.getItem(prefixedKey);
            if (val) this._removeItem(prefixedKey, JSON.parse(val).byteSize);
        } catch (e) {
            logger.warn("removeItem failed! " + e);
        }
    };
    /**
     * clear the entire cache
     * The cache will abort output a warning:
     * If error happened with browser storage
     */ BrowserStorageCacheClass.prototype.clear = function() {
        logger.log("Clear Cache");
        var keysToRemove = [];
        for(var i = 0; i < this.config.storage.length; i += 1){
            var key = this.config.storage.key(i);
            if (key.indexOf(this.config.keyPrefix) === 0) keysToRemove.push(key);
        }
        try {
            for(var i = 0; i < keysToRemove.length; i += 1)this.config.storage.removeItem(keysToRemove[i]);
        } catch (e) {
            logger.warn("clear failed! " + e);
        }
    };
    /**
     * Return all the keys in the cache.
     *
     * @return - all keys in the cache
     */ BrowserStorageCacheClass.prototype.getAllKeys = function() {
        var keys = [];
        for(var i = 0; i < this.config.storage.length; i += 1){
            var key = this.config.storage.key(i);
            if (key.indexOf(this.config.keyPrefix) === 0 && key !== this.cacheCurSizeKey) keys.push(key.substring(this.config.keyPrefix.length));
        }
        return keys;
    };
    /**
     * return the current size of the cache
     *
     * @return - current size of the cache
     */ BrowserStorageCacheClass.prototype.getCacheCurSize = function() {
        var ret = this.config.storage.getItem(this.cacheCurSizeKey);
        if (!ret) {
            this.config.storage.setItem(this.cacheCurSizeKey, "0");
            ret = "0";
        }
        return Number(ret);
    };
    /**
     * Return a new instance of cache with customized configuration.
     * @param config - the customized configuration
     *
     * @return - new instance of Cache
     */ BrowserStorageCacheClass.prototype.createInstance = function(config) {
        if (!config.keyPrefix || config.keyPrefix === (0, _utils.defaultConfig).keyPrefix) {
            logger.error("invalid keyPrefix, setting keyPrefix with timeStamp");
            config.keyPrefix = (0, _utils.getCurrTime).toString();
        }
        return new BrowserStorageCacheClass(config);
    };
    return BrowserStorageCacheClass;
}((0, _storageCache.StorageCache));
var BrowserStorageCache = new BrowserStorageCacheClass();
/**
 * @deprecated use named import
 */ exports.default = BrowserStorageCache;

},{"./Utils":"2KCTe","./StorageCache":"kTOM2","@aws-amplify/core":"hZcAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2KCTe":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CacheList", ()=>(0, _cacheListDefault.default));
var _cacheUtils = require("./CacheUtils");
parcelHelpers.exportAll(_cacheUtils, exports);
var _cacheList = require("./CacheList");
var _cacheListDefault = parcelHelpers.interopDefault(_cacheList);

},{"./CacheUtils":"1azcK","./CacheList":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1azcK":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultConfig", ()=>defaultConfig);
/**
 * return the byte size of the string
 * @param str
 */ parcelHelpers.export(exports, "getByteLength", ()=>getByteLength);
/**
 * get current time
 */ parcelHelpers.export(exports, "getCurrTime", ()=>getCurrTime);
/**
 * check if passed value is an integer
 */ parcelHelpers.export(exports, "isInteger", ()=>isInteger);
parcelHelpers.export(exports, "CacheObject", ()=>CacheObject);
var _core = require("@aws-amplify/core");
var defaultConfig = {
    keyPrefix: "aws-amplify-cache",
    capacityInBytes: 1048576,
    itemMaxSize: 210000,
    defaultTTL: 259200000,
    defaultPriority: 5,
    warningThreshold: 0.8,
    // the storage helper will check if localStorage exists,
    // if not, will use a in-memory object instead
    storage: new (0, _core.StorageHelper)().getStorage()
};
function getByteLength(str) {
    var ret = 0;
    ret = str.length;
    for(var i = str.length; i >= 0; i -= 1){
        var charCode = str.charCodeAt(i);
        if (charCode > 0x7f && charCode <= 0x7ff) ret += 1;
        else if (charCode > 0x7ff && charCode <= 0xffff) ret += 2;
        // trail surrogate
        if (charCode >= 0xdc00 && charCode <= 0xdfff) i -= 1;
    }
    return ret;
}
function getCurrTime() {
    var currTime = new Date();
    return currTime.getTime();
}
function isInteger(value) {
    if (Number.isInteger) return Number.isInteger(value);
    return _isInteger(value);
}
function _isInteger(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
}
/**
 * provide an object as the in-memory cache
 */ var store = {};
var CacheObject = /** @class */ function() {
    function CacheObject() {}
    CacheObject.clear = function() {
        store = {};
    };
    CacheObject.getItem = function(key) {
        return store[key] || null;
    };
    CacheObject.setItem = function(key, value) {
        store[key] = value;
    };
    CacheObject.removeItem = function(key) {
        delete store[key];
    };
    return CacheObject;
}();

},{"@aws-amplify/core":"hZcAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kTOM2":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StorageCache", ()=>StorageCache);
var _utils = require("./Utils");
var _core = require("@aws-amplify/core");
var logger = new (0, _core.ConsoleLogger)("StorageCache");
/**
 * Initialization of the cache
 *
 */ var StorageCache = /** @class */ function() {
    /**
     * Initialize the cache
     * @param config - the configuration of the cache
     */ function StorageCache(config) {
        this.config = Object.assign({}, config);
        this.cacheCurSizeKey = this.config.keyPrefix + "CurSize";
        this.checkConfig();
    }
    StorageCache.prototype.getModuleName = function() {
        return "Cache";
    };
    StorageCache.prototype.checkConfig = function() {
        // check configuration
        if (!(0, _utils.isInteger)(this.config.capacityInBytes)) {
            logger.error("Invalid parameter: capacityInBytes. It should be an Integer. Setting back to default.");
            this.config.capacityInBytes = (0, _utils.defaultConfig).capacityInBytes;
        }
        if (!(0, _utils.isInteger)(this.config.itemMaxSize)) {
            logger.error("Invalid parameter: itemMaxSize. It should be an Integer. Setting back to default.");
            this.config.itemMaxSize = (0, _utils.defaultConfig).itemMaxSize;
        }
        if (!(0, _utils.isInteger)(this.config.defaultTTL)) {
            logger.error("Invalid parameter: defaultTTL. It should be an Integer. Setting back to default.");
            this.config.defaultTTL = (0, _utils.defaultConfig).defaultTTL;
        }
        if (!(0, _utils.isInteger)(this.config.defaultPriority)) {
            logger.error("Invalid parameter: defaultPriority. It should be an Integer. Setting back to default.");
            this.config.defaultPriority = (0, _utils.defaultConfig).defaultPriority;
        }
        if (this.config.itemMaxSize > this.config.capacityInBytes) {
            logger.error("Invalid parameter: itemMaxSize. It should be smaller than capacityInBytes. Setting back to default.");
            this.config.itemMaxSize = (0, _utils.defaultConfig).itemMaxSize;
        }
        if (this.config.defaultPriority > 5 || this.config.defaultPriority < 1) {
            logger.error("Invalid parameter: defaultPriority. It should be between 1 and 5. Setting back to default.");
            this.config.defaultPriority = (0, _utils.defaultConfig).defaultPriority;
        }
        if (Number(this.config.warningThreshold) > 1 || Number(this.config.warningThreshold) < 0) {
            logger.error("Invalid parameter: warningThreshold. It should be between 0 and 1. Setting back to default.");
            this.config.warningThreshold = (0, _utils.defaultConfig).warningThreshold;
        }
        // set 5MB limit
        var cacheLimit = 5242880;
        if (this.config.capacityInBytes > cacheLimit) {
            logger.error("Cache Capacity should be less than 5MB. Setting back to default. Setting back to default.");
            this.config.capacityInBytes = (0, _utils.defaultConfig).capacityInBytes;
        }
    };
    /**
     * produce a JSON object with meta-data and data value
     * @param value - the value of the item
     * @param options - optional, the specified meta-data
     *
     * @return - the item which has the meta-data and the value
     */ StorageCache.prototype.fillCacheItem = function(key, value, options) {
        var ret = {
            key: key,
            data: value,
            timestamp: (0, _utils.getCurrTime)(),
            visitedTime: (0, _utils.getCurrTime)(),
            priority: options.priority,
            expires: options.expires,
            type: typeof value,
            byteSize: 0
        };
        ret.byteSize = (0, _utils.getByteLength)(JSON.stringify(ret));
        // for accurate size
        ret.byteSize = (0, _utils.getByteLength)(JSON.stringify(ret));
        return ret;
    };
    /**
     * set cache with customized configuration
     * @param config - customized configuration
     *
     * @return - the current configuration
     */ StorageCache.prototype.configure = function(config) {
        if (!config) return this.config;
        if (config.keyPrefix) logger.warn("Don't try to configure keyPrefix!");
        this.config = Object.assign({}, this.config, config, config.Cache);
        this.checkConfig();
        return this.config;
    };
    return StorageCache;
}();
/**
 * @deprecated use named import
 */ exports.default = StorageCache;

},{"./Utils":"2KCTe","@aws-amplify/core":"hZcAF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ehwm":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Storage", ()=>Storage);
parcelHelpers.export(exports, "StorageClass", ()=>(0, _storage.Storage));
var _storage = require("./Storage");
var _core = require("@aws-amplify/core");
var _providers = require("./providers");
parcelHelpers.exportAll(_providers, exports);
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var logger = new (0, _core.ConsoleLogger)("Storage");
var _instance = null;
var getInstance = function() {
    if (_instance) return _instance;
    logger.debug("Create Storage Instance, debug");
    _instance = new (0, _storage.Storage)();
    _instance.vault = new (0, _storage.Storage)();
    var old_configure = _instance.configure;
    _instance.configure = function(options) {
        logger.debug("storage configure called");
        var vaultConfig = __assign({}, old_configure.call(_instance, options));
        // set level private for each provider for the vault
        Object.keys(vaultConfig).forEach(function(providerName) {
            if (typeof vaultConfig[providerName] !== "string") vaultConfig[providerName] = __assign(__assign({}, vaultConfig[providerName]), {
                level: "private"
            });
        });
        logger.debug("storage vault configure called");
        _instance.vault.configure(vaultConfig);
    };
    return _instance;
};
var Storage = getInstance();
(0, _core.Amplify).register(Storage);
/**
 * @deprecated use named import
 */ exports.default = Storage;

},{"./Storage":"bzVjx","@aws-amplify/core":"hZcAF","./providers":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bzVjx":[function(require,module,exports) {
/*
 * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Storage", ()=>Storage);
var _core = require("@aws-amplify/core");
var _providers = require("./providers");
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _awss3UploadTask = require("./providers/AWSS3UploadTask");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var logger = new (0, _core.ConsoleLogger)("StorageClass");
var DEFAULT_PROVIDER = "AWSS3";
/**
 * Provide storage methods to use AWS S3
 */ var Storage = /** @class */ function() {
    /**
     * Initialize Storage
     * @param {Object} config - Configuration object for storage
     */ function Storage() {
        this._config = {};
        this._pluggables = [];
        this._cancelTokenSourceMap = new WeakMap();
        logger.debug("Storage Options", this._config);
        this.get = this.get.bind(this);
        this.put = this.put.bind(this);
        this.remove = this.remove.bind(this);
        this.list = this.list.bind(this);
    }
    Storage.prototype.getModuleName = function() {
        return "Storage";
    };
    /**
     * add plugin into Storage category
     * @param {Object} pluggable - an instance of the plugin
     */ Storage.prototype.addPluggable = function(pluggable) {
        if (pluggable && pluggable.getCategory() === "Storage") {
            this._pluggables.push(pluggable);
            var config = {};
            config = pluggable.configure(this._config[pluggable.getProviderName()]);
            return config;
        }
    };
    /**
     * Get the plugin object
     * @param providerName - the name of the plugin
     */ Storage.prototype.getPluggable = function(providerName) {
        var pluggable = this._pluggables.find(function(pluggable) {
            return pluggable.getProviderName() === providerName;
        });
        if (pluggable === undefined) {
            logger.debug("No plugin found with providerName", providerName);
            return null;
        } else return pluggable;
    };
    /**
     * Remove the plugin object
     * @param providerName - the name of the plugin
     */ Storage.prototype.removePluggable = function(providerName) {
        this._pluggables = this._pluggables.filter(function(pluggable) {
            return pluggable.getProviderName() !== providerName;
        });
        return;
    };
    /**
     * Configure Storage
     * @param {Object} config - Configuration object for storage
     * @return {Object} - Current configuration
     */ Storage.prototype.configure = function(config) {
        var _this = this;
        logger.debug("configure Storage");
        if (!config) return this._config;
        var amplifyConfig = (0, _core.Parser).parseMobilehubConfig(config);
        var storageKeysFromConfig = Object.keys(amplifyConfig.Storage);
        var storageArrayKeys = [
            "bucket",
            "region",
            "level",
            "track",
            "customPrefix",
            "serverSideEncryption",
            "SSECustomerAlgorithm",
            "SSECustomerKey",
            "SSECustomerKeyMD5",
            "SSEKMSKeyId"
        ];
        var isInStorageArrayKeys = function(k) {
            return storageArrayKeys.some(function(x) {
                return x === k;
            });
        };
        var checkConfigKeysFromArray = function(k) {
            return k.find(function(k) {
                return isInStorageArrayKeys(k);
            });
        };
        if (storageKeysFromConfig && checkConfigKeysFromArray(storageKeysFromConfig) && !amplifyConfig.Storage[DEFAULT_PROVIDER]) amplifyConfig.Storage[DEFAULT_PROVIDER] = {};
        Object.entries(amplifyConfig.Storage).map(function(_a) {
            var _b = __read(_a, 2), key = _b[0], value = _b[1];
            if (key && isInStorageArrayKeys(key) && value !== undefined) {
                amplifyConfig.Storage[DEFAULT_PROVIDER][key] = value;
                delete amplifyConfig.Storage[key];
            }
        });
        // only update new values for each provider
        Object.keys(amplifyConfig.Storage).forEach(function(providerName) {
            if (typeof amplifyConfig.Storage[providerName] !== "string") _this._config[providerName] = __assign(__assign({}, _this._config[providerName]), amplifyConfig.Storage[providerName]);
        });
        this._pluggables.forEach(function(pluggable) {
            pluggable.configure(_this._config[pluggable.getProviderName()]);
        });
        if (this._pluggables.length === 0) this.addPluggable(new (0, _providers.AWSS3Provider)());
        return this._config;
    };
    Storage.prototype.getCancellableTokenSource = function() {
        return (0, _axiosDefault.default).CancelToken.source();
    };
    Storage.prototype.updateRequestToBeCancellable = function(request, cancelTokenSource) {
        this._cancelTokenSourceMap.set(request, cancelTokenSource);
    };
    Storage.prototype.isUploadTask = function(x) {
        return typeof x !== "undefined" && typeof x["pause"] === "function" && typeof x["resume"] === "function";
    };
    Storage.prototype.cancel = function(request, message) {
        if (request instanceof (0, _awss3UploadTask.AWSS3UploadTask)) return request._cancel();
        var cancelTokenSource = this._cancelTokenSourceMap.get(request);
        if (cancelTokenSource) cancelTokenSource.cancel(message);
        else logger.debug("The request does not map to any cancel token");
    };
    Storage.prototype.copy = function(src, dest, config) {
        var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;
        var prov = this._pluggables.find(function(pluggable) {
            return pluggable.getProviderName() === provider;
        });
        if (prov === undefined) {
            logger.debug("No plugin found with providerName", provider);
            return Promise.reject("No plugin found in Storage for the provider");
        }
        var cancelTokenSource = this.getCancellableTokenSource();
        if (typeof prov.copy !== "function") return Promise.reject(".copy is not implemented on provider " + prov.getProviderName());
        var responsePromise = prov.copy(src, dest, __assign(__assign({}, config), {
            cancelTokenSource: cancelTokenSource
        }));
        this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);
        return responsePromise;
    };
    Storage.prototype.get = function(key, config) {
        var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;
        var prov = this._pluggables.find(function(pluggable) {
            return pluggable.getProviderName() === provider;
        });
        if (prov === undefined) {
            logger.debug("No plugin found with providerName", provider);
            return Promise.reject("No plugin found in Storage for the provider");
        }
        var cancelTokenSource = this.getCancellableTokenSource();
        var responsePromise = prov.get(key, __assign(__assign({}, config), {
            cancelTokenSource: cancelTokenSource
        }));
        this.updateRequestToBeCancellable(responsePromise, cancelTokenSource);
        return responsePromise;
    };
    Storage.prototype.isCancelError = function(error) {
        return (0, _axiosDefault.default).isCancel(error);
    };
    Storage.prototype.put = function(key, object, config) {
        var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;
        var prov = this._pluggables.find(function(pluggable) {
            return pluggable.getProviderName() === provider;
        });
        if (prov === undefined) {
            logger.debug("No plugin found with providerName", provider);
            return Promise.reject("No plugin found in Storage for the provider");
        }
        var cancelTokenSource = this.getCancellableTokenSource();
        var response = prov.put(key, object, __assign(__assign({}, config), {
            cancelTokenSource: cancelTokenSource
        }));
        if (!this.isUploadTask(response)) this.updateRequestToBeCancellable(response, cancelTokenSource);
        return response;
    };
    Storage.prototype.remove = function(key, config) {
        var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;
        var prov = this._pluggables.find(function(pluggable) {
            return pluggable.getProviderName() === provider;
        });
        if (prov === undefined) {
            logger.debug("No plugin found with providerName", provider);
            return Promise.reject("No plugin found in Storage for the provider");
        }
        return prov.remove(key, config);
    };
    Storage.prototype.list = function(path, config) {
        var provider = (config === null || config === void 0 ? void 0 : config.provider) || DEFAULT_PROVIDER;
        var prov = this._pluggables.find(function(pluggable) {
            return pluggable.getProviderName() === provider;
        });
        if (prov === undefined) {
            logger.debug("No plugin found with providerName", provider);
            return Promise.reject("No plugin found in Storage for the provider");
        }
        return prov.list(path, config);
    };
    return Storage;
}();
/**
 * @deprecated use named import
 */ exports.default = Storage;

},{"@aws-amplify/core":"hZcAF","./providers":"jg4tz","axios":"jo6P5","./providers/AWSS3UploadTask":"3Sopq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jg4tz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AWSS3Provider", ()=>(0, _awss3Provider.AWSS3Provider));
var _awss3Provider = require("./AWSS3Provider");

},{"./AWSS3Provider":"7EC7n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7EC7n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AWSS3Provider", ()=>AWSS3Provider);
/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var _core = require("@aws-amplify/core");
var _clientS3 = require("@aws-sdk/client-s3");
var _utilFormatUrl = require("@aws-sdk/util-format-url");
var _utilCreateRequest = require("@aws-sdk/util-create-request");
var _s3RequestPresigner = require("@aws-sdk/s3-request-presigner");
var _axiosHttpHandler = require("./axios-http-handler");
var _storageErrorStrings = require("../common/StorageErrorStrings");
var _storageUtils = require("../common/StorageUtils");
var _s3ClientUtils = require("../common/S3ClientUtils");
var _awss3ProviderManagedUpload = require("./AWSS3ProviderManagedUpload");
var _awss3UploadTask = require("./AWSS3UploadTask");
var _storageConstants = require("../common/StorageConstants");
var _events = require("events");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var logger = new (0, _core.ConsoleLogger)("AWSS3Provider");
var DEFAULT_STORAGE_LEVEL = "public";
var DEFAULT_PRESIGN_EXPIRATION = 900;
/**
 * Provide storage methods to use AWS S3
 */ var AWSS3Provider = /** @class */ function() {
    /**
     * Initialize Storage with AWS configurations
     * @param {Object} config - Configuration object for storage
     */ function AWSS3Provider(config) {
        var _this = this;
        this._config = config ? config : {};
        this._storage = new (0, _core.StorageHelper)().getStorage();
        (0, _core.Hub).listen("auth", function(data) {
            var payload = data.payload;
            if (payload.event === "signOut" || payload.event === "signIn") _this._storage.removeItem((0, _storageConstants.UPLOADS_STORAGE_KEY));
        });
        logger.debug("Storage Options", this._config);
    }
    /**
     * get the category of the plugin
     */ AWSS3Provider.prototype.getCategory = function() {
        return AWSS3Provider.CATEGORY;
    };
    /**
     * get provider name of the plugin
     */ AWSS3Provider.prototype.getProviderName = function() {
        return AWSS3Provider.PROVIDER_NAME;
    };
    /**
     * Configure Storage part with aws configuration
     * @param {Object} config - Configuration of the Storage
     * @return {Object} - Current configuration
     */ AWSS3Provider.prototype.configure = function(config) {
        logger.debug("configure Storage", config);
        if (!config) return this._config;
        var amplifyConfig = (0, _core.Parser).parseMobilehubConfig(config);
        this._config = Object.assign({}, this._config, amplifyConfig.Storage);
        if (!this._config.bucket) logger.debug("Do not have bucket yet");
        return this._config;
    };
    AWSS3Provider.prototype.startResumableUpload = function(addTaskInput, config) {
        var s3Client = addTaskInput.s3Client, emitter = addTaskInput.emitter, key = addTaskInput.key, file = addTaskInput.file, params = addTaskInput.params;
        var progressCallback = config.progressCallback, completeCallback = config.completeCallback, errorCallback = config.errorCallback, _a = config.track, track = _a === void 0 ? false : _a;
        if (!(file instanceof Blob)) throw new Error((0, _storageErrorStrings.StorageErrorStrings).INVALID_BLOB);
        emitter.on((0, _awss3UploadTask.TaskEvents).UPLOAD_PROGRESS, function(event) {
            if (progressCallback) {
                if (typeof progressCallback === "function") progressCallback(event);
                else logger.warn("progressCallback should be a function, not a " + typeof progressCallback);
            }
        });
        emitter.on((0, _awss3UploadTask.TaskEvents).UPLOAD_COMPLETE, function(event) {
            if (completeCallback) {
                if (typeof completeCallback === "function") completeCallback(event);
                else logger.warn("completeCallback should be a function, not a " + typeof completeCallback);
            }
        });
        emitter.on((0, _awss3UploadTask.TaskEvents).ERROR, function(err) {
            if (errorCallback) {
                if (typeof errorCallback === "function") errorCallback(err);
                else logger.warn("errorCallback should be a function, not a " + typeof errorCallback);
            }
        });
        // we want to keep this function sync so we defer this promise to AWSS3UploadTask to resolve when it's needed
        // when its doing a final check with _listSingleFile function
        var prefixPromise = (0, _core.Credentials).get().then(function(credentials) {
            var cred = (0, _core.Credentials).shear(credentials);
            return (0, _s3ClientUtils.getPrefix)(__assign(__assign({}, config), {
                credentials: cred
            }));
        });
        var task = new (0, _awss3UploadTask.AWSS3UploadTask)({
            s3Client: s3Client,
            file: file,
            emitter: emitter,
            level: config.level,
            storage: this._storage,
            params: params,
            prefixPromise: prefixPromise
        });
        (0, _storageUtils.dispatchStorageEvent)(track, "upload", {
            method: "put",
            result: "success"
        }, null, "Upload Task created successfully for " + key);
        // automatically start the upload task
        task.resume();
        return task;
    };
    /**
     * Copy an object from a source object to a new object within the same bucket. Can optionally copy files across
     * different level or identityId (if source object's level is 'protected').
     *
     * @async
     * @param {S3CopySource} src - Key and optionally access level and identityId of the source object.
     * @param {S3CopyDestination} dest - Key and optionally access level of the destination object.
     * @param {S3ProviderCopyConfig} [config] - Optional configuration for s3 commands.
     * @return {Promise<S3ProviderCopyOutput>} The key of the copied object.
     */ AWSS3Provider.prototype.copy = function(src, dest, config) {
        return __awaiter(this, void 0, void 0, function() {
            var credentialsOK, opt, acl, bucket, cacheControl, expires, track, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, _a, srcLevel, srcIdentityId, srcKey, _b, destLevel, destKey, srcPrefix, destPrefix, finalSrcKey, finalDestKey, params, s3, error_1;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 1:
                        credentialsOK = _c.sent();
                        if (!credentialsOK || !this._isWithCredentials(this._config)) throw new Error((0, _storageErrorStrings.StorageErrorStrings).NO_CREDENTIALS);
                        opt = Object.assign({}, this._config, config);
                        acl = opt.acl, bucket = opt.bucket, cacheControl = opt.cacheControl, expires = opt.expires, track = opt.track, serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;
                        _a = src.level, srcLevel = _a === void 0 ? DEFAULT_STORAGE_LEVEL : _a, srcIdentityId = src.identityId, srcKey = src.key;
                        _b = dest.level, destLevel = _b === void 0 ? DEFAULT_STORAGE_LEVEL : _b, destKey = dest.key;
                        if (!srcKey || typeof srcKey !== "string") throw new Error((0, _storageErrorStrings.StorageErrorStrings).NO_SRC_KEY);
                        if (!destKey || typeof destKey !== "string") throw new Error((0, _storageErrorStrings.StorageErrorStrings).NO_DEST_KEY);
                        if (srcLevel !== "protected" && srcIdentityId) logger.warn('You may copy files from another user if the source level is "protected", currently it\'s ' + srcLevel);
                        srcPrefix = this._prefix(__assign(__assign(__assign({}, opt), {
                            level: srcLevel
                        }), srcIdentityId && {
                            identityId: srcIdentityId
                        }));
                        destPrefix = this._prefix(__assign(__assign({}, opt), {
                            level: destLevel
                        }));
                        finalSrcKey = bucket + "/" + srcPrefix + srcKey;
                        finalDestKey = "" + destPrefix + destKey;
                        logger.debug("copying " + finalSrcKey + " to " + finalDestKey);
                        params = {
                            Bucket: bucket,
                            CopySource: finalSrcKey,
                            Key: finalDestKey,
                            // Copies over metadata like contentType as well
                            MetadataDirective: "COPY"
                        };
                        if (cacheControl) params.CacheControl = cacheControl;
                        if (expires) params.Expires = expires;
                        if (serverSideEncryption) params.ServerSideEncryption = serverSideEncryption;
                        if (SSECustomerAlgorithm) params.SSECustomerAlgorithm = SSECustomerAlgorithm;
                        if (SSECustomerKey) params.SSECustomerKey = SSECustomerKey;
                        if (SSECustomerKeyMD5) params.SSECustomerKeyMD5 = SSECustomerKeyMD5;
                        if (SSEKMSKeyId) params.SSEKMSKeyId = SSEKMSKeyId;
                        if (acl) params.ACL = acl;
                        s3 = this._createNewS3Client(opt);
                        _c.label = 2;
                    case 2:
                        _c.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            s3.send(new (0, _clientS3.CopyObjectCommand)(params))
                        ];
                    case 3:
                        _c.sent();
                        (0, _storageUtils.dispatchStorageEvent)(track, "copy", {
                            method: "copy",
                            result: "success"
                        }, null, "Copy success from " + srcKey + " to " + destKey);
                        return [
                            2 /*return*/ ,
                            {
                                key: destKey
                            }
                        ];
                    case 4:
                        error_1 = _c.sent();
                        (0, _storageUtils.dispatchStorageEvent)(track, "copy", {
                            method: "copy",
                            result: "failed"
                        }, null, "Copy failed from " + srcKey + " to " + destKey);
                        throw error_1;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3Provider.prototype.get = function(key, config) {
        return __awaiter(this, void 0, void 0, function() {
            var credentialsOK, opt, bucket, download, cacheControl, contentDisposition, contentEncoding, contentLanguage, contentType, expires, track, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, progressCallback, prefix, final_key, emitter, s3, params, getObjectCommand, response, error_2, signer, request, url, _a, error_3;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 1:
                        credentialsOK = _b.sent();
                        if (!credentialsOK || !this._isWithCredentials(this._config)) throw new Error((0, _storageErrorStrings.StorageErrorStrings).NO_CREDENTIALS);
                        opt = Object.assign({}, this._config, config);
                        bucket = opt.bucket, download = opt.download, cacheControl = opt.cacheControl, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, contentLanguage = opt.contentLanguage, contentType = opt.contentType, expires = opt.expires, track = opt.track, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, progressCallback = opt.progressCallback;
                        prefix = this._prefix(opt);
                        final_key = prefix + key;
                        emitter = new _events.EventEmitter();
                        s3 = this._createNewS3Client(opt, emitter);
                        logger.debug("get " + key + " from " + final_key);
                        params = {
                            Bucket: bucket,
                            Key: final_key
                        };
                        // See: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#getObject-property
                        if (cacheControl) params.ResponseCacheControl = cacheControl;
                        if (contentDisposition) params.ResponseContentDisposition = contentDisposition;
                        if (contentEncoding) params.ResponseContentEncoding = contentEncoding;
                        if (contentLanguage) params.ResponseContentLanguage = contentLanguage;
                        if (contentType) params.ResponseContentType = contentType;
                        if (SSECustomerAlgorithm) params.SSECustomerAlgorithm = SSECustomerAlgorithm;
                        if (SSECustomerKey) params.SSECustomerKey = SSECustomerKey;
                        if (SSECustomerKeyMD5) params.SSECustomerKeyMD5 = SSECustomerKeyMD5;
                        if (!(download === true)) return [
                            3 /*break*/ ,
                            5
                        ];
                        getObjectCommand = new (0, _clientS3.GetObjectCommand)(params);
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        if (progressCallback) {
                            if (typeof progressCallback === "function") emitter.on((0, _axiosHttpHandler.SEND_DOWNLOAD_PROGRESS_EVENT), function(progress) {
                                progressCallback(progress);
                            });
                            else logger.warn("progressCallback should be a function, not a " + typeof progressCallback);
                        }
                        return [
                            4 /*yield*/ ,
                            s3.send(getObjectCommand)
                        ];
                    case 3:
                        response = _b.sent();
                        emitter.removeAllListeners((0, _axiosHttpHandler.SEND_DOWNLOAD_PROGRESS_EVENT));
                        (0, _storageUtils.dispatchStorageEvent)(track, "download", {
                            method: "get",
                            result: "success"
                        }, {
                            fileSize: Number(response.Body["size"] || response.Body["length"])
                        }, "Download success for " + key);
                        return [
                            2 /*return*/ ,
                            response
                        ];
                    case 4:
                        error_2 = _b.sent();
                        (0, _storageUtils.dispatchStorageEvent)(track, "download", {
                            method: "get",
                            result: "failed"
                        }, null, "Download failed with " + error_2.message);
                        throw error_2;
                    case 5:
                        _b.trys.push([
                            5,
                            8,
                            ,
                            9
                        ]);
                        signer = new (0, _s3RequestPresigner.S3RequestPresigner)(__assign({}, s3.config));
                        return [
                            4 /*yield*/ ,
                            (0, _utilCreateRequest.createRequest)(s3, new (0, _clientS3.GetObjectCommand)(params))
                        ];
                    case 6:
                        request = _b.sent();
                        _a = (0, _utilFormatUrl.formatUrl);
                        return [
                            4 /*yield*/ ,
                            signer.presign(request, {
                                expiresIn: expires || DEFAULT_PRESIGN_EXPIRATION
                            })
                        ];
                    case 7:
                        url = _a.apply(void 0, [
                            _b.sent()
                        ]);
                        (0, _storageUtils.dispatchStorageEvent)(track, "getSignedUrl", {
                            method: "get",
                            result: "success"
                        }, null, "Signed URL: " + url);
                        return [
                            2 /*return*/ ,
                            url
                        ];
                    case 8:
                        error_3 = _b.sent();
                        logger.warn("get signed url error", error_3);
                        (0, _storageUtils.dispatchStorageEvent)(track, "getSignedUrl", {
                            method: "get",
                            result: "failed"
                        }, null, "Could not get a signed URL for " + key);
                        throw error_3;
                    case 9:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Put a file in S3 bucket specified to configure method
     * @param key - key of the object
     * @param object - File to be put in Amazon S3 bucket
     * @param [config] - Optional configuration for the underlying S3 command
     * @return an instance of AWSS3UploadTask or a promise that resolves to an object with the new object's key on
     * success.
     */ AWSS3Provider.prototype.put = function(key, object, config) {
        var opt = Object.assign({}, this._config, config);
        var bucket = opt.bucket, track = opt.track, progressCallback = opt.progressCallback, level = opt.level, resumable = opt.resumable;
        var contentType = opt.contentType, contentDisposition = opt.contentDisposition, contentEncoding = opt.contentEncoding, cacheControl = opt.cacheControl, expires = opt.expires, metadata = opt.metadata, tagging = opt.tagging, acl = opt.acl;
        var serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;
        var type = contentType ? contentType : "binary/octet-stream";
        var params = {
            Bucket: bucket,
            Key: key,
            Body: object,
            ContentType: type
        };
        if (cacheControl) params.CacheControl = cacheControl;
        if (contentDisposition) params.ContentDisposition = contentDisposition;
        if (contentEncoding) params.ContentEncoding = contentEncoding;
        if (expires) params.Expires = expires;
        if (metadata) params.Metadata = metadata;
        if (tagging) params.Tagging = tagging;
        if (serverSideEncryption) params.ServerSideEncryption = serverSideEncryption;
        if (SSECustomerAlgorithm) params.SSECustomerAlgorithm = SSECustomerAlgorithm;
        if (SSECustomerKey) params.SSECustomerKey = SSECustomerKey;
        if (SSECustomerKeyMD5) params.SSECustomerKeyMD5 = SSECustomerKeyMD5;
        if (SSEKMSKeyId) params.SSEKMSKeyId = SSEKMSKeyId;
        var emitter = new _events.EventEmitter();
        var uploader = new (0, _awss3ProviderManagedUpload.AWSS3ProviderManagedUpload)(params, opt, emitter);
        if (acl) params.ACL = acl;
        if (resumable === true) {
            var s3Client = this._createNewS3Client(opt);
            // we are using aws sdk middleware to inject the prefix to key, this way we don't have to call
            // this._ensureCredentials() which allows us to make this function sync so we can return non-Promise like UploadTask
            s3Client.middlewareStack.add((0, _s3ClientUtils.createPrefixMiddleware)(opt, key), (0, _s3ClientUtils.prefixMiddlewareOptions));
            var addTaskInput = {
                bucket: bucket,
                key: key,
                s3Client: s3Client,
                file: object,
                emitter: emitter,
                accessLevel: level,
                params: params
            };
            // explicitly asserting the type here as Typescript could not infer that resumable is of type true
            return this.startResumableUpload(addTaskInput, config);
        }
        try {
            if (progressCallback) {
                if (typeof progressCallback === "function") emitter.on((0, _axiosHttpHandler.SEND_UPLOAD_PROGRESS_EVENT), function(progress) {
                    progressCallback(progress);
                });
                else logger.warn("progressCallback should be a function, not a " + typeof progressCallback);
            }
            return uploader.upload().then(function(response) {
                logger.debug("upload result", response);
                (0, _storageUtils.dispatchStorageEvent)(track, "upload", {
                    method: "put",
                    result: "success"
                }, null, "Upload success for " + key);
                return {
                    key: key
                };
            });
        } catch (error) {
            logger.warn("error uploading", error);
            (0, _storageUtils.dispatchStorageEvent)(track, "upload", {
                method: "put",
                result: "failed"
            }, null, "Error uploading " + key);
            throw error;
        }
    };
    /**
     * Remove the object for specified key
     * @param {string} key - key of the object
     * @param {S3ProviderRemoveConfig} [config] - Optional configuration for the underlying S3 command
     * @return {Promise<S3ProviderRemoveOutput>} - Promise resolves upon successful removal of the object
     */ AWSS3Provider.prototype.remove = function(key, config) {
        return __awaiter(this, void 0, void 0, function() {
            var credentialsOK, opt, bucket, track, prefix, final_key, s3, params, deleteObjectCommand, response, error_4;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 1:
                        credentialsOK = _a.sent();
                        if (!credentialsOK || !this._isWithCredentials(this._config)) throw new Error((0, _storageErrorStrings.StorageErrorStrings).NO_CREDENTIALS);
                        opt = Object.assign({}, this._config, config);
                        bucket = opt.bucket, track = opt.track;
                        prefix = this._prefix(opt);
                        final_key = prefix + key;
                        s3 = this._createNewS3Client(opt);
                        logger.debug("remove " + key + " from " + final_key);
                        params = {
                            Bucket: bucket,
                            Key: final_key
                        };
                        deleteObjectCommand = new (0, _clientS3.DeleteObjectCommand)(params);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            s3.send(deleteObjectCommand)
                        ];
                    case 3:
                        response = _a.sent();
                        (0, _storageUtils.dispatchStorageEvent)(track, "delete", {
                            method: "remove",
                            result: "success"
                        }, null, "Deleted " + key + " successfully");
                        return [
                            2 /*return*/ ,
                            response
                        ];
                    case 4:
                        error_4 = _a.sent();
                        (0, _storageUtils.dispatchStorageEvent)(track, "delete", {
                            method: "remove",
                            result: "failed"
                        }, null, "Deletion of " + key + " failed with " + error_4);
                        throw error_4;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * List bucket objects relative to the level and prefix specified
     * @param {string} path - the path that contains objects
     * @param {S3ProviderListConfig} [config] - Optional configuration for the underlying S3 command
     * @return {Promise<S3ProviderListOutput>} - Promise resolves to list of keys, eTags, lastModified and file size for
     * all objects in path
     */ AWSS3Provider.prototype.list = function(path, config) {
        return __awaiter(this, void 0, void 0, function() {
            var credentialsOK, opt, bucket, track, maxKeys, prefix, final_path, s3, params, listObjectsCommand, response, list, error_5;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._ensureCredentials()
                        ];
                    case 1:
                        credentialsOK = _a.sent();
                        if (!credentialsOK || !this._isWithCredentials(this._config)) throw new Error((0, _storageErrorStrings.StorageErrorStrings).NO_CREDENTIALS);
                        opt = Object.assign({}, this._config, config);
                        bucket = opt.bucket, track = opt.track, maxKeys = opt.maxKeys;
                        prefix = this._prefix(opt);
                        final_path = prefix + path;
                        s3 = this._createNewS3Client(opt);
                        logger.debug("list " + path + " from " + final_path);
                        params = {
                            Bucket: bucket,
                            Prefix: final_path,
                            MaxKeys: maxKeys
                        };
                        listObjectsCommand = new (0, _clientS3.ListObjectsCommand)(params);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            s3.send(listObjectsCommand)
                        ];
                    case 3:
                        response = _a.sent();
                        list = [];
                        if (response && response.Contents) list = response.Contents.map(function(item) {
                            return {
                                key: item.Key.substr(prefix.length),
                                eTag: item.ETag,
                                lastModified: item.LastModified,
                                size: item.Size
                            };
                        });
                        (0, _storageUtils.dispatchStorageEvent)(track, "list", {
                            method: "list",
                            result: "success"
                        }, null, list.length + " items returned from list operation");
                        logger.debug("list", list);
                        return [
                            2 /*return*/ ,
                            list
                        ];
                    case 4:
                        error_5 = _a.sent();
                        logger.warn("list error", error_5);
                        (0, _storageUtils.dispatchStorageEvent)(track, "list", {
                            method: "list",
                            result: "failed"
                        }, null, "Listing items failed: " + error_5.message);
                        throw error_5;
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3Provider.prototype._ensureCredentials = function() {
        return __awaiter(this, void 0, void 0, function() {
            var credentials, cred, error_6;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            (0, _core.Credentials).get()
                        ];
                    case 1:
                        credentials = _a.sent();
                        if (!credentials) return [
                            2 /*return*/ ,
                            false
                        ];
                        cred = (0, _core.Credentials).shear(credentials);
                        logger.debug("set credentials for storage", cred);
                        this._config.credentials = cred;
                        return [
                            2 /*return*/ ,
                            true
                        ];
                    case 2:
                        error_6 = _a.sent();
                        logger.warn("ensure credentials error", error_6);
                        return [
                            2 /*return*/ ,
                            false
                        ];
                    case 3:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3Provider.prototype._isWithCredentials = function(config) {
        return typeof config === "object" && config.hasOwnProperty("credentials");
    };
    AWSS3Provider.prototype._prefix = function(config) {
        var credentials = config.credentials, level = config.level;
        var customPrefix = config.customPrefix || {};
        var identityId = config.identityId || credentials.identityId;
        var privatePath = (customPrefix.private !== undefined ? customPrefix.private : "private/") + identityId + "/";
        var protectedPath = (customPrefix.protected !== undefined ? customPrefix.protected : "protected/") + identityId + "/";
        var publicPath = customPrefix.public !== undefined ? customPrefix.public : "public/";
        switch(level){
            case "private":
                return privatePath;
            case "protected":
                return protectedPath;
            default:
                return publicPath;
        }
    };
    /**
     * Creates an S3 client with new V3 aws sdk
     */ AWSS3Provider.prototype._createNewS3Client = function(config, emitter) {
        var s3client = (0, _s3ClientUtils.createS3Client)(config, emitter);
        s3client.middlewareStack.add((0, _s3ClientUtils.autoAdjustClockskewMiddleware)(s3client.config), (0, _s3ClientUtils.autoAdjustClockskewMiddlewareOptions));
        return s3client;
    };
    AWSS3Provider.CATEGORY = "Storage";
    AWSS3Provider.PROVIDER_NAME = "AWSS3";
    return AWSS3Provider;
}();
/**
 * @deprecated use named import
 */ exports.default = AWSS3Provider;

},{"@aws-amplify/core":"hZcAF","@aws-sdk/client-s3":"9MDBM","@aws-sdk/util-format-url":"dWoUW","@aws-sdk/util-create-request":"fvvQv","@aws-sdk/s3-request-presigner":"jryPH","./axios-http-handler":"hL9Ok","../common/StorageErrorStrings":"3IP7f","../common/StorageUtils":"zJioP","../common/S3ClientUtils":"2rcWH","./AWSS3ProviderManagedUpload":"1zbOk","./AWSS3UploadTask":"3Sopq","../common/StorageConstants":"lqkiw","events":"1VQLm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9MDBM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _s3Client = require("./S3Client");
parcelHelpers.exportAll(_s3Client, exports);
var _s3 = require("./S3");
parcelHelpers.exportAll(_s3, exports);
var _abortMultipartUploadCommand = require("./commands/AbortMultipartUploadCommand");
parcelHelpers.exportAll(_abortMultipartUploadCommand, exports);
var _completeMultipartUploadCommand = require("./commands/CompleteMultipartUploadCommand");
parcelHelpers.exportAll(_completeMultipartUploadCommand, exports);
var _copyObjectCommand = require("./commands/CopyObjectCommand");
parcelHelpers.exportAll(_copyObjectCommand, exports);
var _createBucketCommand = require("./commands/CreateBucketCommand");
parcelHelpers.exportAll(_createBucketCommand, exports);
var _createMultipartUploadCommand = require("./commands/CreateMultipartUploadCommand");
parcelHelpers.exportAll(_createMultipartUploadCommand, exports);
var _deleteBucketCommand = require("./commands/DeleteBucketCommand");
parcelHelpers.exportAll(_deleteBucketCommand, exports);
var _deleteBucketAnalyticsConfigurationCommand = require("./commands/DeleteBucketAnalyticsConfigurationCommand");
parcelHelpers.exportAll(_deleteBucketAnalyticsConfigurationCommand, exports);
var _deleteBucketCorsCommand = require("./commands/DeleteBucketCorsCommand");
parcelHelpers.exportAll(_deleteBucketCorsCommand, exports);
var _deleteBucketEncryptionCommand = require("./commands/DeleteBucketEncryptionCommand");
parcelHelpers.exportAll(_deleteBucketEncryptionCommand, exports);
var _deleteBucketIntelligentTieringConfigurationCommand = require("./commands/DeleteBucketIntelligentTieringConfigurationCommand");
parcelHelpers.exportAll(_deleteBucketIntelligentTieringConfigurationCommand, exports);
var _deleteBucketInventoryConfigurationCommand = require("./commands/DeleteBucketInventoryConfigurationCommand");
parcelHelpers.exportAll(_deleteBucketInventoryConfigurationCommand, exports);
var _deleteBucketLifecycleCommand = require("./commands/DeleteBucketLifecycleCommand");
parcelHelpers.exportAll(_deleteBucketLifecycleCommand, exports);
var _deleteBucketMetricsConfigurationCommand = require("./commands/DeleteBucketMetricsConfigurationCommand");
parcelHelpers.exportAll(_deleteBucketMetricsConfigurationCommand, exports);
var _deleteBucketOwnershipControlsCommand = require("./commands/DeleteBucketOwnershipControlsCommand");
parcelHelpers.exportAll(_deleteBucketOwnershipControlsCommand, exports);
var _deleteBucketPolicyCommand = require("./commands/DeleteBucketPolicyCommand");
parcelHelpers.exportAll(_deleteBucketPolicyCommand, exports);
var _deleteBucketReplicationCommand = require("./commands/DeleteBucketReplicationCommand");
parcelHelpers.exportAll(_deleteBucketReplicationCommand, exports);
var _deleteBucketTaggingCommand = require("./commands/DeleteBucketTaggingCommand");
parcelHelpers.exportAll(_deleteBucketTaggingCommand, exports);
var _deleteBucketWebsiteCommand = require("./commands/DeleteBucketWebsiteCommand");
parcelHelpers.exportAll(_deleteBucketWebsiteCommand, exports);
var _deleteObjectCommand = require("./commands/DeleteObjectCommand");
parcelHelpers.exportAll(_deleteObjectCommand, exports);
var _deleteObjectsCommand = require("./commands/DeleteObjectsCommand");
parcelHelpers.exportAll(_deleteObjectsCommand, exports);
var _deleteObjectTaggingCommand = require("./commands/DeleteObjectTaggingCommand");
parcelHelpers.exportAll(_deleteObjectTaggingCommand, exports);
var _deletePublicAccessBlockCommand = require("./commands/DeletePublicAccessBlockCommand");
parcelHelpers.exportAll(_deletePublicAccessBlockCommand, exports);
var _getBucketAccelerateConfigurationCommand = require("./commands/GetBucketAccelerateConfigurationCommand");
parcelHelpers.exportAll(_getBucketAccelerateConfigurationCommand, exports);
var _getBucketAclCommand = require("./commands/GetBucketAclCommand");
parcelHelpers.exportAll(_getBucketAclCommand, exports);
var _getBucketAnalyticsConfigurationCommand = require("./commands/GetBucketAnalyticsConfigurationCommand");
parcelHelpers.exportAll(_getBucketAnalyticsConfigurationCommand, exports);
var _getBucketCorsCommand = require("./commands/GetBucketCorsCommand");
parcelHelpers.exportAll(_getBucketCorsCommand, exports);
var _getBucketEncryptionCommand = require("./commands/GetBucketEncryptionCommand");
parcelHelpers.exportAll(_getBucketEncryptionCommand, exports);
var _getBucketIntelligentTieringConfigurationCommand = require("./commands/GetBucketIntelligentTieringConfigurationCommand");
parcelHelpers.exportAll(_getBucketIntelligentTieringConfigurationCommand, exports);
var _getBucketInventoryConfigurationCommand = require("./commands/GetBucketInventoryConfigurationCommand");
parcelHelpers.exportAll(_getBucketInventoryConfigurationCommand, exports);
var _getBucketLifecycleConfigurationCommand = require("./commands/GetBucketLifecycleConfigurationCommand");
parcelHelpers.exportAll(_getBucketLifecycleConfigurationCommand, exports);
var _getBucketLocationCommand = require("./commands/GetBucketLocationCommand");
parcelHelpers.exportAll(_getBucketLocationCommand, exports);
var _getBucketLoggingCommand = require("./commands/GetBucketLoggingCommand");
parcelHelpers.exportAll(_getBucketLoggingCommand, exports);
var _getBucketMetricsConfigurationCommand = require("./commands/GetBucketMetricsConfigurationCommand");
parcelHelpers.exportAll(_getBucketMetricsConfigurationCommand, exports);
var _getBucketNotificationConfigurationCommand = require("./commands/GetBucketNotificationConfigurationCommand");
parcelHelpers.exportAll(_getBucketNotificationConfigurationCommand, exports);
var _getBucketOwnershipControlsCommand = require("./commands/GetBucketOwnershipControlsCommand");
parcelHelpers.exportAll(_getBucketOwnershipControlsCommand, exports);
var _getBucketPolicyCommand = require("./commands/GetBucketPolicyCommand");
parcelHelpers.exportAll(_getBucketPolicyCommand, exports);
var _getBucketPolicyStatusCommand = require("./commands/GetBucketPolicyStatusCommand");
parcelHelpers.exportAll(_getBucketPolicyStatusCommand, exports);
var _getBucketReplicationCommand = require("./commands/GetBucketReplicationCommand");
parcelHelpers.exportAll(_getBucketReplicationCommand, exports);
var _getBucketRequestPaymentCommand = require("./commands/GetBucketRequestPaymentCommand");
parcelHelpers.exportAll(_getBucketRequestPaymentCommand, exports);
var _getBucketTaggingCommand = require("./commands/GetBucketTaggingCommand");
parcelHelpers.exportAll(_getBucketTaggingCommand, exports);
var _getBucketVersioningCommand = require("./commands/GetBucketVersioningCommand");
parcelHelpers.exportAll(_getBucketVersioningCommand, exports);
var _getBucketWebsiteCommand = require("./commands/GetBucketWebsiteCommand");
parcelHelpers.exportAll(_getBucketWebsiteCommand, exports);
var _getObjectCommand = require("./commands/GetObjectCommand");
parcelHelpers.exportAll(_getObjectCommand, exports);
var _getObjectAclCommand = require("./commands/GetObjectAclCommand");
parcelHelpers.exportAll(_getObjectAclCommand, exports);
var _getObjectLegalHoldCommand = require("./commands/GetObjectLegalHoldCommand");
parcelHelpers.exportAll(_getObjectLegalHoldCommand, exports);
var _getObjectLockConfigurationCommand = require("./commands/GetObjectLockConfigurationCommand");
parcelHelpers.exportAll(_getObjectLockConfigurationCommand, exports);
var _getObjectRetentionCommand = require("./commands/GetObjectRetentionCommand");
parcelHelpers.exportAll(_getObjectRetentionCommand, exports);
var _getObjectTaggingCommand = require("./commands/GetObjectTaggingCommand");
parcelHelpers.exportAll(_getObjectTaggingCommand, exports);
var _getObjectTorrentCommand = require("./commands/GetObjectTorrentCommand");
parcelHelpers.exportAll(_getObjectTorrentCommand, exports);
var _getPublicAccessBlockCommand = require("./commands/GetPublicAccessBlockCommand");
parcelHelpers.exportAll(_getPublicAccessBlockCommand, exports);
var _headBucketCommand = require("./commands/HeadBucketCommand");
parcelHelpers.exportAll(_headBucketCommand, exports);
var _waitForBucketExists = require("./waiters/waitForBucketExists");
parcelHelpers.exportAll(_waitForBucketExists, exports);
var _headObjectCommand = require("./commands/HeadObjectCommand");
parcelHelpers.exportAll(_headObjectCommand, exports);
var _waitForObjectExists = require("./waiters/waitForObjectExists");
parcelHelpers.exportAll(_waitForObjectExists, exports);
var _listBucketAnalyticsConfigurationsCommand = require("./commands/ListBucketAnalyticsConfigurationsCommand");
parcelHelpers.exportAll(_listBucketAnalyticsConfigurationsCommand, exports);
var _listBucketIntelligentTieringConfigurationsCommand = require("./commands/ListBucketIntelligentTieringConfigurationsCommand");
parcelHelpers.exportAll(_listBucketIntelligentTieringConfigurationsCommand, exports);
var _listBucketInventoryConfigurationsCommand = require("./commands/ListBucketInventoryConfigurationsCommand");
parcelHelpers.exportAll(_listBucketInventoryConfigurationsCommand, exports);
var _listBucketMetricsConfigurationsCommand = require("./commands/ListBucketMetricsConfigurationsCommand");
parcelHelpers.exportAll(_listBucketMetricsConfigurationsCommand, exports);
var _listBucketsCommand = require("./commands/ListBucketsCommand");
parcelHelpers.exportAll(_listBucketsCommand, exports);
var _listMultipartUploadsCommand = require("./commands/ListMultipartUploadsCommand");
parcelHelpers.exportAll(_listMultipartUploadsCommand, exports);
var _listObjectsCommand = require("./commands/ListObjectsCommand");
parcelHelpers.exportAll(_listObjectsCommand, exports);
var _listObjectsV2Command = require("./commands/ListObjectsV2Command");
parcelHelpers.exportAll(_listObjectsV2Command, exports);
var _listObjectsV2Paginator = require("./pagination/ListObjectsV2Paginator");
parcelHelpers.exportAll(_listObjectsV2Paginator, exports);
var _listObjectVersionsCommand = require("./commands/ListObjectVersionsCommand");
parcelHelpers.exportAll(_listObjectVersionsCommand, exports);
var _listPartsCommand = require("./commands/ListPartsCommand");
parcelHelpers.exportAll(_listPartsCommand, exports);
var _listPartsPaginator = require("./pagination/ListPartsPaginator");
parcelHelpers.exportAll(_listPartsPaginator, exports);
var _putBucketAccelerateConfigurationCommand = require("./commands/PutBucketAccelerateConfigurationCommand");
parcelHelpers.exportAll(_putBucketAccelerateConfigurationCommand, exports);
var _putBucketAclCommand = require("./commands/PutBucketAclCommand");
parcelHelpers.exportAll(_putBucketAclCommand, exports);
var _putBucketAnalyticsConfigurationCommand = require("./commands/PutBucketAnalyticsConfigurationCommand");
parcelHelpers.exportAll(_putBucketAnalyticsConfigurationCommand, exports);
var _putBucketCorsCommand = require("./commands/PutBucketCorsCommand");
parcelHelpers.exportAll(_putBucketCorsCommand, exports);
var _putBucketEncryptionCommand = require("./commands/PutBucketEncryptionCommand");
parcelHelpers.exportAll(_putBucketEncryptionCommand, exports);
var _putBucketIntelligentTieringConfigurationCommand = require("./commands/PutBucketIntelligentTieringConfigurationCommand");
parcelHelpers.exportAll(_putBucketIntelligentTieringConfigurationCommand, exports);
var _putBucketInventoryConfigurationCommand = require("./commands/PutBucketInventoryConfigurationCommand");
parcelHelpers.exportAll(_putBucketInventoryConfigurationCommand, exports);
var _putBucketLifecycleConfigurationCommand = require("./commands/PutBucketLifecycleConfigurationCommand");
parcelHelpers.exportAll(_putBucketLifecycleConfigurationCommand, exports);
var _putBucketLoggingCommand = require("./commands/PutBucketLoggingCommand");
parcelHelpers.exportAll(_putBucketLoggingCommand, exports);
var _putBucketMetricsConfigurationCommand = require("./commands/PutBucketMetricsConfigurationCommand");
parcelHelpers.exportAll(_putBucketMetricsConfigurationCommand, exports);
var _putBucketNotificationConfigurationCommand = require("./commands/PutBucketNotificationConfigurationCommand");
parcelHelpers.exportAll(_putBucketNotificationConfigurationCommand, exports);
var _putBucketOwnershipControlsCommand = require("./commands/PutBucketOwnershipControlsCommand");
parcelHelpers.exportAll(_putBucketOwnershipControlsCommand, exports);
var _putBucketPolicyCommand = require("./commands/PutBucketPolicyCommand");
parcelHelpers.exportAll(_putBucketPolicyCommand, exports);
var _putBucketReplicationCommand = require("./commands/PutBucketReplicationCommand");
parcelHelpers.exportAll(_putBucketReplicationCommand, exports);
var _putBucketRequestPaymentCommand = require("./commands/PutBucketRequestPaymentCommand");
parcelHelpers.exportAll(_putBucketRequestPaymentCommand, exports);
var _putBucketTaggingCommand = require("./commands/PutBucketTaggingCommand");
parcelHelpers.exportAll(_putBucketTaggingCommand, exports);
var _putBucketVersioningCommand = require("./commands/PutBucketVersioningCommand");
parcelHelpers.exportAll(_putBucketVersioningCommand, exports);
var _putBucketWebsiteCommand = require("./commands/PutBucketWebsiteCommand");
parcelHelpers.exportAll(_putBucketWebsiteCommand, exports);
var _putObjectCommand = require("./commands/PutObjectCommand");
parcelHelpers.exportAll(_putObjectCommand, exports);
var _putObjectAclCommand = require("./commands/PutObjectAclCommand");
parcelHelpers.exportAll(_putObjectAclCommand, exports);
var _putObjectLegalHoldCommand = require("./commands/PutObjectLegalHoldCommand");
parcelHelpers.exportAll(_putObjectLegalHoldCommand, exports);
var _putObjectLockConfigurationCommand = require("./commands/PutObjectLockConfigurationCommand");
parcelHelpers.exportAll(_putObjectLockConfigurationCommand, exports);
var _putObjectRetentionCommand = require("./commands/PutObjectRetentionCommand");
parcelHelpers.exportAll(_putObjectRetentionCommand, exports);
var _putObjectTaggingCommand = require("./commands/PutObjectTaggingCommand");
parcelHelpers.exportAll(_putObjectTaggingCommand, exports);
var _putPublicAccessBlockCommand = require("./commands/PutPublicAccessBlockCommand");
parcelHelpers.exportAll(_putPublicAccessBlockCommand, exports);
var _restoreObjectCommand = require("./commands/RestoreObjectCommand");
parcelHelpers.exportAll(_restoreObjectCommand, exports);
var _selectObjectContentCommand = require("./commands/SelectObjectContentCommand");
parcelHelpers.exportAll(_selectObjectContentCommand, exports);
var _uploadPartCommand = require("./commands/UploadPartCommand");
parcelHelpers.exportAll(_uploadPartCommand, exports);
var _uploadPartCopyCommand = require("./commands/UploadPartCopyCommand");
parcelHelpers.exportAll(_uploadPartCopyCommand, exports);
var _interfaces = require("./pagination/Interfaces");
parcelHelpers.exportAll(_interfaces, exports);
var _index = require("./models/index");
parcelHelpers.exportAll(_index, exports);

},{"./S3Client":"8ATBr","./S3":false,"./commands/AbortMultipartUploadCommand":"7a6Hn","./commands/CompleteMultipartUploadCommand":"ccWCL","./commands/CopyObjectCommand":"1n9Ix","./commands/CreateBucketCommand":false,"./commands/CreateMultipartUploadCommand":"3tgEc","./commands/DeleteBucketCommand":false,"./commands/DeleteBucketAnalyticsConfigurationCommand":false,"./commands/DeleteBucketCorsCommand":false,"./commands/DeleteBucketEncryptionCommand":false,"./commands/DeleteBucketIntelligentTieringConfigurationCommand":false,"./commands/DeleteBucketInventoryConfigurationCommand":false,"./commands/DeleteBucketLifecycleCommand":false,"./commands/DeleteBucketMetricsConfigurationCommand":false,"./commands/DeleteBucketOwnershipControlsCommand":false,"./commands/DeleteBucketPolicyCommand":false,"./commands/DeleteBucketReplicationCommand":false,"./commands/DeleteBucketTaggingCommand":false,"./commands/DeleteBucketWebsiteCommand":false,"./commands/DeleteObjectCommand":"3hER1","./commands/DeleteObjectsCommand":false,"./commands/DeleteObjectTaggingCommand":false,"./commands/DeletePublicAccessBlockCommand":false,"./commands/GetBucketAccelerateConfigurationCommand":false,"./commands/GetBucketAclCommand":false,"./commands/GetBucketAnalyticsConfigurationCommand":false,"./commands/GetBucketCorsCommand":false,"./commands/GetBucketEncryptionCommand":false,"./commands/GetBucketIntelligentTieringConfigurationCommand":false,"./commands/GetBucketInventoryConfigurationCommand":false,"./commands/GetBucketLifecycleConfigurationCommand":false,"./commands/GetBucketLocationCommand":false,"./commands/GetBucketLoggingCommand":false,"./commands/GetBucketMetricsConfigurationCommand":false,"./commands/GetBucketNotificationConfigurationCommand":false,"./commands/GetBucketOwnershipControlsCommand":false,"./commands/GetBucketPolicyCommand":false,"./commands/GetBucketPolicyStatusCommand":false,"./commands/GetBucketReplicationCommand":false,"./commands/GetBucketRequestPaymentCommand":false,"./commands/GetBucketTaggingCommand":false,"./commands/GetBucketVersioningCommand":false,"./commands/GetBucketWebsiteCommand":false,"./commands/GetObjectCommand":"jcWf6","./commands/GetObjectAclCommand":false,"./commands/GetObjectLegalHoldCommand":false,"./commands/GetObjectLockConfigurationCommand":false,"./commands/GetObjectRetentionCommand":false,"./commands/GetObjectTaggingCommand":false,"./commands/GetObjectTorrentCommand":false,"./commands/GetPublicAccessBlockCommand":false,"./commands/HeadBucketCommand":false,"./waiters/waitForBucketExists":false,"./commands/HeadObjectCommand":false,"./waiters/waitForObjectExists":false,"./commands/ListBucketAnalyticsConfigurationsCommand":false,"./commands/ListBucketIntelligentTieringConfigurationsCommand":false,"./commands/ListBucketInventoryConfigurationsCommand":false,"./commands/ListBucketMetricsConfigurationsCommand":false,"./commands/ListBucketsCommand":false,"./commands/ListMultipartUploadsCommand":false,"./commands/ListObjectsCommand":"6EC31","./commands/ListObjectsV2Command":"fYZVF","./pagination/ListObjectsV2Paginator":false,"./commands/ListObjectVersionsCommand":false,"./commands/ListPartsCommand":"7kGlR","./pagination/ListPartsPaginator":false,"./commands/PutBucketAccelerateConfigurationCommand":false,"./commands/PutBucketAclCommand":false,"./commands/PutBucketAnalyticsConfigurationCommand":false,"./commands/PutBucketCorsCommand":false,"./commands/PutBucketEncryptionCommand":false,"./commands/PutBucketIntelligentTieringConfigurationCommand":false,"./commands/PutBucketInventoryConfigurationCommand":false,"./commands/PutBucketLifecycleConfigurationCommand":false,"./commands/PutBucketLoggingCommand":false,"./commands/PutBucketMetricsConfigurationCommand":false,"./commands/PutBucketNotificationConfigurationCommand":false,"./commands/PutBucketOwnershipControlsCommand":false,"./commands/PutBucketPolicyCommand":false,"./commands/PutBucketReplicationCommand":false,"./commands/PutBucketRequestPaymentCommand":false,"./commands/PutBucketTaggingCommand":false,"./commands/PutBucketVersioningCommand":false,"./commands/PutBucketWebsiteCommand":false,"./commands/PutObjectCommand":"1oKpM","./commands/PutObjectAclCommand":false,"./commands/PutObjectLegalHoldCommand":false,"./commands/PutObjectLockConfigurationCommand":false,"./commands/PutObjectRetentionCommand":false,"./commands/PutObjectTaggingCommand":false,"./commands/PutPublicAccessBlockCommand":false,"./commands/RestoreObjectCommand":false,"./commands/SelectObjectContentCommand":false,"./commands/UploadPartCommand":"lqTC6","./commands/UploadPartCopyCommand":false,"./pagination/Interfaces":false,"./models/index":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ATBr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "S3Client", ()=>S3Client);
var _tslib = require("tslib");
var _runtimeConfig = require("./runtimeConfig");
var _configResolver = require("@aws-sdk/config-resolver");
var _eventstreamSerdeConfigResolver = require("@aws-sdk/eventstream-serde-config-resolver");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareContentLength = require("@aws-sdk/middleware-content-length");
var _middlewareExpectContinue = require("@aws-sdk/middleware-expect-continue");
var _middlewareHostHeader = require("@aws-sdk/middleware-host-header");
var _middlewareLogger = require("@aws-sdk/middleware-logger");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _middlewareSdkS3 = require("@aws-sdk/middleware-sdk-s3");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _middlewareUserAgent = require("@aws-sdk/middleware-user-agent");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p></p>
 */ var S3Client = /** @class */ function(_super) {
    (0, _tslib.__extends)(S3Client, _super);
    function S3Client(configuration) {
        var _this = this;
        var _config_0 = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _runtimeConfig.ClientDefaultValues)), configuration);
        var _config_1 = (0, _configResolver.resolveRegionConfig)(_config_0);
        var _config_2 = (0, _configResolver.resolveEndpointsConfig)(_config_1);
        var _config_3 = (0, _middlewareSigning.resolveAwsAuthConfig)(_config_2);
        var _config_4 = (0, _middlewareRetry.resolveRetryConfig)(_config_3);
        var _config_5 = (0, _middlewareHostHeader.resolveHostHeaderConfig)(_config_4);
        var _config_6 = (0, _middlewareBucketEndpoint.resolveBucketEndpointConfig)(_config_5);
        var _config_7 = (0, _middlewareUserAgent.resolveUserAgentConfig)(_config_6);
        var _config_8 = (0, _eventstreamSerdeConfigResolver.resolveEventStreamSerdeConfig)(_config_7);
        _this = _super.call(this, _config_8) || this;
        _this.config = _config_8;
        _this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareRetry.getRetryPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareContentLength.getContentLengthPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareHostHeader.getHostHeaderPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareLogger.getLoggerPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareSdkS3.getValidateBucketNamePlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareSdkS3.getUseRegionalEndpointPlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareExpectContinue.getAddExpectContinuePlugin)(_this.config));
        _this.middlewareStack.use((0, _middlewareUserAgent.getUserAgentPlugin)(_this.config));
        return _this;
    }
    S3Client.prototype.destroy = function() {
        _super.prototype.destroy.call(this);
    };
    return S3Client;
}((0, _smithyClient.Client));

},{"tslib":"lRdW5","./runtimeConfig":"3dcdq","@aws-sdk/config-resolver":"cd0W3","@aws-sdk/eventstream-serde-config-resolver":"bRv2r","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-content-length":"kUr8i","@aws-sdk/middleware-expect-continue":"fDGZX","@aws-sdk/middleware-host-header":"fDojh","@aws-sdk/middleware-logger":"b6LDm","@aws-sdk/middleware-retry":"hgahj","@aws-sdk/middleware-sdk-s3":"km3Di","@aws-sdk/middleware-signing":"7xrR2","@aws-sdk/middleware-user-agent":"7Khhc","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3dcdq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientDefaultValues", ()=>ClientDefaultValues);
var _tslib = require("tslib");
var _packageJson = require("./package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
var _sha256Browser = require("@aws-crypto/sha256-browser");
var _eventstreamSerdeBrowser = require("@aws-sdk/eventstream-serde-browser");
var _fetchHttpHandler = require("@aws-sdk/fetch-http-handler");
var _hashBlobBrowser = require("@aws-sdk/hash-blob-browser");
var _invalidDependency = require("@aws-sdk/invalid-dependency");
var _md5Js = require("@aws-sdk/md5-js");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _utilBase64Browser = require("@aws-sdk/util-base64-browser");
var _utilBodyLengthBrowser = require("@aws-sdk/util-body-length-browser");
var _utilUserAgentBrowser = require("@aws-sdk/util-user-agent-browser");
var _utilUtf8Browser = require("@aws-sdk/util-utf8-browser");
var _runtimeConfigShared = require("./runtimeConfig.shared");
var ClientDefaultValues = (0, _tslib.__assign)((0, _tslib.__assign)({}, (0, _runtimeConfigShared.ClientSharedValues)), {
    runtime: "browser",
    base64Decoder: (0, _utilBase64Browser.fromBase64),
    base64Encoder: (0, _utilBase64Browser.toBase64),
    bodyLengthChecker: (0, _utilBodyLengthBrowser.calculateBodyLength),
    credentialDefaultProvider: function(_) {
        return function() {
            return Promise.reject(new Error("Credential is missing"));
        };
    },
    defaultUserAgentProvider: (0, _utilUserAgentBrowser.defaultUserAgent)({
        serviceId: (0, _runtimeConfigShared.ClientSharedValues).serviceId,
        clientVersion: (0, _packageJsonDefault.default).version
    }),
    eventStreamSerdeProvider: (0, _eventstreamSerdeBrowser.eventStreamSerdeProvider),
    maxAttempts: (0, _middlewareRetry.DEFAULT_MAX_ATTEMPTS),
    md5: (0, _md5Js.Md5),
    region: (0, _invalidDependency.invalidProvider)("Region is missing"),
    requestHandler: new (0, _fetchHttpHandler.FetchHttpHandler)(),
    sha256: (0, _sha256Browser.Sha256),
    streamCollector: (0, _fetchHttpHandler.streamCollector),
    streamHasher: (0, _hashBlobBrowser.blobHasher),
    utf8Decoder: (0, _utilUtf8Browser.fromUtf8),
    utf8Encoder: (0, _utilUtf8Browser.toUtf8)
});

},{"tslib":"lRdW5","./package.json":"kvCzM","@aws-crypto/sha256-browser":"h7M77","@aws-sdk/eventstream-serde-browser":"56ZRx","@aws-sdk/fetch-http-handler":"atrsn","@aws-sdk/hash-blob-browser":"cDpaz","@aws-sdk/invalid-dependency":"1ry3q","@aws-sdk/md5-js":"9qNiu","@aws-sdk/middleware-retry":"hgahj","@aws-sdk/util-base64-browser":"aNXKr","@aws-sdk/util-body-length-browser":"kyGUn","@aws-sdk/util-user-agent-browser":"26YQ4","@aws-sdk/util-utf8-browser":"aUJSS","./runtimeConfig.shared":"1fLwG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kvCzM":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@aws-sdk/client-s3","description":"AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native","version":"3.6.1","scripts":{"clean":"yarn remove-definitions && yarn remove-dist && yarn remove-documentation","build-documentation":"yarn remove-documentation && typedoc ./","prepublishOnly":"yarn build","pretest":"yarn build:cjs","remove-definitions":"rimraf ./types","remove-dist":"rimraf ./dist","remove-documentation":"rimraf ./docs","test:unit":"mocha **/cjs/**/*.spec.js","test:e2e":"mocha **/cjs/**/*.ispec.js && karma start karma.conf.js","test":"yarn test:unit","build:cjs":"tsc -p tsconfig.json","build:es":"tsc -p tsconfig.es.json","build":"yarn build:cjs && yarn build:es","postbuild":"downlevel-dts types types/ts3.4"},"main":"./dist/cjs/index.js","types":"./types/index.d.ts","module":"./dist/es/index.js","browser":{"./runtimeConfig":"./runtimeConfig.browser"},"react-native":{"./runtimeConfig":"./runtimeConfig.native"},"sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"^1.0.0","@aws-crypto/sha256-js":"^1.0.0","@aws-sdk/config-resolver":"3.6.1","@aws-sdk/credential-provider-node":"3.6.1","@aws-sdk/eventstream-serde-browser":"3.6.1","@aws-sdk/eventstream-serde-config-resolver":"3.6.1","@aws-sdk/eventstream-serde-node":"3.6.1","@aws-sdk/fetch-http-handler":"3.6.1","@aws-sdk/hash-blob-browser":"3.6.1","@aws-sdk/hash-node":"3.6.1","@aws-sdk/hash-stream-node":"3.6.1","@aws-sdk/invalid-dependency":"3.6.1","@aws-sdk/md5-js":"3.6.1","@aws-sdk/middleware-apply-body-checksum":"3.6.1","@aws-sdk/middleware-bucket-endpoint":"3.6.1","@aws-sdk/middleware-content-length":"3.6.1","@aws-sdk/middleware-expect-continue":"3.6.1","@aws-sdk/middleware-host-header":"3.6.1","@aws-sdk/middleware-location-constraint":"3.6.1","@aws-sdk/middleware-logger":"3.6.1","@aws-sdk/middleware-retry":"3.6.1","@aws-sdk/middleware-sdk-s3":"3.6.1","@aws-sdk/middleware-serde":"3.6.1","@aws-sdk/middleware-signing":"3.6.1","@aws-sdk/middleware-ssec":"3.6.1","@aws-sdk/middleware-stack":"3.6.1","@aws-sdk/middleware-user-agent":"3.6.1","@aws-sdk/node-config-provider":"3.6.1","@aws-sdk/node-http-handler":"3.6.1","@aws-sdk/protocol-http":"3.6.1","@aws-sdk/smithy-client":"3.6.1","@aws-sdk/types":"3.6.1","@aws-sdk/url-parser":"3.6.1","@aws-sdk/url-parser-native":"3.6.1","@aws-sdk/util-base64-browser":"3.6.1","@aws-sdk/util-base64-node":"3.6.1","@aws-sdk/util-body-length-browser":"3.6.1","@aws-sdk/util-body-length-node":"3.6.1","@aws-sdk/util-user-agent-browser":"3.6.1","@aws-sdk/util-user-agent-node":"3.6.1","@aws-sdk/util-utf8-browser":"3.6.1","@aws-sdk/util-utf8-node":"3.6.1","@aws-sdk/util-waiter":"3.6.1","@aws-sdk/xml-builder":"3.6.1","fast-xml-parser":"^3.16.0","tslib":"^2.0.0"},"devDependencies":{"@aws-sdk/client-documentation-generator":"3.6.1","@types/chai":"^4.2.11","@types/mocha":"^8.0.4","@types/node":"^12.7.5","downlevel-dts":"0.7.0","jest":"^26.1.0","rimraf":"^3.0.0","typedoc":"^0.19.2","typescript":"~4.1.2"},"engines":{"node":">=10.0.0"},"typesVersions":{"<4.0":{"types/*":["types/ts3.4/*"]}},"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-s3"}}');

},{}],"56ZRx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _provider = require("./provider");
parcelHelpers.exportAll(_provider, exports);
var _eventStreamMarshaller = require("./EventStreamMarshaller");
parcelHelpers.exportAll(_eventStreamMarshaller, exports);
var _utils = require("./utils");
parcelHelpers.exportAll(_utils, exports);

},{"./provider":"dYnsr","./EventStreamMarshaller":"hn5ib","./utils":"jjls7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dYnsr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eventStreamSerdeProvider", ()=>eventStreamSerdeProvider);
var _eventStreamMarshaller = require("./EventStreamMarshaller");
var eventStreamSerdeProvider = function(options) {
    return new (0, _eventStreamMarshaller.EventStreamMarshaller)(options);
};

},{"./EventStreamMarshaller":"hn5ib","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hn5ib":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventStreamMarshaller", ()=>EventStreamMarshaller);
var _eventstreamMarshaller = require("@aws-sdk/eventstream-marshaller");
var _eventstreamSerdeUniversal = require("@aws-sdk/eventstream-serde-universal");
var _utils = require("./utils");
/**
 * Utility class used to serialize and deserialize event streams in
 * browsers and ReactNative.
 *
 * In browsers where ReadableStream API is available:
 * * deserialize from ReadableStream to an async iterable of output structure
 * * serialize from async iterable of input structure to ReadableStream
 * In ReactNative where only async iterable API is available:
 * * deserialize from async iterable of binaries to async iterable of output structure
 * * serialize from async iterable of input structure to async iterable of binaries
 *
 * We use ReadableStream API in browsers because of the consistency with other
 * streaming operations, where ReadableStream API is used to denote streaming data.
 * Whereas in ReactNative, ReadableStream API is not available, we use async iterable
 * for streaming data although it has lower throughput.
 */ var EventStreamMarshaller = /** @class */ function() {
    function EventStreamMarshaller(_a) {
        var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
        this.eventMarshaller = new (0, _eventstreamMarshaller.EventStreamMarshaller)(utf8Encoder, utf8Decoder);
        this.universalMarshaller = new (0, _eventstreamSerdeUniversal.EventStreamMarshaller)({
            utf8Decoder: utf8Decoder,
            utf8Encoder: utf8Encoder
        });
    }
    EventStreamMarshaller.prototype.deserialize = function(body, deserializer) {
        var bodyIterable = isReadableStream(body) ? (0, _utils.readableStreamtoIterable)(body) : body;
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
    };
    /**
     * Generate a stream that serialize events into stream of binary chunks;
     *
     * Caveat is that streaming request payload doesn't work on browser with native
     * xhr or fetch handler currently because they don't support upload streaming.
     * reference:
     * * https://bugs.chromium.org/p/chromium/issues/detail?id=688906
     * * https://bugzilla.mozilla.org/show_bug.cgi?id=1387483
     *
     */ EventStreamMarshaller.prototype.serialize = function(input, serializer) {
        var serialziedIterable = this.universalMarshaller.serialize(input, serializer);
        return typeof ReadableStream === "function" ? (0, _utils.iterableToReadableStream)(serialziedIterable) : serialziedIterable;
    };
    return EventStreamMarshaller;
}();
var isReadableStream = function(body) {
    return typeof ReadableStream === "function" && body instanceof ReadableStream;
};

},{"@aws-sdk/eventstream-marshaller":"gh31G","@aws-sdk/eventstream-serde-universal":"lcs9a","./utils":"jjls7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gh31G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventStreamMarshaller = require("./EventStreamMarshaller");
parcelHelpers.exportAll(_eventStreamMarshaller, exports);
var _int64 = require("./Int64");
parcelHelpers.exportAll(_int64, exports);
var _message = require("./Message");
parcelHelpers.exportAll(_message, exports);

},{"./EventStreamMarshaller":"fgAIf","./Int64":"eMqKH","./Message":"4JN9M","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fgAIf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventStreamMarshaller", ()=>EventStreamMarshaller);
var _crc32 = require("@aws-crypto/crc32");
var _headerMarshaller = require("./HeaderMarshaller");
var _splitMessage = require("./splitMessage");
/**
 * A marshaller that can convert binary-packed event stream messages into
 * JavaScript objects and back again into their binary format.
 */ var EventStreamMarshaller = /** @class */ function() {
    function EventStreamMarshaller(toUtf8, fromUtf8) {
        this.headerMarshaller = new (0, _headerMarshaller.HeaderMarshaller)(toUtf8, fromUtf8);
    }
    /**
     * Convert a structured JavaScript object with tagged headers into a binary
     * event stream message.
     */ EventStreamMarshaller.prototype.marshall = function(_a) {
        var rawHeaders = _a.headers, body = _a.body;
        var headers = this.headerMarshaller.format(rawHeaders);
        var length = headers.byteLength + body.byteLength + 16;
        var out = new Uint8Array(length);
        var view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        var checksum = new (0, _crc32.Crc32)();
        // Format message
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        // Write trailing message checksum
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
    };
    /**
     * Convert a binary event stream message into a JavaScript object with an
     * opaque, binary body and tagged, parsed headers.
     */ EventStreamMarshaller.prototype.unmarshall = function(message) {
        var _a = (0, _splitMessage.splitMessage)(message), headers = _a.headers, body = _a.body;
        return {
            headers: this.headerMarshaller.parse(headers),
            body: body
        };
    };
    /**
     * Convert a structured JavaScript object with tagged headers into a binary
     * event stream message header.
     */ EventStreamMarshaller.prototype.formatHeaders = function(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
    };
    return EventStreamMarshaller;
}();

},{"@aws-crypto/crc32":"eJWDd","./HeaderMarshaller":"1wBs8","./splitMessage":"bA8zI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJWDd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AwsCrc32 = exports.Crc32 = exports.crc32 = void 0;
var tslib_1 = require("eb190ce5d781d2");
var util_1 = require("b0d4507b4ec71f92");
function crc32(data) {
    return new Crc32().update(data).digest();
}
exports.crc32 = crc32;
var Crc32 = /** @class */ function() {
    function Crc32() {
        this.checksum = 0xffffffff;
    }
    Crc32.prototype.update = function(data) {
        var e_1, _a;
        try {
            for(var data_1 = (0, tslib_1.__values)(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()){
                var byte = data_1_1.value;
                this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 0xff];
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return this;
    };
    Crc32.prototype.digest = function() {
        return (this.checksum ^ 0xffffffff) >>> 0;
    };
    return Crc32;
}();
exports.Crc32 = Crc32;
// prettier-ignore
var a_lookUpTable = [
    0x00000000,
    0x77073096,
    0xEE0E612C,
    0x990951BA,
    0x076DC419,
    0x706AF48F,
    0xE963A535,
    0x9E6495A3,
    0x0EDB8832,
    0x79DCB8A4,
    0xE0D5E91E,
    0x97D2D988,
    0x09B64C2B,
    0x7EB17CBD,
    0xE7B82D07,
    0x90BF1D91,
    0x1DB71064,
    0x6AB020F2,
    0xF3B97148,
    0x84BE41DE,
    0x1ADAD47D,
    0x6DDDE4EB,
    0xF4D4B551,
    0x83D385C7,
    0x136C9856,
    0x646BA8C0,
    0xFD62F97A,
    0x8A65C9EC,
    0x14015C4F,
    0x63066CD9,
    0xFA0F3D63,
    0x8D080DF5,
    0x3B6E20C8,
    0x4C69105E,
    0xD56041E4,
    0xA2677172,
    0x3C03E4D1,
    0x4B04D447,
    0xD20D85FD,
    0xA50AB56B,
    0x35B5A8FA,
    0x42B2986C,
    0xDBBBC9D6,
    0xACBCF940,
    0x32D86CE3,
    0x45DF5C75,
    0xDCD60DCF,
    0xABD13D59,
    0x26D930AC,
    0x51DE003A,
    0xC8D75180,
    0xBFD06116,
    0x21B4F4B5,
    0x56B3C423,
    0xCFBA9599,
    0xB8BDA50F,
    0x2802B89E,
    0x5F058808,
    0xC60CD9B2,
    0xB10BE924,
    0x2F6F7C87,
    0x58684C11,
    0xC1611DAB,
    0xB6662D3D,
    0x76DC4190,
    0x01DB7106,
    0x98D220BC,
    0xEFD5102A,
    0x71B18589,
    0x06B6B51F,
    0x9FBFE4A5,
    0xE8B8D433,
    0x7807C9A2,
    0x0F00F934,
    0x9609A88E,
    0xE10E9818,
    0x7F6A0DBB,
    0x086D3D2D,
    0x91646C97,
    0xE6635C01,
    0x6B6B51F4,
    0x1C6C6162,
    0x856530D8,
    0xF262004E,
    0x6C0695ED,
    0x1B01A57B,
    0x8208F4C1,
    0xF50FC457,
    0x65B0D9C6,
    0x12B7E950,
    0x8BBEB8EA,
    0xFCB9887C,
    0x62DD1DDF,
    0x15DA2D49,
    0x8CD37CF3,
    0xFBD44C65,
    0x4DB26158,
    0x3AB551CE,
    0xA3BC0074,
    0xD4BB30E2,
    0x4ADFA541,
    0x3DD895D7,
    0xA4D1C46D,
    0xD3D6F4FB,
    0x4369E96A,
    0x346ED9FC,
    0xAD678846,
    0xDA60B8D0,
    0x44042D73,
    0x33031DE5,
    0xAA0A4C5F,
    0xDD0D7CC9,
    0x5005713C,
    0x270241AA,
    0xBE0B1010,
    0xC90C2086,
    0x5768B525,
    0x206F85B3,
    0xB966D409,
    0xCE61E49F,
    0x5EDEF90E,
    0x29D9C998,
    0xB0D09822,
    0xC7D7A8B4,
    0x59B33D17,
    0x2EB40D81,
    0xB7BD5C3B,
    0xC0BA6CAD,
    0xEDB88320,
    0x9ABFB3B6,
    0x03B6E20C,
    0x74B1D29A,
    0xEAD54739,
    0x9DD277AF,
    0x04DB2615,
    0x73DC1683,
    0xE3630B12,
    0x94643B84,
    0x0D6D6A3E,
    0x7A6A5AA8,
    0xE40ECF0B,
    0x9309FF9D,
    0x0A00AE27,
    0x7D079EB1,
    0xF00F9344,
    0x8708A3D2,
    0x1E01F268,
    0x6906C2FE,
    0xF762575D,
    0x806567CB,
    0x196C3671,
    0x6E6B06E7,
    0xFED41B76,
    0x89D32BE0,
    0x10DA7A5A,
    0x67DD4ACC,
    0xF9B9DF6F,
    0x8EBEEFF9,
    0x17B7BE43,
    0x60B08ED5,
    0xD6D6A3E8,
    0xA1D1937E,
    0x38D8C2C4,
    0x4FDFF252,
    0xD1BB67F1,
    0xA6BC5767,
    0x3FB506DD,
    0x48B2364B,
    0xD80D2BDA,
    0xAF0A1B4C,
    0x36034AF6,
    0x41047A60,
    0xDF60EFC3,
    0xA867DF55,
    0x316E8EEF,
    0x4669BE79,
    0xCB61B38C,
    0xBC66831A,
    0x256FD2A0,
    0x5268E236,
    0xCC0C7795,
    0xBB0B4703,
    0x220216B9,
    0x5505262F,
    0xC5BA3BBE,
    0xB2BD0B28,
    0x2BB45A92,
    0x5CB36A04,
    0xC2D7FFA7,
    0xB5D0CF31,
    0x2CD99E8B,
    0x5BDEAE1D,
    0x9B64C2B0,
    0xEC63F226,
    0x756AA39C,
    0x026D930A,
    0x9C0906A9,
    0xEB0E363F,
    0x72076785,
    0x05005713,
    0x95BF4A82,
    0xE2B87A14,
    0x7BB12BAE,
    0x0CB61B38,
    0x92D28E9B,
    0xE5D5BE0D,
    0x7CDCEFB7,
    0x0BDBDF21,
    0x86D3D2D4,
    0xF1D4E242,
    0x68DDB3F8,
    0x1FDA836E,
    0x81BE16CD,
    0xF6B9265B,
    0x6FB077E1,
    0x18B74777,
    0x88085AE6,
    0xFF0F6A70,
    0x66063BCA,
    0x11010B5C,
    0x8F659EFF,
    0xF862AE69,
    0x616BFFD3,
    0x166CCF45,
    0xA00AE278,
    0xD70DD2EE,
    0x4E048354,
    0x3903B3C2,
    0xA7672661,
    0xD06016F7,
    0x4969474D,
    0x3E6E77DB,
    0xAED16A4A,
    0xD9D65ADC,
    0x40DF0B66,
    0x37D83BF0,
    0xA9BCAE53,
    0xDEBB9EC5,
    0x47B2CF7F,
    0x30B5FFE9,
    0xBDBDF21C,
    0xCABAC28A,
    0x53B39330,
    0x24B4A3A6,
    0xBAD03605,
    0xCDD70693,
    0x54DE5729,
    0x23D967BF,
    0xB3667A2E,
    0xC4614AB8,
    0x5D681B02,
    0x2A6F2B94,
    0xB40BBE37,
    0xC30C8EA1,
    0x5A05DF1B,
    0x2D02EF8D
];
var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
var aws_crc32_1 = require("ec5c1fdc84f4e928");
Object.defineProperty(exports, "AwsCrc32", {
    enumerable: true,
    get: function() {
        return aws_crc32_1.AwsCrc32;
    }
});

},{"eb190ce5d781d2":"h7iN5","b0d4507b4ec71f92":"aDvRG","ec5c1fdc84f4e928":"dzmIN"}],"h7iN5":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dzmIN":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.AwsCrc32 = void 0;
var tslib_1 = require("bee24bf490010395");
var util_1 = require("4d1faea5abf6593e");
var index_1 = require("3def414f17585db6");
var AwsCrc32 = /** @class */ function() {
    function AwsCrc32() {
        this.crc32 = new index_1.Crc32();
    }
    AwsCrc32.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash)) return;
        this.crc32.update((0, util_1.convertToBuffer)(toHash));
    };
    AwsCrc32.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
            return (0, tslib_1.__generator)(this, function(_a) {
                return [
                    2 /*return*/ ,
                    (0, util_1.numToUint8)(this.crc32.digest())
                ];
            });
        });
    };
    return AwsCrc32;
}();
exports.AwsCrc32 = AwsCrc32;

},{"bee24bf490010395":"h7iN5","4d1faea5abf6593e":"aDvRG","3def414f17585db6":"eJWDd"}],"1wBs8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HeaderMarshaller", ()=>HeaderMarshaller);
var _tslib = require("tslib");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _int64 = require("./Int64");
/**
 * @internal
 */ var HeaderMarshaller = /** @class */ function() {
    function HeaderMarshaller(toUtf8, fromUtf8) {
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
    }
    HeaderMarshaller.prototype.format = function(headers) {
        var e_1, _a, e_2, _b;
        var chunks = [];
        try {
            for(var _c = (0, _tslib.__values)(Object.keys(headers)), _d = _c.next(); !_d.done; _d = _c.next()){
                var headerName = _d.value;
                var bytes = this.fromUtf8(headerName);
                chunks.push(Uint8Array.from([
                    bytes.byteLength
                ]), bytes, this.formatHeaderValue(headers[headerName]));
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        var out = new Uint8Array(chunks.reduce(function(carry, bytes) {
            return carry + bytes.byteLength;
        }, 0));
        var position = 0;
        try {
            for(var chunks_1 = (0, _tslib.__values)(chunks), chunks_1_1 = chunks_1.next(); !chunks_1_1.done; chunks_1_1 = chunks_1.next()){
                var chunk = chunks_1_1.value;
                out.set(chunk, position);
                position += chunk.byteLength;
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (chunks_1_1 && !chunks_1_1.done && (_b = chunks_1.return)) _b.call(chunks_1);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
        return out;
    };
    HeaderMarshaller.prototype.formatHeaderValue = function(header) {
        switch(header.type){
            case "boolean":
                return Uint8Array.from([
                    header.value ? 0 /* boolTrue */  : 1 /* boolFalse */ 
                ]);
            case "byte":
                return Uint8Array.from([
                    2 /* byte */ ,
                    header.value
                ]);
            case "short":
                var shortView = new DataView(new ArrayBuffer(3));
                shortView.setUint8(0, 3 /* short */ );
                shortView.setInt16(1, header.value, false);
                return new Uint8Array(shortView.buffer);
            case "integer":
                var intView = new DataView(new ArrayBuffer(5));
                intView.setUint8(0, 4 /* integer */ );
                intView.setInt32(1, header.value, false);
                return new Uint8Array(intView.buffer);
            case "long":
                var longBytes = new Uint8Array(9);
                longBytes[0] = 5 /* long */ ;
                longBytes.set(header.value.bytes, 1);
                return longBytes;
            case "binary":
                var binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
                binView.setUint8(0, 6 /* byteArray */ );
                binView.setUint16(1, header.value.byteLength, false);
                var binBytes = new Uint8Array(binView.buffer);
                binBytes.set(header.value, 3);
                return binBytes;
            case "string":
                var utf8Bytes = this.fromUtf8(header.value);
                var strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
                strView.setUint8(0, 7 /* string */ );
                strView.setUint16(1, utf8Bytes.byteLength, false);
                var strBytes = new Uint8Array(strView.buffer);
                strBytes.set(utf8Bytes, 3);
                return strBytes;
            case "timestamp":
                var tsBytes = new Uint8Array(9);
                tsBytes[0] = 8 /* timestamp */ ;
                tsBytes.set((0, _int64.Int64).fromNumber(header.value.valueOf()).bytes, 1);
                return tsBytes;
            case "uuid":
                if (!UUID_PATTERN.test(header.value)) throw new Error("Invalid UUID received: " + header.value);
                var uuidBytes = new Uint8Array(17);
                uuidBytes[0] = 9 /* uuid */ ;
                uuidBytes.set((0, _utilHexEncoding.fromHex)(header.value.replace(/\-/g, "")), 1);
                return uuidBytes;
        }
    };
    HeaderMarshaller.prototype.parse = function(headers) {
        var out = {};
        var position = 0;
        while(position < headers.byteLength){
            var nameLength = headers.getUint8(position++);
            var name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
            position += nameLength;
            switch(headers.getUint8(position++)){
                case 0 /* boolTrue */ :
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: true
                    };
                    break;
                case 1 /* boolFalse */ :
                    out[name] = {
                        type: BOOLEAN_TAG,
                        value: false
                    };
                    break;
                case 2 /* byte */ :
                    out[name] = {
                        type: BYTE_TAG,
                        value: headers.getInt8(position++)
                    };
                    break;
                case 3 /* short */ :
                    out[name] = {
                        type: SHORT_TAG,
                        value: headers.getInt16(position, false)
                    };
                    position += 2;
                    break;
                case 4 /* integer */ :
                    out[name] = {
                        type: INT_TAG,
                        value: headers.getInt32(position, false)
                    };
                    position += 4;
                    break;
                case 5 /* long */ :
                    out[name] = {
                        type: LONG_TAG,
                        value: new (0, _int64.Int64)(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
                    };
                    position += 8;
                    break;
                case 6 /* byteArray */ :
                    var binaryLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: BINARY_TAG,
                        value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
                    };
                    position += binaryLength;
                    break;
                case 7 /* string */ :
                    var stringLength = headers.getUint16(position, false);
                    position += 2;
                    out[name] = {
                        type: STRING_TAG,
                        value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
                    };
                    position += stringLength;
                    break;
                case 8 /* timestamp */ :
                    out[name] = {
                        type: TIMESTAMP_TAG,
                        value: new Date(new (0, _int64.Int64)(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
                    };
                    position += 8;
                    break;
                case 9 /* uuid */ :
                    var uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
                    position += 16;
                    out[name] = {
                        type: UUID_TAG,
                        value: (0, _utilHexEncoding.toHex)(uuidBytes.subarray(0, 4)) + "-" + (0, _utilHexEncoding.toHex)(uuidBytes.subarray(4, 6)) + "-" + (0, _utilHexEncoding.toHex)(uuidBytes.subarray(6, 8)) + "-" + (0, _utilHexEncoding.toHex)(uuidBytes.subarray(8, 10)) + "-" + (0, _utilHexEncoding.toHex)(uuidBytes.subarray(10))
                    };
                    break;
                default:
                    throw new Error("Unrecognized header type tag");
            }
        }
        return out;
    };
    return HeaderMarshaller;
}();
var HEADER_VALUE_TYPE;
(function(HEADER_VALUE_TYPE) {
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolTrue"] = 0] = "boolTrue";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["boolFalse"] = 1] = "boolFalse";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byte"] = 2] = "byte";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["short"] = 3] = "short";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["integer"] = 4] = "integer";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["long"] = 5] = "long";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["byteArray"] = 6] = "byteArray";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["string"] = 7] = "string";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["timestamp"] = 8] = "timestamp";
    HEADER_VALUE_TYPE[HEADER_VALUE_TYPE["uuid"] = 9] = "uuid";
})(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
var BOOLEAN_TAG = "boolean";
var BYTE_TAG = "byte";
var SHORT_TAG = "short";
var INT_TAG = "integer";
var LONG_TAG = "long";
var BINARY_TAG = "binary";
var STRING_TAG = "string";
var TIMESTAMP_TAG = "timestamp";
var UUID_TAG = "uuid";
var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;

},{"tslib":"89H38","@aws-sdk/util-hex-encoding":"37zn6","./Int64":"eMqKH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"89H38":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eMqKH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Int64", ()=>Int64);
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
/**
 * A lossless representation of a signed, 64-bit integer. Instances of this
 * class may be used in arithmetic expressions as if they were numeric
 * primitives, but the binary representation will be preserved unchanged as the
 * `bytes` property of the object. The bytes should be encoded as big-endian,
 * two's complement integers.
 */ var Int64 = /** @class */ function() {
    function Int64(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) throw new Error("Int64 buffers must be exactly 8 bytes");
    }
    Int64.fromNumber = function(number) {
        if (number > 9223372036854775807 || number < -9223372036854776000) throw new Error(number + " is too large (or, if negative, too small) to represent as an Int64");
        var bytes = new Uint8Array(8);
        for(var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256)bytes[i] = remaining;
        if (number < 0) negate(bytes);
        return new Int64(bytes);
    };
    /**
     * Called implicitly by infix arithmetic operators.
     */ Int64.prototype.valueOf = function() {
        var bytes = this.bytes.slice(0);
        var negative = bytes[0] & 128;
        if (negative) negate(bytes);
        return parseInt((0, _utilHexEncoding.toHex)(bytes), 16) * (negative ? -1 : 1);
    };
    Int64.prototype.toString = function() {
        return String(this.valueOf());
    };
    return Int64;
}();
function negate(bytes) {
    for(var i = 0; i < 8; i++)bytes[i] ^= 0xff;
    for(var i = 7; i > -1; i--){
        bytes[i]++;
        if (bytes[i] !== 0) break;
    }
}

},{"@aws-sdk/util-hex-encoding":"37zn6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bA8zI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "splitMessage", ()=>splitMessage);
var _crc32 = require("@aws-crypto/crc32");
// All prelude components are unsigned, 32-bit integers
var PRELUDE_MEMBER_LENGTH = 4;
// The prelude consists of two components
var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
// Checksums are always CRC32 hashes.
var CHECKSUM_LENGTH = 4;
// Messages must include a full prelude, a prelude checksum, and a message checksum
var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
function splitMessage(_a) {
    var byteLength = _a.byteLength, byteOffset = _a.byteOffset, buffer = _a.buffer;
    if (byteLength < MINIMUM_MESSAGE_LENGTH) throw new Error("Provided message too short to accommodate event stream message overhead");
    var view = new DataView(buffer, byteOffset, byteLength);
    var messageLength = view.getUint32(0, false);
    if (byteLength !== messageLength) throw new Error("Reported message length does not match received message length");
    var headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
    var expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
    var expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
    var checksummer = new (0, _crc32.Crc32)().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
    if (expectedPreludeChecksum !== checksummer.digest()) throw new Error("The prelude checksum specified in the message (" + expectedPreludeChecksum + ") does not match the calculated CRC32 checksum (" + checksummer.digest() + ")");
    checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
    if (expectedMessageChecksum !== checksummer.digest()) throw new Error("The message checksum (" + checksummer.digest() + ") did not match the expected value of " + expectedMessageChecksum);
    return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
    };
}

},{"@aws-crypto/crc32":"eJWDd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4JN9M":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lcs9a":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _provider = require("./provider");
parcelHelpers.exportAll(_provider, exports);
var _eventStreamMarshaller = require("./EventStreamMarshaller");
parcelHelpers.exportAll(_eventStreamMarshaller, exports);

},{"./provider":"cN8Zx","./EventStreamMarshaller":"6MFRc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cN8Zx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "eventStreamSerdeProvider", ()=>eventStreamSerdeProvider);
var _eventStreamMarshaller = require("./EventStreamMarshaller");
var eventStreamSerdeProvider = function(options) {
    return new (0, _eventStreamMarshaller.EventStreamMarshaller)(options);
};

},{"./EventStreamMarshaller":"6MFRc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6MFRc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EventStreamMarshaller", ()=>EventStreamMarshaller);
var _tslib = require("tslib");
var _eventstreamMarshaller = require("@aws-sdk/eventstream-marshaller");
var _getChunkedStream = require("./getChunkedStream");
var _getUnmarshalledStream = require("./getUnmarshalledStream");
var EventStreamMarshaller = /** @class */ function() {
    function EventStreamMarshaller(_a) {
        var utf8Encoder = _a.utf8Encoder, utf8Decoder = _a.utf8Decoder;
        this.eventMarshaller = new (0, _eventstreamMarshaller.EventStreamMarshaller)(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
    }
    EventStreamMarshaller.prototype.deserialize = function(body, deserializer) {
        var chunkedStream = (0, _getChunkedStream.getChunkedStream)(body);
        var unmarshalledStream = (0, _getUnmarshalledStream.getUnmarshalledStream)(chunkedStream, {
            eventMarshaller: this.eventMarshaller,
            deserializer: deserializer,
            toUtf8: this.utfEncoder
        });
        return unmarshalledStream;
    };
    EventStreamMarshaller.prototype.serialize = function(input, serializer) {
        var _a;
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        var self = this;
        var serializedIterator = function() {
            return (0, _tslib.__asyncGenerator)(this, arguments, function() {
                var input_1, input_1_1, chunk, payloadBuf, e_1_1;
                var e_1, _a;
                return (0, _tslib.__generator)(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            _b.trys.push([
                                0,
                                7,
                                8,
                                13
                            ]);
                            input_1 = (0, _tslib.__asyncValues)(input);
                            _b.label = 1;
                        case 1:
                            return [
                                4 /*yield*/ ,
                                (0, _tslib.__await)(input_1.next())
                            ];
                        case 2:
                            if (!(input_1_1 = _b.sent(), !input_1_1.done)) return [
                                3 /*break*/ ,
                                6
                            ];
                            chunk = input_1_1.value;
                            payloadBuf = self.eventMarshaller.marshall(serializer(chunk));
                            return [
                                4 /*yield*/ ,
                                (0, _tslib.__await)(payloadBuf)
                            ];
                        case 3:
                            return [
                                4 /*yield*/ ,
                                _b.sent()
                            ];
                        case 4:
                            _b.sent();
                            _b.label = 5;
                        case 5:
                            return [
                                3 /*break*/ ,
                                1
                            ];
                        case 6:
                            return [
                                3 /*break*/ ,
                                13
                            ];
                        case 7:
                            e_1_1 = _b.sent();
                            e_1 = {
                                error: e_1_1
                            };
                            return [
                                3 /*break*/ ,
                                13
                            ];
                        case 8:
                            _b.trys.push([
                                8,
                                ,
                                11,
                                12
                            ]);
                            if (!(input_1_1 && !input_1_1.done && (_a = input_1.return))) return [
                                3 /*break*/ ,
                                10
                            ];
                            return [
                                4 /*yield*/ ,
                                (0, _tslib.__await)(_a.call(input_1))
                            ];
                        case 9:
                            _b.sent();
                            _b.label = 10;
                        case 10:
                            return [
                                3 /*break*/ ,
                                12
                            ];
                        case 11:
                            if (e_1) throw e_1.error;
                            return [
                                7 /*endfinally*/ 
                            ];
                        case 12:
                            return [
                                7 /*endfinally*/ 
                            ];
                        case 13:
                            return [
                                4 /*yield*/ ,
                                (0, _tslib.__await)(new Uint8Array(0))
                            ];
                        case 14:
                            // Ending frame
                            return [
                                4 /*yield*/ ,
                                _b.sent()
                            ];
                        case 15:
                            // Ending frame
                            _b.sent();
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        };
        return _a = {}, _a[Symbol.asyncIterator] = serializedIterator, _a;
    };
    return EventStreamMarshaller;
}();

},{"tslib":"37qyK","@aws-sdk/eventstream-marshaller":"gh31G","./getChunkedStream":"dXcdV","./getUnmarshalledStream":"al8Vt","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"37qyK":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dXcdV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getChunkedStream", ()=>getChunkedStream);
var _tslib = require("tslib");
function getChunkedStream(source) {
    var _a;
    var currentMessageTotalLength = 0;
    var currentMessagePendingLength = 0;
    var currentMessage = null;
    var messageLengthBuffer = null;
    var allocateMessage = function(size) {
        if (typeof size !== "number") throw new Error("Attempted to allocate an event message where size was not a number: " + size);
        currentMessageTotalLength = size;
        currentMessagePendingLength = 4;
        currentMessage = new Uint8Array(size);
        var currentMessageView = new DataView(currentMessage.buffer);
        currentMessageView.setUint32(0, size, false); //set big-endian Uint32 to 0~3 bytes
    };
    var iterator = function() {
        return (0, _tslib.__asyncGenerator)(this, arguments, function() {
            var sourceIterator, _a, value, done, chunkLength, currentOffset, bytesRemaining, numBytesForTotal, numBytesToWrite;
            return (0, _tslib.__generator)(this, function(_b) {
                switch(_b.label){
                    case 0:
                        sourceIterator = source[Symbol.asyncIterator]();
                        _b.label = 1;
                    case 1:
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(sourceIterator.next())
                        ];
                    case 2:
                        _a = _b.sent(), value = _a.value, done = _a.done;
                        if (!done) return [
                            3 /*break*/ ,
                            10
                        ];
                        if (!!currentMessageTotalLength) return [
                            3 /*break*/ ,
                            4
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(void 0)
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            _b.sent()
                        ];
                    case 4:
                        if (!(currentMessageTotalLength === currentMessagePendingLength)) return [
                            3 /*break*/ ,
                            7
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(currentMessage)
                        ];
                    case 5:
                        return [
                            4 /*yield*/ ,
                            _b.sent()
                        ];
                    case 6:
                        _b.sent();
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        throw new Error("Truncated event message received.");
                    case 8:
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(void 0)
                        ];
                    case 9:
                        return [
                            2 /*return*/ ,
                            _b.sent()
                        ];
                    case 10:
                        chunkLength = value.length;
                        currentOffset = 0;
                        _b.label = 11;
                    case 11:
                        if (!(currentOffset < chunkLength)) return [
                            3 /*break*/ ,
                            15
                        ];
                        // create new message if necessary
                        if (!currentMessage) {
                            bytesRemaining = chunkLength - currentOffset;
                            // prevent edge case where total length spans 2 chunks
                            if (!messageLengthBuffer) messageLengthBuffer = new Uint8Array(4);
                            numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining // bytes left in chunk
                            );
                            messageLengthBuffer.set(// @ts-ignore error TS2532: Object is possibly 'undefined' for value
                            value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
                            currentMessagePendingLength += numBytesForTotal;
                            currentOffset += numBytesForTotal;
                            if (currentMessagePendingLength < 4) // not enough information to create the current message
                            return [
                                3 /*break*/ ,
                                15
                            ];
                            allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
                            messageLengthBuffer = null;
                        }
                        numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset // number of bytes left in the original chunk
                        );
                        currentMessage.set(// @ts-ignore error TS2532: Object is possibly 'undefined' for value
                        value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
                        currentMessagePendingLength += numBytesToWrite;
                        currentOffset += numBytesToWrite;
                        if (!(currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength)) return [
                            3 /*break*/ ,
                            14
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(currentMessage)
                        ];
                    case 12:
                        // push out the message
                        return [
                            4 /*yield*/ ,
                            _b.sent()
                        ];
                    case 13:
                        // push out the message
                        _b.sent();
                        // cleanup
                        currentMessage = null;
                        currentMessageTotalLength = 0;
                        currentMessagePendingLength = 0;
                        _b.label = 14;
                    case 14:
                        return [
                            3 /*break*/ ,
                            11
                        ];
                    case 15:
                        return [
                            3 /*break*/ ,
                            1
                        ];
                    case 16:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return _a = {}, _a[Symbol.asyncIterator] = iterator, _a;
}

},{"tslib":"37qyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"al8Vt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUnmarshalledStream", ()=>getUnmarshalledStream);
var _tslib = require("tslib");
function getUnmarshalledStream(source, options) {
    var _a;
    return _a = {}, _a[Symbol.asyncIterator] = function() {
        return (0, _tslib.__asyncGenerator)(this, arguments, function() {
            var source_1, source_1_1, chunk, message, messageType, unmodeledError, code, exception, deserializedException, error, event, deserialized, e_1_1;
            var _a, _b;
            var e_1, _c;
            return (0, _tslib.__generator)(this, function(_d) {
                switch(_d.label){
                    case 0:
                        _d.trys.push([
                            0,
                            12,
                            13,
                            18
                        ]);
                        source_1 = (0, _tslib.__asyncValues)(source);
                        _d.label = 1;
                    case 1:
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(source_1.next())
                        ];
                    case 2:
                        if (!(source_1_1 = _d.sent(), !source_1_1.done)) return [
                            3 /*break*/ ,
                            11
                        ];
                        chunk = source_1_1.value;
                        message = options.eventMarshaller.unmarshall(chunk);
                        messageType = message.headers[":message-type"].value;
                        if (!(messageType === "error")) return [
                            3 /*break*/ ,
                            3
                        ];
                        unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
                        unmodeledError.name = message.headers[":error-code"].value;
                        throw unmodeledError;
                    case 3:
                        if (!(messageType === "exception")) return [
                            3 /*break*/ ,
                            5
                        ];
                        code = message.headers[":exception-type"].value;
                        exception = (_a = {}, _a[code] = message, _a);
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(options.deserializer(exception))
                        ];
                    case 4:
                        deserializedException = _d.sent();
                        if (deserializedException.$unknown) {
                            error = new Error(options.toUtf8(message.body));
                            error.name = code;
                            throw error;
                        }
                        throw deserializedException[code];
                    case 5:
                        if (!(messageType === "event")) return [
                            3 /*break*/ ,
                            9
                        ];
                        event = (_b = {}, _b[message.headers[":event-type"].value] = message, _b);
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(options.deserializer(event))
                        ];
                    case 6:
                        deserialized = _d.sent();
                        if (deserialized.$unknown) return [
                            3 /*break*/ ,
                            10
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(deserialized)
                        ];
                    case 7:
                        return [
                            4 /*yield*/ ,
                            _d.sent()
                        ];
                    case 8:
                        _d.sent();
                        return [
                            3 /*break*/ ,
                            10
                        ];
                    case 9:
                        throw Error("Unrecognizable event type: " + message.headers[":event-type"].value);
                    case 10:
                        return [
                            3 /*break*/ ,
                            1
                        ];
                    case 11:
                        return [
                            3 /*break*/ ,
                            18
                        ];
                    case 12:
                        e_1_1 = _d.sent();
                        e_1 = {
                            error: e_1_1
                        };
                        return [
                            3 /*break*/ ,
                            18
                        ];
                    case 13:
                        _d.trys.push([
                            13,
                            ,
                            16,
                            17
                        ]);
                        if (!(source_1_1 && !source_1_1.done && (_c = source_1.return))) return [
                            3 /*break*/ ,
                            15
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(_c.call(source_1))
                        ];
                    case 14:
                        _d.sent();
                        _d.label = 15;
                    case 15:
                        return [
                            3 /*break*/ ,
                            17
                        ];
                    case 16:
                        if (e_1) throw e_1.error;
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 17:
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 18:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    }, _a;
}

},{"tslib":"37qyK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjls7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "readableStreamtoIterable", ()=>readableStreamtoIterable);
parcelHelpers.export(exports, "iterableToReadableStream", ()=>iterableToReadableStream);
var _tslib = require("tslib");
var readableStreamtoIterable = function(readableStream) {
    var _a;
    return _a = {}, _a[Symbol.asyncIterator] = function() {
        return (0, _tslib.__asyncGenerator)(this, arguments, function() {
            var reader, _a, done, value;
            return (0, _tslib.__generator)(this, function(_b) {
                switch(_b.label){
                    case 0:
                        reader = readableStream.getReader();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            ,
                            9,
                            10
                        ]);
                        _b.label = 2;
                    case 2:
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(reader.read())
                        ];
                    case 3:
                        _a = _b.sent(), done = _a.done, value = _a.value;
                        if (!done) return [
                            3 /*break*/ ,
                            5
                        ];
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(void 0)
                        ];
                    case 4:
                        return [
                            2 /*return*/ ,
                            _b.sent()
                        ];
                    case 5:
                        return [
                            4 /*yield*/ ,
                            (0, _tslib.__await)(value)
                        ];
                    case 6:
                        return [
                            4 /*yield*/ ,
                            _b.sent()
                        ];
                    case 7:
                        _b.sent();
                        return [
                            3 /*break*/ ,
                            2
                        ];
                    case 8:
                        return [
                            3 /*break*/ ,
                            10
                        ];
                    case 9:
                        reader.releaseLock();
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 10:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    }, _a;
};
var iterableToReadableStream = function(asyncIterable) {
    var iterator = asyncIterable[Symbol.asyncIterator]();
    return new ReadableStream({
        pull: function(controller) {
            return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
                var _a, done, value;
                return (0, _tslib.__generator)(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                iterator.next()
                            ];
                        case 1:
                            _a = _b.sent(), done = _a.done, value = _a.value;
                            if (done) return [
                                2 /*return*/ ,
                                controller.close()
                            ];
                            controller.enqueue(value);
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        }
    });
};

},{"tslib":"hX0MY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hX0MY":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cDpaz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "blobHasher", ()=>blobHasher);
var _tslib = require("tslib");
var _chunkedBlobReader = require("@aws-sdk/chunked-blob-reader");
var blobHasher = function blobHasher(hashCtor, blob) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var hash;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    hash = new hashCtor();
                    return [
                        4 /*yield*/ ,
                        (0, _chunkedBlobReader.blobReader)(blob, function(chunk) {
                            hash.update(chunk);
                        })
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        hash.digest()
                    ];
            }
        });
    });
};

},{"tslib":"kufYD","@aws-sdk/chunked-blob-reader":"ky1RI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kufYD":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ky1RI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "blobReader", ()=>blobReader);
function blobReader(blob, onChunk, chunkSize) {
    if (chunkSize === void 0) chunkSize = 1048576;
    return new Promise(function(resolve, reject) {
        var fileReader = new FileReader();
        fileReader.addEventListener("error", reject);
        fileReader.addEventListener("abort", reject);
        var size = blob.size;
        var totalBytesRead = 0;
        function read() {
            if (totalBytesRead >= size) {
                resolve();
                return;
            }
            fileReader.readAsArrayBuffer(blob.slice(totalBytesRead, Math.min(size, totalBytesRead + chunkSize)));
        }
        fileReader.addEventListener("load", function(event) {
            var result = event.target.result;
            onChunk(new Uint8Array(result));
            totalBytesRead += result.byteLength;
            // read the next block
            read();
        });
        // kick off the read
        read();
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9qNiu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Md5", ()=>Md5);
var _tslib = require("tslib");
var _utilUtf8Browser = require("@aws-sdk/util-utf8-browser");
var _constants = require("./constants");
var Md5 = /** @class */ function() {
    function Md5() {
        this.state = Uint32Array.from((0, _constants.INIT));
        this.buffer = new DataView(new ArrayBuffer((0, _constants.BLOCK_SIZE)));
        this.bufferLength = 0;
        this.bytesHashed = 0;
        this.finished = false;
    }
    Md5.prototype.update = function(sourceData) {
        if (isEmptyData(sourceData)) return;
        else if (this.finished) throw new Error("Attempted to update an already finished hash.");
        var data = convertToBuffer(sourceData);
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        while(byteLength > 0){
            this.buffer.setUint8(this.bufferLength++, data[position++]);
            byteLength--;
            if (this.bufferLength === (0, _constants.BLOCK_SIZE)) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    };
    Md5.prototype.digest = function() {
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            var _a, buffer, undecoratedLength, bytesHashed, bitsHashed, i, i, out, i;
            return (0, _tslib.__generator)(this, function(_b) {
                if (!this.finished) {
                    _a = this, buffer = _a.buffer, undecoratedLength = _a.bufferLength, bytesHashed = _a.bytesHashed;
                    bitsHashed = bytesHashed * 8;
                    buffer.setUint8(this.bufferLength++, 128);
                    // Ensure the final block has enough room for the hashed length
                    if (undecoratedLength % (0, _constants.BLOCK_SIZE) >= (0, _constants.BLOCK_SIZE) - 8) {
                        for(i = this.bufferLength; i < (0, _constants.BLOCK_SIZE); i++)buffer.setUint8(i, 0);
                        this.hashBuffer();
                        this.bufferLength = 0;
                    }
                    for(i = this.bufferLength; i < (0, _constants.BLOCK_SIZE) - 8; i++)buffer.setUint8(i, 0);
                    buffer.setUint32((0, _constants.BLOCK_SIZE) - 8, bitsHashed >>> 0, true);
                    buffer.setUint32((0, _constants.BLOCK_SIZE) - 4, Math.floor(bitsHashed / 0x100000000), true);
                    this.hashBuffer();
                    this.finished = true;
                }
                out = new DataView(new ArrayBuffer((0, _constants.DIGEST_LENGTH)));
                for(i = 0; i < 4; i++)out.setUint32(i * 4, this.state[i], true);
                return [
                    2 /*return*/ ,
                    new Uint8Array(out.buffer, out.byteOffset, out.byteLength)
                ];
            });
        });
    };
    Md5.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var a = state[0], b = state[1], c = state[2], d = state[3];
        a = ff(a, b, c, d, buffer.getUint32(0, true), 7, 0xd76aa478);
        d = ff(d, a, b, c, buffer.getUint32(4, true), 12, 0xe8c7b756);
        c = ff(c, d, a, b, buffer.getUint32(8, true), 17, 0x242070db);
        b = ff(b, c, d, a, buffer.getUint32(12, true), 22, 0xc1bdceee);
        a = ff(a, b, c, d, buffer.getUint32(16, true), 7, 0xf57c0faf);
        d = ff(d, a, b, c, buffer.getUint32(20, true), 12, 0x4787c62a);
        c = ff(c, d, a, b, buffer.getUint32(24, true), 17, 0xa8304613);
        b = ff(b, c, d, a, buffer.getUint32(28, true), 22, 0xfd469501);
        a = ff(a, b, c, d, buffer.getUint32(32, true), 7, 0x698098d8);
        d = ff(d, a, b, c, buffer.getUint32(36, true), 12, 0x8b44f7af);
        c = ff(c, d, a, b, buffer.getUint32(40, true), 17, 0xffff5bb1);
        b = ff(b, c, d, a, buffer.getUint32(44, true), 22, 0x895cd7be);
        a = ff(a, b, c, d, buffer.getUint32(48, true), 7, 0x6b901122);
        d = ff(d, a, b, c, buffer.getUint32(52, true), 12, 0xfd987193);
        c = ff(c, d, a, b, buffer.getUint32(56, true), 17, 0xa679438e);
        b = ff(b, c, d, a, buffer.getUint32(60, true), 22, 0x49b40821);
        a = gg(a, b, c, d, buffer.getUint32(4, true), 5, 0xf61e2562);
        d = gg(d, a, b, c, buffer.getUint32(24, true), 9, 0xc040b340);
        c = gg(c, d, a, b, buffer.getUint32(44, true), 14, 0x265e5a51);
        b = gg(b, c, d, a, buffer.getUint32(0, true), 20, 0xe9b6c7aa);
        a = gg(a, b, c, d, buffer.getUint32(20, true), 5, 0xd62f105d);
        d = gg(d, a, b, c, buffer.getUint32(40, true), 9, 0x02441453);
        c = gg(c, d, a, b, buffer.getUint32(60, true), 14, 0xd8a1e681);
        b = gg(b, c, d, a, buffer.getUint32(16, true), 20, 0xe7d3fbc8);
        a = gg(a, b, c, d, buffer.getUint32(36, true), 5, 0x21e1cde6);
        d = gg(d, a, b, c, buffer.getUint32(56, true), 9, 0xc33707d6);
        c = gg(c, d, a, b, buffer.getUint32(12, true), 14, 0xf4d50d87);
        b = gg(b, c, d, a, buffer.getUint32(32, true), 20, 0x455a14ed);
        a = gg(a, b, c, d, buffer.getUint32(52, true), 5, 0xa9e3e905);
        d = gg(d, a, b, c, buffer.getUint32(8, true), 9, 0xfcefa3f8);
        c = gg(c, d, a, b, buffer.getUint32(28, true), 14, 0x676f02d9);
        b = gg(b, c, d, a, buffer.getUint32(48, true), 20, 0x8d2a4c8a);
        a = hh(a, b, c, d, buffer.getUint32(20, true), 4, 0xfffa3942);
        d = hh(d, a, b, c, buffer.getUint32(32, true), 11, 0x8771f681);
        c = hh(c, d, a, b, buffer.getUint32(44, true), 16, 0x6d9d6122);
        b = hh(b, c, d, a, buffer.getUint32(56, true), 23, 0xfde5380c);
        a = hh(a, b, c, d, buffer.getUint32(4, true), 4, 0xa4beea44);
        d = hh(d, a, b, c, buffer.getUint32(16, true), 11, 0x4bdecfa9);
        c = hh(c, d, a, b, buffer.getUint32(28, true), 16, 0xf6bb4b60);
        b = hh(b, c, d, a, buffer.getUint32(40, true), 23, 0xbebfbc70);
        a = hh(a, b, c, d, buffer.getUint32(52, true), 4, 0x289b7ec6);
        d = hh(d, a, b, c, buffer.getUint32(0, true), 11, 0xeaa127fa);
        c = hh(c, d, a, b, buffer.getUint32(12, true), 16, 0xd4ef3085);
        b = hh(b, c, d, a, buffer.getUint32(24, true), 23, 0x04881d05);
        a = hh(a, b, c, d, buffer.getUint32(36, true), 4, 0xd9d4d039);
        d = hh(d, a, b, c, buffer.getUint32(48, true), 11, 0xe6db99e5);
        c = hh(c, d, a, b, buffer.getUint32(60, true), 16, 0x1fa27cf8);
        b = hh(b, c, d, a, buffer.getUint32(8, true), 23, 0xc4ac5665);
        a = ii(a, b, c, d, buffer.getUint32(0, true), 6, 0xf4292244);
        d = ii(d, a, b, c, buffer.getUint32(28, true), 10, 0x432aff97);
        c = ii(c, d, a, b, buffer.getUint32(56, true), 15, 0xab9423a7);
        b = ii(b, c, d, a, buffer.getUint32(20, true), 21, 0xfc93a039);
        a = ii(a, b, c, d, buffer.getUint32(48, true), 6, 0x655b59c3);
        d = ii(d, a, b, c, buffer.getUint32(12, true), 10, 0x8f0ccc92);
        c = ii(c, d, a, b, buffer.getUint32(40, true), 15, 0xffeff47d);
        b = ii(b, c, d, a, buffer.getUint32(4, true), 21, 0x85845dd1);
        a = ii(a, b, c, d, buffer.getUint32(32, true), 6, 0x6fa87e4f);
        d = ii(d, a, b, c, buffer.getUint32(60, true), 10, 0xfe2ce6e0);
        c = ii(c, d, a, b, buffer.getUint32(24, true), 15, 0xa3014314);
        b = ii(b, c, d, a, buffer.getUint32(52, true), 21, 0x4e0811a1);
        a = ii(a, b, c, d, buffer.getUint32(16, true), 6, 0xf7537e82);
        d = ii(d, a, b, c, buffer.getUint32(44, true), 10, 0xbd3af235);
        c = ii(c, d, a, b, buffer.getUint32(8, true), 15, 0x2ad7d2bb);
        b = ii(b, c, d, a, buffer.getUint32(36, true), 21, 0xeb86d391);
        state[0] = a + state[0] & 0xffffffff;
        state[1] = b + state[1] & 0xffffffff;
        state[2] = c + state[2] & 0xffffffff;
        state[3] = d + state[3] & 0xffffffff;
    };
    return Md5;
}();
function cmn(q, a, b, x, s, t) {
    a = (a + q & 0xffffffff) + (x + t & 0xffffffff) & 0xffffffff;
    return (a << s | a >>> 32 - s) + b & 0xffffffff;
}
function ff(a, b, c, d, x, s, t) {
    return cmn(b & c | ~b & d, a, b, x, s, t);
}
function gg(a, b, c, d, x, s, t) {
    return cmn(b & d | c & ~d, a, b, x, s, t);
}
function hh(a, b, c, d, x, s, t) {
    return cmn(b ^ c ^ d, a, b, x, s, t);
}
function ii(a, b, c, d, x, s, t) {
    return cmn(c ^ (b | ~d), a, b, x, s, t);
}
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
function convertToBuffer(data) {
    if (typeof data === "string") return (0, _utilUtf8Browser.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}

},{"tslib":"fE4L0","@aws-sdk/util-utf8-browser":"aUJSS","./constants":"2wiUW","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fE4L0":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2wiUW":[function(require,module,exports) {
/**
 * @internal
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BLOCK_SIZE", ()=>BLOCK_SIZE);
parcelHelpers.export(exports, "DIGEST_LENGTH", ()=>DIGEST_LENGTH);
parcelHelpers.export(exports, "INIT", ()=>INIT);
var BLOCK_SIZE = 64;
var DIGEST_LENGTH = 16;
var INIT = [
    0x67452301,
    0xefcdab89,
    0x98badcfe,
    0x10325476
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1fLwG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ClientSharedValues", ()=>ClientSharedValues);
var _endpoints = require("./endpoints");
var _urlParser = require("@aws-sdk/url-parser");
var ClientSharedValues = {
    apiVersion: "2006-03-01",
    disableHostPrefix: false,
    logger: {},
    regionInfoProvider: (0, _endpoints.defaultRegionInfoProvider),
    serviceId: "S3",
    signingEscapePath: false,
    urlParser: (0, _urlParser.parseUrl),
    useArnRegion: false
};

},{"./endpoints":"de7Ge","@aws-sdk/url-parser":"aIEzl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"de7Ge":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultRegionInfoProvider", ()=>defaultRegionInfoProvider);
var _tslib = require("tslib");
// Partition default templates
var AWS_TEMPLATE = "s3.{region}.amazonaws.com";
var AWS_CN_TEMPLATE = "s3.{region}.amazonaws.com.cn";
var AWS_ISO_TEMPLATE = "s3.{region}.c2s.ic.gov";
var AWS_ISO_B_TEMPLATE = "s3.{region}.sc2s.sgov.gov";
var AWS_US_GOV_TEMPLATE = "s3.{region}.amazonaws.com";
// Partition regions
var AWS_REGIONS = new Set([
    "af-south-1",
    "ap-east-1",
    "ap-northeast-1",
    "ap-northeast-2",
    "ap-south-1",
    "ap-southeast-1",
    "ap-southeast-2",
    "ca-central-1",
    "eu-central-1",
    "eu-north-1",
    "eu-south-1",
    "eu-west-1",
    "eu-west-2",
    "eu-west-3",
    "me-south-1",
    "sa-east-1",
    "us-east-1",
    "us-east-2",
    "us-west-1",
    "us-west-2"
]);
var AWS_CN_REGIONS = new Set([
    "cn-north-1",
    "cn-northwest-1"
]);
var AWS_ISO_REGIONS = new Set([
    "us-iso-east-1"
]);
var AWS_ISO_B_REGIONS = new Set([
    "us-isob-east-1"
]);
var AWS_US_GOV_REGIONS = new Set([
    "us-gov-east-1",
    "us-gov-west-1"
]);
var defaultRegionInfoProvider = function(region, options) {
    var regionInfo = undefined;
    switch(region){
        // First, try to match exact region names.
        case "af-south-1":
            regionInfo = {
                hostname: "s3.af-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-east-1":
            regionInfo = {
                hostname: "s3.ap-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-northeast-1":
            regionInfo = {
                hostname: "s3.ap-northeast-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-northeast-2":
            regionInfo = {
                hostname: "s3.ap-northeast-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-south-1":
            regionInfo = {
                hostname: "s3.ap-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-southeast-1":
            regionInfo = {
                hostname: "s3.ap-southeast-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "ap-southeast-2":
            regionInfo = {
                hostname: "s3.ap-southeast-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "aws-global":
            regionInfo = {
                hostname: "s3.amazonaws.com",
                partition: "aws",
                signingRegion: "us-east-1"
            };
            break;
        case "ca-central-1":
            regionInfo = {
                hostname: "s3.ca-central-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "cn-north-1":
            regionInfo = {
                hostname: "s3.cn-north-1.amazonaws.com.cn",
                partition: "aws-cn"
            };
            break;
        case "cn-northwest-1":
            regionInfo = {
                hostname: "s3.cn-northwest-1.amazonaws.com.cn",
                partition: "aws-cn"
            };
            break;
        case "eu-central-1":
            regionInfo = {
                hostname: "s3.eu-central-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-north-1":
            regionInfo = {
                hostname: "s3.eu-north-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-south-1":
            regionInfo = {
                hostname: "s3.eu-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-1":
            regionInfo = {
                hostname: "s3.eu-west-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-2":
            regionInfo = {
                hostname: "s3.eu-west-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "eu-west-3":
            regionInfo = {
                hostname: "s3.eu-west-3.amazonaws.com",
                partition: "aws"
            };
            break;
        case "fips-us-gov-west-1":
            regionInfo = {
                hostname: "s3-fips.us-gov-west-1.amazonaws.com",
                partition: "aws-us-gov",
                signingRegion: "us-gov-west-1"
            };
            break;
        case "me-south-1":
            regionInfo = {
                hostname: "s3.me-south-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "s3-external-1":
            regionInfo = {
                hostname: "s3-external-1.amazonaws.com",
                partition: "aws",
                signingRegion: "us-east-1"
            };
            break;
        case "sa-east-1":
            regionInfo = {
                hostname: "s3.sa-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-east-1":
            regionInfo = {
                hostname: "s3.us-east-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-east-2":
            regionInfo = {
                hostname: "s3.us-east-2.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-gov-east-1":
            regionInfo = {
                hostname: "s3.us-gov-east-1.amazonaws.com",
                partition: "aws-us-gov"
            };
            break;
        case "us-gov-west-1":
            regionInfo = {
                hostname: "s3.us-gov-west-1.amazonaws.com",
                partition: "aws-us-gov"
            };
            break;
        case "us-iso-east-1":
            regionInfo = {
                hostname: "s3.us-iso-east-1.c2s.ic.gov",
                partition: "aws-iso"
            };
            break;
        case "us-isob-east-1":
            regionInfo = {
                hostname: "s3.us-isob-east-1.sc2s.sgov.gov",
                partition: "aws-iso-b"
            };
            break;
        case "us-west-1":
            regionInfo = {
                hostname: "s3.us-west-1.amazonaws.com",
                partition: "aws"
            };
            break;
        case "us-west-2":
            regionInfo = {
                hostname: "s3.us-west-2.amazonaws.com",
                partition: "aws"
            };
            break;
        // Next, try to match partition endpoints.
        default:
            if (AWS_REGIONS.has(region)) regionInfo = {
                hostname: AWS_TEMPLATE.replace("{region}", region),
                partition: "aws"
            };
            if (AWS_CN_REGIONS.has(region)) regionInfo = {
                hostname: AWS_CN_TEMPLATE.replace("{region}", region),
                partition: "aws-cn"
            };
            if (AWS_ISO_REGIONS.has(region)) regionInfo = {
                hostname: AWS_ISO_TEMPLATE.replace("{region}", region),
                partition: "aws-iso"
            };
            if (AWS_ISO_B_REGIONS.has(region)) regionInfo = {
                hostname: AWS_ISO_B_TEMPLATE.replace("{region}", region),
                partition: "aws-iso-b"
            };
            if (AWS_US_GOV_REGIONS.has(region)) regionInfo = {
                hostname: AWS_US_GOV_TEMPLATE.replace("{region}", region),
                partition: "aws-us-gov"
            };
            // Finally, assume it's an AWS partition endpoint.
            if (regionInfo === undefined) regionInfo = {
                hostname: AWS_TEMPLATE.replace("{region}", region),
                partition: "aws"
            };
    }
    return Promise.resolve((0, _tslib.__assign)({
        signingService: "s3"
    }, regionInfo));
};

},{"tslib":"lRdW5","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bRv2r":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _eventStreamSerdeConfig = require("./EventStreamSerdeConfig");
parcelHelpers.exportAll(_eventStreamSerdeConfig, exports);

},{"./EventStreamSerdeConfig":"l44vw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l44vw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEventStreamSerdeConfig", ()=>resolveEventStreamSerdeConfig);
var _tslib = require("tslib");
var resolveEventStreamSerdeConfig = function(input) {
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        eventStreamMarshaller: input.eventStreamSerdeProvider(input)
    });
};

},{"tslib":"lkdtu","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lkdtu":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3KDXC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getArnResources", ()=>(0, _bucketHostnameUtils.getArnResources));
parcelHelpers.export(exports, "getPseudoRegion", ()=>(0, _bucketHostnameUtils.getPseudoRegion));
parcelHelpers.export(exports, "getSuffixForArnEndpoint", ()=>(0, _bucketHostnameUtils.getSuffixForArnEndpoint));
parcelHelpers.export(exports, "validateOutpostService", ()=>(0, _bucketHostnameUtils.validateOutpostService));
parcelHelpers.export(exports, "validatePartition", ()=>(0, _bucketHostnameUtils.validatePartition));
parcelHelpers.export(exports, "validateAccountId", ()=>(0, _bucketHostnameUtils.validateAccountId));
parcelHelpers.export(exports, "validateRegion", ()=>(0, _bucketHostnameUtils.validateRegion));
parcelHelpers.export(exports, "validateDNSHostLabel", ()=>(0, _bucketHostnameUtils.validateDNSHostLabel));
parcelHelpers.export(exports, "validateNoDualstack", ()=>(0, _bucketHostnameUtils.validateNoDualstack));
parcelHelpers.export(exports, "validateNoFIPS", ()=>(0, _bucketHostnameUtils.validateNoFIPS));
var _bucketEndpointMiddleware = require("./bucketEndpointMiddleware");
parcelHelpers.exportAll(_bucketEndpointMiddleware, exports);
var _bucketHostname = require("./bucketHostname");
parcelHelpers.exportAll(_bucketHostname, exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _bucketHostnameUtils = require("./bucketHostnameUtils");

},{"./bucketEndpointMiddleware":"6b3HV","./bucketHostname":"dGZ2j","./configurations":"K7C9V","./bucketHostnameUtils":"iVYj6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6b3HV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bucketEndpointMiddleware", ()=>bucketEndpointMiddleware);
parcelHelpers.export(exports, "bucketEndpointMiddlewareOptions", ()=>bucketEndpointMiddlewareOptions);
parcelHelpers.export(exports, "getBucketEndpointPlugin", ()=>getBucketEndpointPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _utilArnParser = require("@aws-sdk/util-arn-parser");
var _bucketHostname = require("./bucketHostname");
var _bucketHostnameUtils = require("./bucketHostnameUtils");
var bucketEndpointMiddleware = function(options) {
    return function(next, context) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var bucketName, replaceBucketInPath, request, bucketArn, clientRegion, _a, _b, partition, _c, signingRegion, useArnRegion, _d, hostname, bucketEndpoint, modifiedSigningRegion, signingService, clientRegion, _e, _f, hostname, bucketEndpoint;
                return (0, _tslib.__generator)(this, function(_g) {
                    switch(_g.label){
                        case 0:
                            bucketName = args.input.Bucket;
                            replaceBucketInPath = options.bucketEndpoint;
                            request = args.request;
                            if (!(0, _protocolHttp.HttpRequest).isInstance(request)) return [
                                3 /*break*/ ,
                                8
                            ];
                            if (!options.bucketEndpoint) return [
                                3 /*break*/ ,
                                1
                            ];
                            request.hostname = bucketName;
                            return [
                                3 /*break*/ ,
                                7
                            ];
                        case 1:
                            if (!(0, _utilArnParser.validate)(bucketName)) return [
                                3 /*break*/ ,
                                5
                            ];
                            bucketArn = (0, _utilArnParser.parse)(bucketName);
                            _a = (0, _bucketHostnameUtils.getPseudoRegion);
                            return [
                                4 /*yield*/ ,
                                options.region()
                            ];
                        case 2:
                            clientRegion = _a.apply(void 0, [
                                _g.sent()
                            ]);
                            return [
                                4 /*yield*/ ,
                                options.regionInfoProvider(clientRegion)
                            ];
                        case 3:
                            _b = _g.sent() || {}, partition = _b.partition, _c = _b.signingRegion, signingRegion = _c === void 0 ? clientRegion : _c;
                            return [
                                4 /*yield*/ ,
                                options.useArnRegion()
                            ];
                        case 4:
                            useArnRegion = _g.sent();
                            _d = (0, _bucketHostname.bucketHostname)({
                                bucketName: bucketArn,
                                baseHostname: request.hostname,
                                accelerateEndpoint: options.useAccelerateEndpoint,
                                dualstackEndpoint: options.useDualstackEndpoint,
                                pathStyleEndpoint: options.forcePathStyle,
                                tlsCompatible: request.protocol === "https:",
                                useArnRegion: useArnRegion,
                                clientPartition: partition,
                                clientSigningRegion: signingRegion,
                                clientRegion: clientRegion,
                                isCustomEndpoint: options.isCustomEndpoint
                            }), hostname = _d.hostname, bucketEndpoint = _d.bucketEndpoint, modifiedSigningRegion = _d.signingRegion, signingService = _d.signingService;
                            // If the request needs to use a region or service name inferred from ARN that different from client region, we
                            // need to set them in the handler context so the signer will use them
                            if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) context["signing_region"] = modifiedSigningRegion;
                            if (signingService && signingService !== "s3") context["signing_service"] = signingService;
                            request.hostname = hostname;
                            replaceBucketInPath = bucketEndpoint;
                            return [
                                3 /*break*/ ,
                                7
                            ];
                        case 5:
                            _e = (0, _bucketHostnameUtils.getPseudoRegion);
                            return [
                                4 /*yield*/ ,
                                options.region()
                            ];
                        case 6:
                            clientRegion = _e.apply(void 0, [
                                _g.sent()
                            ]);
                            _f = (0, _bucketHostname.bucketHostname)({
                                bucketName: bucketName,
                                clientRegion: clientRegion,
                                baseHostname: request.hostname,
                                accelerateEndpoint: options.useAccelerateEndpoint,
                                dualstackEndpoint: options.useDualstackEndpoint,
                                pathStyleEndpoint: options.forcePathStyle,
                                tlsCompatible: request.protocol === "https:",
                                isCustomEndpoint: options.isCustomEndpoint
                            }), hostname = _f.hostname, bucketEndpoint = _f.bucketEndpoint;
                            request.hostname = hostname;
                            replaceBucketInPath = bucketEndpoint;
                            _g.label = 7;
                        case 7:
                            if (replaceBucketInPath) {
                                request.path = request.path.replace(/^(\/)?[^\/]+/, "");
                                if (request.path === "") request.path = "/";
                            }
                            _g.label = 8;
                        case 8:
                            return [
                                2 /*return*/ ,
                                next((0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
                                    request: request
                                }))
                            ];
                    }
                });
            });
        };
    };
};
var bucketEndpointMiddlewareOptions = {
    tags: [
        "BUCKET_ENDPOINT"
    ],
    name: "bucketEndpointMiddleware",
    relation: "before",
    toMiddleware: "hostHeaderMiddleware",
    override: true
};
var getBucketEndpointPlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);
        }
    };
};

},{"tslib":"eJux0","@aws-sdk/protocol-http":"dbzKK","@aws-sdk/util-arn-parser":"iQtwj","./bucketHostname":"dGZ2j","./bucketHostnameUtils":"iVYj6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eJux0":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iQtwj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validate", ()=>validate);
parcelHelpers.export(exports, "parse", ()=>parse);
parcelHelpers.export(exports, "build", ()=>build);
var _tslib = require("tslib");
var validate = function(str) {
    return typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
};
var parse = function(arn) {
    var segments = arn.split(":");
    if (segments.length < 6 || segments[0] !== "arn") throw new Error("Malformed ARN");
    var _a = (0, _tslib.__read)(segments), //Skip "arn" literal
    partition = _a[1], service = _a[2], region = _a[3], accountId = _a[4], resource = _a.slice(5);
    return {
        partition: partition,
        service: service,
        region: region,
        accountId: accountId,
        resource: resource.join(":")
    };
};
var build = function(arnObject) {
    var _a = arnObject.partition, partition = _a === void 0 ? "aws" : _a, service = arnObject.service, region = arnObject.region, accountId = arnObject.accountId, resource = arnObject.resource;
    if ([
        service,
        region,
        accountId,
        resource
    ].some(function(segment) {
        return typeof segment !== "string";
    })) throw new Error("Input ARN object is invalid");
    return "arn:" + partition + ":" + service + ":" + region + ":" + accountId + ":" + resource;
};

},{"tslib":"884a8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"884a8":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dGZ2j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "bucketHostname", ()=>bucketHostname);
var _tslib = require("tslib");
var _bucketHostnameUtils = require("./bucketHostnameUtils");
var bucketHostname = function(options) {
    var isCustomEndpoint = options.isCustomEndpoint, baseHostname = options.baseHostname, dualstackEndpoint = options.dualstackEndpoint, accelerateEndpoint = options.accelerateEndpoint;
    if (isCustomEndpoint) {
        if (dualstackEndpoint) throw new Error("Dualstack endpoint is not supported with custom endpoint");
        if (accelerateEndpoint) throw new Error("Accelerate endpoint is not supported with custom endpoint");
    }
    return (0, _bucketHostnameUtils.isBucketNameOptions)(options) ? getEndpointFromBucketName((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        isCustomEndpoint: isCustomEndpoint
    })) : getEndpointFromArn((0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
        isCustomEndpoint: isCustomEndpoint
    }));
};
var getEndpointFromArn = function(options) {
    var isCustomEndpoint = options.isCustomEndpoint, baseHostname = options.baseHostname;
    var _a = (0, _tslib.__read)(isCustomEndpoint ? [
        options.clientRegion,
        baseHostname
    ] : (0, _bucketHostnameUtils.getSuffixForArnEndpoint)(baseHostname), 2), clientRegion = _a[0], hostnameSuffix = _a[1];
    var pathStyleEndpoint = options.pathStyleEndpoint, _b = options.dualstackEndpoint, dualstackEndpoint = _b === void 0 ? false : _b, _c = options.accelerateEndpoint, accelerateEndpoint = _c === void 0 ? false : _c, _d = options.tlsCompatible, tlsCompatible = _d === void 0 ? true : _d, useArnRegion = options.useArnRegion, bucketName = options.bucketName, _e = options.clientPartition, clientPartition = _e === void 0 ? "aws" : _e, _f = options.clientSigningRegion, clientSigningRegion = _f === void 0 ? clientRegion : _f;
    (0, _bucketHostnameUtils.validateArnEndpointOptions)({
        pathStyleEndpoint: pathStyleEndpoint,
        accelerateEndpoint: accelerateEndpoint,
        tlsCompatible: tlsCompatible
    });
    // Validate and parse the ARN supplied as a bucket name
    var service = bucketName.service, partition = bucketName.partition, accountId = bucketName.accountId, region = bucketName.region, resource = bucketName.resource;
    (0, _bucketHostnameUtils.validateService)(service);
    (0, _bucketHostnameUtils.validatePartition)(partition, {
        clientPartition: clientPartition
    });
    (0, _bucketHostnameUtils.validateAccountId)(accountId);
    (0, _bucketHostnameUtils.validateRegion)(region, {
        useArnRegion: useArnRegion,
        clientRegion: clientRegion,
        clientSigningRegion: clientSigningRegion
    });
    var _g = (0, _bucketHostnameUtils.getArnResources)(resource), accesspointName = _g.accesspointName, outpostId = _g.outpostId;
    (0, _bucketHostnameUtils.validateDNSHostLabel)(accesspointName + "-" + accountId, {
        tlsCompatible: tlsCompatible
    });
    var endpointRegion = useArnRegion ? region : clientRegion;
    var signingRegion = useArnRegion ? region : clientSigningRegion;
    if (outpostId) {
        // if this is an Outpost ARN
        (0, _bucketHostnameUtils.validateOutpostService)(service);
        (0, _bucketHostnameUtils.validateDNSHostLabel)(outpostId, {
            tlsCompatible: tlsCompatible
        });
        (0, _bucketHostnameUtils.validateNoDualstack)(dualstackEndpoint);
        (0, _bucketHostnameUtils.validateNoFIPS)(endpointRegion);
        var hostnamePrefix_1 = accesspointName + "-" + accountId + "." + outpostId;
        return {
            bucketEndpoint: true,
            hostname: "" + hostnamePrefix_1 + (isCustomEndpoint ? "" : ".s3-outposts." + endpointRegion) + "." + hostnameSuffix,
            signingRegion: signingRegion,
            signingService: "s3-outposts"
        };
    }
    // construct endpoint from Accesspoint ARN
    (0, _bucketHostnameUtils.validateS3Service)(service);
    var hostnamePrefix = accesspointName + "-" + accountId;
    return {
        bucketEndpoint: true,
        hostname: "" + hostnamePrefix + (isCustomEndpoint ? "" : ".s3-accesspoint" + (dualstackEndpoint ? ".dualstack" : "") + "." + endpointRegion) + "." + hostnameSuffix,
        signingRegion: signingRegion
    };
};
var getEndpointFromBucketName = function(_a) {
    var _b = _a.accelerateEndpoint, accelerateEndpoint = _b === void 0 ? false : _b, region = _a.clientRegion, baseHostname = _a.baseHostname, bucketName = _a.bucketName, _c = _a.dualstackEndpoint, dualstackEndpoint = _c === void 0 ? false : _c, _d = _a.pathStyleEndpoint, pathStyleEndpoint = _d === void 0 ? false : _d, _e = _a.tlsCompatible, tlsCompatible = _e === void 0 ? true : _e, _f = _a.isCustomEndpoint, isCustomEndpoint = _f === void 0 ? false : _f;
    var _g = (0, _tslib.__read)(isCustomEndpoint ? [
        region,
        baseHostname
    ] : (0, _bucketHostnameUtils.getSuffix)(baseHostname), 2), clientRegion = _g[0], hostnameSuffix = _g[1];
    if (pathStyleEndpoint || !(0, _bucketHostnameUtils.isDnsCompatibleBucketName)(bucketName) || tlsCompatible && (0, _bucketHostnameUtils.DOT_PATTERN).test(bucketName)) return {
        bucketEndpoint: false,
        hostname: dualstackEndpoint ? "s3.dualstack." + clientRegion + "." + hostnameSuffix : baseHostname
    };
    if (accelerateEndpoint) baseHostname = "s3-accelerate" + (dualstackEndpoint ? ".dualstack" : "") + "." + hostnameSuffix;
    else if (dualstackEndpoint) baseHostname = "s3.dualstack." + clientRegion + "." + hostnameSuffix;
    return {
        bucketEndpoint: true,
        hostname: bucketName + "." + baseHostname
    };
};

},{"tslib":"eJux0","./bucketHostnameUtils":"iVYj6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iVYj6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DOT_PATTERN", ()=>DOT_PATTERN);
parcelHelpers.export(exports, "S3_HOSTNAME_PATTERN", ()=>S3_HOSTNAME_PATTERN);
parcelHelpers.export(exports, "isBucketNameOptions", ()=>isBucketNameOptions);
parcelHelpers.export(exports, "getPseudoRegion", ()=>getPseudoRegion);
parcelHelpers.export(exports, "isDnsCompatibleBucketName", ()=>isDnsCompatibleBucketName);
parcelHelpers.export(exports, "getSuffix", ()=>getSuffix);
parcelHelpers.export(exports, "getSuffixForArnEndpoint", ()=>getSuffixForArnEndpoint);
parcelHelpers.export(exports, "validateArnEndpointOptions", ()=>validateArnEndpointOptions);
parcelHelpers.export(exports, "validateService", ()=>validateService);
parcelHelpers.export(exports, "validateS3Service", ()=>validateS3Service);
parcelHelpers.export(exports, "validateOutpostService", ()=>validateOutpostService);
parcelHelpers.export(exports, "validatePartition", ()=>validatePartition);
parcelHelpers.export(exports, "validateRegion", ()=>validateRegion);
parcelHelpers.export(exports, "validateAccountId", ()=>validateAccountId);
parcelHelpers.export(exports, "validateDNSHostLabel", ()=>validateDNSHostLabel);
parcelHelpers.export(exports, "getArnResources", ()=>getArnResources);
parcelHelpers.export(exports, "validateNoDualstack", ()=>validateNoDualstack);
parcelHelpers.export(exports, "validateNoFIPS", ()=>validateNoFIPS);
var _tslib = require("tslib");
var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
var DOTS_PATTERN = /\.\./;
var DOT_PATTERN = /\./;
var S3_HOSTNAME_PATTERN = /^(.+\.)?s3[.-]([a-z0-9-]+)\./;
var S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
var AWS_PARTITION_SUFFIX = "amazonaws.com";
var isBucketNameOptions = function(options) {
    return typeof options.bucketName === "string";
};
var getPseudoRegion = function(region) {
    return isFipsRegion(region) ? region.replace(/fips-|-fips/, "") : region;
};
var isDnsCompatibleBucketName = function(bucketName) {
    return DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
};
var getRegionalSuffix = function(hostname) {
    var parts = hostname.match(S3_HOSTNAME_PATTERN);
    return [
        parts[2],
        hostname.replace(new RegExp("^" + parts[0]), "")
    ];
};
var getSuffix = function(hostname) {
    return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [
        "us-east-1",
        AWS_PARTITION_SUFFIX
    ] : getRegionalSuffix(hostname);
};
var getSuffixForArnEndpoint = function(hostname) {
    return S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [
        hostname.replace("." + AWS_PARTITION_SUFFIX, ""),
        AWS_PARTITION_SUFFIX
    ] : getRegionalSuffix(hostname);
};
var validateArnEndpointOptions = function(options) {
    if (options.pathStyleEndpoint) throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
    if (options.accelerateEndpoint) throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
    if (!options.tlsCompatible) throw new Error("HTTPS is required when bucket is an ARN");
};
var validateService = function(service) {
    if (service !== "s3" && service !== "s3-outposts") throw new Error("Expect 's3' or 's3-outposts' in ARN service component");
};
var validateS3Service = function(service) {
    if (service !== "s3") throw new Error("Expect 's3' in Accesspoint ARN service component");
};
var validateOutpostService = function(service) {
    if (service !== "s3-outposts") throw new Error("Expect 's3-posts' in Outpost ARN service component");
};
var validatePartition = function(partition, options) {
    if (partition !== options.clientPartition) throw new Error('Partition in ARN is incompatible, got "' + partition + '" but expected "' + options.clientPartition + '"');
};
var validateRegion = function(region, options) {
    if (region === "") throw new Error("ARN region is empty");
    if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion) && !isEqualRegions(region, options.clientSigningRegion)) throw new Error("Region in ARN is incompatible, got " + region + " but expected " + options.clientRegion);
    if (options.useArnRegion && isFipsRegion(region)) throw new Error("Endpoint does not support FIPS region");
};
var isFipsRegion = function(region) {
    return region.startsWith("fips-") || region.endsWith("-fips");
};
var isEqualRegions = function(regionA, regionB) {
    return regionA === regionB || getPseudoRegion(regionA) === regionB || regionA === getPseudoRegion(regionB);
};
var validateAccountId = function(accountId) {
    if (!/[0-9]{12}/.exec(accountId)) throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
};
var validateDNSHostLabel = function(label, options) {
    if (options === void 0) options = {
        tlsCompatible: true
    };
    // reference: https://tools.ietf.org/html/rfc3986#section-3.2.2
    if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]+[a-z0-9]$/.test(label) || /(\d+\.){3}\d+/.test(label) || /[.-]{2}/.test(label) || (options === null || options === void 0 ? void 0 : options.tlsCompatible) && DOT_PATTERN.test(label)) throw new Error("Invalid DNS label " + label);
};
var getArnResources = function(resource) {
    var delimiter = resource.includes(":") ? ":" : "/";
    var _a = (0, _tslib.__read)(resource.split(delimiter)), resourceType = _a[0], rest = _a.slice(1);
    if (resourceType === "accesspoint") {
        // Parse accesspoint ARN
        if (rest.length !== 1 || rest[0] === "") throw new Error("Access Point ARN should have one resource accesspoint" + delimiter + "{accesspointname}");
        return {
            accesspointName: rest[0]
        };
    } else if (resourceType === "outpost") {
        // Parse outpost ARN
        if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) throw new Error("Outpost ARN should have resource outpost" + delimiter + "{outpostId}" + delimiter + "accesspoint" + delimiter + "{accesspointName}");
        var _b = (0, _tslib.__read)(rest, 3), outpostId = _b[0], _ = _b[1], accesspointName = _b[2];
        return {
            outpostId: outpostId,
            accesspointName: accesspointName
        };
    } else throw new Error("ARN resource should begin with 'accesspoint" + delimiter + "' or 'outpost" + delimiter + "'");
};
var validateNoDualstack = function(dualstackEndpoint) {
    if (dualstackEndpoint) throw new Error("Dualstack endpoint is not supported with Outpost");
};
var validateNoFIPS = function(region) {
    if (isFipsRegion(region !== null && region !== void 0 ? region : "")) throw new Error("FIPS region is not supported with Outpost, got " + region);
};

},{"tslib":"eJux0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"K7C9V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveBucketEndpointConfig", ()=>resolveBucketEndpointConfig);
parcelHelpers.export(exports, "NODE_USE_ARN_REGION_ENV_NAME", ()=>NODE_USE_ARN_REGION_ENV_NAME);
parcelHelpers.export(exports, "NODE_USE_ARN_REGION_INI_NAME", ()=>NODE_USE_ARN_REGION_INI_NAME);
parcelHelpers.export(exports, "NODE_USE_ARN_REGION_CONFIG_OPTIONS", ()=>NODE_USE_ARN_REGION_CONFIG_OPTIONS);
var _tslib = require("tslib");
function resolveBucketEndpointConfig(input) {
    var _a = input.bucketEndpoint, bucketEndpoint = _a === void 0 ? false : _a, _b = input.forcePathStyle, forcePathStyle = _b === void 0 ? false : _b, _c = input.useAccelerateEndpoint, useAccelerateEndpoint = _c === void 0 ? false : _c, _d = input.useDualstackEndpoint, useDualstackEndpoint = _d === void 0 ? false : _d, _e = input.useArnRegion, useArnRegion = _e === void 0 ? false : _e;
    return (0, _tslib.__assign)((0, _tslib.__assign)({}, input), {
        bucketEndpoint: bucketEndpoint,
        forcePathStyle: forcePathStyle,
        useAccelerateEndpoint: useAccelerateEndpoint,
        useDualstackEndpoint: useDualstackEndpoint,
        useArnRegion: typeof useArnRegion === "function" ? useArnRegion : function() {
            return Promise.resolve(useArnRegion);
        }
    });
}
var NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
var NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
var NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: function(env) {
        if (!Object.prototype.hasOwnProperty.call(env, NODE_USE_ARN_REGION_ENV_NAME)) return undefined;
        if (env[NODE_USE_ARN_REGION_ENV_NAME] === "true") return true;
        if (env[NODE_USE_ARN_REGION_ENV_NAME] === "false") return false;
        throw new Error("Cannot load env " + NODE_USE_ARN_REGION_ENV_NAME + '. Expected "true" or "false", got ' + env[NODE_USE_ARN_REGION_ENV_NAME] + ".");
    },
    configFileSelector: function(profile) {
        if (!Object.prototype.hasOwnProperty.call(profile, NODE_USE_ARN_REGION_INI_NAME)) return undefined;
        if (profile[NODE_USE_ARN_REGION_INI_NAME] === "true") return true;
        if (profile[NODE_USE_ARN_REGION_INI_NAME] === "false") return false;
        throw new Error("Cannot load shared config entry " + NODE_USE_ARN_REGION_INI_NAME + '. Expected "true" or "false", got ' + profile[NODE_USE_ARN_REGION_INI_NAME] + ".");
    },
    default: false
};

},{"tslib":"eJux0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fDGZX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "addExpectContinueMiddleware", ()=>addExpectContinueMiddleware);
parcelHelpers.export(exports, "addExpectContinueMiddlewareOptions", ()=>addExpectContinueMiddlewareOptions);
parcelHelpers.export(exports, "getAddExpectContinuePlugin", ()=>getAddExpectContinuePlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
function addExpectContinueMiddleware(options) {
    var _this = this;
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                var request;
                return (0, _tslib.__generator)(this, function(_a) {
                    request = args.request;
                    if ((0, _protocolHttp.HttpRequest).isInstance(request) && request.body && options.runtime === "node") request.headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, request.headers), {
                        Expect: "100-continue"
                    });
                    return [
                        2 /*return*/ ,
                        next((0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
                            request: request
                        }))
                    ];
                });
            });
        };
    };
}
var addExpectContinueMiddlewareOptions = {
    step: "build",
    tags: [
        "SET_EXPECT_HEADER",
        "EXPECT_HEADER"
    ],
    name: "addExpectContinueMiddleware",
    override: true
};
var getAddExpectContinuePlugin = function(options) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(addExpectContinueMiddleware(options), addExpectContinueMiddlewareOptions);
        }
    };
};

},{"tslib":"dWZ8d","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dWZ8d":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"km3Di":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _validateBucketName = require("./validate-bucket-name");
parcelHelpers.exportAll(_validateBucketName, exports);
var _useRegionalEndpoint = require("./use-regional-endpoint");
parcelHelpers.exportAll(_useRegionalEndpoint, exports);
var _throw200Exceptions = require("./throw-200-exceptions");
parcelHelpers.exportAll(_throw200Exceptions, exports);

},{"./validate-bucket-name":"26BFc","./use-regional-endpoint":"exr1A","./throw-200-exceptions":"gDCYV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"26BFc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * @internal
 */ parcelHelpers.export(exports, "validateBucketNameMiddleware", ()=>validateBucketNameMiddleware);
parcelHelpers.export(exports, "validateBucketNameMiddlewareOptions", ()=>validateBucketNameMiddlewareOptions);
parcelHelpers.export(exports, "getValidateBucketNamePlugin", ()=>getValidateBucketNamePlugin);
var _tslib = require("tslib");
var _utilArnParser = require("@aws-sdk/util-arn-parser");
function validateBucketNameMiddleware() {
    var _this = this;
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                var Bucket, err;
                return (0, _tslib.__generator)(this, function(_a) {
                    Bucket = args.input.Bucket;
                    if (typeof Bucket === "string" && !(0, _utilArnParser.validate)(Bucket) && Bucket.indexOf("/") >= 0) {
                        err = new Error("Bucket name shouldn't contain '/', received '" + Bucket + "'");
                        err.name = "InvalidBucketName";
                        throw err;
                    }
                    return [
                        2 /*return*/ ,
                        next((0, _tslib.__assign)({}, args))
                    ];
                });
            });
        };
    };
}
var validateBucketNameMiddlewareOptions = {
    step: "initialize",
    tags: [
        "VALIDATE_BUCKET_NAME"
    ],
    name: "validateBucketNameMiddleware",
    override: true
};
var getValidateBucketNamePlugin = function(unused) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(validateBucketNameMiddleware(), validateBucketNameMiddlewareOptions);
        }
    };
};

},{"tslib":"9YyFf","@aws-sdk/util-arn-parser":"iQtwj","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9YyFf":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"exr1A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "useRegionalEndpointMiddleware", ()=>useRegionalEndpointMiddleware);
parcelHelpers.export(exports, "useRegionalEndpointMiddlewareOptions", ()=>useRegionalEndpointMiddlewareOptions);
parcelHelpers.export(exports, "getUseRegionalEndpointPlugin", ()=>getUseRegionalEndpointPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var useRegionalEndpointMiddleware = function(config) {
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var request, _a;
                return (0, _tslib.__generator)(this, function(_b) {
                    switch(_b.label){
                        case 0:
                            request = args.request;
                            if (!(0, _protocolHttp.HttpRequest).isInstance(request) || config.isCustomEndpoint) return [
                                2 /*return*/ ,
                                next((0, _tslib.__assign)({}, args))
                            ];
                            if (!(request.hostname === "s3.amazonaws.com")) return [
                                3 /*break*/ ,
                                1
                            ];
                            request.hostname = "s3.us-east-1.amazonaws.com";
                            return [
                                3 /*break*/ ,
                                3
                            ];
                        case 1:
                            _a = "aws-global";
                            return [
                                4 /*yield*/ ,
                                config.region()
                            ];
                        case 2:
                            if (_a === _b.sent()) request.hostname = "s3.amazonaws.com";
                            _b.label = 3;
                        case 3:
                            return [
                                2 /*return*/ ,
                                next((0, _tslib.__assign)({}, args))
                            ];
                    }
                });
            });
        };
    };
};
var useRegionalEndpointMiddlewareOptions = {
    step: "build",
    tags: [
        "USE_REGIONAL_ENDPOINT",
        "S3"
    ],
    name: "useRegionalEndpointMiddleware",
    override: true
};
var getUseRegionalEndpointPlugin = function(config) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(useRegionalEndpointMiddleware(config), useRegionalEndpointMiddlewareOptions);
        }
    };
};

},{"tslib":"9YyFf","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gDCYV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "throw200ExceptionsMiddleware", ()=>throw200ExceptionsMiddleware);
parcelHelpers.export(exports, "throw200ExceptionsMiddlewareOptions", ()=>throw200ExceptionsMiddlewareOptions);
parcelHelpers.export(exports, "getThrow200ExceptionsPlugin", ()=>getThrow200ExceptionsPlugin);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var throw200ExceptionsMiddleware = function(config) {
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                var result, response, statusCode, body, bodyBytes, bodyString, err;
                return (0, _tslib.__generator)(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                next(args)
                            ];
                        case 1:
                            result = _a.sent();
                            response = result.response;
                            if (!(0, _protocolHttp.HttpResponse).isInstance(response)) return [
                                2 /*return*/ ,
                                result
                            ];
                            statusCode = response.statusCode, body = response.body;
                            if (statusCode < 200 && statusCode >= 300) return [
                                2 /*return*/ ,
                                result
                            ];
                            return [
                                4 /*yield*/ ,
                                collectBody(body, config)
                            ];
                        case 2:
                            bodyBytes = _a.sent();
                            return [
                                4 /*yield*/ ,
                                collectBodyString(bodyBytes, config)
                            ];
                        case 3:
                            bodyString = _a.sent();
                            if (bodyBytes.length === 0) {
                                err = new Error("S3 aborted request");
                                err.name = "InternalError";
                                throw err;
                            }
                            if (bodyString && bodyString.match("<Error>")) // Set the error code to 4XX so that error deserializer can parse them
                            response.statusCode = 400;
                            // Body stream is consumed and paused at this point. So replace the response.body to the collected bytes.
                            // So that the deserializer can consume the body as normal.
                            response.body = bodyBytes;
                            return [
                                2 /*return*/ ,
                                result
                            ];
                    }
                });
            });
        };
    };
};
// Collect low-level response body stream to Uint8Array.
var collectBody = function(streamBody, context) {
    if (streamBody === void 0) streamBody = new Uint8Array();
    if (streamBody instanceof Uint8Array) return Promise.resolve(streamBody);
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function(streamBody, context) {
    return collectBody(streamBody, context).then(function(body) {
        return context.utf8Encoder(body);
    });
};
var throw200ExceptionsMiddlewareOptions = {
    relation: "after",
    toMiddleware: "deserializerMiddleware",
    tags: [
        "THROW_200_EXCEPTIONS",
        "S3"
    ],
    name: "throw200ExceptionsMiddleware",
    override: true
};
var getThrow200ExceptionsPlugin = function(config) {
    return {
        applyToStack: function(clientStack) {
            clientStack.addRelativeTo(throw200ExceptionsMiddleware(config), throw200ExceptionsMiddlewareOptions);
        }
    };
};

},{"tslib":"9YyFf","@aws-sdk/protocol-http":"dbzKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7a6Hn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbortMultipartUploadCommand", ()=>AbortMultipartUploadCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>This operation aborts a multipart upload. After a multipart upload is aborted, no
 *          additional parts can be uploaded using that upload ID. The storage consumed by any
 *          previously uploaded parts will be freed. However, if any part uploads are currently in
 *          progress, those part uploads might or might not succeed. As a result, it might be necessary
 *          to abort a given multipart upload multiple times in order to completely free all storage
 *          consumed by all parts. </p>
 *          <p>To verify that all parts have been removed, so you don't get charged for the part
 *          storage, you should call the <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a> operation and ensure that
 *          the parts list is empty.</p>
 *          <p>For information about permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
 *          Permissions</a>.</p>
 *          <p>The following operations are related to <code>AbortMultipartUpload</code>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var AbortMultipartUploadCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(AbortMultipartUploadCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function AbortMultipartUploadCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ AbortMultipartUploadCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "AbortMultipartUploadCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.AbortMultipartUploadRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.AbortMultipartUploadOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    AbortMultipartUploadCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlAbortMultipartUploadCommand)(input, context);
    };
    AbortMultipartUploadCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlAbortMultipartUploadCommand)(output, context);
    };
    return AbortMultipartUploadCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e3TsS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbortIncompleteMultipartUpload", ()=>AbortIncompleteMultipartUpload);
parcelHelpers.export(exports, "AbortMultipartUploadOutput", ()=>AbortMultipartUploadOutput);
parcelHelpers.export(exports, "AbortMultipartUploadRequest", ()=>AbortMultipartUploadRequest);
parcelHelpers.export(exports, "NoSuchUpload", ()=>NoSuchUpload);
parcelHelpers.export(exports, "AccelerateConfiguration", ()=>AccelerateConfiguration);
parcelHelpers.export(exports, "Grantee", ()=>Grantee);
parcelHelpers.export(exports, "Grant", ()=>Grant);
parcelHelpers.export(exports, "Owner", ()=>Owner);
parcelHelpers.export(exports, "AccessControlPolicy", ()=>AccessControlPolicy);
parcelHelpers.export(exports, "AccessControlTranslation", ()=>AccessControlTranslation);
parcelHelpers.export(exports, "CompleteMultipartUploadOutput", ()=>CompleteMultipartUploadOutput);
parcelHelpers.export(exports, "CompletedPart", ()=>CompletedPart);
parcelHelpers.export(exports, "CompletedMultipartUpload", ()=>CompletedMultipartUpload);
parcelHelpers.export(exports, "CompleteMultipartUploadRequest", ()=>CompleteMultipartUploadRequest);
parcelHelpers.export(exports, "CopyObjectResult", ()=>CopyObjectResult);
parcelHelpers.export(exports, "CopyObjectOutput", ()=>CopyObjectOutput);
parcelHelpers.export(exports, "CopyObjectRequest", ()=>CopyObjectRequest);
parcelHelpers.export(exports, "ObjectNotInActiveTierError", ()=>ObjectNotInActiveTierError);
parcelHelpers.export(exports, "BucketAlreadyExists", ()=>BucketAlreadyExists);
parcelHelpers.export(exports, "BucketAlreadyOwnedByYou", ()=>BucketAlreadyOwnedByYou);
parcelHelpers.export(exports, "CreateBucketOutput", ()=>CreateBucketOutput);
parcelHelpers.export(exports, "CreateBucketConfiguration", ()=>CreateBucketConfiguration);
parcelHelpers.export(exports, "CreateBucketRequest", ()=>CreateBucketRequest);
parcelHelpers.export(exports, "CreateMultipartUploadOutput", ()=>CreateMultipartUploadOutput);
parcelHelpers.export(exports, "CreateMultipartUploadRequest", ()=>CreateMultipartUploadRequest);
parcelHelpers.export(exports, "DeleteBucketRequest", ()=>DeleteBucketRequest);
parcelHelpers.export(exports, "DeleteBucketAnalyticsConfigurationRequest", ()=>DeleteBucketAnalyticsConfigurationRequest);
parcelHelpers.export(exports, "DeleteBucketCorsRequest", ()=>DeleteBucketCorsRequest);
parcelHelpers.export(exports, "DeleteBucketEncryptionRequest", ()=>DeleteBucketEncryptionRequest);
parcelHelpers.export(exports, "DeleteBucketIntelligentTieringConfigurationRequest", ()=>DeleteBucketIntelligentTieringConfigurationRequest);
parcelHelpers.export(exports, "DeleteBucketInventoryConfigurationRequest", ()=>DeleteBucketInventoryConfigurationRequest);
parcelHelpers.export(exports, "DeleteBucketLifecycleRequest", ()=>DeleteBucketLifecycleRequest);
parcelHelpers.export(exports, "DeleteBucketMetricsConfigurationRequest", ()=>DeleteBucketMetricsConfigurationRequest);
parcelHelpers.export(exports, "DeleteBucketOwnershipControlsRequest", ()=>DeleteBucketOwnershipControlsRequest);
parcelHelpers.export(exports, "DeleteBucketPolicyRequest", ()=>DeleteBucketPolicyRequest);
parcelHelpers.export(exports, "DeleteBucketReplicationRequest", ()=>DeleteBucketReplicationRequest);
parcelHelpers.export(exports, "DeleteBucketTaggingRequest", ()=>DeleteBucketTaggingRequest);
parcelHelpers.export(exports, "DeleteBucketWebsiteRequest", ()=>DeleteBucketWebsiteRequest);
parcelHelpers.export(exports, "DeleteObjectOutput", ()=>DeleteObjectOutput);
parcelHelpers.export(exports, "DeleteObjectRequest", ()=>DeleteObjectRequest);
parcelHelpers.export(exports, "DeletedObject", ()=>DeletedObject);
parcelHelpers.export(exports, "_Error", ()=>_Error);
parcelHelpers.export(exports, "DeleteObjectsOutput", ()=>DeleteObjectsOutput);
parcelHelpers.export(exports, "ObjectIdentifier", ()=>ObjectIdentifier);
parcelHelpers.export(exports, "Delete", ()=>Delete);
parcelHelpers.export(exports, "DeleteObjectsRequest", ()=>DeleteObjectsRequest);
parcelHelpers.export(exports, "DeleteObjectTaggingOutput", ()=>DeleteObjectTaggingOutput);
parcelHelpers.export(exports, "DeleteObjectTaggingRequest", ()=>DeleteObjectTaggingRequest);
parcelHelpers.export(exports, "DeletePublicAccessBlockRequest", ()=>DeletePublicAccessBlockRequest);
parcelHelpers.export(exports, "GetBucketAccelerateConfigurationOutput", ()=>GetBucketAccelerateConfigurationOutput);
parcelHelpers.export(exports, "GetBucketAccelerateConfigurationRequest", ()=>GetBucketAccelerateConfigurationRequest);
parcelHelpers.export(exports, "GetBucketAclOutput", ()=>GetBucketAclOutput);
parcelHelpers.export(exports, "GetBucketAclRequest", ()=>GetBucketAclRequest);
parcelHelpers.export(exports, "Tag", ()=>Tag);
parcelHelpers.export(exports, "AnalyticsAndOperator", ()=>AnalyticsAndOperator);
parcelHelpers.export(exports, "AnalyticsFilter", ()=>AnalyticsFilter);
parcelHelpers.export(exports, "AnalyticsS3BucketDestination", ()=>AnalyticsS3BucketDestination);
parcelHelpers.export(exports, "AnalyticsExportDestination", ()=>AnalyticsExportDestination);
parcelHelpers.export(exports, "StorageClassAnalysisDataExport", ()=>StorageClassAnalysisDataExport);
parcelHelpers.export(exports, "StorageClassAnalysis", ()=>StorageClassAnalysis);
parcelHelpers.export(exports, "AnalyticsConfiguration", ()=>AnalyticsConfiguration);
parcelHelpers.export(exports, "GetBucketAnalyticsConfigurationOutput", ()=>GetBucketAnalyticsConfigurationOutput);
parcelHelpers.export(exports, "GetBucketAnalyticsConfigurationRequest", ()=>GetBucketAnalyticsConfigurationRequest);
parcelHelpers.export(exports, "CORSRule", ()=>CORSRule);
parcelHelpers.export(exports, "GetBucketCorsOutput", ()=>GetBucketCorsOutput);
parcelHelpers.export(exports, "GetBucketCorsRequest", ()=>GetBucketCorsRequest);
parcelHelpers.export(exports, "ServerSideEncryptionByDefault", ()=>ServerSideEncryptionByDefault);
parcelHelpers.export(exports, "ServerSideEncryptionRule", ()=>ServerSideEncryptionRule);
parcelHelpers.export(exports, "ServerSideEncryptionConfiguration", ()=>ServerSideEncryptionConfiguration);
parcelHelpers.export(exports, "GetBucketEncryptionOutput", ()=>GetBucketEncryptionOutput);
parcelHelpers.export(exports, "GetBucketEncryptionRequest", ()=>GetBucketEncryptionRequest);
parcelHelpers.export(exports, "IntelligentTieringAndOperator", ()=>IntelligentTieringAndOperator);
parcelHelpers.export(exports, "IntelligentTieringFilter", ()=>IntelligentTieringFilter);
parcelHelpers.export(exports, "Tiering", ()=>Tiering);
parcelHelpers.export(exports, "IntelligentTieringConfiguration", ()=>IntelligentTieringConfiguration);
parcelHelpers.export(exports, "GetBucketIntelligentTieringConfigurationOutput", ()=>GetBucketIntelligentTieringConfigurationOutput);
parcelHelpers.export(exports, "GetBucketIntelligentTieringConfigurationRequest", ()=>GetBucketIntelligentTieringConfigurationRequest);
parcelHelpers.export(exports, "SSEKMS", ()=>SSEKMS);
parcelHelpers.export(exports, "SSES3", ()=>SSES3);
parcelHelpers.export(exports, "InventoryEncryption", ()=>InventoryEncryption);
parcelHelpers.export(exports, "InventoryS3BucketDestination", ()=>InventoryS3BucketDestination);
parcelHelpers.export(exports, "InventoryDestination", ()=>InventoryDestination);
parcelHelpers.export(exports, "InventoryFilter", ()=>InventoryFilter);
parcelHelpers.export(exports, "InventorySchedule", ()=>InventorySchedule);
parcelHelpers.export(exports, "InventoryConfiguration", ()=>InventoryConfiguration);
parcelHelpers.export(exports, "GetBucketInventoryConfigurationOutput", ()=>GetBucketInventoryConfigurationOutput);
parcelHelpers.export(exports, "GetBucketInventoryConfigurationRequest", ()=>GetBucketInventoryConfigurationRequest);
parcelHelpers.export(exports, "LifecycleExpiration", ()=>LifecycleExpiration);
parcelHelpers.export(exports, "LifecycleRuleAndOperator", ()=>LifecycleRuleAndOperator);
parcelHelpers.export(exports, "LifecycleRuleFilter", ()=>LifecycleRuleFilter);
parcelHelpers.export(exports, "NoncurrentVersionExpiration", ()=>NoncurrentVersionExpiration);
parcelHelpers.export(exports, "NoncurrentVersionTransition", ()=>NoncurrentVersionTransition);
parcelHelpers.export(exports, "Transition", ()=>Transition);
parcelHelpers.export(exports, "LifecycleRule", ()=>LifecycleRule);
parcelHelpers.export(exports, "GetBucketLifecycleConfigurationOutput", ()=>GetBucketLifecycleConfigurationOutput);
parcelHelpers.export(exports, "GetBucketLifecycleConfigurationRequest", ()=>GetBucketLifecycleConfigurationRequest);
parcelHelpers.export(exports, "GetBucketLocationOutput", ()=>GetBucketLocationOutput);
parcelHelpers.export(exports, "GetBucketLocationRequest", ()=>GetBucketLocationRequest);
parcelHelpers.export(exports, "TargetGrant", ()=>TargetGrant);
parcelHelpers.export(exports, "LoggingEnabled", ()=>LoggingEnabled);
parcelHelpers.export(exports, "GetBucketLoggingOutput", ()=>GetBucketLoggingOutput);
parcelHelpers.export(exports, "GetBucketLoggingRequest", ()=>GetBucketLoggingRequest);
parcelHelpers.export(exports, "MetricsAndOperator", ()=>MetricsAndOperator);
parcelHelpers.export(exports, "MetricsFilter", ()=>MetricsFilter);
parcelHelpers.export(exports, "MetricsConfiguration", ()=>MetricsConfiguration);
parcelHelpers.export(exports, "GetBucketMetricsConfigurationOutput", ()=>GetBucketMetricsConfigurationOutput);
parcelHelpers.export(exports, "GetBucketMetricsConfigurationRequest", ()=>GetBucketMetricsConfigurationRequest);
parcelHelpers.export(exports, "GetBucketNotificationConfigurationRequest", ()=>GetBucketNotificationConfigurationRequest);
parcelHelpers.export(exports, "FilterRule", ()=>FilterRule);
parcelHelpers.export(exports, "S3KeyFilter", ()=>S3KeyFilter);
parcelHelpers.export(exports, "NotificationConfigurationFilter", ()=>NotificationConfigurationFilter);
parcelHelpers.export(exports, "LambdaFunctionConfiguration", ()=>LambdaFunctionConfiguration);
parcelHelpers.export(exports, "QueueConfiguration", ()=>QueueConfiguration);
parcelHelpers.export(exports, "TopicConfiguration", ()=>TopicConfiguration);
parcelHelpers.export(exports, "NotificationConfiguration", ()=>NotificationConfiguration);
parcelHelpers.export(exports, "OwnershipControlsRule", ()=>OwnershipControlsRule);
parcelHelpers.export(exports, "OwnershipControls", ()=>OwnershipControls);
parcelHelpers.export(exports, "GetBucketOwnershipControlsOutput", ()=>GetBucketOwnershipControlsOutput);
parcelHelpers.export(exports, "GetBucketOwnershipControlsRequest", ()=>GetBucketOwnershipControlsRequest);
parcelHelpers.export(exports, "GetBucketPolicyOutput", ()=>GetBucketPolicyOutput);
parcelHelpers.export(exports, "GetBucketPolicyRequest", ()=>GetBucketPolicyRequest);
parcelHelpers.export(exports, "PolicyStatus", ()=>PolicyStatus);
parcelHelpers.export(exports, "GetBucketPolicyStatusOutput", ()=>GetBucketPolicyStatusOutput);
parcelHelpers.export(exports, "GetBucketPolicyStatusRequest", ()=>GetBucketPolicyStatusRequest);
parcelHelpers.export(exports, "DeleteMarkerReplication", ()=>DeleteMarkerReplication);
parcelHelpers.export(exports, "EncryptionConfiguration", ()=>EncryptionConfiguration);
parcelHelpers.export(exports, "ReplicationTimeValue", ()=>ReplicationTimeValue);
parcelHelpers.export(exports, "Metrics", ()=>Metrics);
parcelHelpers.export(exports, "ReplicationTime", ()=>ReplicationTime);
parcelHelpers.export(exports, "Destination", ()=>Destination);
parcelHelpers.export(exports, "ExistingObjectReplication", ()=>ExistingObjectReplication);
parcelHelpers.export(exports, "ReplicationRuleAndOperator", ()=>ReplicationRuleAndOperator);
parcelHelpers.export(exports, "ReplicationRuleFilter", ()=>ReplicationRuleFilter);
parcelHelpers.export(exports, "ReplicaModifications", ()=>ReplicaModifications);
parcelHelpers.export(exports, "SseKmsEncryptedObjects", ()=>SseKmsEncryptedObjects);
parcelHelpers.export(exports, "SourceSelectionCriteria", ()=>SourceSelectionCriteria);
parcelHelpers.export(exports, "ReplicationRule", ()=>ReplicationRule);
parcelHelpers.export(exports, "ReplicationConfiguration", ()=>ReplicationConfiguration);
parcelHelpers.export(exports, "GetBucketReplicationOutput", ()=>GetBucketReplicationOutput);
parcelHelpers.export(exports, "GetBucketReplicationRequest", ()=>GetBucketReplicationRequest);
parcelHelpers.export(exports, "GetBucketRequestPaymentOutput", ()=>GetBucketRequestPaymentOutput);
parcelHelpers.export(exports, "GetBucketRequestPaymentRequest", ()=>GetBucketRequestPaymentRequest);
parcelHelpers.export(exports, "GetBucketTaggingOutput", ()=>GetBucketTaggingOutput);
parcelHelpers.export(exports, "GetBucketTaggingRequest", ()=>GetBucketTaggingRequest);
parcelHelpers.export(exports, "GetBucketVersioningOutput", ()=>GetBucketVersioningOutput);
parcelHelpers.export(exports, "GetBucketVersioningRequest", ()=>GetBucketVersioningRequest);
parcelHelpers.export(exports, "ErrorDocument", ()=>ErrorDocument);
parcelHelpers.export(exports, "IndexDocument", ()=>IndexDocument);
parcelHelpers.export(exports, "RedirectAllRequestsTo", ()=>RedirectAllRequestsTo);
parcelHelpers.export(exports, "Condition", ()=>Condition);
parcelHelpers.export(exports, "Redirect", ()=>Redirect);
parcelHelpers.export(exports, "RoutingRule", ()=>RoutingRule);
parcelHelpers.export(exports, "GetBucketWebsiteOutput", ()=>GetBucketWebsiteOutput);
parcelHelpers.export(exports, "GetBucketWebsiteRequest", ()=>GetBucketWebsiteRequest);
parcelHelpers.export(exports, "GetObjectOutput", ()=>GetObjectOutput);
parcelHelpers.export(exports, "GetObjectRequest", ()=>GetObjectRequest);
parcelHelpers.export(exports, "InvalidObjectState", ()=>InvalidObjectState);
parcelHelpers.export(exports, "NoSuchKey", ()=>NoSuchKey);
parcelHelpers.export(exports, "GetObjectAclOutput", ()=>GetObjectAclOutput);
parcelHelpers.export(exports, "GetObjectAclRequest", ()=>GetObjectAclRequest);
parcelHelpers.export(exports, "ObjectLockLegalHold", ()=>ObjectLockLegalHold);
parcelHelpers.export(exports, "GetObjectLegalHoldOutput", ()=>GetObjectLegalHoldOutput);
parcelHelpers.export(exports, "GetObjectLegalHoldRequest", ()=>GetObjectLegalHoldRequest);
parcelHelpers.export(exports, "DefaultRetention", ()=>DefaultRetention);
parcelHelpers.export(exports, "ObjectLockRule", ()=>ObjectLockRule);
parcelHelpers.export(exports, "ObjectLockConfiguration", ()=>ObjectLockConfiguration);
parcelHelpers.export(exports, "GetObjectLockConfigurationOutput", ()=>GetObjectLockConfigurationOutput);
parcelHelpers.export(exports, "GetObjectLockConfigurationRequest", ()=>GetObjectLockConfigurationRequest);
parcelHelpers.export(exports, "ObjectLockRetention", ()=>ObjectLockRetention);
parcelHelpers.export(exports, "GetObjectRetentionOutput", ()=>GetObjectRetentionOutput);
parcelHelpers.export(exports, "GetObjectRetentionRequest", ()=>GetObjectRetentionRequest);
parcelHelpers.export(exports, "GetObjectTaggingOutput", ()=>GetObjectTaggingOutput);
parcelHelpers.export(exports, "GetObjectTaggingRequest", ()=>GetObjectTaggingRequest);
parcelHelpers.export(exports, "GetObjectTorrentOutput", ()=>GetObjectTorrentOutput);
parcelHelpers.export(exports, "GetObjectTorrentRequest", ()=>GetObjectTorrentRequest);
parcelHelpers.export(exports, "PublicAccessBlockConfiguration", ()=>PublicAccessBlockConfiguration);
parcelHelpers.export(exports, "GetPublicAccessBlockOutput", ()=>GetPublicAccessBlockOutput);
parcelHelpers.export(exports, "GetPublicAccessBlockRequest", ()=>GetPublicAccessBlockRequest);
parcelHelpers.export(exports, "HeadBucketRequest", ()=>HeadBucketRequest);
parcelHelpers.export(exports, "NoSuchBucket", ()=>NoSuchBucket);
parcelHelpers.export(exports, "HeadObjectOutput", ()=>HeadObjectOutput);
parcelHelpers.export(exports, "HeadObjectRequest", ()=>HeadObjectRequest);
parcelHelpers.export(exports, "ListBucketAnalyticsConfigurationsOutput", ()=>ListBucketAnalyticsConfigurationsOutput);
parcelHelpers.export(exports, "ListBucketAnalyticsConfigurationsRequest", ()=>ListBucketAnalyticsConfigurationsRequest);
parcelHelpers.export(exports, "ListBucketIntelligentTieringConfigurationsOutput", ()=>ListBucketIntelligentTieringConfigurationsOutput);
parcelHelpers.export(exports, "ListBucketIntelligentTieringConfigurationsRequest", ()=>ListBucketIntelligentTieringConfigurationsRequest);
parcelHelpers.export(exports, "ListBucketInventoryConfigurationsOutput", ()=>ListBucketInventoryConfigurationsOutput);
parcelHelpers.export(exports, "ListBucketInventoryConfigurationsRequest", ()=>ListBucketInventoryConfigurationsRequest);
parcelHelpers.export(exports, "ListBucketMetricsConfigurationsOutput", ()=>ListBucketMetricsConfigurationsOutput);
parcelHelpers.export(exports, "ListBucketMetricsConfigurationsRequest", ()=>ListBucketMetricsConfigurationsRequest);
parcelHelpers.export(exports, "Bucket", ()=>Bucket);
parcelHelpers.export(exports, "ListBucketsOutput", ()=>ListBucketsOutput);
parcelHelpers.export(exports, "CommonPrefix", ()=>CommonPrefix);
parcelHelpers.export(exports, "Initiator", ()=>Initiator);
parcelHelpers.export(exports, "MultipartUpload", ()=>MultipartUpload);
parcelHelpers.export(exports, "ListMultipartUploadsOutput", ()=>ListMultipartUploadsOutput);
parcelHelpers.export(exports, "ListMultipartUploadsRequest", ()=>ListMultipartUploadsRequest);
parcelHelpers.export(exports, "_Object", ()=>_Object);
parcelHelpers.export(exports, "ListObjectsOutput", ()=>ListObjectsOutput);
parcelHelpers.export(exports, "ListObjectsRequest", ()=>ListObjectsRequest);
parcelHelpers.export(exports, "ListObjectsV2Output", ()=>ListObjectsV2Output);
parcelHelpers.export(exports, "ListObjectsV2Request", ()=>ListObjectsV2Request);
parcelHelpers.export(exports, "DeleteMarkerEntry", ()=>DeleteMarkerEntry);
parcelHelpers.export(exports, "ObjectVersion", ()=>ObjectVersion);
parcelHelpers.export(exports, "ListObjectVersionsOutput", ()=>ListObjectVersionsOutput);
parcelHelpers.export(exports, "ListObjectVersionsRequest", ()=>ListObjectVersionsRequest);
parcelHelpers.export(exports, "Part", ()=>Part);
parcelHelpers.export(exports, "ListPartsOutput", ()=>ListPartsOutput);
parcelHelpers.export(exports, "ListPartsRequest", ()=>ListPartsRequest);
parcelHelpers.export(exports, "PutBucketAccelerateConfigurationRequest", ()=>PutBucketAccelerateConfigurationRequest);
parcelHelpers.export(exports, "PutBucketAclRequest", ()=>PutBucketAclRequest);
parcelHelpers.export(exports, "PutBucketAnalyticsConfigurationRequest", ()=>PutBucketAnalyticsConfigurationRequest);
parcelHelpers.export(exports, "CORSConfiguration", ()=>CORSConfiguration);
parcelHelpers.export(exports, "PutBucketCorsRequest", ()=>PutBucketCorsRequest);
parcelHelpers.export(exports, "PutBucketEncryptionRequest", ()=>PutBucketEncryptionRequest);
parcelHelpers.export(exports, "PutBucketIntelligentTieringConfigurationRequest", ()=>PutBucketIntelligentTieringConfigurationRequest);
parcelHelpers.export(exports, "PutBucketInventoryConfigurationRequest", ()=>PutBucketInventoryConfigurationRequest);
parcelHelpers.export(exports, "BucketLifecycleConfiguration", ()=>BucketLifecycleConfiguration);
parcelHelpers.export(exports, "PutBucketLifecycleConfigurationRequest", ()=>PutBucketLifecycleConfigurationRequest);
parcelHelpers.export(exports, "BucketLoggingStatus", ()=>BucketLoggingStatus);
parcelHelpers.export(exports, "PutBucketLoggingRequest", ()=>PutBucketLoggingRequest);
parcelHelpers.export(exports, "PutBucketMetricsConfigurationRequest", ()=>PutBucketMetricsConfigurationRequest);
parcelHelpers.export(exports, "PutBucketNotificationConfigurationRequest", ()=>PutBucketNotificationConfigurationRequest);
parcelHelpers.export(exports, "PutBucketOwnershipControlsRequest", ()=>PutBucketOwnershipControlsRequest);
parcelHelpers.export(exports, "PutBucketPolicyRequest", ()=>PutBucketPolicyRequest);
parcelHelpers.export(exports, "PutBucketReplicationRequest", ()=>PutBucketReplicationRequest);
parcelHelpers.export(exports, "RequestPaymentConfiguration", ()=>RequestPaymentConfiguration);
parcelHelpers.export(exports, "PutBucketRequestPaymentRequest", ()=>PutBucketRequestPaymentRequest);
parcelHelpers.export(exports, "Tagging", ()=>Tagging);
parcelHelpers.export(exports, "PutBucketTaggingRequest", ()=>PutBucketTaggingRequest);
parcelHelpers.export(exports, "VersioningConfiguration", ()=>VersioningConfiguration);
parcelHelpers.export(exports, "PutBucketVersioningRequest", ()=>PutBucketVersioningRequest);
parcelHelpers.export(exports, "WebsiteConfiguration", ()=>WebsiteConfiguration);
parcelHelpers.export(exports, "PutBucketWebsiteRequest", ()=>PutBucketWebsiteRequest);
parcelHelpers.export(exports, "PutObjectOutput", ()=>PutObjectOutput);
parcelHelpers.export(exports, "PutObjectRequest", ()=>PutObjectRequest);
parcelHelpers.export(exports, "PutObjectAclOutput", ()=>PutObjectAclOutput);
parcelHelpers.export(exports, "PutObjectAclRequest", ()=>PutObjectAclRequest);
parcelHelpers.export(exports, "PutObjectLegalHoldOutput", ()=>PutObjectLegalHoldOutput);
parcelHelpers.export(exports, "PutObjectLegalHoldRequest", ()=>PutObjectLegalHoldRequest);
parcelHelpers.export(exports, "PutObjectLockConfigurationOutput", ()=>PutObjectLockConfigurationOutput);
parcelHelpers.export(exports, "PutObjectLockConfigurationRequest", ()=>PutObjectLockConfigurationRequest);
parcelHelpers.export(exports, "PutObjectRetentionOutput", ()=>PutObjectRetentionOutput);
parcelHelpers.export(exports, "PutObjectRetentionRequest", ()=>PutObjectRetentionRequest);
parcelHelpers.export(exports, "PutObjectTaggingOutput", ()=>PutObjectTaggingOutput);
parcelHelpers.export(exports, "PutObjectTaggingRequest", ()=>PutObjectTaggingRequest);
parcelHelpers.export(exports, "PutPublicAccessBlockRequest", ()=>PutPublicAccessBlockRequest);
parcelHelpers.export(exports, "ObjectAlreadyInActiveTierError", ()=>ObjectAlreadyInActiveTierError);
parcelHelpers.export(exports, "RestoreObjectOutput", ()=>RestoreObjectOutput);
parcelHelpers.export(exports, "GlacierJobParameters", ()=>GlacierJobParameters);
parcelHelpers.export(exports, "Encryption", ()=>Encryption);
var _tslib = require("tslib");
var _smithyClient = require("@aws-sdk/smithy-client");
var AbortIncompleteMultipartUpload;
(function(AbortIncompleteMultipartUpload) {
    AbortIncompleteMultipartUpload.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AbortIncompleteMultipartUpload || (AbortIncompleteMultipartUpload = {}));
var AbortMultipartUploadOutput;
(function(AbortMultipartUploadOutput) {
    AbortMultipartUploadOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AbortMultipartUploadOutput || (AbortMultipartUploadOutput = {}));
var AbortMultipartUploadRequest;
(function(AbortMultipartUploadRequest) {
    AbortMultipartUploadRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AbortMultipartUploadRequest || (AbortMultipartUploadRequest = {}));
var NoSuchUpload;
(function(NoSuchUpload) {
    NoSuchUpload.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(NoSuchUpload || (NoSuchUpload = {}));
var AccelerateConfiguration;
(function(AccelerateConfiguration) {
    AccelerateConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AccelerateConfiguration || (AccelerateConfiguration = {}));
var Grantee;
(function(Grantee) {
    Grantee.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Grantee || (Grantee = {}));
var Grant;
(function(Grant) {
    Grant.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Grant || (Grant = {}));
var Owner;
(function(Owner) {
    Owner.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Owner || (Owner = {}));
var AccessControlPolicy;
(function(AccessControlPolicy) {
    AccessControlPolicy.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AccessControlPolicy || (AccessControlPolicy = {}));
var AccessControlTranslation;
(function(AccessControlTranslation) {
    AccessControlTranslation.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AccessControlTranslation || (AccessControlTranslation = {}));
var CompleteMultipartUploadOutput;
(function(CompleteMultipartUploadOutput) {
    CompleteMultipartUploadOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(CompleteMultipartUploadOutput || (CompleteMultipartUploadOutput = {}));
var CompletedPart;
(function(CompletedPart) {
    CompletedPart.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CompletedPart || (CompletedPart = {}));
var CompletedMultipartUpload;
(function(CompletedMultipartUpload) {
    CompletedMultipartUpload.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CompletedMultipartUpload || (CompletedMultipartUpload = {}));
var CompleteMultipartUploadRequest;
(function(CompleteMultipartUploadRequest) {
    CompleteMultipartUploadRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CompleteMultipartUploadRequest || (CompleteMultipartUploadRequest = {}));
var CopyObjectResult;
(function(CopyObjectResult) {
    CopyObjectResult.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CopyObjectResult || (CopyObjectResult = {}));
var CopyObjectOutput;
(function(CopyObjectOutput) {
    CopyObjectOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(CopyObjectOutput || (CopyObjectOutput = {}));
var CopyObjectRequest;
(function(CopyObjectRequest) {
    CopyObjectRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.CopySourceSSECustomerKey && {
            CopySourceSSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(CopyObjectRequest || (CopyObjectRequest = {}));
var ObjectNotInActiveTierError;
(function(ObjectNotInActiveTierError) {
    ObjectNotInActiveTierError.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ObjectNotInActiveTierError || (ObjectNotInActiveTierError = {}));
var BucketAlreadyExists;
(function(BucketAlreadyExists) {
    BucketAlreadyExists.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(BucketAlreadyExists || (BucketAlreadyExists = {}));
var BucketAlreadyOwnedByYou;
(function(BucketAlreadyOwnedByYou) {
    BucketAlreadyOwnedByYou.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(BucketAlreadyOwnedByYou || (BucketAlreadyOwnedByYou = {}));
var CreateBucketOutput;
(function(CreateBucketOutput) {
    CreateBucketOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CreateBucketOutput || (CreateBucketOutput = {}));
var CreateBucketConfiguration;
(function(CreateBucketConfiguration) {
    CreateBucketConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CreateBucketConfiguration || (CreateBucketConfiguration = {}));
var CreateBucketRequest;
(function(CreateBucketRequest) {
    CreateBucketRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CreateBucketRequest || (CreateBucketRequest = {}));
var CreateMultipartUploadOutput;
(function(CreateMultipartUploadOutput) {
    CreateMultipartUploadOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(CreateMultipartUploadOutput || (CreateMultipartUploadOutput = {}));
var CreateMultipartUploadRequest;
(function(CreateMultipartUploadRequest) {
    CreateMultipartUploadRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(CreateMultipartUploadRequest || (CreateMultipartUploadRequest = {}));
var DeleteBucketRequest;
(function(DeleteBucketRequest) {
    DeleteBucketRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketRequest || (DeleteBucketRequest = {}));
var DeleteBucketAnalyticsConfigurationRequest;
(function(DeleteBucketAnalyticsConfigurationRequest) {
    DeleteBucketAnalyticsConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketAnalyticsConfigurationRequest || (DeleteBucketAnalyticsConfigurationRequest = {}));
var DeleteBucketCorsRequest;
(function(DeleteBucketCorsRequest) {
    DeleteBucketCorsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketCorsRequest || (DeleteBucketCorsRequest = {}));
var DeleteBucketEncryptionRequest;
(function(DeleteBucketEncryptionRequest) {
    DeleteBucketEncryptionRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketEncryptionRequest || (DeleteBucketEncryptionRequest = {}));
var DeleteBucketIntelligentTieringConfigurationRequest;
(function(DeleteBucketIntelligentTieringConfigurationRequest) {
    DeleteBucketIntelligentTieringConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketIntelligentTieringConfigurationRequest || (DeleteBucketIntelligentTieringConfigurationRequest = {}));
var DeleteBucketInventoryConfigurationRequest;
(function(DeleteBucketInventoryConfigurationRequest) {
    DeleteBucketInventoryConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketInventoryConfigurationRequest || (DeleteBucketInventoryConfigurationRequest = {}));
var DeleteBucketLifecycleRequest;
(function(DeleteBucketLifecycleRequest) {
    DeleteBucketLifecycleRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketLifecycleRequest || (DeleteBucketLifecycleRequest = {}));
var DeleteBucketMetricsConfigurationRequest;
(function(DeleteBucketMetricsConfigurationRequest) {
    DeleteBucketMetricsConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketMetricsConfigurationRequest || (DeleteBucketMetricsConfigurationRequest = {}));
var DeleteBucketOwnershipControlsRequest;
(function(DeleteBucketOwnershipControlsRequest) {
    DeleteBucketOwnershipControlsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketOwnershipControlsRequest || (DeleteBucketOwnershipControlsRequest = {}));
var DeleteBucketPolicyRequest;
(function(DeleteBucketPolicyRequest) {
    DeleteBucketPolicyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketPolicyRequest || (DeleteBucketPolicyRequest = {}));
var DeleteBucketReplicationRequest;
(function(DeleteBucketReplicationRequest) {
    DeleteBucketReplicationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketReplicationRequest || (DeleteBucketReplicationRequest = {}));
var DeleteBucketTaggingRequest;
(function(DeleteBucketTaggingRequest) {
    DeleteBucketTaggingRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketTaggingRequest || (DeleteBucketTaggingRequest = {}));
var DeleteBucketWebsiteRequest;
(function(DeleteBucketWebsiteRequest) {
    DeleteBucketWebsiteRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteBucketWebsiteRequest || (DeleteBucketWebsiteRequest = {}));
var DeleteObjectOutput;
(function(DeleteObjectOutput) {
    DeleteObjectOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteObjectOutput || (DeleteObjectOutput = {}));
var DeleteObjectRequest;
(function(DeleteObjectRequest) {
    DeleteObjectRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteObjectRequest || (DeleteObjectRequest = {}));
var DeletedObject;
(function(DeletedObject) {
    DeletedObject.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeletedObject || (DeletedObject = {}));
var _Error;
(function(_Error) {
    _Error.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(_Error || (_Error = {}));
var DeleteObjectsOutput;
(function(DeleteObjectsOutput) {
    DeleteObjectsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteObjectsOutput || (DeleteObjectsOutput = {}));
var ObjectIdentifier;
(function(ObjectIdentifier) {
    ObjectIdentifier.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ObjectIdentifier || (ObjectIdentifier = {}));
var Delete;
(function(Delete) {
    Delete.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Delete || (Delete = {}));
var DeleteObjectsRequest;
(function(DeleteObjectsRequest) {
    DeleteObjectsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteObjectsRequest || (DeleteObjectsRequest = {}));
var DeleteObjectTaggingOutput;
(function(DeleteObjectTaggingOutput) {
    DeleteObjectTaggingOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteObjectTaggingOutput || (DeleteObjectTaggingOutput = {}));
var DeleteObjectTaggingRequest;
(function(DeleteObjectTaggingRequest) {
    DeleteObjectTaggingRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteObjectTaggingRequest || (DeleteObjectTaggingRequest = {}));
var DeletePublicAccessBlockRequest;
(function(DeletePublicAccessBlockRequest) {
    DeletePublicAccessBlockRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeletePublicAccessBlockRequest || (DeletePublicAccessBlockRequest = {}));
var GetBucketAccelerateConfigurationOutput;
(function(GetBucketAccelerateConfigurationOutput) {
    GetBucketAccelerateConfigurationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketAccelerateConfigurationOutput || (GetBucketAccelerateConfigurationOutput = {}));
var GetBucketAccelerateConfigurationRequest;
(function(GetBucketAccelerateConfigurationRequest) {
    GetBucketAccelerateConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketAccelerateConfigurationRequest || (GetBucketAccelerateConfigurationRequest = {}));
var GetBucketAclOutput;
(function(GetBucketAclOutput) {
    GetBucketAclOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketAclOutput || (GetBucketAclOutput = {}));
var GetBucketAclRequest;
(function(GetBucketAclRequest) {
    GetBucketAclRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketAclRequest || (GetBucketAclRequest = {}));
var Tag;
(function(Tag) {
    Tag.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Tag || (Tag = {}));
var AnalyticsAndOperator;
(function(AnalyticsAndOperator) {
    AnalyticsAndOperator.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AnalyticsAndOperator || (AnalyticsAndOperator = {}));
var AnalyticsFilter;
(function(AnalyticsFilter) {
    AnalyticsFilter.visit = function(value, visitor) {
        if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined) return visitor.Tag(value.Tag);
        if (value.And !== undefined) return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    AnalyticsFilter.filterSensitiveLog = function(obj) {
        var _a;
        if (obj.Prefix !== undefined) return {
            Prefix: obj.Prefix
        };
        if (obj.Tag !== undefined) return {
            Tag: Tag.filterSensitiveLog(obj.Tag)
        };
        if (obj.And !== undefined) return {
            And: AnalyticsAndOperator.filterSensitiveLog(obj.And)
        };
        if (obj.$unknown !== undefined) return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
    };
})(AnalyticsFilter || (AnalyticsFilter = {}));
var AnalyticsS3BucketDestination;
(function(AnalyticsS3BucketDestination) {
    AnalyticsS3BucketDestination.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AnalyticsS3BucketDestination || (AnalyticsS3BucketDestination = {}));
var AnalyticsExportDestination;
(function(AnalyticsExportDestination) {
    AnalyticsExportDestination.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(AnalyticsExportDestination || (AnalyticsExportDestination = {}));
var StorageClassAnalysisDataExport;
(function(StorageClassAnalysisDataExport) {
    StorageClassAnalysisDataExport.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(StorageClassAnalysisDataExport || (StorageClassAnalysisDataExport = {}));
var StorageClassAnalysis;
(function(StorageClassAnalysis) {
    StorageClassAnalysis.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(StorageClassAnalysis || (StorageClassAnalysis = {}));
var AnalyticsConfiguration;
(function(AnalyticsConfiguration) {
    AnalyticsConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Filter && {
            Filter: AnalyticsFilter.filterSensitiveLog(obj.Filter)
        });
    };
})(AnalyticsConfiguration || (AnalyticsConfiguration = {}));
var GetBucketAnalyticsConfigurationOutput;
(function(GetBucketAnalyticsConfigurationOutput) {
    GetBucketAnalyticsConfigurationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.AnalyticsConfiguration && {
            AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration)
        });
    };
})(GetBucketAnalyticsConfigurationOutput || (GetBucketAnalyticsConfigurationOutput = {}));
var GetBucketAnalyticsConfigurationRequest;
(function(GetBucketAnalyticsConfigurationRequest) {
    GetBucketAnalyticsConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketAnalyticsConfigurationRequest || (GetBucketAnalyticsConfigurationRequest = {}));
var CORSRule;
(function(CORSRule) {
    CORSRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CORSRule || (CORSRule = {}));
var GetBucketCorsOutput;
(function(GetBucketCorsOutput) {
    GetBucketCorsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketCorsOutput || (GetBucketCorsOutput = {}));
var GetBucketCorsRequest;
(function(GetBucketCorsRequest) {
    GetBucketCorsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketCorsRequest || (GetBucketCorsRequest = {}));
var ServerSideEncryptionByDefault;
(function(ServerSideEncryptionByDefault) {
    ServerSideEncryptionByDefault.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.KMSMasterKeyID && {
            KMSMasterKeyID: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(ServerSideEncryptionByDefault || (ServerSideEncryptionByDefault = {}));
var ServerSideEncryptionRule;
(function(ServerSideEncryptionRule) {
    ServerSideEncryptionRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.ApplyServerSideEncryptionByDefault && {
            ApplyServerSideEncryptionByDefault: ServerSideEncryptionByDefault.filterSensitiveLog(obj.ApplyServerSideEncryptionByDefault)
        });
    };
})(ServerSideEncryptionRule || (ServerSideEncryptionRule = {}));
var ServerSideEncryptionConfiguration;
(function(ServerSideEncryptionConfiguration) {
    ServerSideEncryptionConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Rules && {
            Rules: obj.Rules.map(function(item) {
                return ServerSideEncryptionRule.filterSensitiveLog(item);
            })
        });
    };
})(ServerSideEncryptionConfiguration || (ServerSideEncryptionConfiguration = {}));
var GetBucketEncryptionOutput;
(function(GetBucketEncryptionOutput) {
    GetBucketEncryptionOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.ServerSideEncryptionConfiguration && {
            ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration)
        });
    };
})(GetBucketEncryptionOutput || (GetBucketEncryptionOutput = {}));
var GetBucketEncryptionRequest;
(function(GetBucketEncryptionRequest) {
    GetBucketEncryptionRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketEncryptionRequest || (GetBucketEncryptionRequest = {}));
var IntelligentTieringAndOperator;
(function(IntelligentTieringAndOperator) {
    IntelligentTieringAndOperator.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IntelligentTieringAndOperator || (IntelligentTieringAndOperator = {}));
var IntelligentTieringFilter;
(function(IntelligentTieringFilter) {
    IntelligentTieringFilter.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IntelligentTieringFilter || (IntelligentTieringFilter = {}));
var Tiering;
(function(Tiering) {
    Tiering.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Tiering || (Tiering = {}));
var IntelligentTieringConfiguration;
(function(IntelligentTieringConfiguration) {
    IntelligentTieringConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IntelligentTieringConfiguration || (IntelligentTieringConfiguration = {}));
var GetBucketIntelligentTieringConfigurationOutput;
(function(GetBucketIntelligentTieringConfigurationOutput) {
    GetBucketIntelligentTieringConfigurationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketIntelligentTieringConfigurationOutput || (GetBucketIntelligentTieringConfigurationOutput = {}));
var GetBucketIntelligentTieringConfigurationRequest;
(function(GetBucketIntelligentTieringConfigurationRequest) {
    GetBucketIntelligentTieringConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketIntelligentTieringConfigurationRequest || (GetBucketIntelligentTieringConfigurationRequest = {}));
var SSEKMS;
(function(SSEKMS) {
    SSEKMS.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.KeyId && {
            KeyId: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(SSEKMS || (SSEKMS = {}));
var SSES3;
(function(SSES3) {
    SSES3.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(SSES3 || (SSES3 = {}));
var InventoryEncryption;
(function(InventoryEncryption) {
    InventoryEncryption.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSEKMS && {
            SSEKMS: SSEKMS.filterSensitiveLog(obj.SSEKMS)
        });
    };
})(InventoryEncryption || (InventoryEncryption = {}));
var InventoryS3BucketDestination;
(function(InventoryS3BucketDestination) {
    InventoryS3BucketDestination.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Encryption && {
            Encryption: InventoryEncryption.filterSensitiveLog(obj.Encryption)
        });
    };
})(InventoryS3BucketDestination || (InventoryS3BucketDestination = {}));
var InventoryDestination;
(function(InventoryDestination) {
    InventoryDestination.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.S3BucketDestination && {
            S3BucketDestination: InventoryS3BucketDestination.filterSensitiveLog(obj.S3BucketDestination)
        });
    };
})(InventoryDestination || (InventoryDestination = {}));
var InventoryFilter;
(function(InventoryFilter) {
    InventoryFilter.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InventoryFilter || (InventoryFilter = {}));
var InventorySchedule;
(function(InventorySchedule) {
    InventorySchedule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InventorySchedule || (InventorySchedule = {}));
var InventoryConfiguration;
(function(InventoryConfiguration) {
    InventoryConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Destination && {
            Destination: InventoryDestination.filterSensitiveLog(obj.Destination)
        });
    };
})(InventoryConfiguration || (InventoryConfiguration = {}));
var GetBucketInventoryConfigurationOutput;
(function(GetBucketInventoryConfigurationOutput) {
    GetBucketInventoryConfigurationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.InventoryConfiguration && {
            InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration)
        });
    };
})(GetBucketInventoryConfigurationOutput || (GetBucketInventoryConfigurationOutput = {}));
var GetBucketInventoryConfigurationRequest;
(function(GetBucketInventoryConfigurationRequest) {
    GetBucketInventoryConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketInventoryConfigurationRequest || (GetBucketInventoryConfigurationRequest = {}));
var LifecycleExpiration;
(function(LifecycleExpiration) {
    LifecycleExpiration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LifecycleExpiration || (LifecycleExpiration = {}));
var LifecycleRuleAndOperator;
(function(LifecycleRuleAndOperator) {
    LifecycleRuleAndOperator.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LifecycleRuleAndOperator || (LifecycleRuleAndOperator = {}));
var LifecycleRuleFilter;
(function(LifecycleRuleFilter) {
    LifecycleRuleFilter.visit = function(value, visitor) {
        if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined) return visitor.Tag(value.Tag);
        if (value.And !== undefined) return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    LifecycleRuleFilter.filterSensitiveLog = function(obj) {
        var _a;
        if (obj.Prefix !== undefined) return {
            Prefix: obj.Prefix
        };
        if (obj.Tag !== undefined) return {
            Tag: Tag.filterSensitiveLog(obj.Tag)
        };
        if (obj.And !== undefined) return {
            And: LifecycleRuleAndOperator.filterSensitiveLog(obj.And)
        };
        if (obj.$unknown !== undefined) return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
    };
})(LifecycleRuleFilter || (LifecycleRuleFilter = {}));
var NoncurrentVersionExpiration;
(function(NoncurrentVersionExpiration) {
    NoncurrentVersionExpiration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(NoncurrentVersionExpiration || (NoncurrentVersionExpiration = {}));
var NoncurrentVersionTransition;
(function(NoncurrentVersionTransition) {
    NoncurrentVersionTransition.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(NoncurrentVersionTransition || (NoncurrentVersionTransition = {}));
var Transition;
(function(Transition) {
    Transition.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Transition || (Transition = {}));
var LifecycleRule;
(function(LifecycleRule) {
    LifecycleRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Filter && {
            Filter: LifecycleRuleFilter.filterSensitiveLog(obj.Filter)
        });
    };
})(LifecycleRule || (LifecycleRule = {}));
var GetBucketLifecycleConfigurationOutput;
(function(GetBucketLifecycleConfigurationOutput) {
    GetBucketLifecycleConfigurationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Rules && {
            Rules: obj.Rules.map(function(item) {
                return LifecycleRule.filterSensitiveLog(item);
            })
        });
    };
})(GetBucketLifecycleConfigurationOutput || (GetBucketLifecycleConfigurationOutput = {}));
var GetBucketLifecycleConfigurationRequest;
(function(GetBucketLifecycleConfigurationRequest) {
    GetBucketLifecycleConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketLifecycleConfigurationRequest || (GetBucketLifecycleConfigurationRequest = {}));
var GetBucketLocationOutput;
(function(GetBucketLocationOutput) {
    GetBucketLocationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketLocationOutput || (GetBucketLocationOutput = {}));
var GetBucketLocationRequest;
(function(GetBucketLocationRequest) {
    GetBucketLocationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketLocationRequest || (GetBucketLocationRequest = {}));
var TargetGrant;
(function(TargetGrant) {
    TargetGrant.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TargetGrant || (TargetGrant = {}));
var LoggingEnabled;
(function(LoggingEnabled) {
    LoggingEnabled.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LoggingEnabled || (LoggingEnabled = {}));
var GetBucketLoggingOutput;
(function(GetBucketLoggingOutput) {
    GetBucketLoggingOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketLoggingOutput || (GetBucketLoggingOutput = {}));
var GetBucketLoggingRequest;
(function(GetBucketLoggingRequest) {
    GetBucketLoggingRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketLoggingRequest || (GetBucketLoggingRequest = {}));
var MetricsAndOperator;
(function(MetricsAndOperator) {
    MetricsAndOperator.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MetricsAndOperator || (MetricsAndOperator = {}));
var MetricsFilter;
(function(MetricsFilter) {
    MetricsFilter.visit = function(value, visitor) {
        if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined) return visitor.Tag(value.Tag);
        if (value.And !== undefined) return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    MetricsFilter.filterSensitiveLog = function(obj) {
        var _a;
        if (obj.Prefix !== undefined) return {
            Prefix: obj.Prefix
        };
        if (obj.Tag !== undefined) return {
            Tag: Tag.filterSensitiveLog(obj.Tag)
        };
        if (obj.And !== undefined) return {
            And: MetricsAndOperator.filterSensitiveLog(obj.And)
        };
        if (obj.$unknown !== undefined) return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
    };
})(MetricsFilter || (MetricsFilter = {}));
var MetricsConfiguration;
(function(MetricsConfiguration) {
    MetricsConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Filter && {
            Filter: MetricsFilter.filterSensitiveLog(obj.Filter)
        });
    };
})(MetricsConfiguration || (MetricsConfiguration = {}));
var GetBucketMetricsConfigurationOutput;
(function(GetBucketMetricsConfigurationOutput) {
    GetBucketMetricsConfigurationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.MetricsConfiguration && {
            MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration)
        });
    };
})(GetBucketMetricsConfigurationOutput || (GetBucketMetricsConfigurationOutput = {}));
var GetBucketMetricsConfigurationRequest;
(function(GetBucketMetricsConfigurationRequest) {
    GetBucketMetricsConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketMetricsConfigurationRequest || (GetBucketMetricsConfigurationRequest = {}));
var GetBucketNotificationConfigurationRequest;
(function(GetBucketNotificationConfigurationRequest) {
    GetBucketNotificationConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketNotificationConfigurationRequest || (GetBucketNotificationConfigurationRequest = {}));
var FilterRule;
(function(FilterRule) {
    FilterRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(FilterRule || (FilterRule = {}));
var S3KeyFilter;
(function(S3KeyFilter) {
    S3KeyFilter.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(S3KeyFilter || (S3KeyFilter = {}));
var NotificationConfigurationFilter;
(function(NotificationConfigurationFilter) {
    NotificationConfigurationFilter.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(NotificationConfigurationFilter || (NotificationConfigurationFilter = {}));
var LambdaFunctionConfiguration;
(function(LambdaFunctionConfiguration) {
    LambdaFunctionConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(LambdaFunctionConfiguration || (LambdaFunctionConfiguration = {}));
var QueueConfiguration;
(function(QueueConfiguration) {
    QueueConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(QueueConfiguration || (QueueConfiguration = {}));
var TopicConfiguration;
(function(TopicConfiguration) {
    TopicConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(TopicConfiguration || (TopicConfiguration = {}));
var NotificationConfiguration;
(function(NotificationConfiguration) {
    NotificationConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(NotificationConfiguration || (NotificationConfiguration = {}));
var OwnershipControlsRule;
(function(OwnershipControlsRule) {
    OwnershipControlsRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(OwnershipControlsRule || (OwnershipControlsRule = {}));
var OwnershipControls;
(function(OwnershipControls) {
    OwnershipControls.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(OwnershipControls || (OwnershipControls = {}));
var GetBucketOwnershipControlsOutput;
(function(GetBucketOwnershipControlsOutput) {
    GetBucketOwnershipControlsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketOwnershipControlsOutput || (GetBucketOwnershipControlsOutput = {}));
var GetBucketOwnershipControlsRequest;
(function(GetBucketOwnershipControlsRequest) {
    GetBucketOwnershipControlsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketOwnershipControlsRequest || (GetBucketOwnershipControlsRequest = {}));
var GetBucketPolicyOutput;
(function(GetBucketPolicyOutput) {
    GetBucketPolicyOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketPolicyOutput || (GetBucketPolicyOutput = {}));
var GetBucketPolicyRequest;
(function(GetBucketPolicyRequest) {
    GetBucketPolicyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketPolicyRequest || (GetBucketPolicyRequest = {}));
var PolicyStatus;
(function(PolicyStatus) {
    PolicyStatus.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PolicyStatus || (PolicyStatus = {}));
var GetBucketPolicyStatusOutput;
(function(GetBucketPolicyStatusOutput) {
    GetBucketPolicyStatusOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketPolicyStatusOutput || (GetBucketPolicyStatusOutput = {}));
var GetBucketPolicyStatusRequest;
(function(GetBucketPolicyStatusRequest) {
    GetBucketPolicyStatusRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketPolicyStatusRequest || (GetBucketPolicyStatusRequest = {}));
var DeleteMarkerReplication;
(function(DeleteMarkerReplication) {
    DeleteMarkerReplication.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteMarkerReplication || (DeleteMarkerReplication = {}));
var EncryptionConfiguration;
(function(EncryptionConfiguration) {
    EncryptionConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(EncryptionConfiguration || (EncryptionConfiguration = {}));
var ReplicationTimeValue;
(function(ReplicationTimeValue) {
    ReplicationTimeValue.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ReplicationTimeValue || (ReplicationTimeValue = {}));
var Metrics;
(function(Metrics) {
    Metrics.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Metrics || (Metrics = {}));
var ReplicationTime;
(function(ReplicationTime) {
    ReplicationTime.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ReplicationTime || (ReplicationTime = {}));
var Destination;
(function(Destination) {
    Destination.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Destination || (Destination = {}));
var ExistingObjectReplication;
(function(ExistingObjectReplication) {
    ExistingObjectReplication.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ExistingObjectReplication || (ExistingObjectReplication = {}));
var ReplicationRuleAndOperator;
(function(ReplicationRuleAndOperator) {
    ReplicationRuleAndOperator.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ReplicationRuleAndOperator || (ReplicationRuleAndOperator = {}));
var ReplicationRuleFilter;
(function(ReplicationRuleFilter) {
    ReplicationRuleFilter.visit = function(value, visitor) {
        if (value.Prefix !== undefined) return visitor.Prefix(value.Prefix);
        if (value.Tag !== undefined) return visitor.Tag(value.Tag);
        if (value.And !== undefined) return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    ReplicationRuleFilter.filterSensitiveLog = function(obj) {
        var _a;
        if (obj.Prefix !== undefined) return {
            Prefix: obj.Prefix
        };
        if (obj.Tag !== undefined) return {
            Tag: Tag.filterSensitiveLog(obj.Tag)
        };
        if (obj.And !== undefined) return {
            And: ReplicationRuleAndOperator.filterSensitiveLog(obj.And)
        };
        if (obj.$unknown !== undefined) return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
    };
})(ReplicationRuleFilter || (ReplicationRuleFilter = {}));
var ReplicaModifications;
(function(ReplicaModifications) {
    ReplicaModifications.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ReplicaModifications || (ReplicaModifications = {}));
var SseKmsEncryptedObjects;
(function(SseKmsEncryptedObjects) {
    SseKmsEncryptedObjects.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(SseKmsEncryptedObjects || (SseKmsEncryptedObjects = {}));
var SourceSelectionCriteria;
(function(SourceSelectionCriteria) {
    SourceSelectionCriteria.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(SourceSelectionCriteria || (SourceSelectionCriteria = {}));
var ReplicationRule;
(function(ReplicationRule) {
    ReplicationRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Filter && {
            Filter: ReplicationRuleFilter.filterSensitiveLog(obj.Filter)
        });
    };
})(ReplicationRule || (ReplicationRule = {}));
var ReplicationConfiguration;
(function(ReplicationConfiguration) {
    ReplicationConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Rules && {
            Rules: obj.Rules.map(function(item) {
                return ReplicationRule.filterSensitiveLog(item);
            })
        });
    };
})(ReplicationConfiguration || (ReplicationConfiguration = {}));
var GetBucketReplicationOutput;
(function(GetBucketReplicationOutput) {
    GetBucketReplicationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.ReplicationConfiguration && {
            ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration)
        });
    };
})(GetBucketReplicationOutput || (GetBucketReplicationOutput = {}));
var GetBucketReplicationRequest;
(function(GetBucketReplicationRequest) {
    GetBucketReplicationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketReplicationRequest || (GetBucketReplicationRequest = {}));
var GetBucketRequestPaymentOutput;
(function(GetBucketRequestPaymentOutput) {
    GetBucketRequestPaymentOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketRequestPaymentOutput || (GetBucketRequestPaymentOutput = {}));
var GetBucketRequestPaymentRequest;
(function(GetBucketRequestPaymentRequest) {
    GetBucketRequestPaymentRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketRequestPaymentRequest || (GetBucketRequestPaymentRequest = {}));
var GetBucketTaggingOutput;
(function(GetBucketTaggingOutput) {
    GetBucketTaggingOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketTaggingOutput || (GetBucketTaggingOutput = {}));
var GetBucketTaggingRequest;
(function(GetBucketTaggingRequest) {
    GetBucketTaggingRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketTaggingRequest || (GetBucketTaggingRequest = {}));
var GetBucketVersioningOutput;
(function(GetBucketVersioningOutput) {
    GetBucketVersioningOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketVersioningOutput || (GetBucketVersioningOutput = {}));
var GetBucketVersioningRequest;
(function(GetBucketVersioningRequest) {
    GetBucketVersioningRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketVersioningRequest || (GetBucketVersioningRequest = {}));
var ErrorDocument;
(function(ErrorDocument) {
    ErrorDocument.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ErrorDocument || (ErrorDocument = {}));
var IndexDocument;
(function(IndexDocument) {
    IndexDocument.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(IndexDocument || (IndexDocument = {}));
var RedirectAllRequestsTo;
(function(RedirectAllRequestsTo) {
    RedirectAllRequestsTo.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RedirectAllRequestsTo || (RedirectAllRequestsTo = {}));
var Condition;
(function(Condition) {
    Condition.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Condition || (Condition = {}));
var Redirect;
(function(Redirect) {
    Redirect.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Redirect || (Redirect = {}));
var RoutingRule;
(function(RoutingRule) {
    RoutingRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RoutingRule || (RoutingRule = {}));
var GetBucketWebsiteOutput;
(function(GetBucketWebsiteOutput) {
    GetBucketWebsiteOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketWebsiteOutput || (GetBucketWebsiteOutput = {}));
var GetBucketWebsiteRequest;
(function(GetBucketWebsiteRequest) {
    GetBucketWebsiteRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetBucketWebsiteRequest || (GetBucketWebsiteRequest = {}));
var GetObjectOutput;
(function(GetObjectOutput) {
    GetObjectOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(GetObjectOutput || (GetObjectOutput = {}));
var GetObjectRequest;
(function(GetObjectRequest) {
    GetObjectRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(GetObjectRequest || (GetObjectRequest = {}));
var InvalidObjectState;
(function(InvalidObjectState) {
    InvalidObjectState.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InvalidObjectState || (InvalidObjectState = {}));
var NoSuchKey;
(function(NoSuchKey) {
    NoSuchKey.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(NoSuchKey || (NoSuchKey = {}));
var GetObjectAclOutput;
(function(GetObjectAclOutput) {
    GetObjectAclOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectAclOutput || (GetObjectAclOutput = {}));
var GetObjectAclRequest;
(function(GetObjectAclRequest) {
    GetObjectAclRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectAclRequest || (GetObjectAclRequest = {}));
var ObjectLockLegalHold;
(function(ObjectLockLegalHold) {
    ObjectLockLegalHold.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ObjectLockLegalHold || (ObjectLockLegalHold = {}));
var GetObjectLegalHoldOutput;
(function(GetObjectLegalHoldOutput) {
    GetObjectLegalHoldOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectLegalHoldOutput || (GetObjectLegalHoldOutput = {}));
var GetObjectLegalHoldRequest;
(function(GetObjectLegalHoldRequest) {
    GetObjectLegalHoldRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectLegalHoldRequest || (GetObjectLegalHoldRequest = {}));
var DefaultRetention;
(function(DefaultRetention) {
    DefaultRetention.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DefaultRetention || (DefaultRetention = {}));
var ObjectLockRule;
(function(ObjectLockRule) {
    ObjectLockRule.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ObjectLockRule || (ObjectLockRule = {}));
var ObjectLockConfiguration;
(function(ObjectLockConfiguration) {
    ObjectLockConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ObjectLockConfiguration || (ObjectLockConfiguration = {}));
var GetObjectLockConfigurationOutput;
(function(GetObjectLockConfigurationOutput) {
    GetObjectLockConfigurationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectLockConfigurationOutput || (GetObjectLockConfigurationOutput = {}));
var GetObjectLockConfigurationRequest;
(function(GetObjectLockConfigurationRequest) {
    GetObjectLockConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectLockConfigurationRequest || (GetObjectLockConfigurationRequest = {}));
var ObjectLockRetention;
(function(ObjectLockRetention) {
    ObjectLockRetention.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ObjectLockRetention || (ObjectLockRetention = {}));
var GetObjectRetentionOutput;
(function(GetObjectRetentionOutput) {
    GetObjectRetentionOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectRetentionOutput || (GetObjectRetentionOutput = {}));
var GetObjectRetentionRequest;
(function(GetObjectRetentionRequest) {
    GetObjectRetentionRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectRetentionRequest || (GetObjectRetentionRequest = {}));
var GetObjectTaggingOutput;
(function(GetObjectTaggingOutput) {
    GetObjectTaggingOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectTaggingOutput || (GetObjectTaggingOutput = {}));
var GetObjectTaggingRequest;
(function(GetObjectTaggingRequest) {
    GetObjectTaggingRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectTaggingRequest || (GetObjectTaggingRequest = {}));
var GetObjectTorrentOutput;
(function(GetObjectTorrentOutput) {
    GetObjectTorrentOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectTorrentOutput || (GetObjectTorrentOutput = {}));
var GetObjectTorrentRequest;
(function(GetObjectTorrentRequest) {
    GetObjectTorrentRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetObjectTorrentRequest || (GetObjectTorrentRequest = {}));
var PublicAccessBlockConfiguration;
(function(PublicAccessBlockConfiguration) {
    PublicAccessBlockConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PublicAccessBlockConfiguration || (PublicAccessBlockConfiguration = {}));
var GetPublicAccessBlockOutput;
(function(GetPublicAccessBlockOutput) {
    GetPublicAccessBlockOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetPublicAccessBlockOutput || (GetPublicAccessBlockOutput = {}));
var GetPublicAccessBlockRequest;
(function(GetPublicAccessBlockRequest) {
    GetPublicAccessBlockRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GetPublicAccessBlockRequest || (GetPublicAccessBlockRequest = {}));
var HeadBucketRequest;
(function(HeadBucketRequest) {
    HeadBucketRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(HeadBucketRequest || (HeadBucketRequest = {}));
var NoSuchBucket;
(function(NoSuchBucket) {
    NoSuchBucket.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(NoSuchBucket || (NoSuchBucket = {}));
var HeadObjectOutput;
(function(HeadObjectOutput) {
    HeadObjectOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(HeadObjectOutput || (HeadObjectOutput = {}));
var HeadObjectRequest;
(function(HeadObjectRequest) {
    HeadObjectRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(HeadObjectRequest || (HeadObjectRequest = {}));
var ListBucketAnalyticsConfigurationsOutput;
(function(ListBucketAnalyticsConfigurationsOutput) {
    ListBucketAnalyticsConfigurationsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.AnalyticsConfigurationList && {
            AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map(function(item) {
                return AnalyticsConfiguration.filterSensitiveLog(item);
            })
        });
    };
})(ListBucketAnalyticsConfigurationsOutput || (ListBucketAnalyticsConfigurationsOutput = {}));
var ListBucketAnalyticsConfigurationsRequest;
(function(ListBucketAnalyticsConfigurationsRequest) {
    ListBucketAnalyticsConfigurationsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListBucketAnalyticsConfigurationsRequest || (ListBucketAnalyticsConfigurationsRequest = {}));
var ListBucketIntelligentTieringConfigurationsOutput;
(function(ListBucketIntelligentTieringConfigurationsOutput) {
    ListBucketIntelligentTieringConfigurationsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListBucketIntelligentTieringConfigurationsOutput || (ListBucketIntelligentTieringConfigurationsOutput = {}));
var ListBucketIntelligentTieringConfigurationsRequest;
(function(ListBucketIntelligentTieringConfigurationsRequest) {
    ListBucketIntelligentTieringConfigurationsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListBucketIntelligentTieringConfigurationsRequest || (ListBucketIntelligentTieringConfigurationsRequest = {}));
var ListBucketInventoryConfigurationsOutput;
(function(ListBucketInventoryConfigurationsOutput) {
    ListBucketInventoryConfigurationsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.InventoryConfigurationList && {
            InventoryConfigurationList: obj.InventoryConfigurationList.map(function(item) {
                return InventoryConfiguration.filterSensitiveLog(item);
            })
        });
    };
})(ListBucketInventoryConfigurationsOutput || (ListBucketInventoryConfigurationsOutput = {}));
var ListBucketInventoryConfigurationsRequest;
(function(ListBucketInventoryConfigurationsRequest) {
    ListBucketInventoryConfigurationsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListBucketInventoryConfigurationsRequest || (ListBucketInventoryConfigurationsRequest = {}));
var ListBucketMetricsConfigurationsOutput;
(function(ListBucketMetricsConfigurationsOutput) {
    ListBucketMetricsConfigurationsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.MetricsConfigurationList && {
            MetricsConfigurationList: obj.MetricsConfigurationList.map(function(item) {
                return MetricsConfiguration.filterSensitiveLog(item);
            })
        });
    };
})(ListBucketMetricsConfigurationsOutput || (ListBucketMetricsConfigurationsOutput = {}));
var ListBucketMetricsConfigurationsRequest;
(function(ListBucketMetricsConfigurationsRequest) {
    ListBucketMetricsConfigurationsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListBucketMetricsConfigurationsRequest || (ListBucketMetricsConfigurationsRequest = {}));
var Bucket;
(function(Bucket) {
    Bucket.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Bucket || (Bucket = {}));
var ListBucketsOutput;
(function(ListBucketsOutput) {
    ListBucketsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListBucketsOutput || (ListBucketsOutput = {}));
var CommonPrefix;
(function(CommonPrefix) {
    CommonPrefix.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CommonPrefix || (CommonPrefix = {}));
var Initiator;
(function(Initiator) {
    Initiator.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Initiator || (Initiator = {}));
var MultipartUpload;
(function(MultipartUpload) {
    MultipartUpload.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MultipartUpload || (MultipartUpload = {}));
var ListMultipartUploadsOutput;
(function(ListMultipartUploadsOutput) {
    ListMultipartUploadsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListMultipartUploadsOutput || (ListMultipartUploadsOutput = {}));
var ListMultipartUploadsRequest;
(function(ListMultipartUploadsRequest) {
    ListMultipartUploadsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListMultipartUploadsRequest || (ListMultipartUploadsRequest = {}));
var _Object;
(function(_Object) {
    _Object.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(_Object || (_Object = {}));
var ListObjectsOutput;
(function(ListObjectsOutput) {
    ListObjectsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListObjectsOutput || (ListObjectsOutput = {}));
var ListObjectsRequest;
(function(ListObjectsRequest) {
    ListObjectsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListObjectsRequest || (ListObjectsRequest = {}));
var ListObjectsV2Output;
(function(ListObjectsV2Output) {
    ListObjectsV2Output.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListObjectsV2Output || (ListObjectsV2Output = {}));
var ListObjectsV2Request;
(function(ListObjectsV2Request) {
    ListObjectsV2Request.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListObjectsV2Request || (ListObjectsV2Request = {}));
var DeleteMarkerEntry;
(function(DeleteMarkerEntry) {
    DeleteMarkerEntry.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(DeleteMarkerEntry || (DeleteMarkerEntry = {}));
var ObjectVersion;
(function(ObjectVersion) {
    ObjectVersion.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ObjectVersion || (ObjectVersion = {}));
var ListObjectVersionsOutput;
(function(ListObjectVersionsOutput) {
    ListObjectVersionsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListObjectVersionsOutput || (ListObjectVersionsOutput = {}));
var ListObjectVersionsRequest;
(function(ListObjectVersionsRequest) {
    ListObjectVersionsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListObjectVersionsRequest || (ListObjectVersionsRequest = {}));
var Part;
(function(Part) {
    Part.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Part || (Part = {}));
var ListPartsOutput;
(function(ListPartsOutput) {
    ListPartsOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListPartsOutput || (ListPartsOutput = {}));
var ListPartsRequest;
(function(ListPartsRequest) {
    ListPartsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ListPartsRequest || (ListPartsRequest = {}));
var PutBucketAccelerateConfigurationRequest;
(function(PutBucketAccelerateConfigurationRequest) {
    PutBucketAccelerateConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketAccelerateConfigurationRequest || (PutBucketAccelerateConfigurationRequest = {}));
var PutBucketAclRequest;
(function(PutBucketAclRequest) {
    PutBucketAclRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketAclRequest || (PutBucketAclRequest = {}));
var PutBucketAnalyticsConfigurationRequest;
(function(PutBucketAnalyticsConfigurationRequest) {
    PutBucketAnalyticsConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.AnalyticsConfiguration && {
            AnalyticsConfiguration: AnalyticsConfiguration.filterSensitiveLog(obj.AnalyticsConfiguration)
        });
    };
})(PutBucketAnalyticsConfigurationRequest || (PutBucketAnalyticsConfigurationRequest = {}));
var CORSConfiguration;
(function(CORSConfiguration) {
    CORSConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CORSConfiguration || (CORSConfiguration = {}));
var PutBucketCorsRequest;
(function(PutBucketCorsRequest) {
    PutBucketCorsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketCorsRequest || (PutBucketCorsRequest = {}));
var PutBucketEncryptionRequest;
(function(PutBucketEncryptionRequest) {
    PutBucketEncryptionRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.ServerSideEncryptionConfiguration && {
            ServerSideEncryptionConfiguration: ServerSideEncryptionConfiguration.filterSensitiveLog(obj.ServerSideEncryptionConfiguration)
        });
    };
})(PutBucketEncryptionRequest || (PutBucketEncryptionRequest = {}));
var PutBucketIntelligentTieringConfigurationRequest;
(function(PutBucketIntelligentTieringConfigurationRequest) {
    PutBucketIntelligentTieringConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketIntelligentTieringConfigurationRequest || (PutBucketIntelligentTieringConfigurationRequest = {}));
var PutBucketInventoryConfigurationRequest;
(function(PutBucketInventoryConfigurationRequest) {
    PutBucketInventoryConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.InventoryConfiguration && {
            InventoryConfiguration: InventoryConfiguration.filterSensitiveLog(obj.InventoryConfiguration)
        });
    };
})(PutBucketInventoryConfigurationRequest || (PutBucketInventoryConfigurationRequest = {}));
var BucketLifecycleConfiguration;
(function(BucketLifecycleConfiguration) {
    BucketLifecycleConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Rules && {
            Rules: obj.Rules.map(function(item) {
                return LifecycleRule.filterSensitiveLog(item);
            })
        });
    };
})(BucketLifecycleConfiguration || (BucketLifecycleConfiguration = {}));
var PutBucketLifecycleConfigurationRequest;
(function(PutBucketLifecycleConfigurationRequest) {
    PutBucketLifecycleConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.LifecycleConfiguration && {
            LifecycleConfiguration: BucketLifecycleConfiguration.filterSensitiveLog(obj.LifecycleConfiguration)
        });
    };
})(PutBucketLifecycleConfigurationRequest || (PutBucketLifecycleConfigurationRequest = {}));
var BucketLoggingStatus;
(function(BucketLoggingStatus) {
    BucketLoggingStatus.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(BucketLoggingStatus || (BucketLoggingStatus = {}));
var PutBucketLoggingRequest;
(function(PutBucketLoggingRequest) {
    PutBucketLoggingRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketLoggingRequest || (PutBucketLoggingRequest = {}));
var PutBucketMetricsConfigurationRequest;
(function(PutBucketMetricsConfigurationRequest) {
    PutBucketMetricsConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.MetricsConfiguration && {
            MetricsConfiguration: MetricsConfiguration.filterSensitiveLog(obj.MetricsConfiguration)
        });
    };
})(PutBucketMetricsConfigurationRequest || (PutBucketMetricsConfigurationRequest = {}));
var PutBucketNotificationConfigurationRequest;
(function(PutBucketNotificationConfigurationRequest) {
    PutBucketNotificationConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketNotificationConfigurationRequest || (PutBucketNotificationConfigurationRequest = {}));
var PutBucketOwnershipControlsRequest;
(function(PutBucketOwnershipControlsRequest) {
    PutBucketOwnershipControlsRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketOwnershipControlsRequest || (PutBucketOwnershipControlsRequest = {}));
var PutBucketPolicyRequest;
(function(PutBucketPolicyRequest) {
    PutBucketPolicyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketPolicyRequest || (PutBucketPolicyRequest = {}));
var PutBucketReplicationRequest;
(function(PutBucketReplicationRequest) {
    PutBucketReplicationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.ReplicationConfiguration && {
            ReplicationConfiguration: ReplicationConfiguration.filterSensitiveLog(obj.ReplicationConfiguration)
        });
    };
})(PutBucketReplicationRequest || (PutBucketReplicationRequest = {}));
var RequestPaymentConfiguration;
(function(RequestPaymentConfiguration) {
    RequestPaymentConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RequestPaymentConfiguration || (RequestPaymentConfiguration = {}));
var PutBucketRequestPaymentRequest;
(function(PutBucketRequestPaymentRequest) {
    PutBucketRequestPaymentRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketRequestPaymentRequest || (PutBucketRequestPaymentRequest = {}));
var Tagging;
(function(Tagging) {
    Tagging.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Tagging || (Tagging = {}));
var PutBucketTaggingRequest;
(function(PutBucketTaggingRequest) {
    PutBucketTaggingRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketTaggingRequest || (PutBucketTaggingRequest = {}));
var VersioningConfiguration;
(function(VersioningConfiguration) {
    VersioningConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(VersioningConfiguration || (VersioningConfiguration = {}));
var PutBucketVersioningRequest;
(function(PutBucketVersioningRequest) {
    PutBucketVersioningRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketVersioningRequest || (PutBucketVersioningRequest = {}));
var WebsiteConfiguration;
(function(WebsiteConfiguration) {
    WebsiteConfiguration.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(WebsiteConfiguration || (WebsiteConfiguration = {}));
var PutBucketWebsiteRequest;
(function(PutBucketWebsiteRequest) {
    PutBucketWebsiteRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutBucketWebsiteRequest || (PutBucketWebsiteRequest = {}));
var PutObjectOutput;
(function(PutObjectOutput) {
    PutObjectOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(PutObjectOutput || (PutObjectOutput = {}));
var PutObjectRequest;
(function(PutObjectRequest) {
    PutObjectRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.SSEKMSEncryptionContext && {
            SSEKMSEncryptionContext: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(PutObjectRequest || (PutObjectRequest = {}));
var PutObjectAclOutput;
(function(PutObjectAclOutput) {
    PutObjectAclOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectAclOutput || (PutObjectAclOutput = {}));
var PutObjectAclRequest;
(function(PutObjectAclRequest) {
    PutObjectAclRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectAclRequest || (PutObjectAclRequest = {}));
var PutObjectLegalHoldOutput;
(function(PutObjectLegalHoldOutput) {
    PutObjectLegalHoldOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectLegalHoldOutput || (PutObjectLegalHoldOutput = {}));
var PutObjectLegalHoldRequest;
(function(PutObjectLegalHoldRequest) {
    PutObjectLegalHoldRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectLegalHoldRequest || (PutObjectLegalHoldRequest = {}));
var PutObjectLockConfigurationOutput;
(function(PutObjectLockConfigurationOutput) {
    PutObjectLockConfigurationOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectLockConfigurationOutput || (PutObjectLockConfigurationOutput = {}));
var PutObjectLockConfigurationRequest;
(function(PutObjectLockConfigurationRequest) {
    PutObjectLockConfigurationRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectLockConfigurationRequest || (PutObjectLockConfigurationRequest = {}));
var PutObjectRetentionOutput;
(function(PutObjectRetentionOutput) {
    PutObjectRetentionOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectRetentionOutput || (PutObjectRetentionOutput = {}));
var PutObjectRetentionRequest;
(function(PutObjectRetentionRequest) {
    PutObjectRetentionRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectRetentionRequest || (PutObjectRetentionRequest = {}));
var PutObjectTaggingOutput;
(function(PutObjectTaggingOutput) {
    PutObjectTaggingOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectTaggingOutput || (PutObjectTaggingOutput = {}));
var PutObjectTaggingRequest;
(function(PutObjectTaggingRequest) {
    PutObjectTaggingRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutObjectTaggingRequest || (PutObjectTaggingRequest = {}));
var PutPublicAccessBlockRequest;
(function(PutPublicAccessBlockRequest) {
    PutPublicAccessBlockRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(PutPublicAccessBlockRequest || (PutPublicAccessBlockRequest = {}));
var ObjectAlreadyInActiveTierError;
(function(ObjectAlreadyInActiveTierError) {
    ObjectAlreadyInActiveTierError.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ObjectAlreadyInActiveTierError || (ObjectAlreadyInActiveTierError = {}));
var RestoreObjectOutput;
(function(RestoreObjectOutput) {
    RestoreObjectOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RestoreObjectOutput || (RestoreObjectOutput = {}));
var GlacierJobParameters;
(function(GlacierJobParameters) {
    GlacierJobParameters.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(GlacierJobParameters || (GlacierJobParameters = {}));
var Encryption;
(function(Encryption) {
    Encryption.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.KMSKeyId && {
            KMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(Encryption || (Encryption = {}));

},{"tslib":"lRdW5","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2E22Z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeAws_restXmlAbortMultipartUploadCommand", ()=>serializeAws_restXmlAbortMultipartUploadCommand);
parcelHelpers.export(exports, "serializeAws_restXmlCompleteMultipartUploadCommand", ()=>serializeAws_restXmlCompleteMultipartUploadCommand);
parcelHelpers.export(exports, "serializeAws_restXmlCopyObjectCommand", ()=>serializeAws_restXmlCopyObjectCommand);
parcelHelpers.export(exports, "serializeAws_restXmlCreateBucketCommand", ()=>serializeAws_restXmlCreateBucketCommand);
parcelHelpers.export(exports, "serializeAws_restXmlCreateMultipartUploadCommand", ()=>serializeAws_restXmlCreateMultipartUploadCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketCommand", ()=>serializeAws_restXmlDeleteBucketCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand", ()=>serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketCorsCommand", ()=>serializeAws_restXmlDeleteBucketCorsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketEncryptionCommand", ()=>serializeAws_restXmlDeleteBucketEncryptionCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand", ()=>serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketInventoryConfigurationCommand", ()=>serializeAws_restXmlDeleteBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketLifecycleCommand", ()=>serializeAws_restXmlDeleteBucketLifecycleCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketMetricsConfigurationCommand", ()=>serializeAws_restXmlDeleteBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketOwnershipControlsCommand", ()=>serializeAws_restXmlDeleteBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketPolicyCommand", ()=>serializeAws_restXmlDeleteBucketPolicyCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketReplicationCommand", ()=>serializeAws_restXmlDeleteBucketReplicationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketTaggingCommand", ()=>serializeAws_restXmlDeleteBucketTaggingCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteBucketWebsiteCommand", ()=>serializeAws_restXmlDeleteBucketWebsiteCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteObjectCommand", ()=>serializeAws_restXmlDeleteObjectCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteObjectsCommand", ()=>serializeAws_restXmlDeleteObjectsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeleteObjectTaggingCommand", ()=>serializeAws_restXmlDeleteObjectTaggingCommand);
parcelHelpers.export(exports, "serializeAws_restXmlDeletePublicAccessBlockCommand", ()=>serializeAws_restXmlDeletePublicAccessBlockCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketAccelerateConfigurationCommand", ()=>serializeAws_restXmlGetBucketAccelerateConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketAclCommand", ()=>serializeAws_restXmlGetBucketAclCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketAnalyticsConfigurationCommand", ()=>serializeAws_restXmlGetBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketCorsCommand", ()=>serializeAws_restXmlGetBucketCorsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketEncryptionCommand", ()=>serializeAws_restXmlGetBucketEncryptionCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand", ()=>serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketInventoryConfigurationCommand", ()=>serializeAws_restXmlGetBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketLifecycleConfigurationCommand", ()=>serializeAws_restXmlGetBucketLifecycleConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketLocationCommand", ()=>serializeAws_restXmlGetBucketLocationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketLoggingCommand", ()=>serializeAws_restXmlGetBucketLoggingCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketMetricsConfigurationCommand", ()=>serializeAws_restXmlGetBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketNotificationConfigurationCommand", ()=>serializeAws_restXmlGetBucketNotificationConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketOwnershipControlsCommand", ()=>serializeAws_restXmlGetBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketPolicyCommand", ()=>serializeAws_restXmlGetBucketPolicyCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketPolicyStatusCommand", ()=>serializeAws_restXmlGetBucketPolicyStatusCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketReplicationCommand", ()=>serializeAws_restXmlGetBucketReplicationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketRequestPaymentCommand", ()=>serializeAws_restXmlGetBucketRequestPaymentCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketTaggingCommand", ()=>serializeAws_restXmlGetBucketTaggingCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketVersioningCommand", ()=>serializeAws_restXmlGetBucketVersioningCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetBucketWebsiteCommand", ()=>serializeAws_restXmlGetBucketWebsiteCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetObjectCommand", ()=>serializeAws_restXmlGetObjectCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetObjectAclCommand", ()=>serializeAws_restXmlGetObjectAclCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetObjectLegalHoldCommand", ()=>serializeAws_restXmlGetObjectLegalHoldCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetObjectLockConfigurationCommand", ()=>serializeAws_restXmlGetObjectLockConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetObjectRetentionCommand", ()=>serializeAws_restXmlGetObjectRetentionCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetObjectTaggingCommand", ()=>serializeAws_restXmlGetObjectTaggingCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetObjectTorrentCommand", ()=>serializeAws_restXmlGetObjectTorrentCommand);
parcelHelpers.export(exports, "serializeAws_restXmlGetPublicAccessBlockCommand", ()=>serializeAws_restXmlGetPublicAccessBlockCommand);
parcelHelpers.export(exports, "serializeAws_restXmlHeadBucketCommand", ()=>serializeAws_restXmlHeadBucketCommand);
parcelHelpers.export(exports, "serializeAws_restXmlHeadObjectCommand", ()=>serializeAws_restXmlHeadObjectCommand);
parcelHelpers.export(exports, "serializeAws_restXmlListBucketAnalyticsConfigurationsCommand", ()=>serializeAws_restXmlListBucketAnalyticsConfigurationsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand", ()=>serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlListBucketInventoryConfigurationsCommand", ()=>serializeAws_restXmlListBucketInventoryConfigurationsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlListBucketMetricsConfigurationsCommand", ()=>serializeAws_restXmlListBucketMetricsConfigurationsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlListBucketsCommand", ()=>serializeAws_restXmlListBucketsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlListMultipartUploadsCommand", ()=>serializeAws_restXmlListMultipartUploadsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlListObjectsCommand", ()=>serializeAws_restXmlListObjectsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlListObjectsV2Command", ()=>serializeAws_restXmlListObjectsV2Command);
parcelHelpers.export(exports, "serializeAws_restXmlListObjectVersionsCommand", ()=>serializeAws_restXmlListObjectVersionsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlListPartsCommand", ()=>serializeAws_restXmlListPartsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketAccelerateConfigurationCommand", ()=>serializeAws_restXmlPutBucketAccelerateConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketAclCommand", ()=>serializeAws_restXmlPutBucketAclCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketAnalyticsConfigurationCommand", ()=>serializeAws_restXmlPutBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketCorsCommand", ()=>serializeAws_restXmlPutBucketCorsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketEncryptionCommand", ()=>serializeAws_restXmlPutBucketEncryptionCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand", ()=>serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketInventoryConfigurationCommand", ()=>serializeAws_restXmlPutBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketLifecycleConfigurationCommand", ()=>serializeAws_restXmlPutBucketLifecycleConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketLoggingCommand", ()=>serializeAws_restXmlPutBucketLoggingCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketMetricsConfigurationCommand", ()=>serializeAws_restXmlPutBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketNotificationConfigurationCommand", ()=>serializeAws_restXmlPutBucketNotificationConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketOwnershipControlsCommand", ()=>serializeAws_restXmlPutBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketPolicyCommand", ()=>serializeAws_restXmlPutBucketPolicyCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketReplicationCommand", ()=>serializeAws_restXmlPutBucketReplicationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketRequestPaymentCommand", ()=>serializeAws_restXmlPutBucketRequestPaymentCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketTaggingCommand", ()=>serializeAws_restXmlPutBucketTaggingCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketVersioningCommand", ()=>serializeAws_restXmlPutBucketVersioningCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutBucketWebsiteCommand", ()=>serializeAws_restXmlPutBucketWebsiteCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutObjectCommand", ()=>serializeAws_restXmlPutObjectCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutObjectAclCommand", ()=>serializeAws_restXmlPutObjectAclCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutObjectLegalHoldCommand", ()=>serializeAws_restXmlPutObjectLegalHoldCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutObjectLockConfigurationCommand", ()=>serializeAws_restXmlPutObjectLockConfigurationCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutObjectRetentionCommand", ()=>serializeAws_restXmlPutObjectRetentionCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutObjectTaggingCommand", ()=>serializeAws_restXmlPutObjectTaggingCommand);
parcelHelpers.export(exports, "serializeAws_restXmlPutPublicAccessBlockCommand", ()=>serializeAws_restXmlPutPublicAccessBlockCommand);
parcelHelpers.export(exports, "serializeAws_restXmlRestoreObjectCommand", ()=>serializeAws_restXmlRestoreObjectCommand);
parcelHelpers.export(exports, "serializeAws_restXmlSelectObjectContentCommand", ()=>serializeAws_restXmlSelectObjectContentCommand);
parcelHelpers.export(exports, "serializeAws_restXmlUploadPartCommand", ()=>serializeAws_restXmlUploadPartCommand);
parcelHelpers.export(exports, "serializeAws_restXmlUploadPartCopyCommand", ()=>serializeAws_restXmlUploadPartCopyCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlAbortMultipartUploadCommand", ()=>deserializeAws_restXmlAbortMultipartUploadCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlCompleteMultipartUploadCommand", ()=>deserializeAws_restXmlCompleteMultipartUploadCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlCopyObjectCommand", ()=>deserializeAws_restXmlCopyObjectCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlCreateBucketCommand", ()=>deserializeAws_restXmlCreateBucketCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlCreateMultipartUploadCommand", ()=>deserializeAws_restXmlCreateMultipartUploadCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketCommand", ()=>deserializeAws_restXmlDeleteBucketCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand", ()=>deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketCorsCommand", ()=>deserializeAws_restXmlDeleteBucketCorsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketEncryptionCommand", ()=>deserializeAws_restXmlDeleteBucketEncryptionCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand", ()=>deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand", ()=>deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketLifecycleCommand", ()=>deserializeAws_restXmlDeleteBucketLifecycleCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand", ()=>deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketOwnershipControlsCommand", ()=>deserializeAws_restXmlDeleteBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketPolicyCommand", ()=>deserializeAws_restXmlDeleteBucketPolicyCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketReplicationCommand", ()=>deserializeAws_restXmlDeleteBucketReplicationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketTaggingCommand", ()=>deserializeAws_restXmlDeleteBucketTaggingCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteBucketWebsiteCommand", ()=>deserializeAws_restXmlDeleteBucketWebsiteCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteObjectCommand", ()=>deserializeAws_restXmlDeleteObjectCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteObjectsCommand", ()=>deserializeAws_restXmlDeleteObjectsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeleteObjectTaggingCommand", ()=>deserializeAws_restXmlDeleteObjectTaggingCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlDeletePublicAccessBlockCommand", ()=>deserializeAws_restXmlDeletePublicAccessBlockCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketAccelerateConfigurationCommand", ()=>deserializeAws_restXmlGetBucketAccelerateConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketAclCommand", ()=>deserializeAws_restXmlGetBucketAclCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand", ()=>deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketCorsCommand", ()=>deserializeAws_restXmlGetBucketCorsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketEncryptionCommand", ()=>deserializeAws_restXmlGetBucketEncryptionCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand", ()=>deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketInventoryConfigurationCommand", ()=>deserializeAws_restXmlGetBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketLifecycleConfigurationCommand", ()=>deserializeAws_restXmlGetBucketLifecycleConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketLocationCommand", ()=>deserializeAws_restXmlGetBucketLocationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketLoggingCommand", ()=>deserializeAws_restXmlGetBucketLoggingCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketMetricsConfigurationCommand", ()=>deserializeAws_restXmlGetBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketNotificationConfigurationCommand", ()=>deserializeAws_restXmlGetBucketNotificationConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketOwnershipControlsCommand", ()=>deserializeAws_restXmlGetBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketPolicyCommand", ()=>deserializeAws_restXmlGetBucketPolicyCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketPolicyStatusCommand", ()=>deserializeAws_restXmlGetBucketPolicyStatusCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketReplicationCommand", ()=>deserializeAws_restXmlGetBucketReplicationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketRequestPaymentCommand", ()=>deserializeAws_restXmlGetBucketRequestPaymentCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketTaggingCommand", ()=>deserializeAws_restXmlGetBucketTaggingCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketVersioningCommand", ()=>deserializeAws_restXmlGetBucketVersioningCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetBucketWebsiteCommand", ()=>deserializeAws_restXmlGetBucketWebsiteCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetObjectCommand", ()=>deserializeAws_restXmlGetObjectCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetObjectAclCommand", ()=>deserializeAws_restXmlGetObjectAclCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetObjectLegalHoldCommand", ()=>deserializeAws_restXmlGetObjectLegalHoldCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetObjectLockConfigurationCommand", ()=>deserializeAws_restXmlGetObjectLockConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetObjectRetentionCommand", ()=>deserializeAws_restXmlGetObjectRetentionCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetObjectTaggingCommand", ()=>deserializeAws_restXmlGetObjectTaggingCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetObjectTorrentCommand", ()=>deserializeAws_restXmlGetObjectTorrentCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlGetPublicAccessBlockCommand", ()=>deserializeAws_restXmlGetPublicAccessBlockCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlHeadBucketCommand", ()=>deserializeAws_restXmlHeadBucketCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlHeadObjectCommand", ()=>deserializeAws_restXmlHeadObjectCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand", ()=>deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand", ()=>deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlListBucketInventoryConfigurationsCommand", ()=>deserializeAws_restXmlListBucketInventoryConfigurationsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlListBucketMetricsConfigurationsCommand", ()=>deserializeAws_restXmlListBucketMetricsConfigurationsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlListBucketsCommand", ()=>deserializeAws_restXmlListBucketsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlListMultipartUploadsCommand", ()=>deserializeAws_restXmlListMultipartUploadsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlListObjectsCommand", ()=>deserializeAws_restXmlListObjectsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlListObjectsV2Command", ()=>deserializeAws_restXmlListObjectsV2Command);
parcelHelpers.export(exports, "deserializeAws_restXmlListObjectVersionsCommand", ()=>deserializeAws_restXmlListObjectVersionsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlListPartsCommand", ()=>deserializeAws_restXmlListPartsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketAccelerateConfigurationCommand", ()=>deserializeAws_restXmlPutBucketAccelerateConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketAclCommand", ()=>deserializeAws_restXmlPutBucketAclCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand", ()=>deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketCorsCommand", ()=>deserializeAws_restXmlPutBucketCorsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketEncryptionCommand", ()=>deserializeAws_restXmlPutBucketEncryptionCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand", ()=>deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketInventoryConfigurationCommand", ()=>deserializeAws_restXmlPutBucketInventoryConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketLifecycleConfigurationCommand", ()=>deserializeAws_restXmlPutBucketLifecycleConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketLoggingCommand", ()=>deserializeAws_restXmlPutBucketLoggingCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketMetricsConfigurationCommand", ()=>deserializeAws_restXmlPutBucketMetricsConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketNotificationConfigurationCommand", ()=>deserializeAws_restXmlPutBucketNotificationConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketOwnershipControlsCommand", ()=>deserializeAws_restXmlPutBucketOwnershipControlsCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketPolicyCommand", ()=>deserializeAws_restXmlPutBucketPolicyCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketReplicationCommand", ()=>deserializeAws_restXmlPutBucketReplicationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketRequestPaymentCommand", ()=>deserializeAws_restXmlPutBucketRequestPaymentCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketTaggingCommand", ()=>deserializeAws_restXmlPutBucketTaggingCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketVersioningCommand", ()=>deserializeAws_restXmlPutBucketVersioningCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutBucketWebsiteCommand", ()=>deserializeAws_restXmlPutBucketWebsiteCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutObjectCommand", ()=>deserializeAws_restXmlPutObjectCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutObjectAclCommand", ()=>deserializeAws_restXmlPutObjectAclCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutObjectLegalHoldCommand", ()=>deserializeAws_restXmlPutObjectLegalHoldCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutObjectLockConfigurationCommand", ()=>deserializeAws_restXmlPutObjectLockConfigurationCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutObjectRetentionCommand", ()=>deserializeAws_restXmlPutObjectRetentionCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutObjectTaggingCommand", ()=>deserializeAws_restXmlPutObjectTaggingCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlPutPublicAccessBlockCommand", ()=>deserializeAws_restXmlPutPublicAccessBlockCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlRestoreObjectCommand", ()=>deserializeAws_restXmlRestoreObjectCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlSelectObjectContentCommand", ()=>deserializeAws_restXmlSelectObjectContentCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlUploadPartCommand", ()=>deserializeAws_restXmlUploadPartCommand);
parcelHelpers.export(exports, "deserializeAws_restXmlUploadPartCopyCommand", ()=>deserializeAws_restXmlUploadPartCopyCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _smithyClient = require("@aws-sdk/smithy-client");
var _xmlBuilder = require("@aws-sdk/xml-builder");
var _fastXmlParser = require("fast-xml-parser");
var serializeAws_restXmlAbortMultipartUploadCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        "x-id": "AbortMultipartUpload"
                    }, input.UploadId !== undefined && {
                        uploadId: input.UploadId
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlCompleteMultipartUploadCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({}, input.UploadId !== undefined && {
                        uploadId: input.UploadId
                    });
                    if (input.MultipartUpload !== undefined) {
                        contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "POST",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlCopyObjectCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.ACL) && {
                        "x-amz-acl": input.ACL
                    }), isSerializableHeaderValue(input.CacheControl) && {
                        "cache-control": input.CacheControl
                    }), isSerializableHeaderValue(input.ContentDisposition) && {
                        "content-disposition": input.ContentDisposition
                    }), isSerializableHeaderValue(input.ContentEncoding) && {
                        "content-encoding": input.ContentEncoding
                    }), isSerializableHeaderValue(input.ContentLanguage) && {
                        "content-language": input.ContentLanguage
                    }), isSerializableHeaderValue(input.ContentType) && {
                        "content-type": input.ContentType
                    }), isSerializableHeaderValue(input.CopySource) && {
                        "x-amz-copy-source": input.CopySource
                    }), isSerializableHeaderValue(input.CopySourceIfMatch) && {
                        "x-amz-copy-source-if-match": input.CopySourceIfMatch
                    }), isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {
                        "x-amz-copy-source-if-modified-since": (0, _smithyClient.dateToUtcString)(input.CopySourceIfModifiedSince).toString()
                    }), isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {
                        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch
                    }), isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {
                        "x-amz-copy-source-if-unmodified-since": (0, _smithyClient.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString()
                    }), isSerializableHeaderValue(input.Expires) && {
                        expires: (0, _smithyClient.dateToUtcString)(input.Expires).toString()
                    }), isSerializableHeaderValue(input.GrantFullControl) && {
                        "x-amz-grant-full-control": input.GrantFullControl
                    }), isSerializableHeaderValue(input.GrantRead) && {
                        "x-amz-grant-read": input.GrantRead
                    }), isSerializableHeaderValue(input.GrantReadACP) && {
                        "x-amz-grant-read-acp": input.GrantReadACP
                    }), isSerializableHeaderValue(input.GrantWriteACP) && {
                        "x-amz-grant-write-acp": input.GrantWriteACP
                    }), isSerializableHeaderValue(input.MetadataDirective) && {
                        "x-amz-metadata-directive": input.MetadataDirective
                    }), isSerializableHeaderValue(input.TaggingDirective) && {
                        "x-amz-tagging-directive": input.TaggingDirective
                    }), isSerializableHeaderValue(input.ServerSideEncryption) && {
                        "x-amz-server-side-encryption": input.ServerSideEncryption
                    }), isSerializableHeaderValue(input.StorageClass) && {
                        "x-amz-storage-class": input.StorageClass
                    }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
                        "x-amz-website-redirect-location": input.WebsiteRedirectLocation
                    }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
                    }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.SSEKMSKeyId) && {
                        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
                    }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
                        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext
                    }), isSerializableHeaderValue(input.BucketKeyEnabled) && {
                        "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
                    }), isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {
                        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {
                        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey
                    }), isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {
                        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.Tagging) && {
                        "x-amz-tagging": input.Tagging
                    }), isSerializableHeaderValue(input.ObjectLockMode) && {
                        "x-amz-object-lock-mode": input.ObjectLockMode
                    }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
                        "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
                    }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
                        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    }), isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {
                        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
                    }), input.Metadata !== undefined && Object.keys(input.Metadata).reduce(function(acc, suffix) {
                        var _a;
                        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_a = {}, _a["x-amz-meta-" + suffix.toLowerCase()] = input.Metadata[suffix], _a));
                    }, {}));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = {
                        "x-id": "CopyObject"
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlCreateBucketCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ACL) && {
                        "x-amz-acl": input.ACL
                    }), isSerializableHeaderValue(input.GrantFullControl) && {
                        "x-amz-grant-full-control": input.GrantFullControl
                    }), isSerializableHeaderValue(input.GrantRead) && {
                        "x-amz-grant-read": input.GrantRead
                    }), isSerializableHeaderValue(input.GrantReadACP) && {
                        "x-amz-grant-read-acp": input.GrantReadACP
                    }), isSerializableHeaderValue(input.GrantWrite) && {
                        "x-amz-grant-write": input.GrantWrite
                    }), isSerializableHeaderValue(input.GrantWriteACP) && {
                        "x-amz-grant-write-acp": input.GrantWriteACP
                    }), isSerializableHeaderValue(input.ObjectLockEnabledForBucket) && {
                        "x-amz-bucket-object-lock-enabled": input.ObjectLockEnabledForBucket.toString()
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.CreateBucketConfiguration !== undefined) {
                        contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlCreateMultipartUploadCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.ACL) && {
                        "x-amz-acl": input.ACL
                    }), isSerializableHeaderValue(input.CacheControl) && {
                        "cache-control": input.CacheControl
                    }), isSerializableHeaderValue(input.ContentDisposition) && {
                        "content-disposition": input.ContentDisposition
                    }), isSerializableHeaderValue(input.ContentEncoding) && {
                        "content-encoding": input.ContentEncoding
                    }), isSerializableHeaderValue(input.ContentLanguage) && {
                        "content-language": input.ContentLanguage
                    }), isSerializableHeaderValue(input.ContentType) && {
                        "content-type": input.ContentType
                    }), isSerializableHeaderValue(input.Expires) && {
                        expires: (0, _smithyClient.dateToUtcString)(input.Expires).toString()
                    }), isSerializableHeaderValue(input.GrantFullControl) && {
                        "x-amz-grant-full-control": input.GrantFullControl
                    }), isSerializableHeaderValue(input.GrantRead) && {
                        "x-amz-grant-read": input.GrantRead
                    }), isSerializableHeaderValue(input.GrantReadACP) && {
                        "x-amz-grant-read-acp": input.GrantReadACP
                    }), isSerializableHeaderValue(input.GrantWriteACP) && {
                        "x-amz-grant-write-acp": input.GrantWriteACP
                    }), isSerializableHeaderValue(input.ServerSideEncryption) && {
                        "x-amz-server-side-encryption": input.ServerSideEncryption
                    }), isSerializableHeaderValue(input.StorageClass) && {
                        "x-amz-storage-class": input.StorageClass
                    }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
                        "x-amz-website-redirect-location": input.WebsiteRedirectLocation
                    }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
                    }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.SSEKMSKeyId) && {
                        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
                    }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
                        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext
                    }), isSerializableHeaderValue(input.BucketKeyEnabled) && {
                        "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.Tagging) && {
                        "x-amz-tagging": input.Tagging
                    }), isSerializableHeaderValue(input.ObjectLockMode) && {
                        "x-amz-object-lock-mode": input.ObjectLockMode
                    }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
                        "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
                    }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
                        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    }), input.Metadata !== undefined && Object.keys(input.Metadata).reduce(function(acc, suffix) {
                        var _a;
                        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_a = {}, _a["x-amz-meta-" + suffix.toLowerCase()] = input.Metadata[suffix], _a));
                    }, {}));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = {
                        uploads: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "POST",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        analytics: ""
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketCorsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        cors: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketEncryptionCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        encryption: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = {};
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        "intelligent-tiering": ""
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        inventory: ""
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketLifecycleCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        lifecycle: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        metrics: ""
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketOwnershipControlsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        ownershipControls: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketPolicyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        policy: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketReplicationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        replication: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketTaggingCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        tagging: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteBucketWebsiteCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        website: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteObjectCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.MFA) && {
                        "x-amz-mfa": input.MFA
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {
                        "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString()
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        "x-id": "DeleteObject"
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteObjectsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.MFA) && {
                        "x-amz-mfa": input.MFA
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {
                        "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString()
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        delete: ""
                    };
                    if (input.Delete !== undefined) {
                        contents = serializeAws_restXmlDelete(input.Delete, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "POST",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeleteObjectTaggingCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        tagging: ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlDeletePublicAccessBlockCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        publicAccessBlock: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "DELETE",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketAccelerateConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        accelerate: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketAclCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        acl: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        analytics: "",
                        "x-id": "GetBucketAnalyticsConfiguration"
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketCorsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        cors: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketEncryptionCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        encryption: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = {};
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        "intelligent-tiering": "",
                        "x-id": "GetBucketIntelligentTieringConfiguration"
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketInventoryConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        inventory: "",
                        "x-id": "GetBucketInventoryConfiguration"
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketLifecycleConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        lifecycle: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketLocationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        location: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketLoggingCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        logging: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketMetricsConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        metrics: "",
                        "x-id": "GetBucketMetricsConfiguration"
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketNotificationConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        notification: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketOwnershipControlsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        ownershipControls: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketPolicyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        policy: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketPolicyStatusCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        policyStatus: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketReplicationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        replication: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketRequestPaymentCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        requestPayment: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketTaggingCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        tagging: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketVersioningCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        versioning: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetBucketWebsiteCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        website: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetObjectCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.IfMatch) && {
                        "if-match": input.IfMatch
                    }), isSerializableHeaderValue(input.IfModifiedSince) && {
                        "if-modified-since": (0, _smithyClient.dateToUtcString)(input.IfModifiedSince).toString()
                    }), isSerializableHeaderValue(input.IfNoneMatch) && {
                        "if-none-match": input.IfNoneMatch
                    }), isSerializableHeaderValue(input.IfUnmodifiedSince) && {
                        "if-unmodified-since": (0, _smithyClient.dateToUtcString)(input.IfUnmodifiedSince).toString()
                    }), isSerializableHeaderValue(input.Range) && {
                        range: input.Range
                    }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
                    }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "x-id": "GetObject"
                    }, input.ResponseCacheControl !== undefined && {
                        "response-cache-control": input.ResponseCacheControl
                    }), input.ResponseContentDisposition !== undefined && {
                        "response-content-disposition": input.ResponseContentDisposition
                    }), input.ResponseContentEncoding !== undefined && {
                        "response-content-encoding": input.ResponseContentEncoding
                    }), input.ResponseContentLanguage !== undefined && {
                        "response-content-language": input.ResponseContentLanguage
                    }), input.ResponseContentType !== undefined && {
                        "response-content-type": input.ResponseContentType
                    }), input.ResponseExpires !== undefined && {
                        "response-expires": (input.ResponseExpires.toISOString().split(".")[0] + "Z").toString()
                    }), input.VersionId !== undefined && {
                        versionId: input.VersionId
                    }), input.PartNumber !== undefined && {
                        partNumber: input.PartNumber.toString()
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetObjectAclCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        acl: ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetObjectLegalHoldCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        "legal-hold": ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetObjectLockConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        "object-lock": ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetObjectRetentionCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        retention: ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetObjectTaggingCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        tagging: ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetObjectTorrentCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = {
                        torrent: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlGetPublicAccessBlockCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        publicAccessBlock: ""
                    };
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlHeadBucketCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "HEAD",
                            headers: headers,
                            path: resolvedPath,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlHeadObjectCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.IfMatch) && {
                        "if-match": input.IfMatch
                    }), isSerializableHeaderValue(input.IfModifiedSince) && {
                        "if-modified-since": (0, _smithyClient.dateToUtcString)(input.IfModifiedSince).toString()
                    }), isSerializableHeaderValue(input.IfNoneMatch) && {
                        "if-none-match": input.IfNoneMatch
                    }), isSerializableHeaderValue(input.IfUnmodifiedSince) && {
                        "if-unmodified-since": (0, _smithyClient.dateToUtcString)(input.IfUnmodifiedSince).toString()
                    }), isSerializableHeaderValue(input.Range) && {
                        range: input.Range
                    }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
                    }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)((0, _tslib.__assign)({}, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    }), input.PartNumber !== undefined && {
                        partNumber: input.PartNumber.toString()
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "HEAD",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        analytics: "",
                        "x-id": "ListBucketAnalyticsConfigurations"
                    }, input.ContinuationToken !== undefined && {
                        "continuation-token": input.ContinuationToken
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = {};
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        "intelligent-tiering": "",
                        "x-id": "ListBucketIntelligentTieringConfigurations"
                    }, input.ContinuationToken !== undefined && {
                        "continuation-token": input.ContinuationToken
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListBucketInventoryConfigurationsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        inventory: "",
                        "x-id": "ListBucketInventoryConfigurations"
                    }, input.ContinuationToken !== undefined && {
                        "continuation-token": input.ContinuationToken
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListBucketMetricsConfigurationsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        metrics: "",
                        "x-id": "ListBucketMetricsConfigurations"
                    }, input.ContinuationToken !== undefined && {
                        "continuation-token": input.ContinuationToken
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListBucketsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = {};
                    resolvedPath = "/";
                    body = "";
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListMultipartUploadsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        uploads: ""
                    }, input.Delimiter !== undefined && {
                        delimiter: input.Delimiter
                    }), input.EncodingType !== undefined && {
                        "encoding-type": input.EncodingType
                    }), input.KeyMarker !== undefined && {
                        "key-marker": input.KeyMarker
                    }), input.MaxUploads !== undefined && {
                        "max-uploads": input.MaxUploads.toString()
                    }), input.Prefix !== undefined && {
                        prefix: input.Prefix
                    }), input.UploadIdMarker !== undefined && {
                        "upload-id-marker": input.UploadIdMarker
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListObjectsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, input.Delimiter !== undefined && {
                        delimiter: input.Delimiter
                    }), input.EncodingType !== undefined && {
                        "encoding-type": input.EncodingType
                    }), input.Marker !== undefined && {
                        marker: input.Marker
                    }), input.MaxKeys !== undefined && {
                        "max-keys": input.MaxKeys.toString()
                    }), input.Prefix !== undefined && {
                        prefix: input.Prefix
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListObjectsV2Command = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "list-type": "2"
                    }, input.Delimiter !== undefined && {
                        delimiter: input.Delimiter
                    }), input.EncodingType !== undefined && {
                        "encoding-type": input.EncodingType
                    }), input.MaxKeys !== undefined && {
                        "max-keys": input.MaxKeys.toString()
                    }), input.Prefix !== undefined && {
                        prefix: input.Prefix
                    }), input.ContinuationToken !== undefined && {
                        "continuation-token": input.ContinuationToken
                    }), input.FetchOwner !== undefined && {
                        "fetch-owner": input.FetchOwner.toString()
                    }), input.StartAfter !== undefined && {
                        "start-after": input.StartAfter
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListObjectVersionsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({}, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        versions: ""
                    }, input.Delimiter !== undefined && {
                        delimiter: input.Delimiter
                    }), input.EncodingType !== undefined && {
                        "encoding-type": input.EncodingType
                    }), input.KeyMarker !== undefined && {
                        "key-marker": input.KeyMarker
                    }), input.MaxKeys !== undefined && {
                        "max-keys": input.MaxKeys.toString()
                    }), input.Prefix !== undefined && {
                        prefix: input.Prefix
                    }), input.VersionIdMarker !== undefined && {
                        "version-id-marker": input.VersionIdMarker
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlListPartsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "x-id": "ListParts"
                    }, input.MaxParts !== undefined && {
                        "max-parts": input.MaxParts.toString()
                    }), input.PartNumberMarker !== undefined && {
                        "part-number-marker": input.PartNumberMarker
                    }), input.UploadId !== undefined && {
                        uploadId: input.UploadId
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "GET",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketAccelerateConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        accelerate: ""
                    };
                    if (input.AccelerateConfiguration !== undefined) {
                        contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketAclCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ACL) && {
                        "x-amz-acl": input.ACL
                    }), isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.GrantFullControl) && {
                        "x-amz-grant-full-control": input.GrantFullControl
                    }), isSerializableHeaderValue(input.GrantRead) && {
                        "x-amz-grant-read": input.GrantRead
                    }), isSerializableHeaderValue(input.GrantReadACP) && {
                        "x-amz-grant-read-acp": input.GrantReadACP
                    }), isSerializableHeaderValue(input.GrantWrite) && {
                        "x-amz-grant-write": input.GrantWrite
                    }), isSerializableHeaderValue(input.GrantWriteACP) && {
                        "x-amz-grant-write-acp": input.GrantWriteACP
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        acl: ""
                    };
                    if (input.AccessControlPolicy !== undefined) {
                        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        analytics: ""
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    if (input.AnalyticsConfiguration !== undefined) {
                        contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketCorsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        cors: ""
                    };
                    if (input.CORSConfiguration !== undefined) {
                        contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketEncryptionCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        encryption: ""
                    };
                    if (input.ServerSideEncryptionConfiguration !== undefined) {
                        contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = {
                        "content-type": "application/xml"
                    };
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        "intelligent-tiering": ""
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    if (input.IntelligentTieringConfiguration !== undefined) {
                        contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketInventoryConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        inventory: ""
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    if (input.InventoryConfiguration !== undefined) {
                        contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketLifecycleConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        lifecycle: ""
                    };
                    if (input.LifecycleConfiguration !== undefined) {
                        contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketLoggingCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        logging: ""
                    };
                    if (input.BucketLoggingStatus !== undefined) {
                        contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketMetricsConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = (0, _tslib.__assign)({
                        metrics: ""
                    }, input.Id !== undefined && {
                        id: input.Id
                    });
                    if (input.MetricsConfiguration !== undefined) {
                        contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketNotificationConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        notification: ""
                    };
                    if (input.NotificationConfiguration !== undefined) {
                        contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketOwnershipControlsCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        ownershipControls: ""
                    };
                    if (input.OwnershipControls !== undefined) {
                        contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketPolicyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "text/plain"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess) && {
                        "x-amz-confirm-remove-self-bucket-access": input.ConfirmRemoveSelfBucketAccess.toString()
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        policy: ""
                    };
                    if (input.Policy !== undefined) {
                        contents = input.Policy;
                        body = contents;
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketReplicationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.Token) && {
                        "x-amz-bucket-object-lock-token": input.Token
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        replication: ""
                    };
                    if (input.ReplicationConfiguration !== undefined) {
                        contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketRequestPaymentCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        requestPayment: ""
                    };
                    if (input.RequestPaymentConfiguration !== undefined) {
                        contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketTaggingCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        tagging: ""
                    };
                    if (input.Tagging !== undefined) {
                        contents = serializeAws_restXmlTagging(input.Tagging, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketVersioningCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.MFA) && {
                        "x-amz-mfa": input.MFA
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        versioning: ""
                    };
                    if (input.VersioningConfiguration !== undefined) {
                        contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutBucketWebsiteCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        website: ""
                    };
                    if (input.WebsiteConfiguration !== undefined) {
                        contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutObjectCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/octet-stream"
                    }, isSerializableHeaderValue(input.ACL) && {
                        "x-amz-acl": input.ACL
                    }), isSerializableHeaderValue(input.CacheControl) && {
                        "cache-control": input.CacheControl
                    }), isSerializableHeaderValue(input.ContentDisposition) && {
                        "content-disposition": input.ContentDisposition
                    }), isSerializableHeaderValue(input.ContentEncoding) && {
                        "content-encoding": input.ContentEncoding
                    }), isSerializableHeaderValue(input.ContentLanguage) && {
                        "content-language": input.ContentLanguage
                    }), isSerializableHeaderValue(input.ContentLength) && {
                        "content-length": input.ContentLength.toString()
                    }), isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ContentType) && {
                        "content-type": input.ContentType
                    }), isSerializableHeaderValue(input.Expires) && {
                        expires: (0, _smithyClient.dateToUtcString)(input.Expires).toString()
                    }), isSerializableHeaderValue(input.GrantFullControl) && {
                        "x-amz-grant-full-control": input.GrantFullControl
                    }), isSerializableHeaderValue(input.GrantRead) && {
                        "x-amz-grant-read": input.GrantRead
                    }), isSerializableHeaderValue(input.GrantReadACP) && {
                        "x-amz-grant-read-acp": input.GrantReadACP
                    }), isSerializableHeaderValue(input.GrantWriteACP) && {
                        "x-amz-grant-write-acp": input.GrantWriteACP
                    }), isSerializableHeaderValue(input.ServerSideEncryption) && {
                        "x-amz-server-side-encryption": input.ServerSideEncryption
                    }), isSerializableHeaderValue(input.StorageClass) && {
                        "x-amz-storage-class": input.StorageClass
                    }), isSerializableHeaderValue(input.WebsiteRedirectLocation) && {
                        "x-amz-website-redirect-location": input.WebsiteRedirectLocation
                    }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
                    }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.SSEKMSKeyId) && {
                        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId
                    }), isSerializableHeaderValue(input.SSEKMSEncryptionContext) && {
                        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext
                    }), isSerializableHeaderValue(input.BucketKeyEnabled) && {
                        "x-amz-server-side-encryption-bucket-key-enabled": input.BucketKeyEnabled.toString()
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.Tagging) && {
                        "x-amz-tagging": input.Tagging
                    }), isSerializableHeaderValue(input.ObjectLockMode) && {
                        "x-amz-object-lock-mode": input.ObjectLockMode
                    }), isSerializableHeaderValue(input.ObjectLockRetainUntilDate) && {
                        "x-amz-object-lock-retain-until-date": (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
                    }), isSerializableHeaderValue(input.ObjectLockLegalHoldStatus) && {
                        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    }), input.Metadata !== undefined && Object.keys(input.Metadata).reduce(function(acc, suffix) {
                        var _a;
                        return (0, _tslib.__assign)((0, _tslib.__assign)({}, acc), (_a = {}, _a["x-amz-meta-" + suffix.toLowerCase()] = input.Metadata[suffix], _a));
                    }, {}));
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = {
                        "x-id": "PutObject"
                    };
                    if (input.Body !== undefined) {
                        contents = input.Body;
                        body = contents;
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutObjectAclCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ACL) && {
                        "x-amz-acl": input.ACL
                    }), isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.GrantFullControl) && {
                        "x-amz-grant-full-control": input.GrantFullControl
                    }), isSerializableHeaderValue(input.GrantRead) && {
                        "x-amz-grant-read": input.GrantRead
                    }), isSerializableHeaderValue(input.GrantReadACP) && {
                        "x-amz-grant-read-acp": input.GrantReadACP
                    }), isSerializableHeaderValue(input.GrantWrite) && {
                        "x-amz-grant-write": input.GrantWrite
                    }), isSerializableHeaderValue(input.GrantWriteACP) && {
                        "x-amz-grant-write-acp": input.GrantWriteACP
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        acl: ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    if (input.AccessControlPolicy !== undefined) {
                        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutObjectLegalHoldCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        "legal-hold": ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    if (input.LegalHold !== undefined) {
                        contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutObjectLockConfigurationCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.Token) && {
                        "x-amz-bucket-object-lock-token": input.Token
                    }), isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        "object-lock": ""
                    };
                    if (input.ObjectLockConfiguration !== undefined) {
                        contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutObjectRetentionCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.BypassGovernanceRetention) && {
                        "x-amz-bypass-governance-retention": input.BypassGovernanceRetention.toString()
                    }), isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        retention: ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    if (input.Retention !== undefined) {
                        contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutObjectTaggingCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        tagging: ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    if (input.Tagging !== undefined) {
                        contents = serializeAws_restXmlTagging(input.Tagging, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlPutPublicAccessBlockCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    query = {
                        publicAccessBlock: ""
                    };
                    if (input.PublicAccessBlockConfiguration !== undefined) {
                        contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlRestoreObjectCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)({
                        restore: ""
                    }, input.VersionId !== undefined && {
                        versionId: input.VersionId
                    });
                    if (input.RestoreRequest !== undefined) {
                        contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);
                        body = '<?xml version="1.0" encoding="UTF-8"?>';
                        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                        body += contents.toString();
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "POST",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlSelectObjectContentCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, bodyNode, node, node, node, node, node, node, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/xml"
                    }, isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
                    }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = {
                        select: "",
                        "select-type": "2"
                    };
                    body = '<?xml version="1.0" encoding="UTF-8"?>';
                    bodyNode = new (0, _xmlBuilder.XmlNode)("SelectObjectContentRequest");
                    bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
                    if (input.Expression !== undefined) {
                        node = new (0, _xmlBuilder.XmlNode)("Expression").addChildNode(new (0, _xmlBuilder.XmlText)(input.Expression)).withName("Expression");
                        bodyNode.addChildNode(node);
                    }
                    if (input.ExpressionType !== undefined) {
                        node = new (0, _xmlBuilder.XmlNode)("ExpressionType").addChildNode(new (0, _xmlBuilder.XmlText)(input.ExpressionType)).withName("ExpressionType");
                        bodyNode.addChildNode(node);
                    }
                    if (input.InputSerialization !== undefined) {
                        node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
                        bodyNode.addChildNode(node);
                    }
                    if (input.OutputSerialization !== undefined) {
                        node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
                        bodyNode.addChildNode(node);
                    }
                    if (input.RequestProgress !== undefined) {
                        node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName("RequestProgress");
                        bodyNode.addChildNode(node);
                    }
                    if (input.ScanRange !== undefined) {
                        node = serializeAws_restXmlScanRange(input.ScanRange, context).withName("ScanRange");
                        bodyNode.addChildNode(node);
                    }
                    body += bodyNode.toString();
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "POST",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlUploadPartCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, contents, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({
                        "content-type": "application/octet-stream"
                    }, isSerializableHeaderValue(input.ContentLength) && {
                        "content-length": input.ContentLength.toString()
                    }), isSerializableHeaderValue(input.ContentMD5) && {
                        "content-md5": input.ContentMD5
                    }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
                    }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "x-id": "UploadPart"
                    }, input.PartNumber !== undefined && {
                        partNumber: input.PartNumber.toString()
                    }), input.UploadId !== undefined && {
                        uploadId: input.UploadId
                    });
                    if (input.Body !== undefined) {
                        contents = input.Body;
                        body = contents;
                    }
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var serializeAws_restXmlUploadPartCopyCommand = function(input, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var headers, resolvedPath, labelValue, labelValue, query, body, _a, hostname, _b, protocol, port;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    headers = (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, isSerializableHeaderValue(input.CopySource) && {
                        "x-amz-copy-source": input.CopySource
                    }), isSerializableHeaderValue(input.CopySourceIfMatch) && {
                        "x-amz-copy-source-if-match": input.CopySourceIfMatch
                    }), isSerializableHeaderValue(input.CopySourceIfModifiedSince) && {
                        "x-amz-copy-source-if-modified-since": (0, _smithyClient.dateToUtcString)(input.CopySourceIfModifiedSince).toString()
                    }), isSerializableHeaderValue(input.CopySourceIfNoneMatch) && {
                        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch
                    }), isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince) && {
                        "x-amz-copy-source-if-unmodified-since": (0, _smithyClient.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString()
                    }), isSerializableHeaderValue(input.CopySourceRange) && {
                        "x-amz-copy-source-range": input.CopySourceRange
                    }), isSerializableHeaderValue(input.SSECustomerAlgorithm) && {
                        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.SSECustomerKey) && {
                        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey
                    }), isSerializableHeaderValue(input.SSECustomerKeyMD5) && {
                        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.CopySourceSSECustomerAlgorithm) && {
                        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm
                    }), isSerializableHeaderValue(input.CopySourceSSECustomerKey) && {
                        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey
                    }), isSerializableHeaderValue(input.CopySourceSSECustomerKeyMD5) && {
                        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5
                    }), isSerializableHeaderValue(input.RequestPayer) && {
                        "x-amz-request-payer": input.RequestPayer
                    }), isSerializableHeaderValue(input.ExpectedBucketOwner) && {
                        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
                    }), isSerializableHeaderValue(input.ExpectedSourceBucketOwner) && {
                        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
                    });
                    resolvedPath = "/{Bucket}/{Key+}";
                    if (input.Bucket !== undefined) {
                        labelValue = input.Bucket;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Bucket.");
                        resolvedPath = resolvedPath.replace("{Bucket}", (0, _smithyClient.extendedEncodeURIComponent)(labelValue));
                    } else throw new Error("No value provided for input HTTP label: Bucket.");
                    if (input.Key !== undefined) {
                        labelValue = input.Key;
                        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: Key.");
                        resolvedPath = resolvedPath.replace("{Key+}", labelValue.split("/").map(function(segment) {
                            return (0, _smithyClient.extendedEncodeURIComponent)(segment);
                        }).join("/"));
                    } else throw new Error("No value provided for input HTTP label: Key.");
                    query = (0, _tslib.__assign)((0, _tslib.__assign)({
                        "x-id": "UploadPartCopy"
                    }, input.PartNumber !== undefined && {
                        partNumber: input.PartNumber.toString()
                    }), input.UploadId !== undefined && {
                        uploadId: input.UploadId
                    });
                    return [
                        4 /*yield*/ ,
                        context.endpoint()
                    ];
                case 1:
                    _a = _c.sent(), hostname = _a.hostname, _b = _a.protocol, protocol = _b === void 0 ? "https" : _b, port = _a.port;
                    return [
                        2 /*return*/ ,
                        new (0, _protocolHttp.HttpRequest)({
                            protocol: protocol,
                            hostname: hostname,
                            port: port,
                            method: "PUT",
                            headers: headers,
                            path: resolvedPath,
                            query: query,
                            body: body
                        })
                    ];
            }
        });
    });
};
var deserializeAws_restXmlAbortMultipartUploadCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlAbortMultipartUploadCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        RequestCharged: undefined
                    };
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlAbortMultipartUploadCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "NoSuchUpload":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#NoSuchUpload":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlCompleteMultipartUploadCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Bucket: undefined,
                        BucketKeyEnabled: undefined,
                        ETag: undefined,
                        Expiration: undefined,
                        Key: undefined,
                        Location: undefined,
                        RequestCharged: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined,
                        VersionId: undefined
                    };
                    if (output.headers["x-amz-expiration"] !== undefined) contents.Expiration = output.headers["x-amz-expiration"];
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    if (output.headers["x-amz-version-id"] !== undefined) contents.VersionId = output.headers["x-amz-version-id"];
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["Bucket"] !== undefined) contents.Bucket = data["Bucket"];
                    if (data["ETag"] !== undefined) contents.ETag = data["ETag"];
                    if (data["Key"] !== undefined) contents.Key = data["Key"];
                    if (data["Location"] !== undefined) contents.Location = data["Location"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlCompleteMultipartUploadCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlCopyObjectCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlCopyObjectCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        BucketKeyEnabled: undefined,
                        CopyObjectResult: undefined,
                        CopySourceVersionId: undefined,
                        Expiration: undefined,
                        RequestCharged: undefined,
                        SSECustomerAlgorithm: undefined,
                        SSECustomerKeyMD5: undefined,
                        SSEKMSEncryptionContext: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined,
                        VersionId: undefined
                    };
                    if (output.headers["x-amz-expiration"] !== undefined) contents.Expiration = output.headers["x-amz-expiration"];
                    if (output.headers["x-amz-copy-source-version-id"] !== undefined) contents.CopySourceVersionId = output.headers["x-amz-copy-source-version-id"];
                    if (output.headers["x-amz-version-id"] !== undefined) contents.VersionId = output.headers["x-amz-version-id"];
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
                    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    if (output.headers["x-amz-server-side-encryption-context"] !== undefined) contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlCopyObjectCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ObjectNotInActiveTierError":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#ObjectNotInActiveTierError":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlCreateBucketCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlCreateBucketCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Location: undefined
                    };
                    if (output.headers["location"] !== undefined) contents.Location = output.headers["location"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlCreateBucketCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "BucketAlreadyExists":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#BucketAlreadyExists":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "BucketAlreadyOwnedByYou":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlCreateMultipartUploadCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlCreateMultipartUploadCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        AbortDate: undefined,
                        AbortRuleId: undefined,
                        Bucket: undefined,
                        BucketKeyEnabled: undefined,
                        Key: undefined,
                        RequestCharged: undefined,
                        SSECustomerAlgorithm: undefined,
                        SSECustomerKeyMD5: undefined,
                        SSEKMSEncryptionContext: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined,
                        UploadId: undefined
                    };
                    if (output.headers["x-amz-abort-date"] !== undefined) contents.AbortDate = new Date(output.headers["x-amz-abort-date"]);
                    if (output.headers["x-amz-abort-rule-id"] !== undefined) contents.AbortRuleId = output.headers["x-amz-abort-rule-id"];
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
                    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    if (output.headers["x-amz-server-side-encryption-context"] !== undefined) contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["Bucket"] !== undefined) contents.Bucket = data["Bucket"];
                    if (data["Key"] !== undefined) contents.Key = data["Key"];
                    if (data["UploadId"] !== undefined) contents.UploadId = data["UploadId"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlCreateMultipartUploadCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketCorsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketCorsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketCorsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketEncryptionCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketEncryptionCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketLifecycleCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketLifecycleCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketPolicyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketPolicyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketReplicationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketReplicationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketTaggingCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketTaggingCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketWebsiteCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteBucketWebsiteCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteObjectCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteObjectCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        DeleteMarker: undefined,
                        RequestCharged: undefined,
                        VersionId: undefined
                    };
                    if (output.headers["x-amz-delete-marker"] !== undefined) contents.DeleteMarker = output.headers["x-amz-delete-marker"] === "true";
                    if (output.headers["x-amz-version-id"] !== undefined) contents.VersionId = output.headers["x-amz-version-id"];
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteObjectCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteObjectsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteObjectsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Deleted: undefined,
                        Errors: undefined,
                        RequestCharged: undefined
                    };
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.Deleted === "") contents.Deleted = [];
                    if (data["Deleted"] !== undefined) contents.Deleted = deserializeAws_restXmlDeletedObjects((0, _smithyClient.getArrayIfSingleItem)(data["Deleted"]), context);
                    if (data.Error === "") contents.Errors = [];
                    if (data["Error"] !== undefined) contents.Errors = deserializeAws_restXmlErrors((0, _smithyClient.getArrayIfSingleItem)(data["Error"]), context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteObjectsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteObjectTaggingCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        VersionId: undefined
                    };
                    if (output.headers["x-amz-version-id"] !== undefined) contents.VersionId = output.headers["x-amz-version-id"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeleteObjectTaggingCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeletePublicAccessBlockCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 204 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlDeletePublicAccessBlockCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Status: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["Status"] !== undefined) contents.Status = data["Status"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketAclCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketAclCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Grants: undefined,
                        Owner: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.AccessControlList === "") contents.Grants = [];
                    if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) contents.Grants = deserializeAws_restXmlGrants((0, _smithyClient.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
                    if (data["Owner"] !== undefined) contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketAclCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        AnalyticsConfiguration: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketCorsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketCorsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        CORSRules: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.CORSRule === "") contents.CORSRules = [];
                    if (data["CORSRule"] !== undefined) contents.CORSRules = deserializeAws_restXmlCORSRules((0, _smithyClient.getArrayIfSingleItem)(data["CORSRule"]), context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketCorsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketEncryptionCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketEncryptionCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        ServerSideEncryptionConfiguration: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketEncryptionCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        IntelligentTieringConfiguration: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketInventoryConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        InventoryConfiguration: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Rules: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.Rule === "") contents.Rules = [];
                    if (data["Rule"] !== undefined) contents.Rules = deserializeAws_restXmlLifecycleRules((0, _smithyClient.getArrayIfSingleItem)(data["Rule"]), context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketLocationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketLocationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        LocationConstraint: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["LocationConstraint"] !== undefined) contents.LocationConstraint = data["LocationConstraint"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketLocationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketLoggingCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketLoggingCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        LoggingEnabled: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["LoggingEnabled"] !== undefined) contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data["LoggingEnabled"], context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketLoggingCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketMetricsConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        MetricsConfiguration: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketNotificationConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        LambdaFunctionConfigurations: undefined,
                        QueueConfigurations: undefined,
                        TopicConfigurations: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.CloudFunctionConfiguration === "") contents.LambdaFunctionConfigurations = [];
                    if (data["CloudFunctionConfiguration"] !== undefined) contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["CloudFunctionConfiguration"]), context);
                    if (data.QueueConfiguration === "") contents.QueueConfigurations = [];
                    if (data["QueueConfiguration"] !== undefined) contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["QueueConfiguration"]), context);
                    if (data.TopicConfiguration === "") contents.TopicConfigurations = [];
                    if (data["TopicConfiguration"] !== undefined) contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["TopicConfiguration"]), context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketOwnershipControlsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        OwnershipControls: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketOwnershipControlsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketPolicyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketPolicyCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Policy: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["Policy"] !== undefined) contents.Policy = data["Policy"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketPolicyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketPolicyStatusCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        PolicyStatus: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketPolicyStatusCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketReplicationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketReplicationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        ReplicationConfiguration: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketReplicationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketRequestPaymentCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Payer: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["Payer"] !== undefined) contents.Payer = data["Payer"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketRequestPaymentCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketTaggingCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketTaggingCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        TagSet: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.TagSet === "") contents.TagSet = [];
                    if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) contents.TagSet = deserializeAws_restXmlTagSet((0, _smithyClient.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketTaggingCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketVersioningCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketVersioningCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        MFADelete: undefined,
                        Status: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["MfaDelete"] !== undefined) contents.MFADelete = data["MfaDelete"];
                    if (data["Status"] !== undefined) contents.Status = data["Status"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketVersioningCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketWebsiteCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetBucketWebsiteCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        ErrorDocument: undefined,
                        IndexDocument: undefined,
                        RedirectAllRequestsTo: undefined,
                        RoutingRules: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["ErrorDocument"] !== undefined) contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data["ErrorDocument"], context);
                    if (data["IndexDocument"] !== undefined) contents.IndexDocument = deserializeAws_restXmlIndexDocument(data["IndexDocument"], context);
                    if (data["RedirectAllRequestsTo"] !== undefined) contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data["RedirectAllRequestsTo"], context);
                    if (data.RoutingRules === "") contents.RoutingRules = [];
                    if (data["RoutingRules"] !== undefined && data["RoutingRules"]["RoutingRule"] !== undefined) contents.RoutingRules = deserializeAws_restXmlRoutingRules((0, _smithyClient.getArrayIfSingleItem)(data["RoutingRules"]["RoutingRule"]), context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetBucketWebsiteCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            if (output.statusCode !== 200 && output.statusCode >= 300) return [
                2 /*return*/ ,
                deserializeAws_restXmlGetObjectCommandError(output, context)
            ];
            contents = {
                $metadata: deserializeMetadata(output),
                AcceptRanges: undefined,
                Body: undefined,
                BucketKeyEnabled: undefined,
                CacheControl: undefined,
                ContentDisposition: undefined,
                ContentEncoding: undefined,
                ContentLanguage: undefined,
                ContentLength: undefined,
                ContentRange: undefined,
                ContentType: undefined,
                DeleteMarker: undefined,
                ETag: undefined,
                Expiration: undefined,
                Expires: undefined,
                LastModified: undefined,
                Metadata: undefined,
                MissingMeta: undefined,
                ObjectLockLegalHoldStatus: undefined,
                ObjectLockMode: undefined,
                ObjectLockRetainUntilDate: undefined,
                PartsCount: undefined,
                ReplicationStatus: undefined,
                RequestCharged: undefined,
                Restore: undefined,
                SSECustomerAlgorithm: undefined,
                SSECustomerKeyMD5: undefined,
                SSEKMSKeyId: undefined,
                ServerSideEncryption: undefined,
                StorageClass: undefined,
                TagCount: undefined,
                VersionId: undefined,
                WebsiteRedirectLocation: undefined
            };
            if (output.headers["x-amz-delete-marker"] !== undefined) contents.DeleteMarker = output.headers["x-amz-delete-marker"] === "true";
            if (output.headers["accept-ranges"] !== undefined) contents.AcceptRanges = output.headers["accept-ranges"];
            if (output.headers["x-amz-expiration"] !== undefined) contents.Expiration = output.headers["x-amz-expiration"];
            if (output.headers["x-amz-restore"] !== undefined) contents.Restore = output.headers["x-amz-restore"];
            if (output.headers["last-modified"] !== undefined) contents.LastModified = new Date(output.headers["last-modified"]);
            if (output.headers["content-length"] !== undefined) contents.ContentLength = parseInt(output.headers["content-length"], 10);
            if (output.headers["etag"] !== undefined) contents.ETag = output.headers["etag"];
            if (output.headers["x-amz-missing-meta"] !== undefined) contents.MissingMeta = parseInt(output.headers["x-amz-missing-meta"], 10);
            if (output.headers["x-amz-version-id"] !== undefined) contents.VersionId = output.headers["x-amz-version-id"];
            if (output.headers["cache-control"] !== undefined) contents.CacheControl = output.headers["cache-control"];
            if (output.headers["content-disposition"] !== undefined) contents.ContentDisposition = output.headers["content-disposition"];
            if (output.headers["content-encoding"] !== undefined) contents.ContentEncoding = output.headers["content-encoding"];
            if (output.headers["content-language"] !== undefined) contents.ContentLanguage = output.headers["content-language"];
            if (output.headers["content-range"] !== undefined) contents.ContentRange = output.headers["content-range"];
            if (output.headers["content-type"] !== undefined) contents.ContentType = output.headers["content-type"];
            if (output.headers["expires"] !== undefined) contents.Expires = new Date(output.headers["expires"]);
            if (output.headers["x-amz-website-redirect-location"] !== undefined) contents.WebsiteRedirectLocation = output.headers["x-amz-website-redirect-location"];
            if (output.headers["x-amz-server-side-encryption"] !== undefined) contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
            if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
            if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
            if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
            if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
            if (output.headers["x-amz-storage-class"] !== undefined) contents.StorageClass = output.headers["x-amz-storage-class"];
            if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
            if (output.headers["x-amz-replication-status"] !== undefined) contents.ReplicationStatus = output.headers["x-amz-replication-status"];
            if (output.headers["x-amz-mp-parts-count"] !== undefined) contents.PartsCount = parseInt(output.headers["x-amz-mp-parts-count"], 10);
            if (output.headers["x-amz-tagging-count"] !== undefined) contents.TagCount = parseInt(output.headers["x-amz-tagging-count"], 10);
            if (output.headers["x-amz-object-lock-mode"] !== undefined) contents.ObjectLockMode = output.headers["x-amz-object-lock-mode"];
            if (output.headers["x-amz-object-lock-retain-until-date"] !== undefined) contents.ObjectLockRetainUntilDate = new Date(output.headers["x-amz-object-lock-retain-until-date"]);
            if (output.headers["x-amz-object-lock-legal-hold"] !== undefined) contents.ObjectLockLegalHoldStatus = output.headers["x-amz-object-lock-legal-hold"];
            Object.keys(output.headers).forEach(function(header) {
                if (contents.Metadata === undefined) contents.Metadata = {};
                if (header.startsWith("x-amz-meta-")) contents.Metadata[header.substring(11)] = output.headers[header];
            });
            data = output.body;
            contents.Body = data;
            return [
                2 /*return*/ ,
                Promise.resolve(contents)
            ];
        });
    });
};
var deserializeAws_restXmlGetObjectCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, _d, parsedBody, message;
        var _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_e.body = _f.sent(), _e)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "InvalidObjectState":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#InvalidObjectState":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "NoSuchKey":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                        case "com.amazonaws.s3#NoSuchKey":
                            return [
                                3 /*break*/ ,
                                4
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        6
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 4:
                    _d = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)
                    ];
                case 5:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _d.concat([
                            _f.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        7
                    ];
                case 6:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _f.label = 7;
                case 7:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectAclCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetObjectAclCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Grants: undefined,
                        Owner: undefined,
                        RequestCharged: undefined
                    };
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.AccessControlList === "") contents.Grants = [];
                    if (data["AccessControlList"] !== undefined && data["AccessControlList"]["Grant"] !== undefined) contents.Grants = deserializeAws_restXmlGrants((0, _smithyClient.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
                    if (data["Owner"] !== undefined) contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectAclCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "NoSuchKey":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#NoSuchKey":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectLegalHoldCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        LegalHold: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectLegalHoldCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectLockConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        ObjectLockConfiguration: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectLockConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectRetentionCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetObjectRetentionCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Retention: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectRetentionCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectTaggingCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetObjectTaggingCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        TagSet: undefined,
                        VersionId: undefined
                    };
                    if (output.headers["x-amz-version-id"] !== undefined) contents.VersionId = output.headers["x-amz-version-id"];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.TagSet === "") contents.TagSet = [];
                    if (data["TagSet"] !== undefined && data["TagSet"]["Tag"] !== undefined) contents.TagSet = deserializeAws_restXmlTagSet((0, _smithyClient.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectTaggingCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetObjectTorrentCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            if (output.statusCode !== 200 && output.statusCode >= 300) return [
                2 /*return*/ ,
                deserializeAws_restXmlGetObjectTorrentCommandError(output, context)
            ];
            contents = {
                $metadata: deserializeMetadata(output),
                Body: undefined,
                RequestCharged: undefined
            };
            if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
            data = output.body;
            contents.Body = data;
            return [
                2 /*return*/ ,
                Promise.resolve(contents)
            ];
        });
    });
};
var deserializeAws_restXmlGetObjectTorrentCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetPublicAccessBlockCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        PublicAccessBlockConfiguration: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlGetPublicAccessBlockCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlHeadBucketCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlHeadBucketCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlHeadBucketCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "NoSuchBucket":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#NoSuchBucket":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlHeadObjectCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlHeadObjectCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        AcceptRanges: undefined,
                        ArchiveStatus: undefined,
                        BucketKeyEnabled: undefined,
                        CacheControl: undefined,
                        ContentDisposition: undefined,
                        ContentEncoding: undefined,
                        ContentLanguage: undefined,
                        ContentLength: undefined,
                        ContentType: undefined,
                        DeleteMarker: undefined,
                        ETag: undefined,
                        Expiration: undefined,
                        Expires: undefined,
                        LastModified: undefined,
                        Metadata: undefined,
                        MissingMeta: undefined,
                        ObjectLockLegalHoldStatus: undefined,
                        ObjectLockMode: undefined,
                        ObjectLockRetainUntilDate: undefined,
                        PartsCount: undefined,
                        ReplicationStatus: undefined,
                        RequestCharged: undefined,
                        Restore: undefined,
                        SSECustomerAlgorithm: undefined,
                        SSECustomerKeyMD5: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined,
                        StorageClass: undefined,
                        VersionId: undefined,
                        WebsiteRedirectLocation: undefined
                    };
                    if (output.headers["x-amz-delete-marker"] !== undefined) contents.DeleteMarker = output.headers["x-amz-delete-marker"] === "true";
                    if (output.headers["accept-ranges"] !== undefined) contents.AcceptRanges = output.headers["accept-ranges"];
                    if (output.headers["x-amz-expiration"] !== undefined) contents.Expiration = output.headers["x-amz-expiration"];
                    if (output.headers["x-amz-restore"] !== undefined) contents.Restore = output.headers["x-amz-restore"];
                    if (output.headers["x-amz-archive-status"] !== undefined) contents.ArchiveStatus = output.headers["x-amz-archive-status"];
                    if (output.headers["last-modified"] !== undefined) contents.LastModified = new Date(output.headers["last-modified"]);
                    if (output.headers["content-length"] !== undefined) contents.ContentLength = parseInt(output.headers["content-length"], 10);
                    if (output.headers["etag"] !== undefined) contents.ETag = output.headers["etag"];
                    if (output.headers["x-amz-missing-meta"] !== undefined) contents.MissingMeta = parseInt(output.headers["x-amz-missing-meta"], 10);
                    if (output.headers["x-amz-version-id"] !== undefined) contents.VersionId = output.headers["x-amz-version-id"];
                    if (output.headers["cache-control"] !== undefined) contents.CacheControl = output.headers["cache-control"];
                    if (output.headers["content-disposition"] !== undefined) contents.ContentDisposition = output.headers["content-disposition"];
                    if (output.headers["content-encoding"] !== undefined) contents.ContentEncoding = output.headers["content-encoding"];
                    if (output.headers["content-language"] !== undefined) contents.ContentLanguage = output.headers["content-language"];
                    if (output.headers["content-type"] !== undefined) contents.ContentType = output.headers["content-type"];
                    if (output.headers["expires"] !== undefined) contents.Expires = new Date(output.headers["expires"]);
                    if (output.headers["x-amz-website-redirect-location"] !== undefined) contents.WebsiteRedirectLocation = output.headers["x-amz-website-redirect-location"];
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
                    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    if (output.headers["x-amz-storage-class"] !== undefined) contents.StorageClass = output.headers["x-amz-storage-class"];
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    if (output.headers["x-amz-replication-status"] !== undefined) contents.ReplicationStatus = output.headers["x-amz-replication-status"];
                    if (output.headers["x-amz-mp-parts-count"] !== undefined) contents.PartsCount = parseInt(output.headers["x-amz-mp-parts-count"], 10);
                    if (output.headers["x-amz-object-lock-mode"] !== undefined) contents.ObjectLockMode = output.headers["x-amz-object-lock-mode"];
                    if (output.headers["x-amz-object-lock-retain-until-date"] !== undefined) contents.ObjectLockRetainUntilDate = new Date(output.headers["x-amz-object-lock-retain-until-date"]);
                    if (output.headers["x-amz-object-lock-legal-hold"] !== undefined) contents.ObjectLockLegalHoldStatus = output.headers["x-amz-object-lock-legal-hold"];
                    Object.keys(output.headers).forEach(function(header) {
                        if (contents.Metadata === undefined) contents.Metadata = {};
                        if (header.startsWith("x-amz-meta-")) contents.Metadata[header.substring(11)] = output.headers[header];
                    });
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlHeadObjectCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "NoSuchKey":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#NoSuchKey":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        AnalyticsConfigurationList: undefined,
                        ContinuationToken: undefined,
                        IsTruncated: undefined,
                        NextContinuationToken: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.AnalyticsConfiguration === "") contents.AnalyticsConfigurationList = [];
                    if (data["AnalyticsConfiguration"] !== undefined) contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["AnalyticsConfiguration"]), context);
                    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = data["ContinuationToken"];
                    if (data["IsTruncated"] !== undefined) contents.IsTruncated = data["IsTruncated"] == "true";
                    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = data["NextContinuationToken"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        ContinuationToken: undefined,
                        IntelligentTieringConfigurationList: undefined,
                        IsTruncated: undefined,
                        NextContinuationToken: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = data["ContinuationToken"];
                    if (data.IntelligentTieringConfiguration === "") contents.IntelligentTieringConfigurationList = [];
                    if (data["IntelligentTieringConfiguration"] !== undefined) contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["IntelligentTieringConfiguration"]), context);
                    if (data["IsTruncated"] !== undefined) contents.IsTruncated = data["IsTruncated"] == "true";
                    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = data["NextContinuationToken"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketInventoryConfigurationsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        ContinuationToken: undefined,
                        InventoryConfigurationList: undefined,
                        IsTruncated: undefined,
                        NextContinuationToken: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = data["ContinuationToken"];
                    if (data.InventoryConfiguration === "") contents.InventoryConfigurationList = [];
                    if (data["InventoryConfiguration"] !== undefined) contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["InventoryConfiguration"]), context);
                    if (data["IsTruncated"] !== undefined) contents.IsTruncated = data["IsTruncated"] == "true";
                    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = data["NextContinuationToken"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketMetricsConfigurationsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        ContinuationToken: undefined,
                        IsTruncated: undefined,
                        MetricsConfigurationList: undefined,
                        NextContinuationToken: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = data["ContinuationToken"];
                    if (data["IsTruncated"] !== undefined) contents.IsTruncated = data["IsTruncated"] == "true";
                    if (data.MetricsConfiguration === "") contents.MetricsConfigurationList = [];
                    if (data["MetricsConfiguration"] !== undefined) contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList((0, _smithyClient.getArrayIfSingleItem)(data["MetricsConfiguration"]), context);
                    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = data["NextContinuationToken"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListBucketsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Buckets: undefined,
                        Owner: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.Buckets === "") contents.Buckets = [];
                    if (data["Buckets"] !== undefined && data["Buckets"]["Bucket"] !== undefined) contents.Buckets = deserializeAws_restXmlBuckets((0, _smithyClient.getArrayIfSingleItem)(data["Buckets"]["Bucket"]), context);
                    if (data["Owner"] !== undefined) contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListBucketsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListMultipartUploadsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListMultipartUploadsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        Bucket: undefined,
                        CommonPrefixes: undefined,
                        Delimiter: undefined,
                        EncodingType: undefined,
                        IsTruncated: undefined,
                        KeyMarker: undefined,
                        MaxUploads: undefined,
                        NextKeyMarker: undefined,
                        NextUploadIdMarker: undefined,
                        Prefix: undefined,
                        UploadIdMarker: undefined,
                        Uploads: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["Bucket"] !== undefined) contents.Bucket = data["Bucket"];
                    if (data.CommonPrefixes === "") contents.CommonPrefixes = [];
                    if (data["CommonPrefixes"] !== undefined) contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0, _smithyClient.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
                    if (data["Delimiter"] !== undefined) contents.Delimiter = data["Delimiter"];
                    if (data["EncodingType"] !== undefined) contents.EncodingType = data["EncodingType"];
                    if (data["IsTruncated"] !== undefined) contents.IsTruncated = data["IsTruncated"] == "true";
                    if (data["KeyMarker"] !== undefined) contents.KeyMarker = data["KeyMarker"];
                    if (data["MaxUploads"] !== undefined) contents.MaxUploads = parseInt(data["MaxUploads"]);
                    if (data["NextKeyMarker"] !== undefined) contents.NextKeyMarker = data["NextKeyMarker"];
                    if (data["NextUploadIdMarker"] !== undefined) contents.NextUploadIdMarker = data["NextUploadIdMarker"];
                    if (data["Prefix"] !== undefined) contents.Prefix = data["Prefix"];
                    if (data["UploadIdMarker"] !== undefined) contents.UploadIdMarker = data["UploadIdMarker"];
                    if (data.Upload === "") contents.Uploads = [];
                    if (data["Upload"] !== undefined) contents.Uploads = deserializeAws_restXmlMultipartUploadList((0, _smithyClient.getArrayIfSingleItem)(data["Upload"]), context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListMultipartUploadsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListObjectsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListObjectsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        CommonPrefixes: undefined,
                        Contents: undefined,
                        Delimiter: undefined,
                        EncodingType: undefined,
                        IsTruncated: undefined,
                        Marker: undefined,
                        MaxKeys: undefined,
                        Name: undefined,
                        NextMarker: undefined,
                        Prefix: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.CommonPrefixes === "") contents.CommonPrefixes = [];
                    if (data["CommonPrefixes"] !== undefined) contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0, _smithyClient.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
                    if (data.Contents === "") contents.Contents = [];
                    if (data["Contents"] !== undefined) contents.Contents = deserializeAws_restXmlObjectList((0, _smithyClient.getArrayIfSingleItem)(data["Contents"]), context);
                    if (data["Delimiter"] !== undefined) contents.Delimiter = data["Delimiter"];
                    if (data["EncodingType"] !== undefined) contents.EncodingType = data["EncodingType"];
                    if (data["IsTruncated"] !== undefined) contents.IsTruncated = data["IsTruncated"] == "true";
                    if (data["Marker"] !== undefined) contents.Marker = data["Marker"];
                    if (data["MaxKeys"] !== undefined) contents.MaxKeys = parseInt(data["MaxKeys"]);
                    if (data["Name"] !== undefined) contents.Name = data["Name"];
                    if (data["NextMarker"] !== undefined) contents.NextMarker = data["NextMarker"];
                    if (data["Prefix"] !== undefined) contents.Prefix = data["Prefix"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListObjectsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "NoSuchBucket":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#NoSuchBucket":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListObjectsV2Command = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListObjectsV2CommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        CommonPrefixes: undefined,
                        Contents: undefined,
                        ContinuationToken: undefined,
                        Delimiter: undefined,
                        EncodingType: undefined,
                        IsTruncated: undefined,
                        KeyCount: undefined,
                        MaxKeys: undefined,
                        Name: undefined,
                        NextContinuationToken: undefined,
                        Prefix: undefined,
                        StartAfter: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.CommonPrefixes === "") contents.CommonPrefixes = [];
                    if (data["CommonPrefixes"] !== undefined) contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0, _smithyClient.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
                    if (data.Contents === "") contents.Contents = [];
                    if (data["Contents"] !== undefined) contents.Contents = deserializeAws_restXmlObjectList((0, _smithyClient.getArrayIfSingleItem)(data["Contents"]), context);
                    if (data["ContinuationToken"] !== undefined) contents.ContinuationToken = data["ContinuationToken"];
                    if (data["Delimiter"] !== undefined) contents.Delimiter = data["Delimiter"];
                    if (data["EncodingType"] !== undefined) contents.EncodingType = data["EncodingType"];
                    if (data["IsTruncated"] !== undefined) contents.IsTruncated = data["IsTruncated"] == "true";
                    if (data["KeyCount"] !== undefined) contents.KeyCount = parseInt(data["KeyCount"]);
                    if (data["MaxKeys"] !== undefined) contents.MaxKeys = parseInt(data["MaxKeys"]);
                    if (data["Name"] !== undefined) contents.Name = data["Name"];
                    if (data["NextContinuationToken"] !== undefined) contents.NextContinuationToken = data["NextContinuationToken"];
                    if (data["Prefix"] !== undefined) contents.Prefix = data["Prefix"];
                    if (data["StartAfter"] !== undefined) contents.StartAfter = data["StartAfter"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListObjectsV2CommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "NoSuchBucket":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#NoSuchBucket":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListObjectVersionsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListObjectVersionsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        CommonPrefixes: undefined,
                        DeleteMarkers: undefined,
                        Delimiter: undefined,
                        EncodingType: undefined,
                        IsTruncated: undefined,
                        KeyMarker: undefined,
                        MaxKeys: undefined,
                        Name: undefined,
                        NextKeyMarker: undefined,
                        NextVersionIdMarker: undefined,
                        Prefix: undefined,
                        VersionIdMarker: undefined,
                        Versions: undefined
                    };
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data.CommonPrefixes === "") contents.CommonPrefixes = [];
                    if (data["CommonPrefixes"] !== undefined) contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0, _smithyClient.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
                    if (data.DeleteMarker === "") contents.DeleteMarkers = [];
                    if (data["DeleteMarker"] !== undefined) contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers((0, _smithyClient.getArrayIfSingleItem)(data["DeleteMarker"]), context);
                    if (data["Delimiter"] !== undefined) contents.Delimiter = data["Delimiter"];
                    if (data["EncodingType"] !== undefined) contents.EncodingType = data["EncodingType"];
                    if (data["IsTruncated"] !== undefined) contents.IsTruncated = data["IsTruncated"] == "true";
                    if (data["KeyMarker"] !== undefined) contents.KeyMarker = data["KeyMarker"];
                    if (data["MaxKeys"] !== undefined) contents.MaxKeys = parseInt(data["MaxKeys"]);
                    if (data["Name"] !== undefined) contents.Name = data["Name"];
                    if (data["NextKeyMarker"] !== undefined) contents.NextKeyMarker = data["NextKeyMarker"];
                    if (data["NextVersionIdMarker"] !== undefined) contents.NextVersionIdMarker = data["NextVersionIdMarker"];
                    if (data["Prefix"] !== undefined) contents.Prefix = data["Prefix"];
                    if (data["VersionIdMarker"] !== undefined) contents.VersionIdMarker = data["VersionIdMarker"];
                    if (data.Version === "") contents.Versions = [];
                    if (data["Version"] !== undefined) contents.Versions = deserializeAws_restXmlObjectVersionList((0, _smithyClient.getArrayIfSingleItem)(data["Version"]), context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListObjectVersionsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListPartsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlListPartsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        AbortDate: undefined,
                        AbortRuleId: undefined,
                        Bucket: undefined,
                        Initiator: undefined,
                        IsTruncated: undefined,
                        Key: undefined,
                        MaxParts: undefined,
                        NextPartNumberMarker: undefined,
                        Owner: undefined,
                        PartNumberMarker: undefined,
                        Parts: undefined,
                        RequestCharged: undefined,
                        StorageClass: undefined,
                        UploadId: undefined
                    };
                    if (output.headers["x-amz-abort-date"] !== undefined) contents.AbortDate = new Date(output.headers["x-amz-abort-date"]);
                    if (output.headers["x-amz-abort-rule-id"] !== undefined) contents.AbortRuleId = output.headers["x-amz-abort-rule-id"];
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    if (data["Bucket"] !== undefined) contents.Bucket = data["Bucket"];
                    if (data["Initiator"] !== undefined) contents.Initiator = deserializeAws_restXmlInitiator(data["Initiator"], context);
                    if (data["IsTruncated"] !== undefined) contents.IsTruncated = data["IsTruncated"] == "true";
                    if (data["Key"] !== undefined) contents.Key = data["Key"];
                    if (data["MaxParts"] !== undefined) contents.MaxParts = parseInt(data["MaxParts"]);
                    if (data["NextPartNumberMarker"] !== undefined) contents.NextPartNumberMarker = data["NextPartNumberMarker"];
                    if (data["Owner"] !== undefined) contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
                    if (data["PartNumberMarker"] !== undefined) contents.PartNumberMarker = data["PartNumberMarker"];
                    if (data.Part === "") contents.Parts = [];
                    if (data["Part"] !== undefined) contents.Parts = deserializeAws_restXmlParts((0, _smithyClient.getArrayIfSingleItem)(data["Part"]), context);
                    if (data["StorageClass"] !== undefined) contents.StorageClass = data["StorageClass"];
                    if (data["UploadId"] !== undefined) contents.UploadId = data["UploadId"];
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlListPartsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketAclCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketAclCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketAclCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketCorsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketCorsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketCorsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketEncryptionCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketEncryptionCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketEncryptionCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketInventoryConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketLoggingCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketLoggingCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketLoggingCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketMetricsConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketNotificationConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketOwnershipControlsCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketOwnershipControlsCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketPolicyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketPolicyCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketPolicyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketReplicationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketReplicationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketReplicationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketRequestPaymentCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketRequestPaymentCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketTaggingCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketTaggingCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketTaggingCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketVersioningCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketVersioningCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketVersioningCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketWebsiteCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutBucketWebsiteCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutBucketWebsiteCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutObjectCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        BucketKeyEnabled: undefined,
                        ETag: undefined,
                        Expiration: undefined,
                        RequestCharged: undefined,
                        SSECustomerAlgorithm: undefined,
                        SSECustomerKeyMD5: undefined,
                        SSEKMSEncryptionContext: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined,
                        VersionId: undefined
                    };
                    if (output.headers["x-amz-expiration"] !== undefined) contents.Expiration = output.headers["x-amz-expiration"];
                    if (output.headers["etag"] !== undefined) contents.ETag = output.headers["etag"];
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    if (output.headers["x-amz-version-id"] !== undefined) contents.VersionId = output.headers["x-amz-version-id"];
                    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
                    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    if (output.headers["x-amz-server-side-encryption-context"] !== undefined) contents.SSEKMSEncryptionContext = output.headers["x-amz-server-side-encryption-context"];
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectAclCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutObjectAclCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        RequestCharged: undefined
                    };
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectAclCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "NoSuchKey":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#NoSuchKey":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectLegalHoldCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        RequestCharged: undefined
                    };
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectLegalHoldCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectLockConfigurationCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        RequestCharged: undefined
                    };
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectLockConfigurationCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectRetentionCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutObjectRetentionCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        RequestCharged: undefined
                    };
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectRetentionCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectTaggingCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutObjectTaggingCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        VersionId: undefined
                    };
                    if (output.headers["x-amz-version-id"] !== undefined) contents.VersionId = output.headers["x-amz-version-id"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutObjectTaggingCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutPublicAccessBlockCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output)
                    };
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlPutPublicAccessBlockCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlRestoreObjectCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlRestoreObjectCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        RequestCharged: undefined,
                        RestoreOutputPath: undefined
                    };
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    if (output.headers["x-amz-restore-output-path"] !== undefined) contents.RestoreOutputPath = output.headers["x-amz-restore-output-path"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlRestoreObjectCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, _b, _c, parsedBody, message;
        var _d;
        return (0, _tslib.__generator)(this, function(_e) {
            switch(_e.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_d.body = _e.sent(), _d)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    _b = errorCode;
                    switch(_b){
                        case "ObjectAlreadyInActiveTierError":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
                            return [
                                3 /*break*/ ,
                                2
                            ];
                    }
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 2:
                    _c = [
                        {}
                    ];
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context)
                    ];
                case 3:
                    response = (0, _tslib.__assign).apply(void 0, [
                        (0, _tslib.__assign).apply(void 0, _c.concat([
                            _e.sent()
                        ])),
                        {
                            name: errorCode,
                            $metadata: deserializeMetadata(output)
                        }
                    ]);
                    return [
                        3 /*break*/ ,
                        5
                    ];
                case 4:
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    _e.label = 5;
                case 5:
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlSelectObjectContentCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            if (output.statusCode !== 200 && output.statusCode >= 300) return [
                2 /*return*/ ,
                deserializeAws_restXmlSelectObjectContentCommandError(output, context)
            ];
            contents = {
                $metadata: deserializeMetadata(output),
                Payload: undefined
            };
            data = context.eventStreamMarshaller.deserialize(output.body, function(event) {
                return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                    var eventName, eventHeaders, eventMessage, parsedEvent;
                    var _a;
                    return (0, _tslib.__generator)(this, function(_b) {
                        switch(_b.label){
                            case 0:
                                eventName = Object.keys(event)[0];
                                eventHeaders = Object.entries(event[eventName].headers).reduce(function(accummulator, curr) {
                                    accummulator[curr[0]] = curr[1].value;
                                    return accummulator;
                                }, {});
                                eventMessage = {
                                    headers: eventHeaders,
                                    body: event[eventName].body
                                };
                                parsedEvent = (_a = {}, _a[eventName] = eventMessage, _a);
                                return [
                                    4 /*yield*/ ,
                                    deserializeAws_restXmlSelectObjectContentEventStream_event(parsedEvent, context)
                                ];
                            case 1:
                                return [
                                    2 /*return*/ ,
                                    _b.sent()
                                ];
                        }
                    });
                });
            });
            contents.Payload = data;
            return [
                2 /*return*/ ,
                Promise.resolve(contents)
            ];
        });
    });
};
var deserializeAws_restXmlSelectObjectContentCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlUploadPartCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlUploadPartCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        BucketKeyEnabled: undefined,
                        ETag: undefined,
                        RequestCharged: undefined,
                        SSECustomerAlgorithm: undefined,
                        SSECustomerKeyMD5: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined
                    };
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    if (output.headers["etag"] !== undefined) contents.ETag = output.headers["etag"];
                    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
                    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        collectBody(output.body, context)
                    ];
                case 1:
                    _a.sent();
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlUploadPartCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlUploadPartCopyCommand = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (output.statusCode !== 200 && output.statusCode >= 300) return [
                        2 /*return*/ ,
                        deserializeAws_restXmlUploadPartCopyCommandError(output, context)
                    ];
                    contents = {
                        $metadata: deserializeMetadata(output),
                        BucketKeyEnabled: undefined,
                        CopyPartResult: undefined,
                        CopySourceVersionId: undefined,
                        RequestCharged: undefined,
                        SSECustomerAlgorithm: undefined,
                        SSECustomerKeyMD5: undefined,
                        SSEKMSKeyId: undefined,
                        ServerSideEncryption: undefined
                    };
                    if (output.headers["x-amz-copy-source-version-id"] !== undefined) contents.CopySourceVersionId = output.headers["x-amz-copy-source-version-id"];
                    if (output.headers["x-amz-server-side-encryption"] !== undefined) contents.ServerSideEncryption = output.headers["x-amz-server-side-encryption"];
                    if (output.headers["x-amz-server-side-encryption-customer-algorithm"] !== undefined) contents.SSECustomerAlgorithm = output.headers["x-amz-server-side-encryption-customer-algorithm"];
                    if (output.headers["x-amz-server-side-encryption-customer-key-md5"] !== undefined) contents.SSECustomerKeyMD5 = output.headers["x-amz-server-side-encryption-customer-key-md5"];
                    if (output.headers["x-amz-server-side-encryption-aws-kms-key-id"] !== undefined) contents.SSEKMSKeyId = output.headers["x-amz-server-side-encryption-aws-kms-key-id"];
                    if (output.headers["x-amz-server-side-encryption-bucket-key-enabled"] !== undefined) contents.BucketKeyEnabled = output.headers["x-amz-server-side-encryption-bucket-key-enabled"] === "true";
                    if (output.headers["x-amz-request-charged"] !== undefined) contents.RequestCharged = output.headers["x-amz-request-charged"];
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    data = _a.sent();
                    contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);
                    return [
                        2 /*return*/ ,
                        Promise.resolve(contents)
                    ];
            }
        });
    });
};
var deserializeAws_restXmlUploadPartCopyCommandError = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var parsedOutput, _a, response, errorCode, parsedBody, message;
        var _b;
        return (0, _tslib.__generator)(this, function(_c) {
            switch(_c.label){
                case 0:
                    _a = [
                        (0, _tslib.__assign)({}, output)
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    parsedOutput = (0, _tslib.__assign).apply(void 0, _a.concat([
                        (_b.body = _c.sent(), _b)
                    ]));
                    errorCode = "UnknownError";
                    errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
                    errorCode;
                    parsedBody = parsedOutput.body;
                    errorCode = parsedBody.code || parsedBody.Code || errorCode;
                    response = (0, _tslib.__assign)((0, _tslib.__assign)({}, parsedBody), {
                        name: "" + errorCode,
                        message: parsedBody.message || parsedBody.Message || errorCode,
                        $fault: "client",
                        $metadata: deserializeMetadata(output)
                    });
                    message = response.message || response.Message || errorCode;
                    response.message = message;
                    delete response.Message;
                    return [
                        2 /*return*/ ,
                        Promise.reject(Object.assign(new Error(message), response))
                    ];
            }
        });
    });
};
var deserializeAws_restXmlSelectObjectContentEventStream_event = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var _a, _b, _c, _d, _e;
        return (0, _tslib.__generator)(this, function(_f) {
            switch(_f.label){
                case 0:
                    if (!(output["Records"] !== undefined)) return [
                        3 /*break*/ ,
                        2
                    ];
                    _a = {};
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlRecordsEvent_event(output["Records"], context)
                    ];
                case 1:
                    return [
                        2 /*return*/ ,
                        (_a.Records = _f.sent(), _a)
                    ];
                case 2:
                    if (!(output["Stats"] !== undefined)) return [
                        3 /*break*/ ,
                        4
                    ];
                    _b = {};
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlStatsEvent_event(output["Stats"], context)
                    ];
                case 3:
                    return [
                        2 /*return*/ ,
                        (_b.Stats = _f.sent(), _b)
                    ];
                case 4:
                    if (!(output["Progress"] !== undefined)) return [
                        3 /*break*/ ,
                        6
                    ];
                    _c = {};
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlProgressEvent_event(output["Progress"], context)
                    ];
                case 5:
                    return [
                        2 /*return*/ ,
                        (_c.Progress = _f.sent(), _c)
                    ];
                case 6:
                    if (!(output["Cont"] !== undefined)) return [
                        3 /*break*/ ,
                        8
                    ];
                    _d = {};
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlContinuationEvent_event(output["Cont"], context)
                    ];
                case 7:
                    return [
                        2 /*return*/ ,
                        (_d.Cont = _f.sent(), _d)
                    ];
                case 8:
                    if (!(output["End"] !== undefined)) return [
                        3 /*break*/ ,
                        10
                    ];
                    _e = {};
                    return [
                        4 /*yield*/ ,
                        deserializeAws_restXmlEndEvent_event(output["End"], context)
                    ];
                case 9:
                    return [
                        2 /*return*/ ,
                        (_e.End = _f.sent(), _e)
                    ];
                case 10:
                    return [
                        2 /*return*/ ,
                        {
                            $unknown: output
                        }
                    ];
            }
        });
    });
};
var deserializeAws_restXmlContinuationEvent_event = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {};
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlEndEvent_event = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {};
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlProgressEvent_event = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, _a;
        return (0, _tslib.__generator)(this, function(_b) {
            switch(_b.label){
                case 0:
                    contents = {};
                    _a = contents;
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    _a.Details = _b.sent();
                    return [
                        2 /*return*/ ,
                        contents
                    ];
            }
        });
    });
};
var deserializeAws_restXmlRecordsEvent_event = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {};
            contents.Payload = output.body;
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlStatsEvent_event = function(output, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, _a;
        return (0, _tslib.__generator)(this, function(_b) {
            switch(_b.label){
                case 0:
                    contents = {};
                    _a = contents;
                    return [
                        4 /*yield*/ ,
                        parseBody(output.body, context)
                    ];
                case 1:
                    _a.Details = _b.sent();
                    return [
                        2 /*return*/ ,
                        contents
                    ];
            }
        });
    });
};
var deserializeAws_restXmlBucketAlreadyExistsResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {
                name: "BucketAlreadyExists",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            };
            data = parsedOutput.body;
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {
                name: "BucketAlreadyOwnedByYou",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            };
            data = parsedOutput.body;
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlInvalidObjectStateResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {
                name: "InvalidObjectState",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput),
                AccessTier: undefined,
                StorageClass: undefined
            };
            data = parsedOutput.body;
            if (data["AccessTier"] !== undefined) contents.AccessTier = data["AccessTier"];
            if (data["StorageClass"] !== undefined) contents.StorageClass = data["StorageClass"];
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlNoSuchBucketResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {
                name: "NoSuchBucket",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            };
            data = parsedOutput.body;
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlNoSuchKeyResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {
                name: "NoSuchKey",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            };
            data = parsedOutput.body;
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlNoSuchUploadResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {
                name: "NoSuchUpload",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            };
            data = parsedOutput.body;
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {
                name: "ObjectAlreadyInActiveTierError",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            };
            data = parsedOutput.body;
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var deserializeAws_restXmlObjectNotInActiveTierErrorResponse = function(parsedOutput, context) {
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var contents, data;
        return (0, _tslib.__generator)(this, function(_a) {
            contents = {
                name: "ObjectNotInActiveTierError",
                $fault: "client",
                $metadata: deserializeMetadata(parsedOutput)
            };
            data = parsedOutput.body;
            return [
                2 /*return*/ ,
                contents
            ];
        });
    });
};
var serializeAws_restXmlAbortIncompleteMultipartUpload = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("AbortIncompleteMultipartUpload");
    if (input.DaysAfterInitiation !== undefined && input.DaysAfterInitiation !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("DaysAfterInitiation").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.DaysAfterInitiation))).withName("DaysAfterInitiation");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAccelerateConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("AccelerateConfiguration");
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("BucketAccelerateStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAccessControlPolicy = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("AccessControlPolicy");
    if (input.Grants !== undefined && input.Grants !== null) {
        var nodes = serializeAws_restXmlGrants(input.Grants, context);
        var containerNode_1 = new (0, _xmlBuilder.XmlNode)("AccessControlList");
        nodes.map(function(node) {
            containerNode_1.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_1);
    }
    if (input.Owner !== undefined && input.Owner !== null) {
        var node = serializeAws_restXmlOwner(input.Owner, context).withName("Owner");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAccessControlTranslation = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("AccessControlTranslation");
    if (input.Owner !== undefined && input.Owner !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("OwnerOverride").addChildNode(new (0, _xmlBuilder.XmlText)(input.Owner)).withName("Owner");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAllowedHeaders = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = new (0, _xmlBuilder.XmlNode)("AllowedHeader").addChildNode(new (0, _xmlBuilder.XmlText)(entry));
        return node.withName("member");
    });
};
var serializeAws_restXmlAllowedMethods = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = new (0, _xmlBuilder.XmlNode)("AllowedMethod").addChildNode(new (0, _xmlBuilder.XmlText)(entry));
        return node.withName("member");
    });
};
var serializeAws_restXmlAllowedOrigins = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = new (0, _xmlBuilder.XmlNode)("AllowedOrigin").addChildNode(new (0, _xmlBuilder.XmlText)(entry));
        return node.withName("member");
    });
};
var serializeAws_restXmlAnalyticsAndOperator = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsAndOperator");
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map(function(node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlAnalyticsConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsConfiguration");
    if (input.Id !== undefined && input.Id !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("AnalyticsId").addChildNode(new (0, _xmlBuilder.XmlText)(input.Id)).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClassAnalysis !== undefined && input.StorageClassAnalysis !== null) {
        var node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName("StorageClassAnalysis");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAnalyticsExportDestination = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsExportDestination");
    if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {
        var node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlAnalyticsFilter = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsFilter");
    (0, _models0.AnalyticsFilter).visit(input, {
        Prefix: function(value) {
            var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(value)).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: function(value) {
            var node = serializeAws_restXmlTag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: function(value) {
            var node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: function(name, value) {
            if (!(value instanceof (0, _xmlBuilder.XmlNode) || value instanceof (0, _xmlBuilder.XmlText))) throw new Error("Unable to serialize unknown union members in XML.");
            bodyNode.addChildNode(new (0, _xmlBuilder.XmlNode)(name).addChildNode(value));
        }
    });
    return bodyNode;
};
var serializeAws_restXmlAnalyticsS3BucketDestination = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("AnalyticsS3BucketDestination");
    if (input.Format !== undefined && input.Format !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("AnalyticsS3ExportFileFormat").addChildNode(new (0, _xmlBuilder.XmlText)(input.Format)).withName("Format");
        bodyNode.addChildNode(node);
    }
    if (input.BucketAccountId !== undefined && input.BucketAccountId !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("AccountId").addChildNode(new (0, _xmlBuilder.XmlText)(input.BucketAccountId)).withName("BucketAccountId");
        bodyNode.addChildNode(node);
    }
    if (input.Bucket !== undefined && input.Bucket !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("BucketName").addChildNode(new (0, _xmlBuilder.XmlText)(input.Bucket)).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlBucketLifecycleConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("BucketLifecycleConfiguration");
    if (input.Rules !== undefined && input.Rules !== null) {
        var nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);
        nodes.map(function(node) {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlBucketLoggingStatus = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("BucketLoggingStatus");
    if (input.LoggingEnabled !== undefined && input.LoggingEnabled !== null) {
        var node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName("LoggingEnabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCompletedMultipartUpload = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("CompletedMultipartUpload");
    if (input.Parts !== undefined && input.Parts !== null) {
        var nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);
        nodes.map(function(node) {
            node = node.withName("Part");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlCompletedPart = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("CompletedPart");
    if (input.ETag !== undefined && input.ETag !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ETag").addChildNode(new (0, _xmlBuilder.XmlText)(input.ETag)).withName("ETag");
        bodyNode.addChildNode(node);
    }
    if (input.PartNumber !== undefined && input.PartNumber !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("PartNumber").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.PartNumber))).withName("PartNumber");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCompletedPartList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlCompletedPart(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlCondition = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Condition");
    if (input.HttpErrorCodeReturnedEquals !== undefined && input.HttpErrorCodeReturnedEquals !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("HttpErrorCodeReturnedEquals").addChildNode(new (0, _xmlBuilder.XmlText)(input.HttpErrorCodeReturnedEquals)).withName("HttpErrorCodeReturnedEquals");
        bodyNode.addChildNode(node);
    }
    if (input.KeyPrefixEquals !== undefined && input.KeyPrefixEquals !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("KeyPrefixEquals").addChildNode(new (0, _xmlBuilder.XmlText)(input.KeyPrefixEquals)).withName("KeyPrefixEquals");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCORSConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("CORSConfiguration");
    if (input.CORSRules !== undefined && input.CORSRules !== null) {
        var nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);
        nodes.map(function(node) {
            node = node.withName("CORSRule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlCORSRule = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("CORSRule");
    if (input.AllowedHeaders !== undefined && input.AllowedHeaders !== null) {
        var nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);
        nodes.map(function(node) {
            node = node.withName("AllowedHeader");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AllowedMethods !== undefined && input.AllowedMethods !== null) {
        var nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);
        nodes.map(function(node) {
            node = node.withName("AllowedMethod");
            bodyNode.addChildNode(node);
        });
    }
    if (input.AllowedOrigins !== undefined && input.AllowedOrigins !== null) {
        var nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);
        nodes.map(function(node) {
            node = node.withName("AllowedOrigin");
            bodyNode.addChildNode(node);
        });
    }
    if (input.ExposeHeaders !== undefined && input.ExposeHeaders !== null) {
        var nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);
        nodes.map(function(node) {
            node = node.withName("ExposeHeader");
            bodyNode.addChildNode(node);
        });
    }
    if (input.MaxAgeSeconds !== undefined && input.MaxAgeSeconds !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("MaxAgeSeconds").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.MaxAgeSeconds))).withName("MaxAgeSeconds");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCORSRules = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlCORSRule(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlCreateBucketConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("CreateBucketConfiguration");
    if (input.LocationConstraint !== undefined && input.LocationConstraint !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("BucketLocationConstraint").addChildNode(new (0, _xmlBuilder.XmlText)(input.LocationConstraint)).withName("LocationConstraint");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCSVInput = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("CSVInput");
    if (input.FileHeaderInfo !== undefined && input.FileHeaderInfo !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("FileHeaderInfo").addChildNode(new (0, _xmlBuilder.XmlText)(input.FileHeaderInfo)).withName("FileHeaderInfo");
        bodyNode.addChildNode(node);
    }
    if (input.Comments !== undefined && input.Comments !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Comments").addChildNode(new (0, _xmlBuilder.XmlText)(input.Comments)).withName("Comments");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("QuoteEscapeCharacter").addChildNode(new (0, _xmlBuilder.XmlText)(input.QuoteEscapeCharacter)).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("RecordDelimiter").addChildNode(new (0, _xmlBuilder.XmlText)(input.RecordDelimiter)).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("FieldDelimiter").addChildNode(new (0, _xmlBuilder.XmlText)(input.FieldDelimiter)).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("QuoteCharacter").addChildNode(new (0, _xmlBuilder.XmlText)(input.QuoteCharacter)).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.AllowQuotedRecordDelimiter !== undefined && input.AllowQuotedRecordDelimiter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("AllowQuotedRecordDelimiter").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.AllowQuotedRecordDelimiter))).withName("AllowQuotedRecordDelimiter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlCSVOutput = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("CSVOutput");
    if (input.QuoteFields !== undefined && input.QuoteFields !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("QuoteFields").addChildNode(new (0, _xmlBuilder.XmlText)(input.QuoteFields)).withName("QuoteFields");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteEscapeCharacter !== undefined && input.QuoteEscapeCharacter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("QuoteEscapeCharacter").addChildNode(new (0, _xmlBuilder.XmlText)(input.QuoteEscapeCharacter)).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
    }
    if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("RecordDelimiter").addChildNode(new (0, _xmlBuilder.XmlText)(input.RecordDelimiter)).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.FieldDelimiter !== undefined && input.FieldDelimiter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("FieldDelimiter").addChildNode(new (0, _xmlBuilder.XmlText)(input.FieldDelimiter)).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
    }
    if (input.QuoteCharacter !== undefined && input.QuoteCharacter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("QuoteCharacter").addChildNode(new (0, _xmlBuilder.XmlText)(input.QuoteCharacter)).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlDefaultRetention = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("DefaultRetention");
    if (input.Mode !== undefined && input.Mode !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectLockRetentionMode").addChildNode(new (0, _xmlBuilder.XmlText)(input.Mode)).withName("Mode");
        bodyNode.addChildNode(node);
    }
    if (input.Days !== undefined && input.Days !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Days").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Days))).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.Years !== undefined && input.Years !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Years").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Years))).withName("Years");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlDelete = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Delete");
    if (input.Objects !== undefined && input.Objects !== null) {
        var nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);
        nodes.map(function(node) {
            node = node.withName("Object");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Quiet !== undefined && input.Quiet !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Quiet").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Quiet))).withName("Quiet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlDeleteMarkerReplication = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("DeleteMarkerReplication");
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("DeleteMarkerReplicationStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlDestination = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Destination");
    if (input.Bucket !== undefined && input.Bucket !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("BucketName").addChildNode(new (0, _xmlBuilder.XmlText)(input.Bucket)).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Account !== undefined && input.Account !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("AccountId").addChildNode(new (0, _xmlBuilder.XmlText)(input.Account)).withName("Account");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass !== undefined && input.StorageClass !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("StorageClass").addChildNode(new (0, _xmlBuilder.XmlText)(input.StorageClass)).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    if (input.AccessControlTranslation !== undefined && input.AccessControlTranslation !== null) {
        var node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName("AccessControlTranslation");
        bodyNode.addChildNode(node);
    }
    if (input.EncryptionConfiguration !== undefined && input.EncryptionConfiguration !== null) {
        var node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName("EncryptionConfiguration");
        bodyNode.addChildNode(node);
    }
    if (input.ReplicationTime !== undefined && input.ReplicationTime !== null) {
        var node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName("ReplicationTime");
        bodyNode.addChildNode(node);
    }
    if (input.Metrics !== undefined && input.Metrics !== null) {
        var node = serializeAws_restXmlMetrics(input.Metrics, context).withName("Metrics");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlEncryption = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Encryption");
    if (input.EncryptionType !== undefined && input.EncryptionType !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ServerSideEncryption").addChildNode(new (0, _xmlBuilder.XmlText)(input.EncryptionType)).withName("EncryptionType");
        bodyNode.addChildNode(node);
    }
    if (input.KMSKeyId !== undefined && input.KMSKeyId !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("SSEKMSKeyId").addChildNode(new (0, _xmlBuilder.XmlText)(input.KMSKeyId)).withName("KMSKeyId");
        bodyNode.addChildNode(node);
    }
    if (input.KMSContext !== undefined && input.KMSContext !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("KMSContext").addChildNode(new (0, _xmlBuilder.XmlText)(input.KMSContext)).withName("KMSContext");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlEncryptionConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("EncryptionConfiguration");
    if (input.ReplicaKmsKeyID !== undefined && input.ReplicaKmsKeyID !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ReplicaKmsKeyID").addChildNode(new (0, _xmlBuilder.XmlText)(input.ReplicaKmsKeyID)).withName("ReplicaKmsKeyID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlErrorDocument = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ErrorDocument");
    if (input.Key !== undefined && input.Key !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectKey").addChildNode(new (0, _xmlBuilder.XmlText)(input.Key)).withName("Key");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlEventList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = new (0, _xmlBuilder.XmlNode)("Event").addChildNode(new (0, _xmlBuilder.XmlText)(entry));
        return node.withName("member");
    });
};
var serializeAws_restXmlExistingObjectReplication = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ExistingObjectReplication");
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ExistingObjectReplicationStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlExposeHeaders = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = new (0, _xmlBuilder.XmlNode)("ExposeHeader").addChildNode(new (0, _xmlBuilder.XmlText)(entry));
        return node.withName("member");
    });
};
var serializeAws_restXmlFilterRule = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("FilterRule");
    if (input.Name !== undefined && input.Name !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("FilterRuleName").addChildNode(new (0, _xmlBuilder.XmlText)(input.Name)).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Value !== undefined && input.Value !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("FilterRuleValue").addChildNode(new (0, _xmlBuilder.XmlText)(input.Value)).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlFilterRuleList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlFilterRule(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlGlacierJobParameters = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("GlacierJobParameters");
    if (input.Tier !== undefined && input.Tier !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Tier").addChildNode(new (0, _xmlBuilder.XmlText)(input.Tier)).withName("Tier");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlGrant = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Grant");
    if (input.Grantee !== undefined && input.Grantee !== null) {
        var node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
        bodyNode.addChildNode(node);
    }
    if (input.Permission !== undefined && input.Permission !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Permission").addChildNode(new (0, _xmlBuilder.XmlText)(input.Permission)).withName("Permission");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlGrantee = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Grantee");
    if (input.DisplayName !== undefined && input.DisplayName !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("DisplayName").addChildNode(new (0, _xmlBuilder.XmlText)(input.DisplayName)).withName("DisplayName");
        bodyNode.addChildNode(node);
    }
    if (input.EmailAddress !== undefined && input.EmailAddress !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("EmailAddress").addChildNode(new (0, _xmlBuilder.XmlText)(input.EmailAddress)).withName("EmailAddress");
        bodyNode.addChildNode(node);
    }
    if (input.ID !== undefined && input.ID !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ID").addChildNode(new (0, _xmlBuilder.XmlText)(input.ID)).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.URI !== undefined && input.URI !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("URI").addChildNode(new (0, _xmlBuilder.XmlText)(input.URI)).withName("URI");
        bodyNode.addChildNode(node);
    }
    if (input.Type !== undefined && input.Type !== null) bodyNode.addAttribute("xsi:type", input.Type);
    return bodyNode;
};
var serializeAws_restXmlGrants = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlGrant(entry, context);
        return node.withName("Grant");
    });
};
var serializeAws_restXmlIndexDocument = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("IndexDocument");
    if (input.Suffix !== undefined && input.Suffix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Suffix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Suffix)).withName("Suffix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInputSerialization = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("InputSerialization");
    if (input.CSV !== undefined && input.CSV !== null) {
        var node = serializeAws_restXmlCSVInput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
    }
    if (input.CompressionType !== undefined && input.CompressionType !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("CompressionType").addChildNode(new (0, _xmlBuilder.XmlText)(input.CompressionType)).withName("CompressionType");
        bodyNode.addChildNode(node);
    }
    if (input.JSON !== undefined && input.JSON !== null) {
        var node = serializeAws_restXmlJSONInput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
    }
    if (input.Parquet !== undefined && input.Parquet !== null) {
        var node = serializeAws_restXmlParquetInput(input.Parquet, context).withName("Parquet");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlIntelligentTieringAndOperator = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("IntelligentTieringAndOperator");
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map(function(node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlIntelligentTieringConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("IntelligentTieringConfiguration");
    if (input.Id !== undefined && input.Id !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("IntelligentTieringId").addChildNode(new (0, _xmlBuilder.XmlText)(input.Id)).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("IntelligentTieringStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Tierings !== undefined && input.Tierings !== null) {
        var nodes = serializeAws_restXmlTieringList(input.Tierings, context);
        nodes.map(function(node) {
            node = node.withName("Tiering");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlIntelligentTieringFilter = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("IntelligentTieringFilter");
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tag !== undefined && input.Tag !== null) {
        var node = serializeAws_restXmlTag(input.Tag, context).withName("Tag");
        bodyNode.addChildNode(node);
    }
    if (input.And !== undefined && input.And !== null) {
        var node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName("And");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryConfiguration");
    if (input.Destination !== undefined && input.Destination !== null) {
        var node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
    }
    if (input.IsEnabled !== undefined && input.IsEnabled !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("IsEnabled").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.IsEnabled))).withName("IsEnabled");
        bodyNode.addChildNode(node);
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Id !== undefined && input.Id !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("InventoryId").addChildNode(new (0, _xmlBuilder.XmlText)(input.Id)).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.IncludedObjectVersions !== undefined && input.IncludedObjectVersions !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("InventoryIncludedObjectVersions").addChildNode(new (0, _xmlBuilder.XmlText)(input.IncludedObjectVersions)).withName("IncludedObjectVersions");
        bodyNode.addChildNode(node);
    }
    if (input.OptionalFields !== undefined && input.OptionalFields !== null) {
        var nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);
        var containerNode_2 = new (0, _xmlBuilder.XmlNode)("OptionalFields");
        nodes.map(function(node) {
            containerNode_2.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_2);
    }
    if (input.Schedule !== undefined && input.Schedule !== null) {
        var node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName("Schedule");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryDestination = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryDestination");
    if (input.S3BucketDestination !== undefined && input.S3BucketDestination !== null) {
        var node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryEncryption = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryEncryption");
    if (input.SSES3 !== undefined && input.SSES3 !== null) {
        var node = serializeAws_restXmlSSES3(input.SSES3, context).withName("SSE-S3");
        bodyNode.addChildNode(node);
    }
    if (input.SSEKMS !== undefined && input.SSEKMS !== null) {
        var node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName("SSE-KMS");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryFilter = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryFilter");
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventoryOptionalFields = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = new (0, _xmlBuilder.XmlNode)("InventoryOptionalField").addChildNode(new (0, _xmlBuilder.XmlText)(entry));
        return node.withName("Field");
    });
};
var serializeAws_restXmlInventoryS3BucketDestination = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("InventoryS3BucketDestination");
    if (input.AccountId !== undefined && input.AccountId !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("AccountId").addChildNode(new (0, _xmlBuilder.XmlText)(input.AccountId)).withName("AccountId");
        bodyNode.addChildNode(node);
    }
    if (input.Bucket !== undefined && input.Bucket !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("BucketName").addChildNode(new (0, _xmlBuilder.XmlText)(input.Bucket)).withName("Bucket");
        bodyNode.addChildNode(node);
    }
    if (input.Format !== undefined && input.Format !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("InventoryFormat").addChildNode(new (0, _xmlBuilder.XmlText)(input.Format)).withName("Format");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Encryption !== undefined && input.Encryption !== null) {
        var node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlInventorySchedule = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("InventorySchedule");
    if (input.Frequency !== undefined && input.Frequency !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("InventoryFrequency").addChildNode(new (0, _xmlBuilder.XmlText)(input.Frequency)).withName("Frequency");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlJSONInput = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("JSONInput");
    if (input.Type !== undefined && input.Type !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("JSONType").addChildNode(new (0, _xmlBuilder.XmlText)(input.Type)).withName("Type");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlJSONOutput = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("JSONOutput");
    if (input.RecordDelimiter !== undefined && input.RecordDelimiter !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("RecordDelimiter").addChildNode(new (0, _xmlBuilder.XmlText)(input.RecordDelimiter)).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlLambdaFunctionConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("LambdaFunctionConfiguration");
    if (input.Id !== undefined && input.Id !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("NotificationId").addChildNode(new (0, _xmlBuilder.XmlText)(input.Id)).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.LambdaFunctionArn !== undefined && input.LambdaFunctionArn !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("LambdaFunctionArn").addChildNode(new (0, _xmlBuilder.XmlText)(input.LambdaFunctionArn)).withName("CloudFunction");
        bodyNode.addChildNode(node);
    }
    if (input.Events !== undefined && input.Events !== null) {
        var nodes = serializeAws_restXmlEventList(input.Events, context);
        nodes.map(function(node) {
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlLambdaFunctionConfigurationList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlLifecycleExpiration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("LifecycleExpiration");
    if (input.Date !== undefined && input.Date !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Date").addChildNode(new (0, _xmlBuilder.XmlText)(input.Date.toISOString().split(".")[0] + "Z")).withName("Date");
        bodyNode.addChildNode(node);
    }
    if (input.Days !== undefined && input.Days !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Days").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Days))).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.ExpiredObjectDeleteMarker !== undefined && input.ExpiredObjectDeleteMarker !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ExpiredObjectDeleteMarker").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.ExpiredObjectDeleteMarker))).withName("ExpiredObjectDeleteMarker");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlLifecycleRule = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("LifecycleRule");
    if (input.Expiration !== undefined && input.Expiration !== null) {
        var node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName("Expiration");
        bodyNode.addChildNode(node);
    }
    if (input.ID !== undefined && input.ID !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ID").addChildNode(new (0, _xmlBuilder.XmlText)(input.ID)).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ExpirationStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Transitions !== undefined && input.Transitions !== null) {
        var nodes = serializeAws_restXmlTransitionList(input.Transitions, context);
        nodes.map(function(node) {
            node = node.withName("Transition");
            bodyNode.addChildNode(node);
        });
    }
    if (input.NoncurrentVersionTransitions !== undefined && input.NoncurrentVersionTransitions !== null) {
        var nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);
        nodes.map(function(node) {
            node = node.withName("NoncurrentVersionTransition");
            bodyNode.addChildNode(node);
        });
    }
    if (input.NoncurrentVersionExpiration !== undefined && input.NoncurrentVersionExpiration !== null) {
        var node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName("NoncurrentVersionExpiration");
        bodyNode.addChildNode(node);
    }
    if (input.AbortIncompleteMultipartUpload !== undefined && input.AbortIncompleteMultipartUpload !== null) {
        var node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName("AbortIncompleteMultipartUpload");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlLifecycleRuleAndOperator = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("LifecycleRuleAndOperator");
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map(function(node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlLifecycleRuleFilter = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("LifecycleRuleFilter");
    (0, _models0.LifecycleRuleFilter).visit(input, {
        Prefix: function(value) {
            var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(value)).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: function(value) {
            var node = serializeAws_restXmlTag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: function(value) {
            var node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: function(name, value) {
            if (!(value instanceof (0, _xmlBuilder.XmlNode) || value instanceof (0, _xmlBuilder.XmlText))) throw new Error("Unable to serialize unknown union members in XML.");
            bodyNode.addChildNode(new (0, _xmlBuilder.XmlNode)(name).addChildNode(value));
        }
    });
    return bodyNode;
};
var serializeAws_restXmlLifecycleRules = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlLifecycleRule(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlLoggingEnabled = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("LoggingEnabled");
    if (input.TargetBucket !== undefined && input.TargetBucket !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("TargetBucket").addChildNode(new (0, _xmlBuilder.XmlText)(input.TargetBucket)).withName("TargetBucket");
        bodyNode.addChildNode(node);
    }
    if (input.TargetGrants !== undefined && input.TargetGrants !== null) {
        var nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);
        var containerNode_3 = new (0, _xmlBuilder.XmlNode)("TargetGrants");
        nodes.map(function(node) {
            containerNode_3.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_3);
    }
    if (input.TargetPrefix !== undefined && input.TargetPrefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("TargetPrefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.TargetPrefix)).withName("TargetPrefix");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlMetadataEntry = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("MetadataEntry");
    if (input.Name !== undefined && input.Name !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("MetadataKey").addChildNode(new (0, _xmlBuilder.XmlText)(input.Name)).withName("Name");
        bodyNode.addChildNode(node);
    }
    if (input.Value !== undefined && input.Value !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("MetadataValue").addChildNode(new (0, _xmlBuilder.XmlText)(input.Value)).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlMetrics = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Metrics");
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("MetricsStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.EventThreshold !== undefined && input.EventThreshold !== null) {
        var node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName("EventThreshold");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlMetricsAndOperator = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("MetricsAndOperator");
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map(function(node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlMetricsConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("MetricsConfiguration");
    if (input.Id !== undefined && input.Id !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("MetricsId").addChildNode(new (0, _xmlBuilder.XmlText)(input.Id)).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlMetricsFilter = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("MetricsFilter");
    (0, _models0.MetricsFilter).visit(input, {
        Prefix: function(value) {
            var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(value)).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: function(value) {
            var node = serializeAws_restXmlTag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: function(value) {
            var node = serializeAws_restXmlMetricsAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: function(name, value) {
            if (!(value instanceof (0, _xmlBuilder.XmlNode) || value instanceof (0, _xmlBuilder.XmlText))) throw new Error("Unable to serialize unknown union members in XML.");
            bodyNode.addChildNode(new (0, _xmlBuilder.XmlNode)(name).addChildNode(value));
        }
    });
    return bodyNode;
};
var serializeAws_restXmlNoncurrentVersionExpiration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("NoncurrentVersionExpiration");
    if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Days").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.NoncurrentDays))).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlNoncurrentVersionTransition = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("NoncurrentVersionTransition");
    if (input.NoncurrentDays !== undefined && input.NoncurrentDays !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Days").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.NoncurrentDays))).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass !== undefined && input.StorageClass !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("TransitionStorageClass").addChildNode(new (0, _xmlBuilder.XmlText)(input.StorageClass)).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlNoncurrentVersionTransitionList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlNotificationConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("NotificationConfiguration");
    if (input.TopicConfigurations !== undefined && input.TopicConfigurations !== null) {
        var nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);
        nodes.map(function(node) {
            node = node.withName("TopicConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.QueueConfigurations !== undefined && input.QueueConfigurations !== null) {
        var nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);
        nodes.map(function(node) {
            node = node.withName("QueueConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    if (input.LambdaFunctionConfigurations !== undefined && input.LambdaFunctionConfigurations !== null) {
        var nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);
        nodes.map(function(node) {
            node = node.withName("CloudFunctionConfiguration");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlNotificationConfigurationFilter = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("NotificationConfigurationFilter");
    if (input.Key !== undefined && input.Key !== null) {
        var node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName("S3Key");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectIdentifier = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectIdentifier");
    if (input.Key !== undefined && input.Key !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectKey").addChildNode(new (0, _xmlBuilder.XmlText)(input.Key)).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.VersionId !== undefined && input.VersionId !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectVersionId").addChildNode(new (0, _xmlBuilder.XmlText)(input.VersionId)).withName("VersionId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectIdentifierList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlObjectIdentifier(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlObjectLockConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectLockConfiguration");
    if (input.ObjectLockEnabled !== undefined && input.ObjectLockEnabled !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectLockEnabled").addChildNode(new (0, _xmlBuilder.XmlText)(input.ObjectLockEnabled)).withName("ObjectLockEnabled");
        bodyNode.addChildNode(node);
    }
    if (input.Rule !== undefined && input.Rule !== null) {
        var node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName("Rule");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectLockLegalHold = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectLockLegalHold");
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectLockLegalHoldStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectLockRetention = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectLockRetention");
    if (input.Mode !== undefined && input.Mode !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectLockRetentionMode").addChildNode(new (0, _xmlBuilder.XmlText)(input.Mode)).withName("Mode");
        bodyNode.addChildNode(node);
    }
    if (input.RetainUntilDate !== undefined && input.RetainUntilDate !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Date").addChildNode(new (0, _xmlBuilder.XmlText)(input.RetainUntilDate.toISOString().split(".")[0] + "Z")).withName("RetainUntilDate");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlObjectLockRule = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ObjectLockRule");
    if (input.DefaultRetention !== undefined && input.DefaultRetention !== null) {
        var node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName("DefaultRetention");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOutputLocation = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("OutputLocation");
    if (input.S3 !== undefined && input.S3 !== null) {
        var node = serializeAws_restXmlS3Location(input.S3, context).withName("S3");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOutputSerialization = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("OutputSerialization");
    if (input.CSV !== undefined && input.CSV !== null) {
        var node = serializeAws_restXmlCSVOutput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
    }
    if (input.JSON !== undefined && input.JSON !== null) {
        var node = serializeAws_restXmlJSONOutput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOwner = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Owner");
    if (input.DisplayName !== undefined && input.DisplayName !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("DisplayName").addChildNode(new (0, _xmlBuilder.XmlText)(input.DisplayName)).withName("DisplayName");
        bodyNode.addChildNode(node);
    }
    if (input.ID !== undefined && input.ID !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ID").addChildNode(new (0, _xmlBuilder.XmlText)(input.ID)).withName("ID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOwnershipControls = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("OwnershipControls");
    if (input.Rules !== undefined && input.Rules !== null) {
        var nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);
        nodes.map(function(node) {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlOwnershipControlsRule = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("OwnershipControlsRule");
    if (input.ObjectOwnership !== undefined && input.ObjectOwnership !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectOwnership").addChildNode(new (0, _xmlBuilder.XmlText)(input.ObjectOwnership)).withName("ObjectOwnership");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlOwnershipControlsRules = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlOwnershipControlsRule(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlParquetInput = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ParquetInput");
    return bodyNode;
};
var serializeAws_restXmlPublicAccessBlockConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("PublicAccessBlockConfiguration");
    if (input.BlockPublicAcls !== undefined && input.BlockPublicAcls !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Setting").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.BlockPublicAcls))).withName("BlockPublicAcls");
        bodyNode.addChildNode(node);
    }
    if (input.IgnorePublicAcls !== undefined && input.IgnorePublicAcls !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Setting").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.IgnorePublicAcls))).withName("IgnorePublicAcls");
        bodyNode.addChildNode(node);
    }
    if (input.BlockPublicPolicy !== undefined && input.BlockPublicPolicy !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Setting").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.BlockPublicPolicy))).withName("BlockPublicPolicy");
        bodyNode.addChildNode(node);
    }
    if (input.RestrictPublicBuckets !== undefined && input.RestrictPublicBuckets !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Setting").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.RestrictPublicBuckets))).withName("RestrictPublicBuckets");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlQueueConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("QueueConfiguration");
    if (input.Id !== undefined && input.Id !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("NotificationId").addChildNode(new (0, _xmlBuilder.XmlText)(input.Id)).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.QueueArn !== undefined && input.QueueArn !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("QueueArn").addChildNode(new (0, _xmlBuilder.XmlText)(input.QueueArn)).withName("Queue");
        bodyNode.addChildNode(node);
    }
    if (input.Events !== undefined && input.Events !== null) {
        var nodes = serializeAws_restXmlEventList(input.Events, context);
        nodes.map(function(node) {
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlQueueConfigurationList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlQueueConfiguration(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlRedirect = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Redirect");
    if (input.HostName !== undefined && input.HostName !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("HostName").addChildNode(new (0, _xmlBuilder.XmlText)(input.HostName)).withName("HostName");
        bodyNode.addChildNode(node);
    }
    if (input.HttpRedirectCode !== undefined && input.HttpRedirectCode !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("HttpRedirectCode").addChildNode(new (0, _xmlBuilder.XmlText)(input.HttpRedirectCode)).withName("HttpRedirectCode");
        bodyNode.addChildNode(node);
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Protocol").addChildNode(new (0, _xmlBuilder.XmlText)(input.Protocol)).withName("Protocol");
        bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyPrefixWith !== undefined && input.ReplaceKeyPrefixWith !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ReplaceKeyPrefixWith").addChildNode(new (0, _xmlBuilder.XmlText)(input.ReplaceKeyPrefixWith)).withName("ReplaceKeyPrefixWith");
        bodyNode.addChildNode(node);
    }
    if (input.ReplaceKeyWith !== undefined && input.ReplaceKeyWith !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ReplaceKeyWith").addChildNode(new (0, _xmlBuilder.XmlText)(input.ReplaceKeyWith)).withName("ReplaceKeyWith");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRedirectAllRequestsTo = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("RedirectAllRequestsTo");
    if (input.HostName !== undefined && input.HostName !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("HostName").addChildNode(new (0, _xmlBuilder.XmlText)(input.HostName)).withName("HostName");
        bodyNode.addChildNode(node);
    }
    if (input.Protocol !== undefined && input.Protocol !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Protocol").addChildNode(new (0, _xmlBuilder.XmlText)(input.Protocol)).withName("Protocol");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlReplicaModifications = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicaModifications");
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ReplicaModificationsStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationConfiguration");
    if (input.Role !== undefined && input.Role !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Role").addChildNode(new (0, _xmlBuilder.XmlText)(input.Role)).withName("Role");
        bodyNode.addChildNode(node);
    }
    if (input.Rules !== undefined && input.Rules !== null) {
        var nodes = serializeAws_restXmlReplicationRules(input.Rules, context);
        nodes.map(function(node) {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationRule = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationRule");
    if (input.ID !== undefined && input.ID !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ID").addChildNode(new (0, _xmlBuilder.XmlText)(input.ID)).withName("ID");
        bodyNode.addChildNode(node);
    }
    if (input.Priority !== undefined && input.Priority !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Priority").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Priority))).withName("Priority");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ReplicationRuleStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.SourceSelectionCriteria !== undefined && input.SourceSelectionCriteria !== null) {
        var node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName("SourceSelectionCriteria");
        bodyNode.addChildNode(node);
    }
    if (input.ExistingObjectReplication !== undefined && input.ExistingObjectReplication !== null) {
        var node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName("ExistingObjectReplication");
        bodyNode.addChildNode(node);
    }
    if (input.Destination !== undefined && input.Destination !== null) {
        var node = serializeAws_restXmlDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
    }
    if (input.DeleteMarkerReplication !== undefined && input.DeleteMarkerReplication !== null) {
        var node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName("DeleteMarkerReplication");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationRuleAndOperator = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationRuleAndOperator");
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Tags !== undefined && input.Tags !== null) {
        var nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map(function(node) {
            node = node.withName("Tag");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationRuleFilter = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationRuleFilter");
    (0, _models0.ReplicationRuleFilter).visit(input, {
        Prefix: function(value) {
            var node = new (0, _xmlBuilder.XmlNode)("Prefix").addChildNode(new (0, _xmlBuilder.XmlText)(value)).withName("Prefix");
            bodyNode.addChildNode(node);
        },
        Tag: function(value) {
            var node = serializeAws_restXmlTag(value, context).withName("Tag");
            bodyNode.addChildNode(node);
        },
        And: function(value) {
            var node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName("And");
            bodyNode.addChildNode(node);
        },
        _: function(name, value) {
            if (!(value instanceof (0, _xmlBuilder.XmlNode) || value instanceof (0, _xmlBuilder.XmlText))) throw new Error("Unable to serialize unknown union members in XML.");
            bodyNode.addChildNode(new (0, _xmlBuilder.XmlNode)(name).addChildNode(value));
        }
    });
    return bodyNode;
};
var serializeAws_restXmlReplicationRules = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlReplicationRule(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlReplicationTime = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationTime");
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ReplicationTimeStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    if (input.Time !== undefined && input.Time !== null) {
        var node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName("Time");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlReplicationTimeValue = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ReplicationTimeValue");
    if (input.Minutes !== undefined && input.Minutes !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Minutes").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Minutes))).withName("Minutes");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRequestPaymentConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("RequestPaymentConfiguration");
    if (input.Payer !== undefined && input.Payer !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Payer").addChildNode(new (0, _xmlBuilder.XmlText)(input.Payer)).withName("Payer");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRequestProgress = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("RequestProgress");
    if (input.Enabled !== undefined && input.Enabled !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("EnableRequestProgress").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Enabled))).withName("Enabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRestoreRequest = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("RestoreRequest");
    if (input.Days !== undefined && input.Days !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Days").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Days))).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.GlacierJobParameters !== undefined && input.GlacierJobParameters !== null) {
        var node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName("GlacierJobParameters");
        bodyNode.addChildNode(node);
    }
    if (input.Type !== undefined && input.Type !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("RestoreRequestType").addChildNode(new (0, _xmlBuilder.XmlText)(input.Type)).withName("Type");
        bodyNode.addChildNode(node);
    }
    if (input.Tier !== undefined && input.Tier !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Tier").addChildNode(new (0, _xmlBuilder.XmlText)(input.Tier)).withName("Tier");
        bodyNode.addChildNode(node);
    }
    if (input.Description !== undefined && input.Description !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Description").addChildNode(new (0, _xmlBuilder.XmlText)(input.Description)).withName("Description");
        bodyNode.addChildNode(node);
    }
    if (input.SelectParameters !== undefined && input.SelectParameters !== null) {
        var node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName("SelectParameters");
        bodyNode.addChildNode(node);
    }
    if (input.OutputLocation !== undefined && input.OutputLocation !== null) {
        var node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName("OutputLocation");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRoutingRule = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("RoutingRule");
    if (input.Condition !== undefined && input.Condition !== null) {
        var node = serializeAws_restXmlCondition(input.Condition, context).withName("Condition");
        bodyNode.addChildNode(node);
    }
    if (input.Redirect !== undefined && input.Redirect !== null) {
        var node = serializeAws_restXmlRedirect(input.Redirect, context).withName("Redirect");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlRoutingRules = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlRoutingRule(entry, context);
        return node.withName("RoutingRule");
    });
};
var serializeAws_restXmlS3KeyFilter = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("S3KeyFilter");
    if (input.FilterRules !== undefined && input.FilterRules !== null) {
        var nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);
        nodes.map(function(node) {
            node = node.withName("FilterRule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlS3Location = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("S3Location");
    if (input.BucketName !== undefined && input.BucketName !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("BucketName").addChildNode(new (0, _xmlBuilder.XmlText)(input.BucketName)).withName("BucketName");
        bodyNode.addChildNode(node);
    }
    if (input.Prefix !== undefined && input.Prefix !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("LocationPrefix").addChildNode(new (0, _xmlBuilder.XmlText)(input.Prefix)).withName("Prefix");
        bodyNode.addChildNode(node);
    }
    if (input.Encryption !== undefined && input.Encryption !== null) {
        var node = serializeAws_restXmlEncryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
    }
    if (input.CannedACL !== undefined && input.CannedACL !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectCannedACL").addChildNode(new (0, _xmlBuilder.XmlText)(input.CannedACL)).withName("CannedACL");
        bodyNode.addChildNode(node);
    }
    if (input.AccessControlList !== undefined && input.AccessControlList !== null) {
        var nodes = serializeAws_restXmlGrants(input.AccessControlList, context);
        var containerNode_4 = new (0, _xmlBuilder.XmlNode)("AccessControlList");
        nodes.map(function(node) {
            containerNode_4.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_4);
    }
    if (input.Tagging !== undefined && input.Tagging !== null) {
        var node = serializeAws_restXmlTagging(input.Tagging, context).withName("Tagging");
        bodyNode.addChildNode(node);
    }
    if (input.UserMetadata !== undefined && input.UserMetadata !== null) {
        var nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);
        var containerNode_5 = new (0, _xmlBuilder.XmlNode)("UserMetadata");
        nodes.map(function(node) {
            containerNode_5.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_5);
    }
    if (input.StorageClass !== undefined && input.StorageClass !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("StorageClass").addChildNode(new (0, _xmlBuilder.XmlText)(input.StorageClass)).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlScanRange = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ScanRange");
    if (input.Start !== undefined && input.Start !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Start").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Start))).withName("Start");
        bodyNode.addChildNode(node);
    }
    if (input.End !== undefined && input.End !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("End").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.End))).withName("End");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlSelectParameters = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("SelectParameters");
    if (input.InputSerialization !== undefined && input.InputSerialization !== null) {
        var node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
    }
    if (input.ExpressionType !== undefined && input.ExpressionType !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ExpressionType").addChildNode(new (0, _xmlBuilder.XmlText)(input.ExpressionType)).withName("ExpressionType");
        bodyNode.addChildNode(node);
    }
    if (input.Expression !== undefined && input.Expression !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Expression").addChildNode(new (0, _xmlBuilder.XmlText)(input.Expression)).withName("Expression");
        bodyNode.addChildNode(node);
    }
    if (input.OutputSerialization !== undefined && input.OutputSerialization !== null) {
        var node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionByDefault = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ServerSideEncryptionByDefault");
    if (input.SSEAlgorithm !== undefined && input.SSEAlgorithm !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ServerSideEncryption").addChildNode(new (0, _xmlBuilder.XmlText)(input.SSEAlgorithm)).withName("SSEAlgorithm");
        bodyNode.addChildNode(node);
    }
    if (input.KMSMasterKeyID !== undefined && input.KMSMasterKeyID !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("SSEKMSKeyId").addChildNode(new (0, _xmlBuilder.XmlText)(input.KMSMasterKeyID)).withName("KMSMasterKeyID");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ServerSideEncryptionConfiguration");
    if (input.Rules !== undefined && input.Rules !== null) {
        var nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);
        nodes.map(function(node) {
            node = node.withName("Rule");
            bodyNode.addChildNode(node);
        });
    }
    return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionRule = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("ServerSideEncryptionRule");
    if (input.ApplyServerSideEncryptionByDefault !== undefined && input.ApplyServerSideEncryptionByDefault !== null) {
        var node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName("ApplyServerSideEncryptionByDefault");
        bodyNode.addChildNode(node);
    }
    if (input.BucketKeyEnabled !== undefined && input.BucketKeyEnabled !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("BucketKeyEnabled").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.BucketKeyEnabled))).withName("BucketKeyEnabled");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlServerSideEncryptionRules = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlServerSideEncryptionRule(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlSourceSelectionCriteria = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("SourceSelectionCriteria");
    if (input.SseKmsEncryptedObjects !== undefined && input.SseKmsEncryptedObjects !== null) {
        var node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName("SseKmsEncryptedObjects");
        bodyNode.addChildNode(node);
    }
    if (input.ReplicaModifications !== undefined && input.ReplicaModifications !== null) {
        var node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName("ReplicaModifications");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlSSEKMS = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("SSE-KMS");
    if (input.KeyId !== undefined && input.KeyId !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("SSEKMSKeyId").addChildNode(new (0, _xmlBuilder.XmlText)(input.KeyId)).withName("KeyId");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlSseKmsEncryptedObjects = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("SseKmsEncryptedObjects");
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("SseKmsEncryptedObjectsStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlSSES3 = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("SSE-S3");
    return bodyNode;
};
var serializeAws_restXmlStorageClassAnalysis = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("StorageClassAnalysis");
    if (input.DataExport !== undefined && input.DataExport !== null) {
        var node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName("DataExport");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlStorageClassAnalysisDataExport = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("StorageClassAnalysisDataExport");
    if (input.OutputSchemaVersion !== undefined && input.OutputSchemaVersion !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("StorageClassAnalysisSchemaVersion").addChildNode(new (0, _xmlBuilder.XmlText)(input.OutputSchemaVersion)).withName("OutputSchemaVersion");
        bodyNode.addChildNode(node);
    }
    if (input.Destination !== undefined && input.Destination !== null) {
        var node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTag = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Tag");
    if (input.Key !== undefined && input.Key !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("ObjectKey").addChildNode(new (0, _xmlBuilder.XmlText)(input.Key)).withName("Key");
        bodyNode.addChildNode(node);
    }
    if (input.Value !== undefined && input.Value !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Value").addChildNode(new (0, _xmlBuilder.XmlText)(input.Value)).withName("Value");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTagging = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Tagging");
    if (input.TagSet !== undefined && input.TagSet !== null) {
        var nodes = serializeAws_restXmlTagSet(input.TagSet, context);
        var containerNode_6 = new (0, _xmlBuilder.XmlNode)("TagSet");
        nodes.map(function(node) {
            containerNode_6.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_6);
    }
    return bodyNode;
};
var serializeAws_restXmlTagSet = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlTag(entry, context);
        return node.withName("Tag");
    });
};
var serializeAws_restXmlTargetGrant = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("TargetGrant");
    if (input.Grantee !== undefined && input.Grantee !== null) {
        var node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
        bodyNode.addChildNode(node);
    }
    if (input.Permission !== undefined && input.Permission !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("BucketLogsPermission").addChildNode(new (0, _xmlBuilder.XmlText)(input.Permission)).withName("Permission");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTargetGrants = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlTargetGrant(entry, context);
        return node.withName("Grant");
    });
};
var serializeAws_restXmlTiering = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Tiering");
    if (input.Days !== undefined && input.Days !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("IntelligentTieringDays").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Days))).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.AccessTier !== undefined && input.AccessTier !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("IntelligentTieringAccessTier").addChildNode(new (0, _xmlBuilder.XmlText)(input.AccessTier)).withName("AccessTier");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTieringList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlTiering(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlTopicConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("TopicConfiguration");
    if (input.Id !== undefined && input.Id !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("NotificationId").addChildNode(new (0, _xmlBuilder.XmlText)(input.Id)).withName("Id");
        bodyNode.addChildNode(node);
    }
    if (input.TopicArn !== undefined && input.TopicArn !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("TopicArn").addChildNode(new (0, _xmlBuilder.XmlText)(input.TopicArn)).withName("Topic");
        bodyNode.addChildNode(node);
    }
    if (input.Events !== undefined && input.Events !== null) {
        var nodes = serializeAws_restXmlEventList(input.Events, context);
        nodes.map(function(node) {
            node = node.withName("Event");
            bodyNode.addChildNode(node);
        });
    }
    if (input.Filter !== undefined && input.Filter !== null) {
        var node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTopicConfigurationList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlTopicConfiguration(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlTransition = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("Transition");
    if (input.Date !== undefined && input.Date !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Date").addChildNode(new (0, _xmlBuilder.XmlText)(input.Date.toISOString().split(".")[0] + "Z")).withName("Date");
        bodyNode.addChildNode(node);
    }
    if (input.Days !== undefined && input.Days !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("Days").addChildNode(new (0, _xmlBuilder.XmlText)(String(input.Days))).withName("Days");
        bodyNode.addChildNode(node);
    }
    if (input.StorageClass !== undefined && input.StorageClass !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("TransitionStorageClass").addChildNode(new (0, _xmlBuilder.XmlText)(input.StorageClass)).withName("StorageClass");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlTransitionList = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlTransition(entry, context);
        return node.withName("member");
    });
};
var serializeAws_restXmlUserMetadata = function(input, context) {
    return input.filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        var node = serializeAws_restXmlMetadataEntry(entry, context);
        return node.withName("MetadataEntry");
    });
};
var serializeAws_restXmlVersioningConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("VersioningConfiguration");
    if (input.MFADelete !== undefined && input.MFADelete !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("MFADelete").addChildNode(new (0, _xmlBuilder.XmlText)(input.MFADelete)).withName("MfaDelete");
        bodyNode.addChildNode(node);
    }
    if (input.Status !== undefined && input.Status !== null) {
        var node = new (0, _xmlBuilder.XmlNode)("BucketVersioningStatus").addChildNode(new (0, _xmlBuilder.XmlText)(input.Status)).withName("Status");
        bodyNode.addChildNode(node);
    }
    return bodyNode;
};
var serializeAws_restXmlWebsiteConfiguration = function(input, context) {
    var bodyNode = new (0, _xmlBuilder.XmlNode)("WebsiteConfiguration");
    if (input.ErrorDocument !== undefined && input.ErrorDocument !== null) {
        var node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName("ErrorDocument");
        bodyNode.addChildNode(node);
    }
    if (input.IndexDocument !== undefined && input.IndexDocument !== null) {
        var node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName("IndexDocument");
        bodyNode.addChildNode(node);
    }
    if (input.RedirectAllRequestsTo !== undefined && input.RedirectAllRequestsTo !== null) {
        var node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName("RedirectAllRequestsTo");
        bodyNode.addChildNode(node);
    }
    if (input.RoutingRules !== undefined && input.RoutingRules !== null) {
        var nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);
        var containerNode_7 = new (0, _xmlBuilder.XmlNode)("RoutingRules");
        nodes.map(function(node) {
            containerNode_7.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode_7);
    }
    return bodyNode;
};
var deserializeAws_restXmlAbortIncompleteMultipartUpload = function(output, context) {
    var contents = {
        DaysAfterInitiation: undefined
    };
    if (output["DaysAfterInitiation"] !== undefined) contents.DaysAfterInitiation = parseInt(output["DaysAfterInitiation"]);
    return contents;
};
var deserializeAws_restXmlAccessControlTranslation = function(output, context) {
    var contents = {
        Owner: undefined
    };
    if (output["Owner"] !== undefined) contents.Owner = output["Owner"];
    return contents;
};
var deserializeAws_restXmlAllowedHeaders = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_restXmlAllowedMethods = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_restXmlAllowedOrigins = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_restXmlAnalyticsAndOperator = function(output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined
    };
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    if (output.Tag === "") contents.Tags = [];
    if (output["Tag"] !== undefined) contents.Tags = deserializeAws_restXmlTagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    return contents;
};
var deserializeAws_restXmlAnalyticsConfiguration = function(output, context) {
    var contents = {
        Id: undefined,
        Filter: undefined,
        StorageClassAnalysis: undefined
    };
    if (output["Id"] !== undefined) contents.Id = output["Id"];
    if (output["Filter"] !== undefined) contents.Filter = deserializeAws_restXmlAnalyticsFilter(output["Filter"], context);
    if (output["StorageClassAnalysis"] !== undefined) contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output["StorageClassAnalysis"], context);
    return contents;
};
var deserializeAws_restXmlAnalyticsConfigurationList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlAnalyticsConfiguration(entry, context);
    });
};
var deserializeAws_restXmlAnalyticsExportDestination = function(output, context) {
    var contents = {
        S3BucketDestination: undefined
    };
    if (output["S3BucketDestination"] !== undefined) contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output["S3BucketDestination"], context);
    return contents;
};
var deserializeAws_restXmlAnalyticsFilter = function(output, context) {
    if (output["Prefix"] !== undefined) return {
        Prefix: output["Prefix"]
    };
    if (output["Tag"] !== undefined) return {
        Tag: deserializeAws_restXmlTag(output["Tag"], context)
    };
    if (output["And"] !== undefined) return {
        And: deserializeAws_restXmlAnalyticsAndOperator(output["And"], context)
    };
    return {
        $unknown: Object.entries(output)[0]
    };
};
var deserializeAws_restXmlAnalyticsS3BucketDestination = function(output, context) {
    var contents = {
        Format: undefined,
        BucketAccountId: undefined,
        Bucket: undefined,
        Prefix: undefined
    };
    if (output["Format"] !== undefined) contents.Format = output["Format"];
    if (output["BucketAccountId"] !== undefined) contents.BucketAccountId = output["BucketAccountId"];
    if (output["Bucket"] !== undefined) contents.Bucket = output["Bucket"];
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    return contents;
};
var deserializeAws_restXmlBucket = function(output, context) {
    var contents = {
        Name: undefined,
        CreationDate: undefined
    };
    if (output["Name"] !== undefined) contents.Name = output["Name"];
    if (output["CreationDate"] !== undefined) contents.CreationDate = new Date(output["CreationDate"]);
    return contents;
};
var deserializeAws_restXmlBuckets = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlBucket(entry, context);
    });
};
var deserializeAws_restXmlCommonPrefix = function(output, context) {
    var contents = {
        Prefix: undefined
    };
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    return contents;
};
var deserializeAws_restXmlCommonPrefixList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlCommonPrefix(entry, context);
    });
};
var deserializeAws_restXmlCondition = function(output, context) {
    var contents = {
        HttpErrorCodeReturnedEquals: undefined,
        KeyPrefixEquals: undefined
    };
    if (output["HttpErrorCodeReturnedEquals"] !== undefined) contents.HttpErrorCodeReturnedEquals = output["HttpErrorCodeReturnedEquals"];
    if (output["KeyPrefixEquals"] !== undefined) contents.KeyPrefixEquals = output["KeyPrefixEquals"];
    return contents;
};
var deserializeAws_restXmlCopyObjectResult = function(output, context) {
    var contents = {
        ETag: undefined,
        LastModified: undefined
    };
    if (output["ETag"] !== undefined) contents.ETag = output["ETag"];
    if (output["LastModified"] !== undefined) contents.LastModified = new Date(output["LastModified"]);
    return contents;
};
var deserializeAws_restXmlCopyPartResult = function(output, context) {
    var contents = {
        ETag: undefined,
        LastModified: undefined
    };
    if (output["ETag"] !== undefined) contents.ETag = output["ETag"];
    if (output["LastModified"] !== undefined) contents.LastModified = new Date(output["LastModified"]);
    return contents;
};
var deserializeAws_restXmlCORSRule = function(output, context) {
    var contents = {
        AllowedHeaders: undefined,
        AllowedMethods: undefined,
        AllowedOrigins: undefined,
        ExposeHeaders: undefined,
        MaxAgeSeconds: undefined
    };
    if (output.AllowedHeader === "") contents.AllowedHeaders = [];
    if (output["AllowedHeader"] !== undefined) contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders((0, _smithyClient.getArrayIfSingleItem)(output["AllowedHeader"]), context);
    if (output.AllowedMethod === "") contents.AllowedMethods = [];
    if (output["AllowedMethod"] !== undefined) contents.AllowedMethods = deserializeAws_restXmlAllowedMethods((0, _smithyClient.getArrayIfSingleItem)(output["AllowedMethod"]), context);
    if (output.AllowedOrigin === "") contents.AllowedOrigins = [];
    if (output["AllowedOrigin"] !== undefined) contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins((0, _smithyClient.getArrayIfSingleItem)(output["AllowedOrigin"]), context);
    if (output.ExposeHeader === "") contents.ExposeHeaders = [];
    if (output["ExposeHeader"] !== undefined) contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders((0, _smithyClient.getArrayIfSingleItem)(output["ExposeHeader"]), context);
    if (output["MaxAgeSeconds"] !== undefined) contents.MaxAgeSeconds = parseInt(output["MaxAgeSeconds"]);
    return contents;
};
var deserializeAws_restXmlCORSRules = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlCORSRule(entry, context);
    });
};
var deserializeAws_restXmlDefaultRetention = function(output, context) {
    var contents = {
        Mode: undefined,
        Days: undefined,
        Years: undefined
    };
    if (output["Mode"] !== undefined) contents.Mode = output["Mode"];
    if (output["Days"] !== undefined) contents.Days = parseInt(output["Days"]);
    if (output["Years"] !== undefined) contents.Years = parseInt(output["Years"]);
    return contents;
};
var deserializeAws_restXmlDeletedObject = function(output, context) {
    var contents = {
        Key: undefined,
        VersionId: undefined,
        DeleteMarker: undefined,
        DeleteMarkerVersionId: undefined
    };
    if (output["Key"] !== undefined) contents.Key = output["Key"];
    if (output["VersionId"] !== undefined) contents.VersionId = output["VersionId"];
    if (output["DeleteMarker"] !== undefined) contents.DeleteMarker = output["DeleteMarker"] == "true";
    if (output["DeleteMarkerVersionId"] !== undefined) contents.DeleteMarkerVersionId = output["DeleteMarkerVersionId"];
    return contents;
};
var deserializeAws_restXmlDeletedObjects = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlDeletedObject(entry, context);
    });
};
var deserializeAws_restXmlDeleteMarkerEntry = function(output, context) {
    var contents = {
        Owner: undefined,
        Key: undefined,
        VersionId: undefined,
        IsLatest: undefined,
        LastModified: undefined
    };
    if (output["Owner"] !== undefined) contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    if (output["Key"] !== undefined) contents.Key = output["Key"];
    if (output["VersionId"] !== undefined) contents.VersionId = output["VersionId"];
    if (output["IsLatest"] !== undefined) contents.IsLatest = output["IsLatest"] == "true";
    if (output["LastModified"] !== undefined) contents.LastModified = new Date(output["LastModified"]);
    return contents;
};
var deserializeAws_restXmlDeleteMarkerReplication = function(output, context) {
    var contents = {
        Status: undefined
    };
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    return contents;
};
var deserializeAws_restXmlDeleteMarkers = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlDeleteMarkerEntry(entry, context);
    });
};
var deserializeAws_restXmlDestination = function(output, context) {
    var contents = {
        Bucket: undefined,
        Account: undefined,
        StorageClass: undefined,
        AccessControlTranslation: undefined,
        EncryptionConfiguration: undefined,
        ReplicationTime: undefined,
        Metrics: undefined
    };
    if (output["Bucket"] !== undefined) contents.Bucket = output["Bucket"];
    if (output["Account"] !== undefined) contents.Account = output["Account"];
    if (output["StorageClass"] !== undefined) contents.StorageClass = output["StorageClass"];
    if (output["AccessControlTranslation"] !== undefined) contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output["AccessControlTranslation"], context);
    if (output["EncryptionConfiguration"] !== undefined) contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output["EncryptionConfiguration"], context);
    if (output["ReplicationTime"] !== undefined) contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output["ReplicationTime"], context);
    if (output["Metrics"] !== undefined) contents.Metrics = deserializeAws_restXmlMetrics(output["Metrics"], context);
    return contents;
};
var deserializeAws_restXmlEncryptionConfiguration = function(output, context) {
    var contents = {
        ReplicaKmsKeyID: undefined
    };
    if (output["ReplicaKmsKeyID"] !== undefined) contents.ReplicaKmsKeyID = output["ReplicaKmsKeyID"];
    return contents;
};
var deserializeAws_restXml_Error = function(output, context) {
    var contents = {
        Key: undefined,
        VersionId: undefined,
        Code: undefined,
        Message: undefined
    };
    if (output["Key"] !== undefined) contents.Key = output["Key"];
    if (output["VersionId"] !== undefined) contents.VersionId = output["VersionId"];
    if (output["Code"] !== undefined) contents.Code = output["Code"];
    if (output["Message"] !== undefined) contents.Message = output["Message"];
    return contents;
};
var deserializeAws_restXmlErrorDocument = function(output, context) {
    var contents = {
        Key: undefined
    };
    if (output["Key"] !== undefined) contents.Key = output["Key"];
    return contents;
};
var deserializeAws_restXmlErrors = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXml_Error(entry, context);
    });
};
var deserializeAws_restXmlEventList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_restXmlExistingObjectReplication = function(output, context) {
    var contents = {
        Status: undefined
    };
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    return contents;
};
var deserializeAws_restXmlExposeHeaders = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_restXmlFilterRule = function(output, context) {
    var contents = {
        Name: undefined,
        Value: undefined
    };
    if (output["Name"] !== undefined) contents.Name = output["Name"];
    if (output["Value"] !== undefined) contents.Value = output["Value"];
    return contents;
};
var deserializeAws_restXmlFilterRuleList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlFilterRule(entry, context);
    });
};
var deserializeAws_restXmlGrant = function(output, context) {
    var contents = {
        Grantee: undefined,
        Permission: undefined
    };
    if (output["Grantee"] !== undefined) contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
    if (output["Permission"] !== undefined) contents.Permission = output["Permission"];
    return contents;
};
var deserializeAws_restXmlGrantee = function(output, context) {
    var contents = {
        DisplayName: undefined,
        EmailAddress: undefined,
        ID: undefined,
        URI: undefined,
        Type: undefined
    };
    if (output["DisplayName"] !== undefined) contents.DisplayName = output["DisplayName"];
    if (output["EmailAddress"] !== undefined) contents.EmailAddress = output["EmailAddress"];
    if (output["ID"] !== undefined) contents.ID = output["ID"];
    if (output["URI"] !== undefined) contents.URI = output["URI"];
    if (output["xsi:type"] !== undefined) contents.Type = output["xsi:type"];
    return contents;
};
var deserializeAws_restXmlGrants = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlGrant(entry, context);
    });
};
var deserializeAws_restXmlIndexDocument = function(output, context) {
    var contents = {
        Suffix: undefined
    };
    if (output["Suffix"] !== undefined) contents.Suffix = output["Suffix"];
    return contents;
};
var deserializeAws_restXmlInitiator = function(output, context) {
    var contents = {
        ID: undefined,
        DisplayName: undefined
    };
    if (output["ID"] !== undefined) contents.ID = output["ID"];
    if (output["DisplayName"] !== undefined) contents.DisplayName = output["DisplayName"];
    return contents;
};
var deserializeAws_restXmlIntelligentTieringAndOperator = function(output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined
    };
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    if (output.Tag === "") contents.Tags = [];
    if (output["Tag"] !== undefined) contents.Tags = deserializeAws_restXmlTagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    return contents;
};
var deserializeAws_restXmlIntelligentTieringConfiguration = function(output, context) {
    var contents = {
        Id: undefined,
        Filter: undefined,
        Status: undefined,
        Tierings: undefined
    };
    if (output["Id"] !== undefined) contents.Id = output["Id"];
    if (output["Filter"] !== undefined) contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output["Filter"], context);
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    if (output.Tiering === "") contents.Tierings = [];
    if (output["Tiering"] !== undefined) contents.Tierings = deserializeAws_restXmlTieringList((0, _smithyClient.getArrayIfSingleItem)(output["Tiering"]), context);
    return contents;
};
var deserializeAws_restXmlIntelligentTieringConfigurationList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);
    });
};
var deserializeAws_restXmlIntelligentTieringFilter = function(output, context) {
    var contents = {
        Prefix: undefined,
        Tag: undefined,
        And: undefined
    };
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    if (output["Tag"] !== undefined) contents.Tag = deserializeAws_restXmlTag(output["Tag"], context);
    if (output["And"] !== undefined) contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output["And"], context);
    return contents;
};
var deserializeAws_restXmlInventoryConfiguration = function(output, context) {
    var contents = {
        Destination: undefined,
        IsEnabled: undefined,
        Filter: undefined,
        Id: undefined,
        IncludedObjectVersions: undefined,
        OptionalFields: undefined,
        Schedule: undefined
    };
    if (output["Destination"] !== undefined) contents.Destination = deserializeAws_restXmlInventoryDestination(output["Destination"], context);
    if (output["IsEnabled"] !== undefined) contents.IsEnabled = output["IsEnabled"] == "true";
    if (output["Filter"] !== undefined) contents.Filter = deserializeAws_restXmlInventoryFilter(output["Filter"], context);
    if (output["Id"] !== undefined) contents.Id = output["Id"];
    if (output["IncludedObjectVersions"] !== undefined) contents.IncludedObjectVersions = output["IncludedObjectVersions"];
    if (output.OptionalFields === "") contents.OptionalFields = [];
    if (output["OptionalFields"] !== undefined && output["OptionalFields"]["Field"] !== undefined) contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields((0, _smithyClient.getArrayIfSingleItem)(output["OptionalFields"]["Field"]), context);
    if (output["Schedule"] !== undefined) contents.Schedule = deserializeAws_restXmlInventorySchedule(output["Schedule"], context);
    return contents;
};
var deserializeAws_restXmlInventoryConfigurationList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlInventoryConfiguration(entry, context);
    });
};
var deserializeAws_restXmlInventoryDestination = function(output, context) {
    var contents = {
        S3BucketDestination: undefined
    };
    if (output["S3BucketDestination"] !== undefined) contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output["S3BucketDestination"], context);
    return contents;
};
var deserializeAws_restXmlInventoryEncryption = function(output, context) {
    var contents = {
        SSES3: undefined,
        SSEKMS: undefined
    };
    if (output["SSE-S3"] !== undefined) contents.SSES3 = deserializeAws_restXmlSSES3(output["SSE-S3"], context);
    if (output["SSE-KMS"] !== undefined) contents.SSEKMS = deserializeAws_restXmlSSEKMS(output["SSE-KMS"], context);
    return contents;
};
var deserializeAws_restXmlInventoryFilter = function(output, context) {
    var contents = {
        Prefix: undefined
    };
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    return contents;
};
var deserializeAws_restXmlInventoryOptionalFields = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return entry;
    });
};
var deserializeAws_restXmlInventoryS3BucketDestination = function(output, context) {
    var contents = {
        AccountId: undefined,
        Bucket: undefined,
        Format: undefined,
        Prefix: undefined,
        Encryption: undefined
    };
    if (output["AccountId"] !== undefined) contents.AccountId = output["AccountId"];
    if (output["Bucket"] !== undefined) contents.Bucket = output["Bucket"];
    if (output["Format"] !== undefined) contents.Format = output["Format"];
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    if (output["Encryption"] !== undefined) contents.Encryption = deserializeAws_restXmlInventoryEncryption(output["Encryption"], context);
    return contents;
};
var deserializeAws_restXmlInventorySchedule = function(output, context) {
    var contents = {
        Frequency: undefined
    };
    if (output["Frequency"] !== undefined) contents.Frequency = output["Frequency"];
    return contents;
};
var deserializeAws_restXmlLambdaFunctionConfiguration = function(output, context) {
    var contents = {
        Id: undefined,
        LambdaFunctionArn: undefined,
        Events: undefined,
        Filter: undefined
    };
    if (output["Id"] !== undefined) contents.Id = output["Id"];
    if (output["CloudFunction"] !== undefined) contents.LambdaFunctionArn = output["CloudFunction"];
    if (output.Event === "") contents.Events = [];
    if (output["Event"] !== undefined) contents.Events = deserializeAws_restXmlEventList((0, _smithyClient.getArrayIfSingleItem)(output["Event"]), context);
    if (output["Filter"] !== undefined) contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
    return contents;
};
var deserializeAws_restXmlLambdaFunctionConfigurationList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);
    });
};
var deserializeAws_restXmlLifecycleExpiration = function(output, context) {
    var contents = {
        Date: undefined,
        Days: undefined,
        ExpiredObjectDeleteMarker: undefined
    };
    if (output["Date"] !== undefined) contents.Date = new Date(output["Date"]);
    if (output["Days"] !== undefined) contents.Days = parseInt(output["Days"]);
    if (output["ExpiredObjectDeleteMarker"] !== undefined) contents.ExpiredObjectDeleteMarker = output["ExpiredObjectDeleteMarker"] == "true";
    return contents;
};
var deserializeAws_restXmlLifecycleRule = function(output, context) {
    var contents = {
        Expiration: undefined,
        ID: undefined,
        Prefix: undefined,
        Filter: undefined,
        Status: undefined,
        Transitions: undefined,
        NoncurrentVersionTransitions: undefined,
        NoncurrentVersionExpiration: undefined,
        AbortIncompleteMultipartUpload: undefined
    };
    if (output["Expiration"] !== undefined) contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output["Expiration"], context);
    if (output["ID"] !== undefined) contents.ID = output["ID"];
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    if (output["Filter"] !== undefined) contents.Filter = deserializeAws_restXmlLifecycleRuleFilter(output["Filter"], context);
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    if (output.Transition === "") contents.Transitions = [];
    if (output["Transition"] !== undefined) contents.Transitions = deserializeAws_restXmlTransitionList((0, _smithyClient.getArrayIfSingleItem)(output["Transition"]), context);
    if (output.NoncurrentVersionTransition === "") contents.NoncurrentVersionTransitions = [];
    if (output["NoncurrentVersionTransition"] !== undefined) contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList((0, _smithyClient.getArrayIfSingleItem)(output["NoncurrentVersionTransition"]), context);
    if (output["NoncurrentVersionExpiration"] !== undefined) contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output["NoncurrentVersionExpiration"], context);
    if (output["AbortIncompleteMultipartUpload"] !== undefined) contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"], context);
    return contents;
};
var deserializeAws_restXmlLifecycleRuleAndOperator = function(output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined
    };
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    if (output.Tag === "") contents.Tags = [];
    if (output["Tag"] !== undefined) contents.Tags = deserializeAws_restXmlTagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    return contents;
};
var deserializeAws_restXmlLifecycleRuleFilter = function(output, context) {
    if (output["Prefix"] !== undefined) return {
        Prefix: output["Prefix"]
    };
    if (output["Tag"] !== undefined) return {
        Tag: deserializeAws_restXmlTag(output["Tag"], context)
    };
    if (output["And"] !== undefined) return {
        And: deserializeAws_restXmlLifecycleRuleAndOperator(output["And"], context)
    };
    return {
        $unknown: Object.entries(output)[0]
    };
};
var deserializeAws_restXmlLifecycleRules = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlLifecycleRule(entry, context);
    });
};
var deserializeAws_restXmlLoggingEnabled = function(output, context) {
    var contents = {
        TargetBucket: undefined,
        TargetGrants: undefined,
        TargetPrefix: undefined
    };
    if (output["TargetBucket"] !== undefined) contents.TargetBucket = output["TargetBucket"];
    if (output.TargetGrants === "") contents.TargetGrants = [];
    if (output["TargetGrants"] !== undefined && output["TargetGrants"]["Grant"] !== undefined) contents.TargetGrants = deserializeAws_restXmlTargetGrants((0, _smithyClient.getArrayIfSingleItem)(output["TargetGrants"]["Grant"]), context);
    if (output["TargetPrefix"] !== undefined) contents.TargetPrefix = output["TargetPrefix"];
    return contents;
};
var deserializeAws_restXmlMetrics = function(output, context) {
    var contents = {
        Status: undefined,
        EventThreshold: undefined
    };
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    if (output["EventThreshold"] !== undefined) contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output["EventThreshold"], context);
    return contents;
};
var deserializeAws_restXmlMetricsAndOperator = function(output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined
    };
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    if (output.Tag === "") contents.Tags = [];
    if (output["Tag"] !== undefined) contents.Tags = deserializeAws_restXmlTagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    return contents;
};
var deserializeAws_restXmlMetricsConfiguration = function(output, context) {
    var contents = {
        Id: undefined,
        Filter: undefined
    };
    if (output["Id"] !== undefined) contents.Id = output["Id"];
    if (output["Filter"] !== undefined) contents.Filter = deserializeAws_restXmlMetricsFilter(output["Filter"], context);
    return contents;
};
var deserializeAws_restXmlMetricsConfigurationList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlMetricsConfiguration(entry, context);
    });
};
var deserializeAws_restXmlMetricsFilter = function(output, context) {
    if (output["Prefix"] !== undefined) return {
        Prefix: output["Prefix"]
    };
    if (output["Tag"] !== undefined) return {
        Tag: deserializeAws_restXmlTag(output["Tag"], context)
    };
    if (output["And"] !== undefined) return {
        And: deserializeAws_restXmlMetricsAndOperator(output["And"], context)
    };
    return {
        $unknown: Object.entries(output)[0]
    };
};
var deserializeAws_restXmlMultipartUpload = function(output, context) {
    var contents = {
        UploadId: undefined,
        Key: undefined,
        Initiated: undefined,
        StorageClass: undefined,
        Owner: undefined,
        Initiator: undefined
    };
    if (output["UploadId"] !== undefined) contents.UploadId = output["UploadId"];
    if (output["Key"] !== undefined) contents.Key = output["Key"];
    if (output["Initiated"] !== undefined) contents.Initiated = new Date(output["Initiated"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = output["StorageClass"];
    if (output["Owner"] !== undefined) contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    if (output["Initiator"] !== undefined) contents.Initiator = deserializeAws_restXmlInitiator(output["Initiator"], context);
    return contents;
};
var deserializeAws_restXmlMultipartUploadList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlMultipartUpload(entry, context);
    });
};
var deserializeAws_restXmlNoncurrentVersionExpiration = function(output, context) {
    var contents = {
        NoncurrentDays: undefined
    };
    if (output["NoncurrentDays"] !== undefined) contents.NoncurrentDays = parseInt(output["NoncurrentDays"]);
    return contents;
};
var deserializeAws_restXmlNoncurrentVersionTransition = function(output, context) {
    var contents = {
        NoncurrentDays: undefined,
        StorageClass: undefined
    };
    if (output["NoncurrentDays"] !== undefined) contents.NoncurrentDays = parseInt(output["NoncurrentDays"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = output["StorageClass"];
    return contents;
};
var deserializeAws_restXmlNoncurrentVersionTransitionList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);
    });
};
var deserializeAws_restXmlNotificationConfigurationFilter = function(output, context) {
    var contents = {
        Key: undefined
    };
    if (output["S3Key"] !== undefined) contents.Key = deserializeAws_restXmlS3KeyFilter(output["S3Key"], context);
    return contents;
};
var deserializeAws_restXml_Object = function(output, context) {
    var contents = {
        Key: undefined,
        LastModified: undefined,
        ETag: undefined,
        Size: undefined,
        StorageClass: undefined,
        Owner: undefined
    };
    if (output["Key"] !== undefined) contents.Key = output["Key"];
    if (output["LastModified"] !== undefined) contents.LastModified = new Date(output["LastModified"]);
    if (output["ETag"] !== undefined) contents.ETag = output["ETag"];
    if (output["Size"] !== undefined) contents.Size = parseInt(output["Size"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = output["StorageClass"];
    if (output["Owner"] !== undefined) contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    return contents;
};
var deserializeAws_restXmlObjectList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXml_Object(entry, context);
    });
};
var deserializeAws_restXmlObjectLockConfiguration = function(output, context) {
    var contents = {
        ObjectLockEnabled: undefined,
        Rule: undefined
    };
    if (output["ObjectLockEnabled"] !== undefined) contents.ObjectLockEnabled = output["ObjectLockEnabled"];
    if (output["Rule"] !== undefined) contents.Rule = deserializeAws_restXmlObjectLockRule(output["Rule"], context);
    return contents;
};
var deserializeAws_restXmlObjectLockLegalHold = function(output, context) {
    var contents = {
        Status: undefined
    };
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    return contents;
};
var deserializeAws_restXmlObjectLockRetention = function(output, context) {
    var contents = {
        Mode: undefined,
        RetainUntilDate: undefined
    };
    if (output["Mode"] !== undefined) contents.Mode = output["Mode"];
    if (output["RetainUntilDate"] !== undefined) contents.RetainUntilDate = new Date(output["RetainUntilDate"]);
    return contents;
};
var deserializeAws_restXmlObjectLockRule = function(output, context) {
    var contents = {
        DefaultRetention: undefined
    };
    if (output["DefaultRetention"] !== undefined) contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output["DefaultRetention"], context);
    return contents;
};
var deserializeAws_restXmlObjectVersion = function(output, context) {
    var contents = {
        ETag: undefined,
        Size: undefined,
        StorageClass: undefined,
        Key: undefined,
        VersionId: undefined,
        IsLatest: undefined,
        LastModified: undefined,
        Owner: undefined
    };
    if (output["ETag"] !== undefined) contents.ETag = output["ETag"];
    if (output["Size"] !== undefined) contents.Size = parseInt(output["Size"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = output["StorageClass"];
    if (output["Key"] !== undefined) contents.Key = output["Key"];
    if (output["VersionId"] !== undefined) contents.VersionId = output["VersionId"];
    if (output["IsLatest"] !== undefined) contents.IsLatest = output["IsLatest"] == "true";
    if (output["LastModified"] !== undefined) contents.LastModified = new Date(output["LastModified"]);
    if (output["Owner"] !== undefined) contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
    return contents;
};
var deserializeAws_restXmlObjectVersionList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlObjectVersion(entry, context);
    });
};
var deserializeAws_restXmlOwner = function(output, context) {
    var contents = {
        DisplayName: undefined,
        ID: undefined
    };
    if (output["DisplayName"] !== undefined) contents.DisplayName = output["DisplayName"];
    if (output["ID"] !== undefined) contents.ID = output["ID"];
    return contents;
};
var deserializeAws_restXmlOwnershipControls = function(output, context) {
    var contents = {
        Rules: undefined
    };
    if (output.Rule === "") contents.Rules = [];
    if (output["Rule"] !== undefined) contents.Rules = deserializeAws_restXmlOwnershipControlsRules((0, _smithyClient.getArrayIfSingleItem)(output["Rule"]), context);
    return contents;
};
var deserializeAws_restXmlOwnershipControlsRule = function(output, context) {
    var contents = {
        ObjectOwnership: undefined
    };
    if (output["ObjectOwnership"] !== undefined) contents.ObjectOwnership = output["ObjectOwnership"];
    return contents;
};
var deserializeAws_restXmlOwnershipControlsRules = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlOwnershipControlsRule(entry, context);
    });
};
var deserializeAws_restXmlPart = function(output, context) {
    var contents = {
        PartNumber: undefined,
        LastModified: undefined,
        ETag: undefined,
        Size: undefined
    };
    if (output["PartNumber"] !== undefined) contents.PartNumber = parseInt(output["PartNumber"]);
    if (output["LastModified"] !== undefined) contents.LastModified = new Date(output["LastModified"]);
    if (output["ETag"] !== undefined) contents.ETag = output["ETag"];
    if (output["Size"] !== undefined) contents.Size = parseInt(output["Size"]);
    return contents;
};
var deserializeAws_restXmlParts = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlPart(entry, context);
    });
};
var deserializeAws_restXmlPolicyStatus = function(output, context) {
    var contents = {
        IsPublic: undefined
    };
    if (output["IsPublic"] !== undefined) contents.IsPublic = output["IsPublic"] == "true";
    return contents;
};
var deserializeAws_restXmlPublicAccessBlockConfiguration = function(output, context) {
    var contents = {
        BlockPublicAcls: undefined,
        IgnorePublicAcls: undefined,
        BlockPublicPolicy: undefined,
        RestrictPublicBuckets: undefined
    };
    if (output["BlockPublicAcls"] !== undefined) contents.BlockPublicAcls = output["BlockPublicAcls"] == "true";
    if (output["IgnorePublicAcls"] !== undefined) contents.IgnorePublicAcls = output["IgnorePublicAcls"] == "true";
    if (output["BlockPublicPolicy"] !== undefined) contents.BlockPublicPolicy = output["BlockPublicPolicy"] == "true";
    if (output["RestrictPublicBuckets"] !== undefined) contents.RestrictPublicBuckets = output["RestrictPublicBuckets"] == "true";
    return contents;
};
var deserializeAws_restXmlQueueConfiguration = function(output, context) {
    var contents = {
        Id: undefined,
        QueueArn: undefined,
        Events: undefined,
        Filter: undefined
    };
    if (output["Id"] !== undefined) contents.Id = output["Id"];
    if (output["Queue"] !== undefined) contents.QueueArn = output["Queue"];
    if (output.Event === "") contents.Events = [];
    if (output["Event"] !== undefined) contents.Events = deserializeAws_restXmlEventList((0, _smithyClient.getArrayIfSingleItem)(output["Event"]), context);
    if (output["Filter"] !== undefined) contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
    return contents;
};
var deserializeAws_restXmlQueueConfigurationList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlQueueConfiguration(entry, context);
    });
};
var deserializeAws_restXmlRedirect = function(output, context) {
    var contents = {
        HostName: undefined,
        HttpRedirectCode: undefined,
        Protocol: undefined,
        ReplaceKeyPrefixWith: undefined,
        ReplaceKeyWith: undefined
    };
    if (output["HostName"] !== undefined) contents.HostName = output["HostName"];
    if (output["HttpRedirectCode"] !== undefined) contents.HttpRedirectCode = output["HttpRedirectCode"];
    if (output["Protocol"] !== undefined) contents.Protocol = output["Protocol"];
    if (output["ReplaceKeyPrefixWith"] !== undefined) contents.ReplaceKeyPrefixWith = output["ReplaceKeyPrefixWith"];
    if (output["ReplaceKeyWith"] !== undefined) contents.ReplaceKeyWith = output["ReplaceKeyWith"];
    return contents;
};
var deserializeAws_restXmlRedirectAllRequestsTo = function(output, context) {
    var contents = {
        HostName: undefined,
        Protocol: undefined
    };
    if (output["HostName"] !== undefined) contents.HostName = output["HostName"];
    if (output["Protocol"] !== undefined) contents.Protocol = output["Protocol"];
    return contents;
};
var deserializeAws_restXmlReplicaModifications = function(output, context) {
    var contents = {
        Status: undefined
    };
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    return contents;
};
var deserializeAws_restXmlReplicationConfiguration = function(output, context) {
    var contents = {
        Role: undefined,
        Rules: undefined
    };
    if (output["Role"] !== undefined) contents.Role = output["Role"];
    if (output.Rule === "") contents.Rules = [];
    if (output["Rule"] !== undefined) contents.Rules = deserializeAws_restXmlReplicationRules((0, _smithyClient.getArrayIfSingleItem)(output["Rule"]), context);
    return contents;
};
var deserializeAws_restXmlReplicationRule = function(output, context) {
    var contents = {
        ID: undefined,
        Priority: undefined,
        Prefix: undefined,
        Filter: undefined,
        Status: undefined,
        SourceSelectionCriteria: undefined,
        ExistingObjectReplication: undefined,
        Destination: undefined,
        DeleteMarkerReplication: undefined
    };
    if (output["ID"] !== undefined) contents.ID = output["ID"];
    if (output["Priority"] !== undefined) contents.Priority = parseInt(output["Priority"]);
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    if (output["Filter"] !== undefined) contents.Filter = deserializeAws_restXmlReplicationRuleFilter(output["Filter"], context);
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    if (output["SourceSelectionCriteria"] !== undefined) contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output["SourceSelectionCriteria"], context);
    if (output["ExistingObjectReplication"] !== undefined) contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output["ExistingObjectReplication"], context);
    if (output["Destination"] !== undefined) contents.Destination = deserializeAws_restXmlDestination(output["Destination"], context);
    if (output["DeleteMarkerReplication"] !== undefined) contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output["DeleteMarkerReplication"], context);
    return contents;
};
var deserializeAws_restXmlReplicationRuleAndOperator = function(output, context) {
    var contents = {
        Prefix: undefined,
        Tags: undefined
    };
    if (output["Prefix"] !== undefined) contents.Prefix = output["Prefix"];
    if (output.Tag === "") contents.Tags = [];
    if (output["Tag"] !== undefined) contents.Tags = deserializeAws_restXmlTagSet((0, _smithyClient.getArrayIfSingleItem)(output["Tag"]), context);
    return contents;
};
var deserializeAws_restXmlReplicationRuleFilter = function(output, context) {
    if (output["Prefix"] !== undefined) return {
        Prefix: output["Prefix"]
    };
    if (output["Tag"] !== undefined) return {
        Tag: deserializeAws_restXmlTag(output["Tag"], context)
    };
    if (output["And"] !== undefined) return {
        And: deserializeAws_restXmlReplicationRuleAndOperator(output["And"], context)
    };
    return {
        $unknown: Object.entries(output)[0]
    };
};
var deserializeAws_restXmlReplicationRules = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlReplicationRule(entry, context);
    });
};
var deserializeAws_restXmlReplicationTime = function(output, context) {
    var contents = {
        Status: undefined,
        Time: undefined
    };
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    if (output["Time"] !== undefined) contents.Time = deserializeAws_restXmlReplicationTimeValue(output["Time"], context);
    return contents;
};
var deserializeAws_restXmlReplicationTimeValue = function(output, context) {
    var contents = {
        Minutes: undefined
    };
    if (output["Minutes"] !== undefined) contents.Minutes = parseInt(output["Minutes"]);
    return contents;
};
var deserializeAws_restXmlRoutingRule = function(output, context) {
    var contents = {
        Condition: undefined,
        Redirect: undefined
    };
    if (output["Condition"] !== undefined) contents.Condition = deserializeAws_restXmlCondition(output["Condition"], context);
    if (output["Redirect"] !== undefined) contents.Redirect = deserializeAws_restXmlRedirect(output["Redirect"], context);
    return contents;
};
var deserializeAws_restXmlRoutingRules = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlRoutingRule(entry, context);
    });
};
var deserializeAws_restXmlS3KeyFilter = function(output, context) {
    var contents = {
        FilterRules: undefined
    };
    if (output.FilterRule === "") contents.FilterRules = [];
    if (output["FilterRule"] !== undefined) contents.FilterRules = deserializeAws_restXmlFilterRuleList((0, _smithyClient.getArrayIfSingleItem)(output["FilterRule"]), context);
    return contents;
};
var deserializeAws_restXmlServerSideEncryptionByDefault = function(output, context) {
    var contents = {
        SSEAlgorithm: undefined,
        KMSMasterKeyID: undefined
    };
    if (output["SSEAlgorithm"] !== undefined) contents.SSEAlgorithm = output["SSEAlgorithm"];
    if (output["KMSMasterKeyID"] !== undefined) contents.KMSMasterKeyID = output["KMSMasterKeyID"];
    return contents;
};
var deserializeAws_restXmlServerSideEncryptionConfiguration = function(output, context) {
    var contents = {
        Rules: undefined
    };
    if (output.Rule === "") contents.Rules = [];
    if (output["Rule"] !== undefined) contents.Rules = deserializeAws_restXmlServerSideEncryptionRules((0, _smithyClient.getArrayIfSingleItem)(output["Rule"]), context);
    return contents;
};
var deserializeAws_restXmlServerSideEncryptionRule = function(output, context) {
    var contents = {
        ApplyServerSideEncryptionByDefault: undefined,
        BucketKeyEnabled: undefined
    };
    if (output["ApplyServerSideEncryptionByDefault"] !== undefined) contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"], context);
    if (output["BucketKeyEnabled"] !== undefined) contents.BucketKeyEnabled = output["BucketKeyEnabled"] == "true";
    return contents;
};
var deserializeAws_restXmlServerSideEncryptionRules = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlServerSideEncryptionRule(entry, context);
    });
};
var deserializeAws_restXmlSourceSelectionCriteria = function(output, context) {
    var contents = {
        SseKmsEncryptedObjects: undefined,
        ReplicaModifications: undefined
    };
    if (output["SseKmsEncryptedObjects"] !== undefined) contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output["SseKmsEncryptedObjects"], context);
    if (output["ReplicaModifications"] !== undefined) contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output["ReplicaModifications"], context);
    return contents;
};
var deserializeAws_restXmlSSEKMS = function(output, context) {
    var contents = {
        KeyId: undefined
    };
    if (output["KeyId"] !== undefined) contents.KeyId = output["KeyId"];
    return contents;
};
var deserializeAws_restXmlSseKmsEncryptedObjects = function(output, context) {
    var contents = {
        Status: undefined
    };
    if (output["Status"] !== undefined) contents.Status = output["Status"];
    return contents;
};
var deserializeAws_restXmlSSES3 = function(output, context) {
    var contents = {};
    return contents;
};
var deserializeAws_restXmlStorageClassAnalysis = function(output, context) {
    var contents = {
        DataExport: undefined
    };
    if (output["DataExport"] !== undefined) contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output["DataExport"], context);
    return contents;
};
var deserializeAws_restXmlStorageClassAnalysisDataExport = function(output, context) {
    var contents = {
        OutputSchemaVersion: undefined,
        Destination: undefined
    };
    if (output["OutputSchemaVersion"] !== undefined) contents.OutputSchemaVersion = output["OutputSchemaVersion"];
    if (output["Destination"] !== undefined) contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output["Destination"], context);
    return contents;
};
var deserializeAws_restXmlTag = function(output, context) {
    var contents = {
        Key: undefined,
        Value: undefined
    };
    if (output["Key"] !== undefined) contents.Key = output["Key"];
    if (output["Value"] !== undefined) contents.Value = output["Value"];
    return contents;
};
var deserializeAws_restXmlTagSet = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlTag(entry, context);
    });
};
var deserializeAws_restXmlTargetGrant = function(output, context) {
    var contents = {
        Grantee: undefined,
        Permission: undefined
    };
    if (output["Grantee"] !== undefined) contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
    if (output["Permission"] !== undefined) contents.Permission = output["Permission"];
    return contents;
};
var deserializeAws_restXmlTargetGrants = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlTargetGrant(entry, context);
    });
};
var deserializeAws_restXmlTiering = function(output, context) {
    var contents = {
        Days: undefined,
        AccessTier: undefined
    };
    if (output["Days"] !== undefined) contents.Days = parseInt(output["Days"]);
    if (output["AccessTier"] !== undefined) contents.AccessTier = output["AccessTier"];
    return contents;
};
var deserializeAws_restXmlTieringList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlTiering(entry, context);
    });
};
var deserializeAws_restXmlTopicConfiguration = function(output, context) {
    var contents = {
        Id: undefined,
        TopicArn: undefined,
        Events: undefined,
        Filter: undefined
    };
    if (output["Id"] !== undefined) contents.Id = output["Id"];
    if (output["Topic"] !== undefined) contents.TopicArn = output["Topic"];
    if (output.Event === "") contents.Events = [];
    if (output["Event"] !== undefined) contents.Events = deserializeAws_restXmlEventList((0, _smithyClient.getArrayIfSingleItem)(output["Event"]), context);
    if (output["Filter"] !== undefined) contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
    return contents;
};
var deserializeAws_restXmlTopicConfigurationList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlTopicConfiguration(entry, context);
    });
};
var deserializeAws_restXmlTransition = function(output, context) {
    var contents = {
        Date: undefined,
        Days: undefined,
        StorageClass: undefined
    };
    if (output["Date"] !== undefined) contents.Date = new Date(output["Date"]);
    if (output["Days"] !== undefined) contents.Days = parseInt(output["Days"]);
    if (output["StorageClass"] !== undefined) contents.StorageClass = output["StorageClass"];
    return contents;
};
var deserializeAws_restXmlTransitionList = function(output, context) {
    return (output || []).filter(function(e) {
        return e != null;
    }).map(function(entry) {
        if (entry === null) return null;
        return deserializeAws_restXmlTransition(entry, context);
    });
};
var deserializeMetadata = function(output) {
    var _a;
    return {
        httpStatusCode: output.statusCode,
        requestId: (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    };
};
// Collect low-level response body stream to Uint8Array.
var collectBody = function(streamBody, context) {
    if (streamBody === void 0) streamBody = new Uint8Array();
    if (streamBody instanceof Uint8Array) return Promise.resolve(streamBody);
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
// Encode Uint8Array data into string with utf-8.
var collectBodyString = function(streamBody, context) {
    return collectBody(streamBody, context).then(function(body) {
        return context.utf8Encoder(body);
    });
};
var isSerializableHeaderValue = function(value) {
    return value !== undefined && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
};
var decodeEscapedXML = function(str) {
    return str.replace(/&amp;/g, "&").replace(/&apos;/g, "'").replace(/&quot;/g, '"').replace(/&gt;/g, ">").replace(/&lt;/g, "<");
};
var parseBody = function(streamBody, context) {
    return collectBodyString(streamBody, context).then(function(encoded) {
        if (encoded.length) {
            var parsedObj = (0, _fastXmlParser.parse)(encoded, {
                attributeNamePrefix: "",
                ignoreAttributes: false,
                parseNodeValue: false,
                tagValueProcessor: function(val, tagName) {
                    return decodeEscapedXML(val);
                }
            });
            var textNodeName = "#text";
            var key = Object.keys(parsedObj)[0];
            var parsedObjToReturn = parsedObj[key];
            if (parsedObjToReturn[textNodeName]) {
                parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
                delete parsedObjToReturn[textNodeName];
            }
            return (0, _smithyClient.getValueFromTextNode)(parsedObjToReturn);
        }
        return {};
    });
};
var loadRestXmlErrorCode = function(output, data) {
    if (data.Code !== undefined) return data.Code;
    if (output.statusCode == 404) return "NotFound";
    return "";
};

},{"tslib":"lRdW5","../models/models_0":"e3TsS","@aws-sdk/protocol-http":"dbzKK","@aws-sdk/smithy-client":"kA4IO","@aws-sdk/xml-builder":"hdRNE","fast-xml-parser":"lp55p","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hdRNE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _xmlNode = require("./XmlNode");
parcelHelpers.exportAll(_xmlNode, exports);
var _xmlText = require("./XmlText");
parcelHelpers.exportAll(_xmlText, exports);

},{"./XmlNode":"2EC5i","./XmlText":"4b0Yz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2EC5i":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "XmlNode", ()=>XmlNode);
var _tslib = require("tslib");
var _escapeAttribute = require("./escape-attribute");
/**
 * Represents an XML node.
 */ var XmlNode = /** @class */ function() {
    function XmlNode(name, children) {
        if (children === void 0) children = [];
        this.name = name;
        this.children = children;
        this.attributes = {};
    }
    XmlNode.prototype.withName = function(name) {
        this.name = name;
        return this;
    };
    XmlNode.prototype.addAttribute = function(name, value) {
        this.attributes[name] = value;
        return this;
    };
    XmlNode.prototype.addChildNode = function(child) {
        this.children.push(child);
        return this;
    };
    XmlNode.prototype.removeAttribute = function(name) {
        delete this.attributes[name];
        return this;
    };
    XmlNode.prototype.toString = function() {
        var e_1, _a;
        var hasChildren = Boolean(this.children.length);
        var xmlText = "<" + this.name;
        // add attributes
        var attributes = this.attributes;
        try {
            for(var _b = (0, _tslib.__values)(Object.keys(attributes)), _c = _b.next(); !_c.done; _c = _b.next()){
                var attributeName = _c.value;
                var attribute = attributes[attributeName];
                if (typeof attribute !== "undefined" && attribute !== null) xmlText += " " + attributeName + '="' + (0, _escapeAttribute.escapeAttribute)("" + attribute) + '"';
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return xmlText += !hasChildren ? "/>" : ">" + this.children.map(function(c) {
            return c.toString();
        }).join("") + "</" + this.name + ">";
    };
    return XmlNode;
}();

},{"tslib":"4rSk1","./escape-attribute":"4Iush","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4rSk1":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Iush":[function(require,module,exports) {
/**
 * Escapes characters that can not be in an XML attribute.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeAttribute", ()=>escapeAttribute);
function escapeAttribute(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4b0Yz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "XmlText", ()=>XmlText);
var _escapeElement = require("./escape-element");
/**
 * Represents an XML text value.
 */ var XmlText = /** @class */ function() {
    function XmlText(value) {
        this.value = value;
    }
    XmlText.prototype.toString = function() {
        return (0, _escapeElement.escapeElement)("" + this.value);
    };
    return XmlText;
}();

},{"./escape-element":"loTQR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"loTQR":[function(require,module,exports) {
/**
 * Escapes characters that can not be in an XML element.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeElement", ()=>escapeElement);
function escapeElement(value) {
    return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lp55p":[function(require,module,exports) {
"use strict";
const nodeToJson = require("2c5be2c4eac4ce05");
const xmlToNodeobj = require("c29052318c672023");
const x2xmlnode = require("c29052318c672023");
const buildOptions = require("45a678a8eadbefc4").buildOptions;
const validator = require("15811d3603aa375d");
exports.parse = function(xmlData, givenOptions = {}, validationOption) {
    if (validationOption) {
        if (validationOption === true) validationOption = {};
        const result = validator.validate(xmlData, validationOption);
        if (result !== true) throw Error(result.err.msg);
    }
    if (givenOptions.parseTrueNumberOnly && givenOptions.parseNodeValue !== false && !givenOptions.numParseOptions) givenOptions.numParseOptions = {
        leadingZeros: false
    };
    let options = buildOptions(givenOptions, x2xmlnode.defaultOptions, x2xmlnode.props);
    const traversableObj = xmlToNodeobj.getTraversalObj(xmlData, options);
    //print(traversableObj, "  ");
    return nodeToJson.convertToJson(traversableObj, options);
};
exports.convertTonimn = require("8786bac12f0256f5").convert2nimn;
exports.getTraversalObj = xmlToNodeobj.getTraversalObj;
exports.convertToJson = nodeToJson.convertToJson;
exports.convertToJsonString = require("b5b84b4df41cea09").convertToJsonString;
exports.validate = validator.validate;
exports.j2xParser = require("35d126f7b1087d2c");
exports.parseToNimn = function(xmlData, schema, options) {
    return exports.convertTonimn(exports.getTraversalObj(xmlData, options), schema, options);
};
function print(xmlNode, indentation) {
    if (xmlNode) {
        console.log(indentation + "{");
        console.log(indentation + '  "tagName": "' + xmlNode.tagname + '", ');
        if (xmlNode.parent) console.log(indentation + '  "parent": "' + xmlNode.parent.tagname + '", ');
        console.log(indentation + '  "val": "' + xmlNode.val + '", ');
        console.log(indentation + '  "attrs": ' + JSON.stringify(xmlNode.attrsMap, null, 4) + ", ");
        if (xmlNode.child) {
            console.log(indentation + '"child": {');
            const indentation2 = indentation + indentation;
            Object.keys(xmlNode.child).forEach(function(key) {
                const node = xmlNode.child[key];
                if (Array.isArray(node)) {
                    console.log(indentation + '"' + key + '" :[');
                    node.forEach(function(item, index) {
                        //console.log(indentation + " \""+index+"\" : [")
                        print(item, indentation2);
                    });
                    console.log(indentation + "],");
                } else {
                    console.log(indentation + ' "' + key + '" : {');
                    print(node, indentation2);
                    console.log(indentation + "},");
                }
            });
            console.log(indentation + "},");
        }
        console.log(indentation + "},");
    }
}

},{"2c5be2c4eac4ce05":"1u6v5","c29052318c672023":"5X4jb","45a678a8eadbefc4":"7dJgG","15811d3603aa375d":"6JPH6","8786bac12f0256f5":"kFQgZ","b5b84b4df41cea09":"2lnza","35d126f7b1087d2c":"kng4u"}],"1u6v5":[function(require,module,exports) {
"use strict";
const util = require("fad46cebf6c198fb");
const convertToJson = function(node, options, parentTagName) {
    const jObj = {};
    // when no child node or attr is present
    if (!options.alwaysCreateTextNode && (!node.child || util.isEmptyObject(node.child)) && (!node.attrsMap || util.isEmptyObject(node.attrsMap))) return util.isExist(node.val) ? node.val : "";
    // otherwise create a textnode if node has some text
    if (util.isExist(node.val) && !(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) {
        const asArray = util.isTagNameInArrayMode(node.tagname, options.arrayMode, parentTagName);
        jObj[options.textNodeName] = asArray ? [
            node.val
        ] : node.val;
    }
    util.merge(jObj, node.attrsMap, options.arrayMode);
    const keys = Object.keys(node.child);
    for(let index = 0; index < keys.length; index++){
        const tagName = keys[index];
        if (node.child[tagName] && node.child[tagName].length > 1) {
            jObj[tagName] = [];
            for(let tag in node.child[tagName])if (node.child[tagName].hasOwnProperty(tag)) jObj[tagName].push(convertToJson(node.child[tagName][tag], options, tagName));
        } else {
            const result = convertToJson(node.child[tagName][0], options, tagName);
            const asArray = options.arrayMode === true && typeof result === "object" || util.isTagNameInArrayMode(tagName, options.arrayMode, parentTagName);
            jObj[tagName] = asArray ? [
                result
            ] : result;
        }
    }
    //add value
    return jObj;
};
exports.convertToJson = convertToJson;

},{"fad46cebf6c198fb":"7dJgG"}],"7dJgG":[function(require,module,exports) {
"use strict";
const nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
const nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
const nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
const regexName = new RegExp("^" + nameRegexp + "$");
const getAllMatches = function(string, regex) {
    const matches = [];
    let match = regex.exec(string);
    while(match){
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for(let index = 0; index < len; index++)allmatches.push(match[index]);
        matches.push(allmatches);
        match = regex.exec(string);
    }
    return matches;
};
const isName = function(string) {
    const match = regexName.exec(string);
    return !(match === null || typeof match === "undefined");
};
exports.isExist = function(v) {
    return typeof v !== "undefined";
};
exports.isEmptyObject = function(obj) {
    return Object.keys(obj).length === 0;
};
/**
 * Copy all the properties of a into b.
 * @param {*} target
 * @param {*} a
 */ exports.merge = function(target, a, arrayMode) {
    if (a) {
        const keys = Object.keys(a); // will return an array of own properties
        const len = keys.length; //don't make it inline
        for(let i = 0; i < len; i++)if (arrayMode === "strict") target[keys[i]] = [
            a[keys[i]]
        ];
        else target[keys[i]] = a[keys[i]];
    }
};
/* exports.merge =function (b,a){
  return Object.assign(b,a);
} */ exports.getValue = function(v) {
    if (exports.isExist(v)) return v;
    else return "";
};
// const fakeCall = function(a) {return a;};
// const fakeCallNoReturn = function() {};
exports.buildOptions = function(options, defaultOptions, props) {
    let newOptions = {};
    if (!options) return defaultOptions; //if there are not options
    for(let i = 0; i < props.length; i++)if (options[props[i]] !== undefined) newOptions[props[i]] = options[props[i]];
    else newOptions[props[i]] = defaultOptions[props[i]];
    return newOptions;
};
/**
 * Check if a tag name should be treated as array
 *
 * @param tagName the node tagname
 * @param arrayMode the array mode option
 * @param parentTagName the parent tag name
 * @returns {boolean} true if node should be parsed as array
 */ exports.isTagNameInArrayMode = function(tagName, arrayMode, parentTagName) {
    if (arrayMode === false) return false;
    else if (arrayMode instanceof RegExp) return arrayMode.test(tagName);
    else if (typeof arrayMode === "function") return !!arrayMode(tagName, parentTagName);
    return arrayMode === "strict";
};
exports.isName = isName;
exports.getAllMatches = getAllMatches;
exports.nameRegexp = nameRegexp;

},{}],"5X4jb":[function(require,module,exports) {
"use strict";
const util = require("90702bebb6d8678b");
const buildOptions = require("90702bebb6d8678b").buildOptions;
const xmlNode = require("162f2249467dde39");
const toNumber = require("17f435aaec0b21f3");
const regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
//const tagsRegx = new RegExp("<(\\/?[\\w:\\-\._]+)([^>]*)>(\\s*"+cdataRegx+")*([^<]+)?","g");
//const tagsRegx = new RegExp("<(\\/?)((\\w*:)?([\\w:\\-\._]+))([^>]*)>([^<]*)("+cdataRegx+"([^<]*))*([^<]+)?","g");
//polyfill
if (!Number.parseInt && window.parseInt) Number.parseInt = window.parseInt;
if (!Number.parseFloat && window.parseFloat) Number.parseFloat = window.parseFloat;
const defaultOptions = {
    attributeNamePrefix: "@_",
    attrNodeName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    ignoreNameSpace: false,
    allowBooleanAttributes: false,
    //ignoreRootElement : false,
    parseNodeValue: true,
    parseAttributeValue: false,
    arrayMode: false,
    trimValues: true,
    cdataTagName: false,
    cdataPositionChar: "\\c",
    numParseOptions: {
        hex: true,
        leadingZeros: true
    },
    tagValueProcessor: function(a, tagName) {
        return a;
    },
    attrValueProcessor: function(a, attrName) {
        return a;
    },
    stopNodes: [],
    alwaysCreateTextNode: false
};
exports.defaultOptions = defaultOptions;
const props = [
    "attributeNamePrefix",
    "attrNodeName",
    "textNodeName",
    "ignoreAttributes",
    "ignoreNameSpace",
    "allowBooleanAttributes",
    "parseNodeValue",
    "parseAttributeValue",
    "arrayMode",
    "trimValues",
    "cdataTagName",
    "cdataPositionChar",
    "tagValueProcessor",
    "attrValueProcessor",
    "parseTrueNumberOnly",
    "numParseOptions",
    "stopNodes",
    "alwaysCreateTextNode"
];
exports.props = props;
/**
 * Trim -> valueProcessor -> parse value
 * @param {string} tagName
 * @param {string} val
 * @param {object} options
 */ function processTagValue(tagName, val, options) {
    if (val) {
        if (options.trimValues) val = val.trim();
        val = options.tagValueProcessor(val, tagName);
        val = parseValue(val, options.parseNodeValue, options.numParseOptions);
    }
    return val;
}
function resolveNameSpace(tagname, options) {
    if (options.ignoreNameSpace) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") return "";
        if (tags.length === 2) tagname = prefix + tags[1];
    }
    return tagname;
}
function parseValue(val, shouldParse, options) {
    if (shouldParse && typeof val === "string") {
        //console.log(options)
        const newval = val.trim();
        if (newval === "true") return true;
        else if (newval === "false") return false;
        else return toNumber(val, options);
    } else {
        if (util.isExist(val)) return val;
        else return "";
    }
}
//TODO: change regex to capture NS
//const attrsRegx = new RegExp("([\\w\\-\\.\\:]+)\\s*=\\s*(['\"])((.|\n)*?)\\2","gm");
const attrsRegx = new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])(.*?)\\3)?", "g");
function buildAttributesMap(attrStr, options) {
    if (!options.ignoreAttributes && typeof attrStr === "string") {
        attrStr = attrStr.replace(/\r?\n/g, " ");
        //attrStr = attrStr || attrStr.trim();
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length; //don't make it inline
        const attrs = {};
        for(let i = 0; i < len; i++){
            const attrName = resolveNameSpace(matches[i][1], options);
            if (attrName.length) {
                if (matches[i][4] !== undefined) {
                    if (options.trimValues) matches[i][4] = matches[i][4].trim();
                    matches[i][4] = options.attrValueProcessor(matches[i][4], attrName);
                    attrs[options.attributeNamePrefix + attrName] = parseValue(matches[i][4], options.parseAttributeValue, options.numParseOptions);
                } else if (options.allowBooleanAttributes) attrs[options.attributeNamePrefix + attrName] = true;
            }
        }
        if (!Object.keys(attrs).length) return;
        if (options.attrNodeName) {
            const attrCollection = {};
            attrCollection[options.attrNodeName] = attrs;
            return attrCollection;
        }
        return attrs;
    }
}
const getTraversalObj = function(xmlData, options) {
    xmlData = xmlData.replace(/\r\n?/g, "\n");
    options = buildOptions(options, defaultOptions, props);
    const xmlObj = new xmlNode("!xml");
    let currentNode = xmlObj;
    let textData = "";
    //function match(xmlData){
    for(let i = 0; i < xmlData.length; i++){
        const ch = xmlData[i];
        if (ch === "<") {
            if (xmlData[i + 1] === "/") {
                const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
                let tagName = xmlData.substring(i + 2, closeIndex).trim();
                if (options.ignoreNameSpace) {
                    const colonIndex = tagName.indexOf(":");
                    if (colonIndex !== -1) tagName = tagName.substr(colonIndex + 1);
                }
                /* if (currentNode.parent) {
          currentNode.parent.val = util.getValue(currentNode.parent.val) + '' + processTagValue2(tagName, textData , options);
        } */ if (currentNode) {
                    if (currentNode.val) currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(tagName, textData, options);
                    else currentNode.val = processTagValue(tagName, textData, options);
                }
                if (options.stopNodes.length && options.stopNodes.includes(currentNode.tagname)) {
                    currentNode.child = [];
                    if (currentNode.attrsMap == undefined) currentNode.attrsMap = {};
                    currentNode.val = xmlData.substr(currentNode.startIndex + 1, i - currentNode.startIndex - 1);
                }
                currentNode = currentNode.parent;
                textData = "";
                i = closeIndex;
            } else if (xmlData[i + 1] === "?") i = findClosingIndex(xmlData, "?>", i, "Pi Tag is not closed.");
            else if (xmlData.substr(i + 1, 3) === "!--") i = findClosingIndex(xmlData, "-->", i, "Comment is not closed.");
            else if (xmlData.substr(i + 1, 2) === "!D") {
                const closeIndex = findClosingIndex(xmlData, ">", i, "DOCTYPE is not closed.");
                const tagExp = xmlData.substring(i, closeIndex);
                if (tagExp.indexOf("[") >= 0) i = xmlData.indexOf("]>", i) + 1;
                else i = closeIndex;
            } else if (xmlData.substr(i + 1, 2) === "![") {
                const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
                const tagExp = xmlData.substring(i + 9, closeIndex);
                //considerations
                //1. CDATA will always have parent node
                //2. A tag with CDATA is not a leaf node so it's value would be string type.
                if (textData) {
                    currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
                    textData = "";
                }
                if (options.cdataTagName) {
                    //add cdata node
                    const childNode = new xmlNode(options.cdataTagName, currentNode, tagExp);
                    currentNode.addChild(childNode);
                    //for backtracking
                    currentNode.val = util.getValue(currentNode.val) + options.cdataPositionChar;
                    //add rest value to parent node
                    if (tagExp) childNode.val = tagExp;
                } else currentNode.val = (currentNode.val || "") + (tagExp || "");
                i = closeIndex + 2;
            } else {
                const result = closingIndexForOpeningTag(xmlData, i + 1);
                let tagExp = result.data;
                const closeIndex = result.index;
                const separatorIndex = tagExp.indexOf(" ");
                let tagName = tagExp;
                let shouldBuildAttributesMap = true;
                if (separatorIndex !== -1) {
                    tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
                    tagExp = tagExp.substr(separatorIndex + 1);
                }
                if (options.ignoreNameSpace) {
                    const colonIndex = tagName.indexOf(":");
                    if (colonIndex !== -1) {
                        tagName = tagName.substr(colonIndex + 1);
                        shouldBuildAttributesMap = tagName !== result.data.substr(colonIndex + 1);
                    }
                }
                //save text to parent node
                if (currentNode && textData) {
                    if (currentNode.tagname !== "!xml") currentNode.val = util.getValue(currentNode.val) + "" + processTagValue(currentNode.tagname, textData, options);
                }
                if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                    if (tagName[tagName.length - 1] === "/") {
                        tagName = tagName.substr(0, tagName.length - 1);
                        tagExp = tagName;
                    } else tagExp = tagExp.substr(0, tagExp.length - 1);
                    const childNode = new xmlNode(tagName, currentNode, "");
                    if (tagName !== tagExp) childNode.attrsMap = buildAttributesMap(tagExp, options);
                    currentNode.addChild(childNode);
                } else {
                    const childNode = new xmlNode(tagName, currentNode);
                    if (options.stopNodes.length && options.stopNodes.includes(childNode.tagname)) childNode.startIndex = closeIndex;
                    if (tagName !== tagExp && shouldBuildAttributesMap) childNode.attrsMap = buildAttributesMap(tagExp, options);
                    currentNode.addChild(childNode);
                    currentNode = childNode;
                }
                textData = "";
                i = closeIndex;
            }
        } else textData += xmlData[i];
    }
    return xmlObj;
};
function closingIndexForOpeningTag(data, i) {
    let attrBoundary;
    let tagExp = "";
    for(let index = i; index < data.length; index++){
        let ch = data[index];
        if (attrBoundary) {
            if (ch === attrBoundary) attrBoundary = ""; //reset
        } else if (ch === '"' || ch === "'") attrBoundary = ch;
        else if (ch === ">") return {
            data: tagExp,
            index: index
        };
        else if (ch === "	") ch = " ";
        tagExp += ch;
    }
}
function findClosingIndex(xmlData, str, i, errMsg) {
    const closingIndex = xmlData.indexOf(str, i);
    if (closingIndex === -1) throw new Error(errMsg);
    else return closingIndex + str.length - 1;
}
exports.getTraversalObj = getTraversalObj;

},{"90702bebb6d8678b":"7dJgG","162f2249467dde39":"clwLD","17f435aaec0b21f3":"2f4AT"}],"clwLD":[function(require,module,exports) {
"use strict";
module.exports = function(tagname, parent, val) {
    this.tagname = tagname;
    this.parent = parent;
    this.child = {}; //child tags
    this.attrsMap = {}; //attributes map
    this.val = val; //text only
    this.addChild = function(child) {
        if (Array.isArray(this.child[child.tagname])) //already presents
        this.child[child.tagname].push(child);
        else this.child[child.tagname] = [
            child
        ];
    };
};

},{}],"2f4AT":[function(require,module,exports) {
const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
const numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
// const octRegex = /0x[a-z0-9]+/;
// const binRegex = /0x[a-z0-9]+/;
//polyfill
if (!Number.parseInt && window.parseInt) Number.parseInt = window.parseInt;
if (!Number.parseFloat && window.parseFloat) Number.parseFloat = window.parseFloat;
const consider = {
    hex: true,
    leadingZeros: true,
    decimalPoint: ".",
    eNotation: true
};
function toNumber(str, options = {}) {
    // const options = Object.assign({}, consider);
    // if(opt.leadingZeros === false){
    //     options.leadingZeros = false;
    // }else if(opt.hex === false){
    //     options.hex = false;
    // }
    options = Object.assign({}, consider, options);
    if (!str || typeof str !== "string") return str;
    let trimmedStr = str.trim();
    // if(trimmedStr === "0.0") return 0;
    // else if(trimmedStr === "+0.0") return 0;
    // else if(trimmedStr === "-0.0") return -0;
    if (options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;
    else if (options.hex && hexRegex.test(trimmedStr)) return Number.parseInt(trimmedStr, 16);
    else {
        //separate negative sign, leading zeros, and rest number
        const match = numRegex.exec(trimmedStr);
        if (match) {
            const sign = match[1];
            const leadingZeros = match[2];
            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros
            //trim ending zeros for floating number
            const eNotation = match[4] || match[6];
            if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".") return str; //-0123
            else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".") return str; //0123
            else {
                const num = Number(trimmedStr);
                const numStr = "" + num;
                if (numStr.search(/[eE]/) !== -1) {
                    if (options.eNotation) return num;
                    else return str;
                } else if (eNotation) {
                    if (options.eNotation) return num;
                    else return str;
                } else if (trimmedStr.indexOf(".") !== -1) {
                    // const decimalPart = match[5].substr(1);
                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf("."));
                    // const p = numStr.indexOf(".");
                    // const givenIntPart = numStr.substr(0,p);
                    // const givenDecPart = numStr.substr(p+1);
                    if (numStr === "0" && numTrimmedByZeros === "") return num; //0.0
                    else if (numStr === numTrimmedByZeros) return num; //0.456. 0.79000
                    else if (sign && numStr === "-" + numTrimmedByZeros) return num;
                    else return str;
                }
                if (leadingZeros) {
                    // if(numTrimmedByZeros === numStr){
                    //     if(options.leadingZeros) return num;
                    //     else return str;
                    // }else return str;
                    if (numTrimmedByZeros === numStr) return num;
                    else if (sign + numTrimmedByZeros === numStr) return num;
                    else return str;
                }
                if (trimmedStr === numStr) return num;
                else if (trimmedStr === sign + numStr) return num;
                // else{
                //     //number with +/- sign
                //     trimmedStr.test(/[-+][0-9]);
                // }
                return str;
            }
        // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;
        } else return str;
    }
}
/**
 * 
 * @param {string} numStr without leading zeros
 * @returns 
 */ function trimZeros(numStr) {
    if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, ""); //remove ending zeros
        if (numStr === ".") numStr = "0";
        else if (numStr[0] === ".") numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".") numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
    }
    return numStr;
}
module.exports = toNumber;

},{}],"6JPH6":[function(require,module,exports) {
"use strict";
const util = require("bc9a00c6fe14b9d5");
const defaultOptions = {
    allowBooleanAttributes: false
};
const props = [
    "allowBooleanAttributes"
];
//const tagsPattern = new RegExp("<\\/?([\\w:\\-_\.]+)\\s*\/?>","g");
exports.validate = function(xmlData, options) {
    options = util.buildOptions(options, defaultOptions, props);
    //xmlData = xmlData.replace(/(\r\n|\n|\r)/gm,"");//make it single line
    //xmlData = xmlData.replace(/(^\s*<\?xml.*?\?>)/g,"");//Remove XML starting tag
    //xmlData = xmlData.replace(/(<!DOCTYPE[\s\w\"\.\/\-\:]+(\[.*\])*\s*>)/g,"");//Remove DOCTYPE
    const tags = [];
    let tagFound = false;
    //indicates that the root tag has been closed (aka. depth 0 has been reached)
    let reachedRoot = false;
    if (xmlData[0] === "\uFEFF") // check for byte order mark (BOM)
    xmlData = xmlData.substr(1);
    for(let i = 0; i < xmlData.length; i++){
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
            i += 2;
            i = readPI(xmlData, i);
            if (i.err) return i;
        } else if (xmlData[i] === "<") {
            //starting of tag
            //read until you reach to '>' avoiding any '>' in attribute value
            let tagStartPos = i;
            i++;
            if (xmlData[i] === "!") {
                i = readCommentAndCDATA(xmlData, i);
                continue;
            } else {
                let closingTag = false;
                if (xmlData[i] === "/") {
                    //closing tag
                    closingTag = true;
                    i++;
                }
                //read tagname
                let tagName = "";
                for(; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++)tagName += xmlData[i];
                tagName = tagName.trim();
                //console.log(tagName);
                if (tagName[tagName.length - 1] === "/") {
                    //self closing tag without attributes
                    tagName = tagName.substring(0, tagName.length - 1);
                    //continue;
                    i--;
                }
                if (!validateTagName(tagName)) {
                    let msg;
                    if (tagName.trim().length === 0) msg = "Invalid space after '<'.";
                    else msg = "Tag '" + tagName + "' is an invalid name.";
                    return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
                }
                const result = readAttributeStr(xmlData, i);
                if (result === false) return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
                let attrStr = result.value;
                i = result.index;
                if (attrStr[attrStr.length - 1] === "/") {
                    //self closing tag
                    const attrStrStart = i - attrStr.length;
                    attrStr = attrStr.substring(0, attrStr.length - 1);
                    const isValid = validateAttributeString(attrStr, options);
                    if (isValid === true) tagFound = true;
                    else //the result from the nested function returns the position of the error within the attribute
                    //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
                    //this gives us the absolute index in the entire xml, which we can use to find the line at last
                    return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
                } else if (closingTag) {
                    if (!result.tagClosed) return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
                    else if (attrStr.trim().length > 0) return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
                    else {
                        const otg = tags.pop();
                        if (tagName !== otg.tagName) {
                            let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                            return getErrorObject("InvalidTag", "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.", getLineNumberForPosition(xmlData, tagStartPos));
                        }
                        //when there are no more tags, we reached the root level.
                        if (tags.length == 0) reachedRoot = true;
                    }
                } else {
                    const isValid = validateAttributeString(attrStr, options);
                    if (isValid !== true) //the result from the nested function returns the position of the error within the attribute
                    //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute
                    //this gives us the absolute index in the entire xml, which we can use to find the line at last
                    return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
                    //if the root level has been reached before ...
                    if (reachedRoot === true) return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
                    else tags.push({
                        tagName,
                        tagStartPos
                    });
                    tagFound = true;
                }
                //skip tag text value
                //It may include comments and CDATA value
                for(i++; i < xmlData.length; i++){
                    if (xmlData[i] === "<") {
                        if (xmlData[i + 1] === "!") {
                            //comment or CADATA
                            i++;
                            i = readCommentAndCDATA(xmlData, i);
                            continue;
                        } else if (xmlData[i + 1] === "?") {
                            i = readPI(xmlData, ++i);
                            if (i.err) return i;
                        } else break;
                    } else if (xmlData[i] === "&") {
                        const afterAmp = validateAmpersand(xmlData, i);
                        if (afterAmp == -1) return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                        i = afterAmp;
                    }
                } //end of reading tag text value
                if (xmlData[i] === "<") i--;
            }
        } else {
            if (xmlData[i] === " " || xmlData[i] === "	" || xmlData[i] === "\n" || xmlData[i] === "\r") continue;
            return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
    }
    if (!tagFound) return getErrorObject("InvalidXml", "Start tag expected.", 1);
    else if (tags.length == 1) return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
    else if (tags.length > 0) return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t)=>t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", {
        line: 1,
        col: 1
    });
    return true;
};
/**
 * Read Processing insstructions and skip
 * @param {*} xmlData
 * @param {*} i
 */ function readPI(xmlData, i) {
    const start = i;
    for(; i < xmlData.length; i++)if (xmlData[i] == "?" || xmlData[i] == " ") {
        //tagname
        const tagname = xmlData.substr(start, i - start);
        if (i > 5 && tagname === "xml") return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
        else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            //check if valid attribut string
            i++;
            break;
        } else continue;
    }
    return i;
}
function readCommentAndCDATA(xmlData, i) {
    if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        //comment
        for(i += 3; i < xmlData.length; i++)if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
        }
    } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for(i += 8; i < xmlData.length; i++){
            if (xmlData[i] === "<") angleBracketsCount++;
            else if (xmlData[i] === ">") {
                angleBracketsCount--;
                if (angleBracketsCount === 0) break;
            }
        }
    } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for(i += 8; i < xmlData.length; i++)if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
        }
    }
    return i;
}
const doubleQuote = '"';
const singleQuote = "'";
/**
 * Keep reading xmlData until '<' is found outside the attribute value.
 * @param {string} xmlData
 * @param {number} i
 */ function readAttributeStr(xmlData, i) {
    let attrStr = "";
    let startChar = "";
    let tagClosed = false;
    for(; i < xmlData.length; i++){
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
            if (startChar === "") startChar = xmlData[i];
            else if (startChar !== xmlData[i]) ;
            else startChar = "";
        } else if (xmlData[i] === ">") {
            if (startChar === "") {
                tagClosed = true;
                break;
            }
        }
        attrStr += xmlData[i];
    }
    if (startChar !== "") return false;
    return {
        value: attrStr,
        index: i,
        tagClosed: tagClosed
    };
}
/**
 * Select all the attributes whether valid or invalid.
 */ const validAttrStrRegxp = new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?", "g");
//attr, ="sd", a="amit's", a="sd"b="saf", ab  cd=""
function validateAttributeString(attrStr, options) {
    //console.log("start:"+attrStr+":end");
    //if(attrStr.trim().length === 0) return true; //empty string
    const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
    const attrNames = {};
    for(let i = 0; i < matches.length; i++){
        if (matches[i][1].length === 0) //nospace before attribute name: a="sd"b="saf"
        return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        else if (matches[i][3] === undefined && !options.allowBooleanAttributes) //independent attribute: ab
        return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        /* else if(matches[i][6] === undefined){//attribute without value: ab=
                    return { err: { code:"InvalidAttr",msg:"attribute " + matches[i][2] + " has no value assigned."}};
                } */ const attrName = matches[i][2];
        if (!validateAttrName(attrName)) return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        if (!attrNames.hasOwnProperty(attrName)) //check for duplicate attribute.
        attrNames[attrName] = 1;
        else return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
    }
    return true;
}
function validateNumberAmpersand(xmlData, i) {
    let re = /\d/;
    if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
    }
    for(; i < xmlData.length; i++){
        if (xmlData[i] === ";") return i;
        if (!xmlData[i].match(re)) break;
    }
    return -1;
}
function validateAmpersand(xmlData, i) {
    // https://www.w3.org/TR/xml/#dt-charref
    i++;
    if (xmlData[i] === ";") return -1;
    if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
    }
    let count = 0;
    for(; i < xmlData.length; i++, count++){
        if (xmlData[i].match(/\w/) && count < 20) continue;
        if (xmlData[i] === ";") break;
        return -1;
    }
    return i;
}
function getErrorObject(code, message, lineNumber) {
    return {
        err: {
            code: code,
            msg: message,
            line: lineNumber.line || lineNumber,
            col: lineNumber.col
        }
    };
}
function validateAttrName(attrName) {
    return util.isName(attrName);
}
// const startsWithXML = /^xml/i;
function validateTagName(tagname) {
    return util.isName(tagname) /* && !tagname.match(startsWithXML) */ ;
}
//this function returns the line number for the character at the given index
function getLineNumberForPosition(xmlData, index) {
    const lines = xmlData.substring(0, index).split(/\r?\n/);
    return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
    };
}
//this function returns the position of the first character of match within attrStr
function getPositionFromMatch(match) {
    return match.startIndex + match[1].length;
}

},{"bc9a00c6fe14b9d5":"7dJgG"}],"kFQgZ":[function(require,module,exports) {
"use strict";
const char = function(a) {
    return String.fromCharCode(a);
};
const chars = {
    nilChar: char(176),
    missingChar: char(201),
    nilPremitive: char(175),
    missingPremitive: char(200),
    emptyChar: char(178),
    emptyValue: char(177),
    boundryChar: char(179),
    objStart: char(198),
    arrStart: char(204),
    arrayEnd: char(185)
};
const charsArr = [
    chars.nilChar,
    chars.nilPremitive,
    chars.missingChar,
    chars.missingPremitive,
    chars.boundryChar,
    chars.emptyChar,
    chars.emptyValue,
    chars.arrayEnd,
    chars.objStart,
    chars.arrStart
];
const _e = function(node, e_schema, options) {
    if (typeof e_schema === "string") {
        //premitive
        if (node && node[0] && node[0].val !== undefined) return getValue(node[0].val, e_schema);
        else return getValue(node, e_schema);
    } else {
        const hasValidData = hasData(node);
        if (hasValidData === true) {
            let str = "";
            if (Array.isArray(e_schema)) {
                //attributes can't be repeated. hence check in children tags only
                str += chars.arrStart;
                const itemSchema = e_schema[0];
                //const itemSchemaType = itemSchema;
                const arr_len = node.length;
                if (typeof itemSchema === "string") for(let arr_i = 0; arr_i < arr_len; arr_i++){
                    const r = getValue(node[arr_i].val, itemSchema);
                    str = processValue(str, r);
                }
                else for(let arr_i = 0; arr_i < arr_len; arr_i++){
                    const r = _e(node[arr_i], itemSchema, options);
                    str = processValue(str, r);
                }
                str += chars.arrayEnd; //indicates that next item is not array item
            } else {
                //object
                str += chars.objStart;
                const keys = Object.keys(e_schema);
                if (Array.isArray(node)) node = node[0];
                for(let i in keys){
                    const key = keys[i];
                    //a property defined in schema can be present either in attrsMap or children tags
                    //options.textNodeName will not present in both maps, take it's value from val
                    //options.attrNodeName will be present in attrsMap
                    let r;
                    if (!options.ignoreAttributes && node.attrsMap && node.attrsMap[key]) r = _e(node.attrsMap[key], e_schema[key], options);
                    else if (key === options.textNodeName) r = _e(node.val, e_schema[key], options);
                    else r = _e(node.child[key], e_schema[key], options);
                    str = processValue(str, r);
                }
            }
            return str;
        } else return hasValidData;
    }
};
const getValue = function(a /*, type*/ ) {
    switch(a){
        case undefined:
            return chars.missingPremitive;
        case null:
            return chars.nilPremitive;
        case "":
            return chars.emptyValue;
        default:
            return a;
    }
};
const processValue = function(str, r) {
    if (!isAppChar(r[0]) && !isAppChar(str[str.length - 1])) str += chars.boundryChar;
    return str + r;
};
const isAppChar = function(ch) {
    return charsArr.indexOf(ch) !== -1;
};
function hasData(jObj) {
    if (jObj === undefined) return chars.missingChar;
    else if (jObj === null) return chars.nilChar;
    else if (jObj.child && Object.keys(jObj.child).length === 0 && (!jObj.attrsMap || Object.keys(jObj.attrsMap).length === 0)) return chars.emptyChar;
    else return true;
}
const x2j = require("5e384addf48e11d5");
const buildOptions = require("2f6f9cea3ce08a35").buildOptions;
const convert2nimn = function(node, e_schema, options) {
    options = buildOptions(options, x2j.defaultOptions, x2j.props);
    return _e(node, e_schema, options);
};
exports.convert2nimn = convert2nimn;

},{"5e384addf48e11d5":"5X4jb","2f6f9cea3ce08a35":"7dJgG"}],"2lnza":[function(require,module,exports) {
"use strict";
const util = require("e5b7f8872bf4a10c");
const buildOptions = require("e5b7f8872bf4a10c").buildOptions;
const x2j = require("c4c7e732703c2ee3");
//TODO: do it later
const convertToJsonString = function(node, options) {
    options = buildOptions(options, x2j.defaultOptions, x2j.props);
    options.indentBy = options.indentBy || "";
    return _cToJsonStr(node, options, 0);
};
const _cToJsonStr = function(node, options, level) {
    let jObj = "{";
    //traver through all the children
    const keys = Object.keys(node.child);
    for(let index = 0; index < keys.length; index++){
        const tagname = keys[index];
        if (node.child[tagname] && node.child[tagname].length > 1) {
            jObj += '"' + tagname + '" : [ ';
            for(let tag in node.child[tagname])jObj += _cToJsonStr(node.child[tagname][tag], options) + " , ";
            jObj = jObj.substr(0, jObj.length - 1) + " ] "; //remove extra comma in last
        } else jObj += '"' + tagname + '" : ' + _cToJsonStr(node.child[tagname][0], options) + " ,";
    }
    util.merge(jObj, node.attrsMap);
    //add attrsMap as new children
    if (util.isEmptyObject(jObj)) return util.isExist(node.val) ? node.val : "";
    else {
        if (util.isExist(node.val)) {
            if (!(typeof node.val === "string" && (node.val === "" || node.val === options.cdataPositionChar))) jObj += '"' + options.textNodeName + '" : ' + stringval(node.val);
        }
    }
    //add value
    if (jObj[jObj.length - 1] === ",") jObj = jObj.substr(0, jObj.length - 2);
    return jObj + "}";
};
function stringval(v) {
    if (v === true || v === false || !isNaN(v)) return v;
    else return '"' + v + '"';
}
function indentate(options, level) {
    return options.indentBy.repeat(level);
}
exports.convertToJsonString = convertToJsonString;

},{"e5b7f8872bf4a10c":"7dJgG","c4c7e732703c2ee3":"5X4jb"}],"kng4u":[function(require,module,exports) {
"use strict";
//parse Empty Node as self closing node
const buildOptions = require("67f88484beab7f1a").buildOptions;
const defaultOptions = {
    attributeNamePrefix: "@_",
    attrNodeName: false,
    textNodeName: "#text",
    ignoreAttributes: true,
    cdataTagName: false,
    cdataPositionChar: "\\c",
    format: false,
    indentBy: "  ",
    supressEmptyNode: false,
    tagValueProcessor: function(a) {
        return a;
    },
    attrValueProcessor: function(a) {
        return a;
    }
};
const props = [
    "attributeNamePrefix",
    "attrNodeName",
    "textNodeName",
    "ignoreAttributes",
    "cdataTagName",
    "cdataPositionChar",
    "format",
    "indentBy",
    "supressEmptyNode",
    "tagValueProcessor",
    "attrValueProcessor",
    "rootNodeName"
];
function Parser(options) {
    this.options = buildOptions(options, defaultOptions, props);
    if (this.options.ignoreAttributes || this.options.attrNodeName) this.isAttribute = function() {
        return false;
    };
    else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
    }
    if (this.options.cdataTagName) this.isCDATA = isCDATA;
    else this.isCDATA = function() {
        return false;
    };
    this.replaceCDATAstr = replaceCDATAstr;
    this.replaceCDATAarr = replaceCDATAarr;
    this.processTextOrObjNode = processTextOrObjNode;
    if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
    } else {
        this.indentate = function() {
            return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
    }
    if (this.options.supressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
    } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
    }
    this.buildTextValNode = buildTextValNode;
    this.buildObjectNode = buildObjectNode;
}
Parser.prototype.parse = function(jObj) {
    if (Array.isArray(jObj) && this.options.rootNodeName && this.options.rootNodeName.length > 1) jObj = {
        [this.options.rootNodeName]: jObj
    };
    return this.j2x(jObj, 0).val;
};
Parser.prototype.j2x = function(jObj, level) {
    let attrStr = "";
    let val = "";
    for(let key in jObj){
        if (typeof jObj[key] === "undefined") ;
        else if (jObj[key] === null) val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        else if (jObj[key] instanceof Date) val += this.buildTextNode(jObj[key], key, "", level);
        else if (typeof jObj[key] !== "object") {
            //premitive type
            const attr = this.isAttribute(key);
            if (attr) attrStr += " " + attr + '="' + this.options.attrValueProcessor("" + jObj[key]) + '"';
            else if (this.isCDATA(key)) {
                if (jObj[this.options.textNodeName]) val += this.replaceCDATAstr(jObj[this.options.textNodeName], jObj[key]);
                else val += this.replaceCDATAstr("", jObj[key]);
            } else //tag value
            if (key === this.options.textNodeName) {
                if (jObj[this.options.cdataTagName]) ;
                else val += this.options.tagValueProcessor("" + jObj[key]);
            } else val += this.buildTextNode(jObj[key], key, "", level);
        } else if (Array.isArray(jObj[key])) {
            //repeated nodes
            if (this.isCDATA(key)) {
                val += this.indentate(level);
                if (jObj[this.options.textNodeName]) val += this.replaceCDATAarr(jObj[this.options.textNodeName], jObj[key]);
                else val += this.replaceCDATAarr("", jObj[key]);
            } else {
                //nested nodes
                const arrLen = jObj[key].length;
                for(let j = 0; j < arrLen; j++){
                    const item = jObj[key][j];
                    if (typeof item === "undefined") ;
                    else if (item === null) val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
                    else if (typeof item === "object") val += this.processTextOrObjNode(item, key, level);
                    else val += this.buildTextNode(item, key, "", level);
                }
            }
        } else //nested node
        if (this.options.attrNodeName && key === this.options.attrNodeName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for(let j = 0; j < L; j++)attrStr += " " + Ks[j] + '="' + this.options.attrValueProcessor("" + jObj[key][Ks[j]]) + '"';
        } else val += this.processTextOrObjNode(jObj[key], key, level);
    }
    return {
        attrStr: attrStr,
        val: val
    };
};
function processTextOrObjNode(object, key, level) {
    const result = this.j2x(object, level + 1);
    if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) return this.buildTextNode(result.val, key, result.attrStr, level);
    else return this.buildObjNode(result.val, key, result.attrStr, level);
}
function replaceCDATAstr(str, cdata) {
    str = this.options.tagValueProcessor("" + str);
    if (this.options.cdataPositionChar === "" || str === "") return str + "<![CDATA[" + cdata + "]]" + this.tagEndChar;
    else return str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata + "]]" + this.tagEndChar);
}
function replaceCDATAarr(str, cdata) {
    str = this.options.tagValueProcessor("" + str);
    if (this.options.cdataPositionChar === "" || str === "") return str + "<![CDATA[" + cdata.join("]]><![CDATA[") + "]]" + this.tagEndChar;
    else {
        for(let v in cdata)str = str.replace(this.options.cdataPositionChar, "<![CDATA[" + cdata[v] + "]]>");
        return str + this.newLine;
    }
}
function buildObjectNode(val, key, attrStr, level) {
    if (attrStr && val.indexOf("<") === -1) return this.indentate(level) + "<" + key + attrStr + ">" + val + //+ this.newLine
    // + this.indentate(level)
    "</" + key + this.tagEndChar;
    else return this.indentate(level) + "<" + key + attrStr + this.tagEndChar + val + //+ this.newLine
    this.indentate(level) + "</" + key + this.tagEndChar;
}
function buildEmptyObjNode(val, key, attrStr, level) {
    if (val !== "") return this.buildObjectNode(val, key, attrStr, level);
    else return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
}
function buildTextValNode(val, key, attrStr, level) {
    return this.indentate(level) + "<" + key + attrStr + ">" + this.options.tagValueProcessor(val) + "</" + key + this.tagEndChar;
}
function buildEmptyTextNode(val, key, attrStr, level) {
    if (val !== "") return this.buildTextValNode(val, key, attrStr, level);
    else return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
}
function indentate(level) {
    return this.options.indentBy.repeat(level);
}
function isAttribute(name /*, options*/ ) {
    if (name.startsWith(this.options.attributeNamePrefix)) return name.substr(this.attrPrefixLen);
    else return false;
}
function isCDATA(name) {
    return name === this.options.cdataTagName;
}
//formatting
//indentation
//\n after each closing or self closing tag
module.exports = Parser;

},{"67f88484beab7f1a":"7dJgG"}],"ccWCL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CompleteMultipartUploadCommand", ()=>CompleteMultipartUploadCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSdkS3 = require("@aws-sdk/middleware-sdk-s3");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Completes a multipart upload by assembling previously uploaded parts.</p>
 *          <p>You first initiate the multipart upload and then upload all parts using the <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
 *          operation. After successfully uploading all relevant parts of an upload, you call this
 *          operation to complete the upload. Upon receiving this request, Amazon S3 concatenates all
 *          the parts in ascending order by part number to create a new object. In the Complete
 *          Multipart Upload request, you must provide the parts list. You must ensure that the parts
 *          list is complete. This operation concatenates the parts that you provide in the list. For
 *          each part in the list, you must provide the part number and the <code>ETag</code> value,
 *          returned after that part was uploaded.</p>
 *          <p>Processing of a Complete Multipart Upload request could take several minutes to
 *          complete. After Amazon S3 begins processing the request, it sends an HTTP response header that
 *          specifies a 200 OK response. While processing is in progress, Amazon S3 periodically sends white
 *          space characters to keep the connection from timing out. Because a request could fail after
 *          the initial 200 OK response has been sent, it is important that you check the response body
 *          to determine whether the request succeeded.</p>
 *          <p>Note that if <code>CompleteMultipartUpload</code> fails, applications should be prepared
 *          to retry the failed requests. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ErrorBestPractices.html">Amazon S3 Error Best Practices</a>.</p>
 *          <p>For more information about multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading Objects Using Multipart
 *             Upload</a>.</p>
 *          <p>For information about permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
 *          Permissions</a>.</p>
 *
 *
 *          <p>
 *             <code>CompleteMultipartUpload</code> has the following special errors:</p>
 *          <ul>
 *             <li>
 *                <p>Error code: <code>EntityTooSmall</code>
 *                </p>
 *                <ul>
 *                   <li>
 *                      <p>Description: Your proposed upload is smaller than the minimum allowed object
 *                      size. Each part must be at least 5 MB in size, except the last part.</p>
 *                   </li>
 *                   <li>
 *                      <p>400 Bad Request</p>
 *                   </li>
 *                </ul>
 *             </li>
 *             <li>
 *                <p>Error code: <code>InvalidPart</code>
 *                </p>
 *                <ul>
 *                   <li>
 *                      <p>Description: One or more of the specified parts could not be found. The part
 *                      might not have been uploaded, or the specified entity tag might not have
 *                      matched the part's entity tag.</p>
 *                   </li>
 *                   <li>
 *                      <p>400 Bad Request</p>
 *                   </li>
 *                </ul>
 *             </li>
 *             <li>
 *                <p>Error code: <code>InvalidPartOrder</code>
 *                </p>
 *                <ul>
 *                   <li>
 *                      <p>Description: The list of parts was not in ascending order. The parts list
 *                      must be specified in order by part number.</p>
 *                   </li>
 *                   <li>
 *                      <p>400 Bad Request</p>
 *                   </li>
 *                </ul>
 *             </li>
 *             <li>
 *                <p>Error code: <code>NoSuchUpload</code>
 *                </p>
 *                <ul>
 *                   <li>
 *                      <p>Description: The specified multipart upload does not exist. The upload ID
 *                      might be invalid, or the multipart upload might have been aborted or
 *                      completed.</p>
 *                   </li>
 *                   <li>
 *                      <p>404 Not Found</p>
 *                   </li>
 *                </ul>
 *             </li>
 *          </ul>
 *
 *          <p>The following operations are related to <code>CompleteMultipartUpload</code>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var CompleteMultipartUploadCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(CompleteMultipartUploadCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CompleteMultipartUploadCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ CompleteMultipartUploadCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSdkS3.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "CompleteMultipartUploadCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.CompleteMultipartUploadRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.CompleteMultipartUploadOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CompleteMultipartUploadCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlCompleteMultipartUploadCommand)(input, context);
    };
    CompleteMultipartUploadCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlCompleteMultipartUploadCommand)(output, context);
    };
    return CompleteMultipartUploadCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-sdk-s3":"km3Di","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1n9Ix":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CopyObjectCommand", ()=>CopyObjectCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSdkS3 = require("@aws-sdk/middleware-sdk-s3");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Creates a copy of an object that is already stored in Amazon S3.</p>
 *          <note>
 *             <p>You can store individual objects of up to 5 TB in Amazon S3. You create a copy of your
 *             object up to 5 GB in size in a single atomic operation using this API. However, to copy
 *             an object greater than 5 GB, you must use the multipart upload Upload Part - Copy API.
 *             For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjctsUsingRESTMPUapi.html">Copy Object Using the REST Multipart Upload API</a>.</p>
 *          </note>
 *          <p>All copy requests must be authenticated. Additionally, you must have
 *             <i>read</i> access to the source object and <i>write</i>
 *          access to the destination bucket. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html">REST Authentication</a>. Both the Region
 *          that you want to copy the object from and the Region that you want to copy the object to
 *          must be enabled for your account.</p>
 *          <p>A copy request might return an error when Amazon S3 receives the copy request or while Amazon S3
 *          is copying the files. If the error occurs before the copy operation starts, you receive a
 *          standard Amazon S3 error. If the error occurs during the copy operation, the error response is
 *          embedded in the <code>200 OK</code> response. This means that a <code>200 OK</code>
 *          response can contain either a success or an error. Design your application to parse the
 *          contents of the response and handle it appropriately.</p>
 *          <p>If the copy is successful, you receive a response with information about the copied
 *          object.</p>
 *          <note>
 *             <p>If the request is an HTTP 1.1 request, the response is chunk encoded. If it were not,
 *             it would not contain the content-length, and you would need to read the entire
 *             body.</p>
 *          </note>
 *          <p>The copy request charge is based on the storage class and Region that you specify for
 *          the destination object. For pricing information, see <a href="https://aws.amazon.com/s3/pricing/">Amazon S3 pricing</a>.</p>
 *          <important>
 *             <p>Amazon S3 transfer acceleration does not support cross-Region copies. If you request a
 *             cross-Region copy using a transfer acceleration endpoint, you get a 400 <code>Bad
 *                Request</code> error. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/transfer-acceleration.html">Transfer Acceleration</a>.</p>
 *          </important>
 *          <p>
 *             <b>Metadata</b>
 *          </p>
 *          <p>When copying an object, you can preserve all metadata (default) or specify new metadata.
 *          However, the ACL is not preserved and is set to private for the user making the request. To
 *          override the default ACL setting, specify a new ACL when generating a copy request. For
 *          more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html">Using ACLs</a>. </p>
 *          <p>To specify whether you want the object metadata copied from the source object or
 *          replaced with metadata provided in the request, you can optionally add the
 *             <code>x-amz-metadata-directive</code> header. When you grant permissions, you can use
 *          the <code>s3:x-amz-metadata-directive</code> condition key to enforce certain metadata
 *          behavior when objects are uploaded. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/amazon-s3-policy-keys.html">Specifying Conditions in a
 *             Policy</a> in the <i>Amazon S3 Developer Guide</i>. For a complete list of
 *          Amazon S3-specific condition keys, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/list_amazons3.html">Actions, Resources, and Condition Keys for
 *             Amazon S3</a>.</p>
 *          <p>
 *             <b>
 *                <code>x-amz-copy-source-if</code> Headers</b>
 *          </p>
 *          <p>To only copy an object under certain conditions, such as whether the <code>Etag</code>
 *          matches or whether the object was modified before or after a specified date, use the
 *          following request parameters:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <code>x-amz-copy-source-if-match</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>x-amz-copy-source-if-none-match</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>x-amz-copy-source-if-unmodified-since</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>x-amz-copy-source-if-modified-since</code>
 *                </p>
 *             </li>
 *          </ul>
 *          <p> If both the <code>x-amz-copy-source-if-match</code> and
 *             <code>x-amz-copy-source-if-unmodified-since</code> headers are present in the request
 *          and evaluate as follows, Amazon S3 returns <code>200 OK</code> and copies the data:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <code>x-amz-copy-source-if-match</code> condition evaluates to true</p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>x-amz-copy-source-if-unmodified-since</code> condition evaluates to
 *                false</p>
 *             </li>
 *          </ul>
 *
 *          <p>If both the <code>x-amz-copy-source-if-none-match</code> and
 *             <code>x-amz-copy-source-if-modified-since</code> headers are present in the request and
 *          evaluate as follows, Amazon S3 returns the <code>412 Precondition Failed</code> response
 *          code:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <code>x-amz-copy-source-if-none-match</code> condition evaluates to false</p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>x-amz-copy-source-if-modified-since</code> condition evaluates to
 *                true</p>
 *             </li>
 *          </ul>
 *
 *          <note>
 *             <p>All headers with the <code>x-amz-</code> prefix, including
 *                <code>x-amz-copy-source</code>, must be signed.</p>
 *          </note>
 *          <p>
 *             <b>Server-side encryption</b>
 *          </p>
 *          <p>When you perform a CopyObject operation, you can optionally use the appropriate encryption-related headers to encrypt the object using server-side encryption with AWS managed encryption keys (SSE-S3 or SSE-KMS) or a customer-provided encryption key. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data when you access it. For more information about server-side encryption, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">Using
 *          Server-Side Encryption</a>.</p>
 *          <p>If a target object uses SSE-KMS, you can enable an S3 Bucket Key for the object. For more
 *          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html">Amazon S3 Bucket Keys</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
 *          <p>
 *             <b>Access Control List (ACL)-Specific Request
 *          Headers</b>
 *          </p>
 *          <p>When copying an object, you can optionally use headers to grant ACL-based permissions.
 *          By default, all objects are private. Only the owner has full access control. When adding a
 *          new object, you can grant permissions to individual AWS accounts or to predefined groups
 *          defined by Amazon S3. These permissions are then added to the ACL on the object. For more
 *          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access Control List (ACL) Overview</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-using-rest-api.html">Managing ACLs Using the REST
 *             API</a>. </p>
 *
 *          <p>
 *             <b>Storage Class Options</b>
 *          </p>
 *          <p>You can use the <code>CopyObject</code> operation to change the storage class of an
 *          object that is already stored in Amazon S3 using the <code>StorageClass</code> parameter. For
 *          more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage
 *             Classes</a> in the <i>Amazon S3 Service Developer Guide</i>.</p>
 *          <p>
 *             <b>Versioning</b>
 *          </p>
 *          <p>By default, <code>x-amz-copy-source</code> identifies the current version of an object
 *          to copy. If the current version is a delete marker, Amazon S3 behaves as if the object was
 *          deleted. To copy a different version, use the <code>versionId</code> subresource.</p>
 *          <p>If you enable versioning on the target bucket, Amazon S3 generates a unique version ID for
 *          the object being copied. This version ID is different from the version ID of the source
 *          object. Amazon S3 returns the version ID of the copied object in the
 *             <code>x-amz-version-id</code> response header in the response.</p>
 *          <p>If you do not enable versioning or suspend it on the target bucket, the version ID that
 *          Amazon S3 generates is always null.</p>
 *          <p>If the source object's storage class is GLACIER, you must restore a copy of this object
 *          before you can use it as a source object for the copy operation. For more information, see
 *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html">RestoreObject</a>.</p>
 *          <p>The following operations are related to <code>CopyObject</code>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
 *                </p>
 *             </li>
 *          </ul>
 *          <p>For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/CopyingObjectsExamples.html">Copying
 *             Objects</a>.</p>
 */ var CopyObjectCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(CopyObjectCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CopyObjectCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ CopyObjectCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSdkS3.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "CopyObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.CopyObjectRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.CopyObjectOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CopyObjectCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlCopyObjectCommand)(input, context);
    };
    CopyObjectCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlCopyObjectCommand)(output, context);
    };
    return CopyObjectCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-sdk-s3":"km3Di","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-ssec":"hHcQK","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hHcQK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ssecMiddleware", ()=>ssecMiddleware);
parcelHelpers.export(exports, "ssecMiddlewareOptions", ()=>ssecMiddlewareOptions);
parcelHelpers.export(exports, "getSsecPlugin", ()=>getSsecPlugin);
var _tslib = require("tslib");
function ssecMiddleware(options) {
    var _this = this;
    return function(next) {
        return function(args) {
            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                var input, properties, properties_1, properties_1_1, prop, value, valueView, encoded, hash, _a, _b, _c, _d, e_1_1;
                var e_1, _e, _f;
                return (0, _tslib.__generator)(this, function(_g) {
                    switch(_g.label){
                        case 0:
                            input = (0, _tslib.__assign)({}, args.input);
                            properties = [
                                {
                                    target: "SSECustomerKey",
                                    hash: "SSECustomerKeyMD5"
                                },
                                {
                                    target: "CopySourceSSECustomerKey",
                                    hash: "CopySourceSSECustomerKeyMD5"
                                }
                            ];
                            _g.label = 1;
                        case 1:
                            _g.trys.push([
                                1,
                                6,
                                7,
                                8
                            ]);
                            properties_1 = (0, _tslib.__values)(properties), properties_1_1 = properties_1.next();
                            _g.label = 2;
                        case 2:
                            if (!!properties_1_1.done) return [
                                3 /*break*/ ,
                                5
                            ];
                            prop = properties_1_1.value;
                            value = input[prop.target];
                            if (!value) return [
                                3 /*break*/ ,
                                4
                            ];
                            valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === "string" ? options.utf8Decoder(value) : new Uint8Array(value);
                            encoded = options.base64Encoder(valueView);
                            hash = new options.md5();
                            hash.update(valueView);
                            _a = [
                                (0, _tslib.__assign)({}, input)
                            ];
                            _f = {}, _f[prop.target] = encoded;
                            _b = prop.hash;
                            _d = (_c = options).base64Encoder;
                            return [
                                4 /*yield*/ ,
                                hash.digest()
                            ];
                        case 3:
                            input = (0, _tslib.__assign).apply(void 0, _a.concat([
                                (_f[_b] = _d.apply(_c, [
                                    _g.sent()
                                ]), _f)
                            ]));
                            _g.label = 4;
                        case 4:
                            properties_1_1 = properties_1.next();
                            return [
                                3 /*break*/ ,
                                2
                            ];
                        case 5:
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case 6:
                            e_1_1 = _g.sent();
                            e_1 = {
                                error: e_1_1
                            };
                            return [
                                3 /*break*/ ,
                                8
                            ];
                        case 7:
                            try {
                                if (properties_1_1 && !properties_1_1.done && (_e = properties_1.return)) _e.call(properties_1);
                            } finally{
                                if (e_1) throw e_1.error;
                            }
                            return [
                                7 /*endfinally*/ 
                            ];
                        case 8:
                            return [
                                2 /*return*/ ,
                                next((0, _tslib.__assign)((0, _tslib.__assign)({}, args), {
                                    input: input
                                }))
                            ];
                    }
                });
            });
        };
    };
}
var ssecMiddlewareOptions = {
    name: "ssecMiddleware",
    step: "initialize",
    tags: [
        "SSE"
    ],
    override: true
};
var getSsecPlugin = function(config) {
    return {
        applyToStack: function(clientStack) {
            clientStack.add(ssecMiddleware(config), ssecMiddlewareOptions);
        }
    };
};

},{"tslib":"8a8NU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8a8NU":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3tgEc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CreateMultipartUploadCommand", ()=>CreateMultipartUploadCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>This operation initiates a multipart upload and returns an upload ID. This upload ID is
 *          used to associate all of the parts in the specific multipart upload. You specify this
 *          upload ID in each of your subsequent upload part requests (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>). You also include this
 *          upload ID in the final request to either complete or abort the multipart upload
 *          request.</p>
 *
 *          <p>For more information about multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">Multipart Upload Overview</a>.</p>
 *
 *          <p>If you have configured a lifecycle rule to abort incomplete multipart uploads, the
 *          upload must complete within the number of days specified in the bucket lifecycle
 *          configuration. Otherwise, the incomplete multipart upload becomes eligible for an abort
 *          operation and Amazon S3 aborts the multipart upload. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html#mpu-abort-incomplete-mpu-lifecycle-config">Aborting
 *             Incomplete Multipart Uploads Using a Bucket Lifecycle Policy</a>.</p>
 *
 *          <p>For information about the permissions required to use the multipart upload API, see
 *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
 *             Permissions</a>.</p>
 *
 *          <p>For request signing, multipart upload is just a series of regular requests. You initiate
 *          a multipart upload, send one or more requests to upload parts, and then complete the
 *          multipart upload process. You sign each request individually. There is nothing special
 *          about signing multipart upload requests. For more information about signing, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html">Authenticating
 *             Requests (AWS Signature Version 4)</a>.</p>
 *
 *          <note>
 *             <p> After you initiate a multipart upload and upload one or more parts, to stop being
 *             charged for storing the uploaded parts, you must either complete or abort the multipart
 *             upload. Amazon S3 frees up the space used to store the parts and stop charging you for
 *             storing them only after you either complete or abort a multipart upload. </p>
 *          </note>
 *
 *          <p>You can optionally request server-side encryption. For server-side encryption, Amazon S3
 *          encrypts your data as it writes it to disks in its data centers and decrypts it when you
 *          access it. You can provide your own encryption key, or use AWS Key Management Service (AWS
 *          KMS) customer master keys (CMKs) or Amazon S3-managed encryption keys. If you choose to provide
 *          your own encryption key, the request headers you provide in <a href="AmazonS3/latest/API/API_UploadPart.html">UploadPart</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html">UploadPartCopy</a> requests must match the headers you used in the request to
 *          initiate the upload by using <code>CreateMultipartUpload</code>. </p>
 *          <p>To perform a multipart upload with encryption using an AWS KMS CMK, the requester must
 *          have permission to the <code>kms:Encrypt</code>, <code>kms:Decrypt</code>,
 *             <code>kms:ReEncrypt*</code>, <code>kms:GenerateDataKey*</code>, and
 *             <code>kms:DescribeKey</code> actions on the key. These permissions are required because
 *          Amazon S3 must decrypt and read data from the encrypted file parts before it completes the
 *          multipart upload.</p>
 *
 *          <p>If your AWS Identity and Access Management (IAM) user or role is in the same AWS account
 *          as the AWS KMS CMK, then you must have these permissions on the key policy. If your IAM
 *          user or role belongs to a different account than the key, then you must have the
 *          permissions on both the key policy and your IAM user or role.</p>
 *
 *
 *          <p> For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/serv-side-encryption.html">Protecting
 *             Data Using Server-Side Encryption</a>.</p>
 *
 *          <dl>
 *             <dt>Access Permissions</dt>
 *             <dd>
 *                <p>When copying an object, you can optionally specify the accounts or groups that
 *                   should be granted specific permissions on the new object. There are two ways to
 *                   grant the permissions using the request headers:</p>
 *                <ul>
 *                   <li>
 *                      <p>Specify a canned ACL with the <code>x-amz-acl</code> request header. For
 *                         more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned ACL</a>.</p>
 *                   </li>
 *                   <li>
 *                      <p>Specify access permissions explicitly with the
 *                            <code>x-amz-grant-read</code>, <code>x-amz-grant-read-acp</code>,
 *                            <code>x-amz-grant-write-acp</code>, and
 *                            <code>x-amz-grant-full-control</code> headers. These parameters map to
 *                         the set of permissions that Amazon S3 supports in an ACL. For more information,
 *                         see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access Control List (ACL)
 *                            Overview</a>.</p>
 *                   </li>
 *                </ul>
 *                <p>You can use either a canned ACL or specify access permissions explicitly. You
 *                   cannot do both.</p>
 *             </dd>
 *             <dt>Server-Side- Encryption-Specific Request Headers</dt>
 *             <dd>
 *                <p>You can optionally tell Amazon S3 to encrypt data at rest using server-side
 *                   encryption. Server-side encryption is for data encryption at rest. Amazon S3 encrypts
 *                   your data as it writes it to disks in its data centers and decrypts it when you
 *                   access it. The option you use depends on whether you want to use AWS managed
 *                   encryption keys or provide your own encryption key. </p>
 *                <ul>
 *                   <li>
 *                      <p>Use encryption keys managed by Amazon S3 or customer master keys (CMKs) stored
 *                         in AWS Key Management Service (AWS KMS) – If you want AWS to manage the keys
 *                         used to encrypt data, specify the following headers in the request.</p>
 *                      <ul>
 *                         <li>
 *                            <p>x-amz-server-side-encryption</p>
 *                         </li>
 *                         <li>
 *                            <p>x-amz-server-side-encryption-aws-kms-key-id</p>
 *                         </li>
 *                         <li>
 *                            <p>x-amz-server-side-encryption-context</p>
 *                         </li>
 *                      </ul>
 *                      <note>
 *                         <p>If you specify <code>x-amz-server-side-encryption:aws:kms</code>, but
 *                            don't provide <code>x-amz-server-side-encryption-aws-kms-key-id</code>,
 *                            Amazon S3 uses the AWS managed CMK in AWS KMS to protect the data.</p>
 *                      </note>
 *                      <important>
 *                         <p>All GET and PUT requests for an object protected by AWS KMS fail if
 *                            you don't make them with SSL or by using SigV4.</p>
 *                      </important>
 *                      <p>For more information about server-side encryption with CMKs stored in AWS
 *                         KMS (SSE-KMS), see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">Protecting Data Using Server-Side Encryption with CMKs stored in AWS
 *                            KMS</a>.</p>
 *                   </li>
 *                   <li>
 *                      <p>Use customer-provided encryption keys – If you want to manage your own
 *                         encryption keys, provide all the following headers in the request.</p>
 *                      <ul>
 *                         <li>
 *                            <p>x-amz-server-side-encryption-customer-algorithm</p>
 *                         </li>
 *                         <li>
 *                            <p>x-amz-server-side-encryption-customer-key</p>
 *                         </li>
 *                         <li>
 *                            <p>x-amz-server-side-encryption-customer-key-MD5</p>
 *                         </li>
 *                      </ul>
 *                      <p>For more information about server-side encryption with CMKs stored in AWS
 *                         KMS (SSE-KMS), see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html">Protecting Data Using Server-Side Encryption with CMKs stored in AWS
 *                            KMS</a>.</p>
 *                   </li>
 *                </ul>
 *             </dd>
 *             <dt>Access-Control-List (ACL)-Specific Request Headers</dt>
 *             <dd>
 *                <p>You also can use the following access control–related headers with this
 *                   operation. By default, all objects are private. Only the owner has full access
 *                   control. When adding a new object, you can grant permissions to individual AWS
 *                   accounts or to predefined groups defined by Amazon S3. These permissions are then added
 *                   to the access control list (ACL) on the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3_ACLs_UsingACLs.html">Using ACLs</a>. With this
 *                   operation, you can grant access permissions using one of the following two
 *                   methods:</p>
 *                <ul>
 *                   <li>
 *                      <p>Specify a canned ACL (<code>x-amz-acl</code>) — Amazon S3 supports a set of
 *                         predefined ACLs, known as <i>canned ACLs</i>. Each canned ACL
 *                         has a predefined set of grantees and permissions. For more information, see
 *                            <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html#CannedACL">Canned
 *                         ACL</a>.</p>
 *                   </li>
 *                   <li>
 *                      <p>Specify access permissions explicitly — To explicitly grant access
 *                         permissions to specific AWS accounts or groups, use the following headers.
 *                         Each header maps to specific permissions that Amazon S3 supports in an ACL. For
 *                         more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access
 *                            Control List (ACL) Overview</a>. In the header, you specify a list of
 *                         grantees who get the specific permission. To grant permissions explicitly,
 *                         use:</p>
 *                      <ul>
 *                         <li>
 *                            <p>x-amz-grant-read</p>
 *                         </li>
 *                         <li>
 *                            <p>x-amz-grant-write</p>
 *                         </li>
 *                         <li>
 *                            <p>x-amz-grant-read-acp</p>
 *                         </li>
 *                         <li>
 *                            <p>x-amz-grant-write-acp</p>
 *                         </li>
 *                         <li>
 *                            <p>x-amz-grant-full-control</p>
 *                         </li>
 *                      </ul>
 *                      <p>You specify each grantee as a type=value pair, where the type is one of
 *                         the following:</p>
 *                      <ul>
 *                         <li>
 *                            <p>
 *                               <code>id</code> – if the value specified is the canonical user ID
 *                               of an AWS account</p>
 *                         </li>
 *                         <li>
 *                            <p>
 *                               <code>uri</code> – if you are granting permissions to a predefined
 *                               group</p>
 *                         </li>
 *                         <li>
 *                            <p>
 *                               <code>emailAddress</code> – if the value specified is the email
 *                               address of an AWS account</p>
 *                            <note>
 *                               <p>Using email addresses to specify a grantee is only supported in the following AWS Regions: </p>
 *                               <ul>
 *                                  <li>
 *                                     <p>US East (N. Virginia)</p>
 *                                  </li>
 *                                  <li>
 *                                     <p>US West (N. California)</p>
 *                                  </li>
 *                                  <li>
 *                                     <p> US West (Oregon)</p>
 *                                  </li>
 *                                  <li>
 *                                     <p> Asia Pacific (Singapore)</p>
 *                                  </li>
 *                                  <li>
 *                                     <p>Asia Pacific (Sydney)</p>
 *                                  </li>
 *                                  <li>
 *                                     <p>Asia Pacific (Tokyo)</p>
 *                                  </li>
 *                                  <li>
 *                                     <p>Europe (Ireland)</p>
 *                                  </li>
 *                                  <li>
 *                                     <p>South America (São Paulo)</p>
 *                                  </li>
 *                               </ul>
 *                               <p>For a list of all the Amazon S3 supported Regions and endpoints, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">Regions and Endpoints</a> in the AWS General Reference.</p>
 *                            </note>
 *                         </li>
 *                      </ul>
 *                      <p>For example, the following <code>x-amz-grant-read</code> header grants the AWS accounts identified by account IDs permissions to read object data and its metadata:</p>
 *                      <p>
 *                         <code>x-amz-grant-read: id="11112222333", id="444455556666" </code>
 *                      </p>
 *                   </li>
 *                </ul>
 *
 *             </dd>
 *          </dl>
 *
 *          <p>The following operations are related to <code>CreateMultipartUpload</code>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var CreateMultipartUploadCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(CreateMultipartUploadCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function CreateMultipartUploadCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ CreateMultipartUploadCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "CreateMultipartUploadCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.CreateMultipartUploadRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.CreateMultipartUploadOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    CreateMultipartUploadCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlCreateMultipartUploadCommand)(input, context);
    };
    CreateMultipartUploadCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlCreateMultipartUploadCommand)(output, context);
    };
    return CreateMultipartUploadCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-ssec":"hHcQK","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3hER1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteObjectCommand", ()=>DeleteObjectCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Removes the null version (if there is one) of an object and inserts a delete marker,
 *          which becomes the latest version of the object. If there isn't a null version, Amazon S3 does
 *          not remove any objects.</p>
 *
 *          <p>To remove a specific version, you must be the bucket owner and you must use the version
 *          Id subresource. Using this subresource permanently deletes the version. If the object
 *          deleted is a delete marker, Amazon S3 sets the response header,
 *          <code>x-amz-delete-marker</code>, to true. </p>
 *
 *          <p>If the object you want to delete is in a bucket where the bucket versioning
 *          configuration is MFA Delete enabled, you must include the <code>x-amz-mfa</code> request
 *          header in the DELETE <code>versionId</code> request. Requests that include
 *             <code>x-amz-mfa</code> must use HTTPS. </p>
 *
 *          <p> For more information about MFA Delete, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMFADelete.html">Using MFA Delete</a>. To see sample requests that use versioning, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectDELETE.html#ExampleVersionObjectDelete">Sample Request</a>. </p>
 *
 *          <p>You can delete objects by explicitly calling the DELETE Object API or configure its
 *          lifecycle (<a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketLifecycle.html">PutBucketLifecycle</a>) to
 *          enable Amazon S3 to remove them for you. If you want to block users or accounts from removing or
 *          deleting objects from your bucket, you must deny them the <code>s3:DeleteObject</code>,
 *             <code>s3:DeleteObjectVersion</code>, and <code>s3:PutLifeCycleConfiguration</code>
 *          actions. </p>
 *
 *          <p>The following operation is related to <code>DeleteObject</code>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var DeleteObjectCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(DeleteObjectCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function DeleteObjectCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ DeleteObjectCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "DeleteObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteObjectRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.DeleteObjectOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    DeleteObjectCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlDeleteObjectCommand)(input, context);
    };
    DeleteObjectCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlDeleteObjectCommand)(output, context);
    };
    return DeleteObjectCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jcWf6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetObjectCommand", ()=>GetObjectCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Retrieves objects from Amazon S3. To use <code>GET</code>, you must have <code>READ</code>
 *          access to the object. If you grant <code>READ</code> access to the anonymous user, you can
 *          return the object without using an authorization header.</p>
 *
 *          <p>An Amazon S3 bucket has no directory hierarchy such as you would find in a typical computer
 *          file system. You can, however, create a logical hierarchy by using object key names that
 *          imply a folder structure. For example, instead of naming an object <code>sample.jpg</code>,
 *          you can name it <code>photos/2006/February/sample.jpg</code>.</p>
 *
 *          <p>To get an object from such a logical hierarchy, specify the full key name for the object
 *          in the <code>GET</code> operation. For a virtual hosted-style request example, if you have
 *          the object <code>photos/2006/February/sample.jpg</code>, specify the resource as
 *             <code>/photos/2006/February/sample.jpg</code>. For a path-style request example, if you
 *          have the object <code>photos/2006/February/sample.jpg</code> in the bucket named
 *             <code>examplebucket</code>, specify the resource as
 *             <code>/examplebucket/photos/2006/February/sample.jpg</code>. For more information about
 *          request types, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/VirtualHosting.html#VirtualHostingSpecifyBucket">HTTP Host Header Bucket Specification</a>.</p>
 *
 *          <p>To distribute large files to many people, you can save bandwidth costs by using
 *          BitTorrent. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/S3Torrent.html">Amazon S3
 *             Torrent</a>. For more information about returning the ACL of an object, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAcl.html">GetObjectAcl</a>.</p>
 *
 *          <p>If the object you are retrieving is stored in the S3 Glacier or
 *          S3 Glacier Deep Archive storage class, or S3 Intelligent-Tiering Archive or
 *          S3 Intelligent-Tiering Deep Archive tiers, before you can retrieve the object you must first restore a
 *          copy using <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_RestoreObject.html">RestoreObject</a>. Otherwise, this operation returns an
 *             <code>InvalidObjectStateError</code> error. For information about restoring archived
 *          objects, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/restoring-objects.html">Restoring Archived
 *             Objects</a>.</p>
 *
 *          <p>Encryption request headers, like <code>x-amz-server-side-encryption</code>, should not
 *          be sent for GET requests if your object uses server-side encryption with CMKs stored in AWS
 *          KMS (SSE-KMS) or server-side encryption with Amazon S3–managed encryption keys (SSE-S3). If your
 *          object does use these types of keys, you’ll get an HTTP 400 BadRequest error.</p>
 *          <p>If you encrypt an object by using server-side encryption with customer-provided
 *          encryption keys (SSE-C) when you store the object in Amazon S3, then when you GET the object,
 *          you must use the following headers:</p>
 *          <ul>
 *             <li>
 *                <p>x-amz-server-side-encryption-customer-algorithm</p>
 *             </li>
 *             <li>
 *                <p>x-amz-server-side-encryption-customer-key</p>
 *             </li>
 *             <li>
 *                <p>x-amz-server-side-encryption-customer-key-MD5</p>
 *             </li>
 *          </ul>
 *          <p>For more information about SSE-C, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/ServerSideEncryptionCustomerKeys.html">Server-Side Encryption (Using
 *             Customer-Provided Encryption Keys)</a>.</p>
 *
 *          <p>Assuming you have permission to read object tags (permission for the
 *             <code>s3:GetObjectVersionTagging</code> action), the response also returns the
 *             <code>x-amz-tagging-count</code> header that provides the count of number of tags
 *          associated with the object. You can use <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectTagging.html">GetObjectTagging</a> to retrieve
 *          the tag set associated with an object.</p>
 *
 *          <p>
 *             <b>Permissions</b>
 *          </p>
 *          <p>You need the <code>s3:GetObject</code> permission for this operation. For more
 *          information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html">Specifying Permissions
 *             in a Policy</a>. If the object you request does not exist, the error Amazon S3 returns
 *          depends on whether you also have the <code>s3:ListBucket</code> permission.</p>
 *          <ul>
 *             <li>
 *                <p>If you have the <code>s3:ListBucket</code> permission on the bucket, Amazon S3 will
 *                return an HTTP status code 404 ("no such key") error.</p>
 *             </li>
 *             <li>
 *                <p>If you don’t have the <code>s3:ListBucket</code> permission, Amazon S3 will return an
 *                HTTP status code 403 ("access denied") error.</p>
 *             </li>
 *          </ul>
 *
 *
 *          <p>
 *             <b>Versioning</b>
 *          </p>
 *          <p>By default, the GET operation returns the current version of an object. To return a
 *          different version, use the <code>versionId</code> subresource.</p>
 *
 *          <note>
 *             <p>If the current version of the object is a delete marker, Amazon S3 behaves as if the
 *             object was deleted and includes <code>x-amz-delete-marker: true</code> in the
 *             response.</p>
 *          </note>
 *
 *
 *          <p>For more information about versioning, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutBucketVersioning.html">PutBucketVersioning</a>. </p>
 *
 *          <p>
 *             <b>Overriding Response Header Values</b>
 *          </p>
 *          <p>There are times when you want to override certain response header values in a GET
 *          response. For example, you might override the Content-Disposition response header value in
 *          your GET request.</p>
 *
 *          <p>You can override values for a set of response headers using the following query
 *          parameters. These response header values are sent only on a successful request, that is,
 *          when status code 200 OK is returned. The set of headers you can override using these
 *          parameters is a subset of the headers that Amazon S3 accepts when you create an object. The
 *          response headers that you can override for the GET response are <code>Content-Type</code>,
 *             <code>Content-Language</code>, <code>Expires</code>, <code>Cache-Control</code>,
 *             <code>Content-Disposition</code>, and <code>Content-Encoding</code>. To override these
 *          header values in the GET response, you use the following request parameters.</p>
 *
 *          <note>
 *             <p>You must sign the request, either using an Authorization header or a presigned URL,
 *             when using these parameters. They cannot be used with an unsigned (anonymous)
 *             request.</p>
 *          </note>
 *          <ul>
 *             <li>
 *                <p>
 *                   <code>response-content-type</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>response-content-language</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>response-expires</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>response-cache-control</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>response-content-disposition</code>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <code>response-content-encoding</code>
 *                </p>
 *             </li>
 *          </ul>
 *
 *          <p>
 *             <b>Additional Considerations about Request Headers</b>
 *          </p>
 *
 *          <p>If both of the <code>If-Match</code> and <code>If-Unmodified-Since</code> headers are
 *          present in the request as follows: <code>If-Match</code> condition evaluates to
 *             <code>true</code>, and; <code>If-Unmodified-Since</code> condition evaluates to
 *             <code>false</code>; then, S3 returns 200 OK and the data requested. </p>
 *
 *          <p>If both of the <code>If-None-Match</code> and <code>If-Modified-Since</code> headers are
 *          present in the request as follows:<code> If-None-Match</code> condition evaluates to
 *             <code>false</code>, and; <code>If-Modified-Since</code> condition evaluates to
 *             <code>true</code>; then, S3 returns 304 Not Modified response code.</p>
 *
 *          <p>For more information about conditional requests, see <a href="https://tools.ietf.org/html/rfc7232">RFC 7232</a>.</p>
 *
 *          <p>The following operations are related to <code>GetObject</code>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html">ListBuckets</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObjectAcl.html">GetObjectAcl</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var GetObjectCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(GetObjectCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function GetObjectCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ GetObjectCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "GetObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.GetObjectRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.GetObjectOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    GetObjectCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlGetObjectCommand)(input, context);
    };
    GetObjectCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlGetObjectCommand)(output, context);
    };
    return GetObjectCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-ssec":"hHcQK","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6EC31":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListObjectsCommand", ()=>ListObjectsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Returns some or all (up to 1,000) of the objects in a bucket. You can use the request
 *          parameters as selection criteria to return a subset of the objects in a bucket. A 200 OK
 *          response can contain valid or invalid XML. Be sure to design your application to parse the
 *          contents of the response and handle it appropriately.</p>
 *          <important>
 *             <p>This API has been revised. We recommend that you use the newer version, <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html">ListObjectsV2</a>, when developing applications. For backward compatibility,
 *             Amazon S3 continues to support <code>ListObjects</code>.</p>
 *          </important>
 *
 *
 *          <p>The following operations are related to <code>ListObjects</code>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html">ListObjectsV2</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html">ListBuckets</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var ListObjectsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(ListObjectsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function ListObjectsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ ListObjectsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListObjectsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.ListObjectsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.ListObjectsOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListObjectsCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlListObjectsCommand)(input, context);
    };
    ListObjectsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlListObjectsCommand)(output, context);
    };
    return ListObjectsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fYZVF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListObjectsV2Command", ()=>ListObjectsV2Command);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Returns some or all (up to 1,000) of the objects in a bucket. You can use the request
 *          parameters as selection criteria to return a subset of the objects in a bucket. A <code>200
 *             OK</code> response can contain valid or invalid XML. Make sure to design your
 *          application to parse the contents of the response and handle it appropriately.</p>
 *
 *          <p>To use this operation, you must have READ access to the bucket.</p>
 *
 *          <p>To use this operation in an AWS Identity and Access Management (IAM) policy, you must
 *          have permissions to perform the <code>s3:ListBucket</code> action. The bucket owner has
 *          this permission by default and can grant this permission to others. For more information
 *          about permissions, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/using-with-s3-actions.html#using-with-s3-actions-related-to-bucket-subresources">Permissions Related to Bucket Subresource Operations</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-access-control.html">Managing Access Permissions to Your Amazon S3
 *             Resources</a>.</p>
 *          <important>
 *             <p>This section describes the latest revision of the API. We recommend that you use this
 *             revised API for application development. For backward compatibility, Amazon S3 continues to
 *             support the prior version of this API, <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjects.html">ListObjects</a>.</p>
 *          </important>
 *
 *          <p>To get a list of your buckets, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListBuckets.html">ListBuckets</a>.</p>
 *
 *          <p>The following operations are related to <code>ListObjectsV2</code>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetObject.html">GetObject</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_PutObject.html">PutObject</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateBucket.html">CreateBucket</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var ListObjectsV2Command = /** @class */ function(_super) {
    (0, _tslib.__extends)(ListObjectsV2Command, _super);
    // Start section: command_properties
    // End section: command_properties
    function ListObjectsV2Command(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ ListObjectsV2Command.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListObjectsV2Command";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.ListObjectsV2Request).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.ListObjectsV2Output).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListObjectsV2Command.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlListObjectsV2Command)(input, context);
    };
    ListObjectsV2Command.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlListObjectsV2Command)(output, context);
    };
    return ListObjectsV2Command;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7kGlR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListPartsCommand", ()=>ListPartsCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Lists the parts that have been uploaded for a specific multipart upload. This operation
 *          must include the upload ID, which you obtain by sending the initiate multipart upload
 *          request (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>).
 *          This request returns a maximum of 1,000 uploaded parts. The default number of parts
 *          returned is 1,000 parts. You can restrict the number of parts returned by specifying the
 *             <code>max-parts</code> request parameter. If your multipart upload consists of more than
 *          1,000 parts, the response returns an <code>IsTruncated</code> field with the value of true,
 *          and a <code>NextPartNumberMarker</code> element. In subsequent <code>ListParts</code>
 *          requests you can include the part-number-marker query string parameter and set its value to
 *          the <code>NextPartNumberMarker</code> field value from the previous response.</p>
 *
 *          <p>For more information on multipart uploads, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/uploadobjusingmpu.html">Uploading Objects Using Multipart
 *             Upload</a>.</p>
 *
 *          <p>For information on permissions required to use the multipart upload API, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
 *          Permissions</a>.</p>
 *
 *          <p>The following operations are related to <code>ListParts</code>:</p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPart.html">UploadPart</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var ListPartsCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(ListPartsCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function ListPartsCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ ListPartsCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "ListPartsCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.ListPartsRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.ListPartsOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    ListPartsCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlListPartsCommand)(input, context);
    };
    ListPartsCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlListPartsCommand)(output, context);
    };
    return ListPartsCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1oKpM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutObjectCommand", ()=>PutObjectCommand);
var _tslib = require("tslib");
var _models0 = require("../models/models_0");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Adds an object to a bucket. You must have WRITE permissions on a bucket to add an object
 *          to it.</p>
 *
 *
 *          <p>Amazon S3 never adds partial objects; if you receive a success response, Amazon S3 added the
 *          entire object to the bucket.</p>
 *
 *          <p>Amazon S3 is a distributed system. If it receives multiple write requests for the same object
 *          simultaneously, it overwrites all but the last object written. Amazon S3 does not provide object
 *          locking; if you need this, make sure to build it into your application layer or use
 *          versioning instead.</p>
 *
 *          <p>To ensure that data is not corrupted traversing the network, use the
 *             <code>Content-MD5</code> header. When you use this header, Amazon S3 checks the object
 *          against the provided MD5 value and, if they do not match, returns an error. Additionally,
 *          you can calculate the MD5 while putting an object to Amazon S3 and compare the returned ETag to
 *          the calculated MD5 value.</p>
 *          <note>
 *             <p> The <code>Content-MD5</code> header is required for any request to upload an object
 *             with a retention period configured using Amazon S3 Object Lock. For more information about
 *             Amazon S3 Object Lock, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/object-lock-overview.html">Amazon S3 Object Lock Overview</a>
 *             in the <i>Amazon Simple Storage Service Developer Guide</i>. </p>
 *          </note>
 *
 *
 *          <p>
 *             <b>Server-side Encryption</b>
 *          </p>
 *          <p>You can optionally request server-side encryption. With server-side encryption, Amazon S3 encrypts your data as it writes it to disks in its data centers and decrypts the data
 *          when you access it. You have the option to provide your own encryption key or use AWS
 *          managed encryption keys (SSE-S3 or SSE-KMS). For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html">Using Server-Side
 *             Encryption</a>.</p>
 *          <p>If you request server-side encryption using AWS Key Management Service (SSE-KMS), you can enable an S3 Bucket Key at the object-level. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-key.html">Amazon S3 Bucket Keys</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
 *          <p>
 *             <b>Access Control List (ACL)-Specific Request
 *          Headers</b>
 *          </p>
 *          <p>You can use headers to grant ACL- based permissions. By default, all objects are
 *          private. Only the owner has full access control. When adding a new object, you can grant
 *          permissions to individual AWS accounts or to predefined groups defined by Amazon S3. These
 *          permissions are then added to the ACL on the object. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-overview.html">Access Control List
 *             (ACL) Overview</a> and <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/acl-using-rest-api.html">Managing ACLs Using the REST
 *             API</a>. </p>
 *
 *          <p>
 *             <b>Storage Class Options</b>
 *          </p>
 *          <p>By default, Amazon S3 uses the STANDARD Storage Class to store newly created objects. The
 *          STANDARD storage class provides high durability and high availability. Depending on
 *          performance needs, you can specify a different Storage Class. Amazon S3 on Outposts only uses
 *          the OUTPOSTS Storage Class. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/storage-class-intro.html">Storage Classes</a> in the <i>Amazon S3
 *             Service Developer Guide</i>.</p>
 *
 *
 *          <p>
 *             <b>Versioning</b>
 *          </p>
 *          <p>If you enable versioning for a bucket, Amazon S3 automatically generates a unique version ID
 *          for the object being stored. Amazon S3 returns this ID in the response. When you enable
 *          versioning for a bucket, if Amazon S3 receives multiple write requests for the same object
 *          simultaneously, it stores all of the objects.</p>
 *          <p>For more information about versioning, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/AddingObjectstoVersioningEnabledBuckets.html">Adding Objects to
 *             Versioning Enabled Buckets</a>. For information about returning the versioning state
 *          of a bucket, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_GetBucketVersioning.html">GetBucketVersioning</a>. </p>
 *
 *
 *          <p class="title">
 *             <b>Related Resources</b>
 *          </p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CopyObject.html">CopyObject</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_DeleteObject.html">DeleteObject</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var PutObjectCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(PutObjectCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function PutObjectCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ PutObjectCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "PutObjectCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models0.PutObjectRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models0.PutObjectOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    PutObjectCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlPutObjectCommand)(input, context);
    };
    PutObjectCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlPutObjectCommand)(output, context);
    };
    return PutObjectCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_0":"e3TsS","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-ssec":"hHcQK","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqTC6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UploadPartCommand", ()=>UploadPartCommand);
var _tslib = require("tslib");
var _models1 = require("../models/models_1");
var _awsRestXml = require("../protocols/Aws_restXml");
var _middlewareBucketEndpoint = require("@aws-sdk/middleware-bucket-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSsec = require("@aws-sdk/middleware-ssec");
var _smithyClient = require("@aws-sdk/smithy-client");
/**
 * <p>Uploads a part in a multipart upload.</p>
 *          <note>
 *             <p>In this operation, you provide part data in your request. However, you have an option
 *             to specify your existing Amazon S3 object as a data source for the part you are uploading. To
 *             upload a part from an existing object, you use the <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_UploadPartCopy.html">UploadPartCopy</a> operation.
 *          </p>
 *          </note>
 *
 *          <p>You must initiate a multipart upload (see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>)
 *          before you can upload any part. In response to your initiate request, Amazon S3 returns an
 *          upload ID, a unique identifier, that you must include in your upload part request.</p>
 *          <p>Part numbers can be any number from 1 to 10,000, inclusive. A part number uniquely
 *          identifies a part and also defines its position within the object being created. If you
 *          upload a new part using the same part number that was used with a previous part, the
 *          previously uploaded part is overwritten. Each part must be at least 5 MB in size, except
 *          the last part. There is no size limit on the last part of your multipart upload.</p>
 *          <p>To ensure that data is not corrupted when traversing the network, specify the
 *             <code>Content-MD5</code> header in the upload part request. Amazon S3 checks the part data
 *          against the provided MD5 value. If they do not match, Amazon S3 returns an error. </p>
 *
 *          <p>If the upload request is signed with Signature Version 4, then AWS S3 uses the
 *             <code>x-amz-content-sha256</code> header as a checksum instead of
 *             <code>Content-MD5</code>. For more information see <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-auth-using-authorization-header.html">Authenticating Requests: Using the Authorization Header (AWS Signature Version
 *             4)</a>. </p>
 *
 *
 *
 *          <p>
 *             <b>Note:</b> After you initiate multipart upload and upload
 *          one or more parts, you must either complete or abort multipart upload in order to stop
 *          getting charged for storage of the uploaded parts. Only after you either complete or abort
 *          multipart upload, Amazon S3 frees up the parts storage and stops charging you for the parts
 *          storage.</p>
 *
 *          <p>For more information on multipart uploads, go to <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuoverview.html">Multipart Upload Overview</a> in the
 *             <i>Amazon Simple Storage Service Developer Guide </i>.</p>
 *          <p>For information on the permissions required to use the multipart upload API, go to
 *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/mpuAndPermissions.html">Multipart Upload API and
 *             Permissions</a> in the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
 *
 *          <p>You can optionally request server-side encryption where Amazon S3 encrypts your data as it
 *          writes it to disks in its data centers and decrypts it for you when you access it. You have
 *          the option of providing your own encryption key, or you can use the AWS managed encryption
 *          keys. If you choose to provide your own encryption key, the request headers you provide in
 *          the request must match the headers you used in the request to initiate the upload by using
 *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>. For more information, go to <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html">Using Server-Side Encryption</a> in
 *          the <i>Amazon Simple Storage Service Developer Guide</i>.</p>
 *
 *          <p>Server-side encryption is supported by the S3 Multipart Upload actions. Unless you are
 *          using a customer-provided encryption key, you don't need to specify the encryption
 *          parameters in each UploadPart request. Instead, you only need to specify the server-side
 *          encryption parameters in the initial Initiate Multipart request. For more information, see
 *             <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>.</p>
 *
 *          <p>If you requested server-side encryption using a customer-provided encryption key in your
 *          initiate multipart upload request, you must provide identical encryption information in
 *          each part upload using the following headers.</p>
 *
 *
 *          <ul>
 *             <li>
 *                <p>x-amz-server-side-encryption-customer-algorithm</p>
 *             </li>
 *             <li>
 *                <p>x-amz-server-side-encryption-customer-key</p>
 *             </li>
 *             <li>
 *                <p>x-amz-server-side-encryption-customer-key-MD5</p>
 *             </li>
 *          </ul>
 *
 *          <p class="title">
 *             <b>Special Errors</b>
 *          </p>
 *          <ul>
 *             <li>
 *                <ul>
 *                   <li>
 *                      <p>
 *                         <i>Code: NoSuchUpload</i>
 *                      </p>
 *                   </li>
 *                   <li>
 *                      <p>
 *                         <i>Cause: The specified multipart upload does not exist. The upload
 *                         ID might be invalid, or the multipart upload might have been aborted or
 *                         completed.</i>
 *                      </p>
 *                   </li>
 *                   <li>
 *                      <p>
 *                         <i> HTTP Status Code: 404 Not Found </i>
 *                      </p>
 *                   </li>
 *                   <li>
 *                      <p>
 *                         <i>SOAP Fault Code Prefix: Client</i>
 *                      </p>
 *                   </li>
 *                </ul>
 *             </li>
 *          </ul>
 *
 *
 *
 *
 *
 *
 *          <p class="title">
 *             <b>Related Resources</b>
 *          </p>
 *          <ul>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CreateMultipartUpload.html">CreateMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_CompleteMultipartUpload.html">CompleteMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_AbortMultipartUpload.html">AbortMultipartUpload</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListParts.html">ListParts</a>
 *                </p>
 *             </li>
 *             <li>
 *                <p>
 *                   <a href="https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListMultipartUploads.html">ListMultipartUploads</a>
 *                </p>
 *             </li>
 *          </ul>
 */ var UploadPartCommand = /** @class */ function(_super) {
    (0, _tslib.__extends)(UploadPartCommand, _super);
    // Start section: command_properties
    // End section: command_properties
    function UploadPartCommand(input) {
        var _this = // Start section: command_constructor
        _super.call(this) || this;
        _this.input = input;
        return _this;
    // End section: command_constructor
    }
    /**
     * @internal
     */ UploadPartCommand.prototype.resolveMiddleware = function(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareSsec.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, _middlewareBucketEndpoint.getBucketEndpointPlugin)(configuration));
        var stack = clientStack.concat(this.middlewareStack);
        var logger = configuration.logger;
        var clientName = "S3Client";
        var commandName = "UploadPartCommand";
        var handlerExecutionContext = {
            logger: logger,
            clientName: clientName,
            commandName: commandName,
            inputFilterSensitiveLog: (0, _models1.UploadPartRequest).filterSensitiveLog,
            outputFilterSensitiveLog: (0, _models1.UploadPartOutput).filterSensitiveLog
        };
        var requestHandler = configuration.requestHandler;
        return stack.resolve(function(request) {
            return requestHandler.handle(request.request, options || {});
        }, handlerExecutionContext);
    };
    UploadPartCommand.prototype.serialize = function(input, context) {
        return (0, _awsRestXml.serializeAws_restXmlUploadPartCommand)(input, context);
    };
    UploadPartCommand.prototype.deserialize = function(output, context) {
        return (0, _awsRestXml.deserializeAws_restXmlUploadPartCommand)(output, context);
    };
    return UploadPartCommand;
}((0, _smithyClient.Command));

},{"tslib":"lRdW5","../models/models_1":"aEsMY","../protocols/Aws_restXml":"2E22Z","@aws-sdk/middleware-bucket-endpoint":"3KDXC","@aws-sdk/middleware-serde":"dE6sE","@aws-sdk/middleware-ssec":"hHcQK","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aEsMY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MetadataEntry", ()=>MetadataEntry);
parcelHelpers.export(exports, "S3Location", ()=>S3Location);
parcelHelpers.export(exports, "OutputLocation", ()=>OutputLocation);
parcelHelpers.export(exports, "FileHeaderInfo", ()=>FileHeaderInfo);
parcelHelpers.export(exports, "CSVInput", ()=>CSVInput);
parcelHelpers.export(exports, "JSONType", ()=>JSONType);
parcelHelpers.export(exports, "JSONInput", ()=>JSONInput);
parcelHelpers.export(exports, "ParquetInput", ()=>ParquetInput);
parcelHelpers.export(exports, "InputSerialization", ()=>InputSerialization);
parcelHelpers.export(exports, "QuoteFields", ()=>QuoteFields);
parcelHelpers.export(exports, "CSVOutput", ()=>CSVOutput);
parcelHelpers.export(exports, "JSONOutput", ()=>JSONOutput);
parcelHelpers.export(exports, "OutputSerialization", ()=>OutputSerialization);
parcelHelpers.export(exports, "SelectParameters", ()=>SelectParameters);
parcelHelpers.export(exports, "RestoreRequestType", ()=>RestoreRequestType);
parcelHelpers.export(exports, "RestoreRequest", ()=>RestoreRequest);
parcelHelpers.export(exports, "RestoreObjectRequest", ()=>RestoreObjectRequest);
parcelHelpers.export(exports, "ContinuationEvent", ()=>ContinuationEvent);
parcelHelpers.export(exports, "EndEvent", ()=>EndEvent);
parcelHelpers.export(exports, "Progress", ()=>Progress);
parcelHelpers.export(exports, "ProgressEvent", ()=>ProgressEvent);
parcelHelpers.export(exports, "RecordsEvent", ()=>RecordsEvent);
parcelHelpers.export(exports, "Stats", ()=>Stats);
parcelHelpers.export(exports, "StatsEvent", ()=>StatsEvent);
parcelHelpers.export(exports, "SelectObjectContentEventStream", ()=>SelectObjectContentEventStream);
parcelHelpers.export(exports, "SelectObjectContentOutput", ()=>SelectObjectContentOutput);
parcelHelpers.export(exports, "RequestProgress", ()=>RequestProgress);
parcelHelpers.export(exports, "ScanRange", ()=>ScanRange);
parcelHelpers.export(exports, "SelectObjectContentRequest", ()=>SelectObjectContentRequest);
parcelHelpers.export(exports, "UploadPartOutput", ()=>UploadPartOutput);
parcelHelpers.export(exports, "UploadPartRequest", ()=>UploadPartRequest);
parcelHelpers.export(exports, "CopyPartResult", ()=>CopyPartResult);
parcelHelpers.export(exports, "UploadPartCopyOutput", ()=>UploadPartCopyOutput);
parcelHelpers.export(exports, "UploadPartCopyRequest", ()=>UploadPartCopyRequest);
var _tslib = require("tslib");
var _models0 = require("./models_0");
var _smithyClient = require("@aws-sdk/smithy-client");
var MetadataEntry;
(function(MetadataEntry) {
    MetadataEntry.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(MetadataEntry || (MetadataEntry = {}));
var S3Location;
(function(S3Location) {
    S3Location.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Encryption && {
            Encryption: (0, _models0.Encryption).filterSensitiveLog(obj.Encryption)
        });
    };
})(S3Location || (S3Location = {}));
var OutputLocation;
(function(OutputLocation) {
    OutputLocation.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.S3 && {
            S3: S3Location.filterSensitiveLog(obj.S3)
        });
    };
})(OutputLocation || (OutputLocation = {}));
var FileHeaderInfo;
(function(FileHeaderInfo) {
    FileHeaderInfo["IGNORE"] = "IGNORE";
    FileHeaderInfo["NONE"] = "NONE";
    FileHeaderInfo["USE"] = "USE";
})(FileHeaderInfo || (FileHeaderInfo = {}));
var CSVInput;
(function(CSVInput) {
    CSVInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CSVInput || (CSVInput = {}));
var JSONType;
(function(JSONType) {
    JSONType["DOCUMENT"] = "DOCUMENT";
    JSONType["LINES"] = "LINES";
})(JSONType || (JSONType = {}));
var JSONInput;
(function(JSONInput) {
    JSONInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(JSONInput || (JSONInput = {}));
var ParquetInput;
(function(ParquetInput) {
    ParquetInput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ParquetInput || (ParquetInput = {}));
var InputSerialization;
(function(InputSerialization) {
    InputSerialization.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(InputSerialization || (InputSerialization = {}));
var QuoteFields;
(function(QuoteFields) {
    QuoteFields["ALWAYS"] = "ALWAYS";
    QuoteFields["ASNEEDED"] = "ASNEEDED";
})(QuoteFields || (QuoteFields = {}));
var CSVOutput;
(function(CSVOutput) {
    CSVOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CSVOutput || (CSVOutput = {}));
var JSONOutput;
(function(JSONOutput) {
    JSONOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(JSONOutput || (JSONOutput = {}));
var OutputSerialization;
(function(OutputSerialization) {
    OutputSerialization.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(OutputSerialization || (OutputSerialization = {}));
var SelectParameters;
(function(SelectParameters) {
    SelectParameters.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(SelectParameters || (SelectParameters = {}));
var RestoreRequestType;
(function(RestoreRequestType) {
    RestoreRequestType["SELECT"] = "SELECT";
})(RestoreRequestType || (RestoreRequestType = {}));
var RestoreRequest;
(function(RestoreRequest) {
    RestoreRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.OutputLocation && {
            OutputLocation: OutputLocation.filterSensitiveLog(obj.OutputLocation)
        });
    };
})(RestoreRequest || (RestoreRequest = {}));
var RestoreObjectRequest;
(function(RestoreObjectRequest) {
    RestoreObjectRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.RestoreRequest && {
            RestoreRequest: RestoreRequest.filterSensitiveLog(obj.RestoreRequest)
        });
    };
})(RestoreObjectRequest || (RestoreObjectRequest = {}));
var ContinuationEvent;
(function(ContinuationEvent) {
    ContinuationEvent.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ContinuationEvent || (ContinuationEvent = {}));
var EndEvent;
(function(EndEvent) {
    EndEvent.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(EndEvent || (EndEvent = {}));
var Progress;
(function(Progress) {
    Progress.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Progress || (Progress = {}));
var ProgressEvent;
(function(ProgressEvent) {
    ProgressEvent.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ProgressEvent || (ProgressEvent = {}));
var RecordsEvent;
(function(RecordsEvent) {
    RecordsEvent.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RecordsEvent || (RecordsEvent = {}));
var Stats;
(function(Stats) {
    Stats.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(Stats || (Stats = {}));
var StatsEvent;
(function(StatsEvent) {
    StatsEvent.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(StatsEvent || (StatsEvent = {}));
var SelectObjectContentEventStream;
(function(SelectObjectContentEventStream) {
    SelectObjectContentEventStream.visit = function(value, visitor) {
        if (value.Records !== undefined) return visitor.Records(value.Records);
        if (value.Stats !== undefined) return visitor.Stats(value.Stats);
        if (value.Progress !== undefined) return visitor.Progress(value.Progress);
        if (value.Cont !== undefined) return visitor.Cont(value.Cont);
        if (value.End !== undefined) return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
    SelectObjectContentEventStream.filterSensitiveLog = function(obj) {
        var _a;
        if (obj.Records !== undefined) return {
            Records: RecordsEvent.filterSensitiveLog(obj.Records)
        };
        if (obj.Stats !== undefined) return {
            Stats: StatsEvent.filterSensitiveLog(obj.Stats)
        };
        if (obj.Progress !== undefined) return {
            Progress: ProgressEvent.filterSensitiveLog(obj.Progress)
        };
        if (obj.Cont !== undefined) return {
            Cont: ContinuationEvent.filterSensitiveLog(obj.Cont)
        };
        if (obj.End !== undefined) return {
            End: EndEvent.filterSensitiveLog(obj.End)
        };
        if (obj.$unknown !== undefined) return _a = {}, _a[obj.$unknown[0]] = "UNKNOWN", _a;
    };
})(SelectObjectContentEventStream || (SelectObjectContentEventStream = {}));
var SelectObjectContentOutput;
(function(SelectObjectContentOutput) {
    SelectObjectContentOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.Payload && {
            Payload: "STREAMING_CONTENT"
        });
    };
})(SelectObjectContentOutput || (SelectObjectContentOutput = {}));
var RequestProgress;
(function(RequestProgress) {
    RequestProgress.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(RequestProgress || (RequestProgress = {}));
var ScanRange;
(function(ScanRange) {
    ScanRange.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(ScanRange || (ScanRange = {}));
var SelectObjectContentRequest;
(function(SelectObjectContentRequest) {
    SelectObjectContentRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(SelectObjectContentRequest || (SelectObjectContentRequest = {}));
var UploadPartOutput;
(function(UploadPartOutput) {
    UploadPartOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(UploadPartOutput || (UploadPartOutput = {}));
var UploadPartRequest;
(function(UploadPartRequest) {
    UploadPartRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(UploadPartRequest || (UploadPartRequest = {}));
var CopyPartResult;
(function(CopyPartResult) {
    CopyPartResult.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)({}, obj);
    };
})(CopyPartResult || (CopyPartResult = {}));
var UploadPartCopyOutput;
(function(UploadPartCopyOutput) {
    UploadPartCopyOutput.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSEKMSKeyId && {
            SSEKMSKeyId: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(UploadPartCopyOutput || (UploadPartCopyOutput = {}));
var UploadPartCopyRequest;
(function(UploadPartCopyRequest) {
    UploadPartCopyRequest.filterSensitiveLog = function(obj) {
        return (0, _tslib.__assign)((0, _tslib.__assign)((0, _tslib.__assign)({}, obj), obj.SSECustomerKey && {
            SSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        }), obj.CopySourceSSECustomerKey && {
            CopySourceSSECustomerKey: (0, _smithyClient.SENSITIVE_STRING)
        });
    };
})(UploadPartCopyRequest || (UploadPartCopyRequest = {}));

},{"tslib":"lRdW5","./models_0":"e3TsS","@aws-sdk/smithy-client":"kA4IO","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dWoUW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "formatUrl", ()=>formatUrl);
var _querystringBuilder = require("@aws-sdk/querystring-builder");
function formatUrl(request) {
    var port = request.port, query = request.query;
    var protocol = request.protocol, path = request.path, hostname = request.hostname;
    if (protocol && protocol.substr(-1) !== ":") protocol += ":";
    if (port) hostname += ":" + port;
    if (path && path.charAt(0) !== "/") path = "/" + path;
    var queryString = query ? (0, _querystringBuilder.buildQueryString)(query) : "";
    if (queryString && queryString[0] !== "?") queryString = "?" + queryString;
    return protocol + "//" + hostname + path + queryString;
}

},{"@aws-sdk/querystring-builder":"2elde","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fvvQv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createRequest", ()=>createRequest);
var _tslib = require("tslib");
function createRequest(client, command) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
        var interceptMiddleware, clientStack, handler;
        var _this = this;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    interceptMiddleware = function(next) {
                        return function(args) {
                            return (0, _tslib.__awaiter)(_this, void 0, void 0, function() {
                                return (0, _tslib.__generator)(this, function(_a) {
                                    return [
                                        2 /*return*/ ,
                                        {
                                            output: {
                                                request: args.request
                                            },
                                            response: undefined
                                        }
                                    ];
                                });
                            });
                        };
                    };
                    clientStack = client.middlewareStack.clone();
                    // @ts-ignore: add middleware to the last of 'build' step
                    clientStack.add(interceptMiddleware, {
                        step: "build",
                        priority: "low"
                    });
                    handler = command.resolveMiddleware(clientStack, client.config, undefined);
                    return [
                        4 /*yield*/ ,
                        handler(command).then(function(output) {
                            return output.output.request;
                        })
                    ];
                case 1:
                    // @ts-ignore
                    return [
                        2 /*return*/ ,
                        _a.sent()
                    ];
            }
        });
    });
}

},{"tslib":"kM2wm","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kM2wm":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jryPH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _presigner = require("./presigner");
parcelHelpers.exportAll(_presigner, exports);
var _getSignedUrl = require("./getSignedUrl");
parcelHelpers.exportAll(_getSignedUrl, exports);

},{"./presigner":"fTO51","./getSignedUrl":"c3Evg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fTO51":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "S3RequestPresigner", ()=>S3RequestPresigner);
var _tslib = require("tslib");
var _signatureV4 = require("@aws-sdk/signature-v4");
var _constants = require("./constants");
var S3RequestPresigner = /** @class */ function() {
    function S3RequestPresigner(options) {
        var resolvedOptions = (0, _tslib.__assign)({
            // Allow `signingName` because we want to support usecase of supply client's resolved config
            // directly. Where service equals signingName.
            service: options.signingName || options.service || "s3",
            uriEscapePath: options.uriEscapePath || false
        }, options);
        this.signer = new (0, _signatureV4.SignatureV4)(resolvedOptions);
    }
    S3RequestPresigner.prototype.presign = function(requestToSign, _a) {
        if (_a === void 0) _a = {};
        var _b = _a.unsignableHeaders, unsignableHeaders = _b === void 0 ? new Set() : _b, _c = _a.unhoistableHeaders, unhoistableHeaders = _c === void 0 ? new Set() : _c, options = (0, _tslib.__rest)(_a, [
            "unsignableHeaders",
            "unhoistableHeaders"
        ]);
        return (0, _tslib.__awaiter)(this, void 0, void 0, function() {
            return (0, _tslib.__generator)(this, function(_d) {
                unsignableHeaders.add("content-type");
                // S3 requires SSE headers to be signed in headers instead of query
                // See: https://github.com/aws/aws-sdk-js-v3/issues/1576
                Object.keys(requestToSign.headers).map(function(header) {
                    return header.toLowerCase();
                }).filter(function(header) {
                    return header.startsWith("x-amz-server-side-encryption");
                }).forEach(function(header) {
                    unhoistableHeaders.add(header);
                });
                requestToSign.headers[0, _constants.SHA256_HEADER] = (0, _constants.UNSIGNED_PAYLOAD);
                if (!requestToSign.headers["host"]) requestToSign.headers.host = requestToSign.hostname;
                return [
                    2 /*return*/ ,
                    this.signer.presign(requestToSign, (0, _tslib.__assign)({
                        expiresIn: 900,
                        unsignableHeaders: unsignableHeaders,
                        unhoistableHeaders: unhoistableHeaders
                    }, options))
                ];
            });
        });
    };
    return S3RequestPresigner;
}();

},{"tslib":"6eMBj","@aws-sdk/signature-v4":"1wfLZ","./constants":"gDttp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6eMBj":[function(require,module,exports) {
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gDttp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UNSIGNED_PAYLOAD", ()=>UNSIGNED_PAYLOAD);
parcelHelpers.export(exports, "SHA256_HEADER", ()=>SHA256_HEADER);
parcelHelpers.export(exports, "ALGORITHM_QUERY_PARAM", ()=>ALGORITHM_QUERY_PARAM);
parcelHelpers.export(exports, "CREDENTIAL_QUERY_PARAM", ()=>CREDENTIAL_QUERY_PARAM);
parcelHelpers.export(exports, "AMZ_DATE_QUERY_PARAM", ()=>AMZ_DATE_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNED_HEADERS_QUERY_PARAM", ()=>SIGNED_HEADERS_QUERY_PARAM);
parcelHelpers.export(exports, "EXPIRES_QUERY_PARAM", ()=>EXPIRES_QUERY_PARAM);
parcelHelpers.export(exports, "HOST_HEADER", ()=>HOST_HEADER);
parcelHelpers.export(exports, "ALGORITHM_IDENTIFIER", ()=>ALGORITHM_IDENTIFIER);
var UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
var SHA256_HEADER = "X-Amz-Content-Sha256";
var ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
var CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
var AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
var SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
var EXPIRES_QUERY_PARAM = "X-Amz-Expires";
var HOST_HEADER = "host";
var ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c3Evg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSignedUrl", ()=>getSignedUrl);
var _tslib = require("tslib");
var _protocolHttp = require("@aws-sdk/protocol-http");
var _utilFormatUrl = require("@aws-sdk/util-format-url");
var _presigner = require("./presigner");
var getSignedUrl = function(client, command, options) {
    if (options === void 0) options = {};
    return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
        var s3Presigner, presignInterceptMiddleware, middlewareName, presigned, output;
        return (0, _tslib.__generator)(this, function(_a) {
            switch(_a.label){
                case 0:
                    s3Presigner = new (0, _presigner.S3RequestPresigner)((0, _tslib.__assign)({}, client.config));
                    presignInterceptMiddleware = function(next, context) {
                        return function(args) {
                            return (0, _tslib.__awaiter)(void 0, void 0, void 0, function() {
                                var request, presigned;
                                var _a, _b;
                                return (0, _tslib.__generator)(this, function(_c) {
                                    switch(_c.label){
                                        case 0:
                                            request = args.request;
                                            if (!(0, _protocolHttp.HttpRequest).isInstance(request)) throw new Error("Request to be presigned is not an valid HTTP request.");
                                            // Retry information headers are not meaningful in presigned URLs
                                            delete request.headers["amz-sdk-invocation-id"];
                                            delete request.headers["amz-sdk-request"];
                                            return [
                                                4 /*yield*/ ,
                                                s3Presigner.presign(request, (0, _tslib.__assign)((0, _tslib.__assign)({}, options), {
                                                    signingRegion: (_a = options.signingRegion) !== null && _a !== void 0 ? _a : context["signing_region"],
                                                    signingService: (_b = options.signingService) !== null && _b !== void 0 ? _b : context["signing_service"]
                                                }))
                                            ];
                                        case 1:
                                            presigned = _c.sent();
                                            return [
                                                2 /*return*/ ,
                                                {
                                                    // Intercept the middleware stack by returning fake response
                                                    response: {},
                                                    output: {
                                                        $metadata: {
                                                            httpStatusCode: 200
                                                        },
                                                        presigned: presigned
                                                    }
                                                }
                                            ];
                                    }
                                });
                            });
                        };
                    };
                    middlewareName = "presignInterceptMiddleware";
                    client.middlewareStack.addRelativeTo(presignInterceptMiddleware, {
                        name: middlewareName,
                        relation: "before",
                        toMiddleware: "awsAuthMiddleware",
                        override: true
                    });
                    _a.label = 1;
                case 1:
                    _a.trys.push([
                        1,
                        ,
                        3,
                        4
                    ]);
                    return [
                        4 /*yield*/ ,
                        client.send(command)
                    ];
                case 2:
                    output = _a.sent();
                    //@ts-ignore the output is faked, so it's not actually OutputType
                    presigned = output.presigned;
                    return [
                        3 /*break*/ ,
                        4
                    ];
                case 3:
                    client.middlewareStack.remove(middlewareName);
                    return [
                        7 /*endfinally*/ 
                    ];
                case 4:
                    return [
                        2 /*return*/ ,
                        (0, _utilFormatUrl.formatUrl)(presigned)
                    ];
            }
        });
    });
};

},{"tslib":"6eMBj","@aws-sdk/protocol-http":"dbzKK","@aws-sdk/util-format-url":"dWoUW","./presigner":"fTO51","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hL9Ok":[function(require,module,exports) {
/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SEND_UPLOAD_PROGRESS_EVENT", ()=>SEND_UPLOAD_PROGRESS_EVENT);
parcelHelpers.export(exports, "SEND_DOWNLOAD_PROGRESS_EVENT", ()=>SEND_DOWNLOAD_PROGRESS_EVENT);
parcelHelpers.export(exports, "reactNativeRequestTransformer", ()=>reactNativeRequestTransformer);
parcelHelpers.export(exports, "AxiosHttpHandler", ()=>AxiosHttpHandler);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _querystringBuilder = require("@aws-sdk/querystring-builder");
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _core = require("@aws-amplify/core");
var _storageErrorStrings = require("../common/StorageErrorStrings");
var __values = undefined && undefined.__values || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var logger = new (0, _core.ConsoleLogger)("axios-http-handler");
var SEND_UPLOAD_PROGRESS_EVENT = "sendUploadProgress";
var SEND_DOWNLOAD_PROGRESS_EVENT = "sendDownloadProgress";
function isBlob(body) {
    return typeof Blob !== "undefined" && body instanceof Blob;
}
var normalizeHeaders = function(headers, normalizedName) {
    var e_1, _a;
    try {
        for(var _b = __values(Object.entries(headers)), _c = _b.next(); !_c.done; _c = _b.next()){
            var _d = __read(_c.value, 2), k = _d[0], v = _d[1];
            if (k !== normalizedName && k.toUpperCase() === normalizedName.toUpperCase()) {
                headers[normalizedName] = v;
                delete headers[k];
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
};
var reactNativeRequestTransformer = [
    function(data, headers) {
        if (isBlob(data)) {
            normalizeHeaders(headers, "Content-Type");
            normalizeHeaders(headers, "Accept");
            return data;
        }
        // Axios' default transformRequest is an array
        return (0, _axiosDefault.default).defaults.transformRequest[0].call(null, data, headers);
    }
];
var AxiosHttpHandler = /** @class */ function() {
    function AxiosHttpHandler(httpOptions, emitter, cancelTokenSource) {
        if (httpOptions === void 0) httpOptions = {};
        this.httpOptions = httpOptions;
        this.emitter = emitter;
        this.cancelTokenSource = cancelTokenSource;
    }
    AxiosHttpHandler.prototype.destroy = function() {
    // Do nothing. TLS and HTTP/2 connection pooling is handled by the
    // browser.
    };
    AxiosHttpHandler.prototype.handle = function(request, options) {
        var requestTimeoutInMs = this.httpOptions.requestTimeout;
        // prioritize the call specific event emitter, this is useful for multipart upload as each individual parts has
        // their own event emitter, without having to create s3client for every individual calls.
        var emitter = options.emitter || this.emitter;
        var path = request.path;
        if (request.query) {
            var queryString = (0, _querystringBuilder.buildQueryString)(request.query);
            if (queryString) path += "?" + queryString;
        }
        var port = request.port;
        var url = request.protocol + "//" + request.hostname + (port ? ":" + port : "") + path;
        var axiosRequest = {};
        axiosRequest.url = url;
        axiosRequest.method = request.method;
        axiosRequest.headers = request.headers;
        // The host header is automatically added by the browser and adding it explicitly in the
        // axios request throws an error https://github.com/aws-amplify/amplify-js/issues/5376
        // This is because the host header is a forbidden header for the http client to set
        // see https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name and
        // https://fetch.spec.whatwg.org/#forbidden-header-name
        // The reason we are removing this header here instead of in the aws-sdk's client
        // middleware is that the host header is required to be in the request signature and if
        // we remove it from the middlewares, then the request fails because the header is added
        // by the browser but is absent from the signature.
        delete axiosRequest.headers["host"];
        if (request.body) axiosRequest.data = request.body;
        else // Fix for https://github.com/aws-amplify/amplify-js/issues/5432
        // If the POST request body is empty but content-type header is set, axios is forcibly removing it
        // See https://github.com/axios/axios/issues/1535 and refusing to fix it https://github.com/axios/axios/issues/755
        // This change is a workaround to set the data as null (instead of undefined) to prevent axios from
        // removing the content-type header. Link for the source code
        // https://github.com/axios/axios/blob/dc4bc49673943e35280e5df831f5c3d0347a9393/lib/adapters/xhr.js#L121-L123
        if (axiosRequest.headers[Object.keys(axiosRequest.headers).find(function(key) {
            return key.toLowerCase() === "content-type";
        })]) axiosRequest.data = null;
        if (emitter) {
            axiosRequest.onUploadProgress = function(event) {
                emitter.emit(SEND_UPLOAD_PROGRESS_EVENT, event);
                logger.debug(event);
            };
            axiosRequest.onDownloadProgress = function(event) {
                emitter.emit(SEND_DOWNLOAD_PROGRESS_EVENT, event);
                logger.debug(event);
            };
        }
        // If a cancel token source is passed down from the provider, allows cancellation of in-flight requests
        if (this.cancelTokenSource) axiosRequest.cancelToken = this.cancelTokenSource.token;
        if (options.cancelTokenSource) axiosRequest.cancelToken = options.cancelTokenSource.token;
        // From gamma release, aws-sdk now expects all response type to be of blob or streams
        axiosRequest.responseType = "blob";
        // In Axios, Blobs are identified by calling Object.prototype.toString on the object. However, on React Native,
        // calling Object.prototype.toString on a Blob returns '[object Object]' instead of '[object Blob]', which causes
        // Axios to treat Blobs as generic Javascript objects. Therefore we need a to use a custom request transformer
        // to correctly handle Blob in React Native.
        if ((0, _core.Platform).isReactNative) axiosRequest.transformRequest = reactNativeRequestTransformer;
        var raceOfPromises = [
            (0, _axiosDefault.default).request(axiosRequest).then(function(response) {
                return {
                    response: new (0, _protocolHttp.HttpResponse)({
                        headers: response.headers,
                        statusCode: response.status,
                        body: response.data
                    })
                };
            }).catch(function(error) {
                var _a, _b, _c;
                // Error
                if (error.message !== (0, _storageErrorStrings.AWSS3ProviderUploadErrorStrings).UPLOAD_PAUSED_MESSAGE) logger.error(error.message);
                // for axios' cancel error, we should re-throw it back so it's not considered an s3client error
                // if we return empty, or an abitrary error HttpResponse, it will be hard to debug down the line
                if ((0, _axiosDefault.default).isCancel(error)) throw error;
                // otherwise, we should re-construct an HttpResponse from the error, so that it can be passed down to other
                // aws sdk middleware (e.g retry, clock skew correction, error message serializing)
                return {
                    response: new (0, _protocolHttp.HttpResponse)({
                        statusCode: (_a = error.response) === null || _a === void 0 ? void 0 : _a.status,
                        body: (_b = error.response) === null || _b === void 0 ? void 0 : _b.data,
                        headers: (_c = error.response) === null || _c === void 0 ? void 0 : _c.headers
                    })
                };
            }),
            requestTimeout(requestTimeoutInMs)
        ];
        return Promise.race(raceOfPromises);
    };
    return AxiosHttpHandler;
}();
function requestTimeout(timeoutInMs) {
    if (timeoutInMs === void 0) timeoutInMs = 0;
    return new Promise(function(resolve, reject) {
        if (timeoutInMs) setTimeout(function() {
            var timeoutError = new Error("Request did not complete within " + timeoutInMs + " ms");
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
        }, timeoutInMs);
    });
}

},{"@aws-sdk/protocol-http":"dbzKK","@aws-sdk/querystring-builder":"2elde","axios":"jo6P5","@aws-amplify/core":"hZcAF","../common/StorageErrorStrings":"3IP7f","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jo6P5":[function(require,module,exports) {
module.exports = require("9f37cef8b0e13afc");

},{"9f37cef8b0e13afc":"63MyY"}],"63MyY":[function(require,module,exports) {
"use strict";
var utils = require("1137fef34918bf53");
var bind = require("ce63a8247a300202");
var Axios = require("c14c66f4c3ec48a2");
var mergeConfig = require("345f9ec0ee8efc80");
var defaults = require("27bdb15d131780c5");
/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 * @return {Axios} A new instance of Axios
 */ function createInstance(defaultConfig) {
    var context = new Axios(defaultConfig);
    var instance = bind(Axios.prototype.request, context);
    // Copy axios.prototype to instance
    utils.extend(instance, Axios.prototype, context);
    // Copy context to instance
    utils.extend(instance, context);
    return instance;
}
// Create the default instance to be exported
var axios = createInstance(defaults);
// Expose Axios class to allow class inheritance
axios.Axios = Axios;
// Factory for creating new instances
axios.create = function create(instanceConfig) {
    return createInstance(mergeConfig(axios.defaults, instanceConfig));
};
// Expose Cancel & CancelToken
axios.Cancel = require("ae1da7645e57ebca");
axios.CancelToken = require("853fec7db7d524b4");
axios.isCancel = require("322a636c3e2325e1");
// Expose all/spread
axios.all = function all(promises) {
    return Promise.all(promises);
};
axios.spread = require("75c7c70e55d88256");
// Expose isAxiosError
axios.isAxiosError = require("543a1da09311ae9b");
module.exports = axios;
// Allow use of default import syntax in TypeScript
module.exports.default = axios;

},{"1137fef34918bf53":"5By4s","ce63a8247a300202":"haRQb","c14c66f4c3ec48a2":"cpqD8","345f9ec0ee8efc80":"b85oP","27bdb15d131780c5":"lTJJ4","ae1da7645e57ebca":"kjMy2","853fec7db7d524b4":"45wzn","322a636c3e2325e1":"a0VmF","75c7c70e55d88256":"dyQ8N","543a1da09311ae9b":"eyiLq"}],"5By4s":[function(require,module,exports) {
"use strict";
var bind = require("a7c7b4094caa86ac");
// utils is a library of generic helper functions non-specific to axios
var toString = Object.prototype.toString;
/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Array, otherwise false
 */ function isArray(val) {
    return toString.call(val) === "[object Array]";
}
/**
 * Determine if a value is undefined
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if the value is undefined, otherwise false
 */ function isUndefined(val) {
    return typeof val === "undefined";
}
/**
 * Determine if a value is a Buffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Buffer, otherwise false
 */ function isBuffer(val) {
    return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === "function" && val.constructor.isBuffer(val);
}
/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */ function isArrayBuffer(val) {
    return toString.call(val) === "[object ArrayBuffer]";
}
/**
 * Determine if a value is a FormData
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an FormData, otherwise false
 */ function isFormData(val) {
    return typeof FormData !== "undefined" && val instanceof FormData;
}
/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */ function isArrayBufferView(val) {
    var result;
    if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) result = ArrayBuffer.isView(val);
    else result = val && val.buffer && val.buffer instanceof ArrayBuffer;
    return result;
}
/**
 * Determine if a value is a String
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a String, otherwise false
 */ function isString(val) {
    return typeof val === "string";
}
/**
 * Determine if a value is a Number
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Number, otherwise false
 */ function isNumber(val) {
    return typeof val === "number";
}
/**
 * Determine if a value is an Object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is an Object, otherwise false
 */ function isObject(val) {
    return val !== null && typeof val === "object";
}
/**
 * Determine if a value is a plain Object
 *
 * @param {Object} val The value to test
 * @return {boolean} True if value is a plain Object, otherwise false
 */ function isPlainObject(val) {
    if (toString.call(val) !== "[object Object]") return false;
    var prototype = Object.getPrototypeOf(val);
    return prototype === null || prototype === Object.prototype;
}
/**
 * Determine if a value is a Date
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Date, otherwise false
 */ function isDate(val) {
    return toString.call(val) === "[object Date]";
}
/**
 * Determine if a value is a File
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a File, otherwise false
 */ function isFile(val) {
    return toString.call(val) === "[object File]";
}
/**
 * Determine if a value is a Blob
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Blob, otherwise false
 */ function isBlob(val) {
    return toString.call(val) === "[object Blob]";
}
/**
 * Determine if a value is a Function
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */ function isFunction(val) {
    return toString.call(val) === "[object Function]";
}
/**
 * Determine if a value is a Stream
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a Stream, otherwise false
 */ function isStream(val) {
    return isObject(val) && isFunction(val.pipe);
}
/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {Object} val The value to test
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */ function isURLSearchParams(val) {
    return typeof URLSearchParams !== "undefined" && val instanceof URLSearchParams;
}
/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 * @returns {String} The String freed of excess whitespace
 */ function trim(str) {
    return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, "");
}
/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 */ function isStandardBrowserEnv() {
    if (typeof navigator !== "undefined" && (navigator.product === "ReactNative" || navigator.product === "NativeScript" || navigator.product === "NS")) return false;
    return typeof window !== "undefined" && typeof document !== "undefined";
}
/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 */ function forEach(obj, fn) {
    // Don't bother if no value provided
    if (obj === null || typeof obj === "undefined") return;
    // Force an array if not already something iterable
    if (typeof obj !== "object") /*eslint no-param-reassign:0*/ obj = [
        obj
    ];
    if (isArray(obj)) // Iterate over array values
    for(var i = 0, l = obj.length; i < l; i++)fn.call(null, obj[i], i, obj);
    else {
        // Iterate over object keys
        for(var key in obj)if (Object.prototype.hasOwnProperty.call(obj, key)) fn.call(null, obj[key], key, obj);
    }
}
/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 * @returns {Object} Result of all merge properties
 */ function merge() {
    var result = {};
    function assignValue(val, key) {
        if (isPlainObject(result[key]) && isPlainObject(val)) result[key] = merge(result[key], val);
        else if (isPlainObject(val)) result[key] = merge({}, val);
        else if (isArray(val)) result[key] = val.slice();
        else result[key] = val;
    }
    for(var i = 0, l = arguments.length; i < l; i++)forEach(arguments[i], assignValue);
    return result;
}
/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 * @return {Object} The resulting value of object a
 */ function extend(a, b, thisArg) {
    forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === "function") a[key] = bind(val, thisArg);
        else a[key] = val;
    });
    return a;
}
/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 * @return {string} content value without BOM
 */ function stripBOM(content) {
    if (content.charCodeAt(0) === 0xFEFF) content = content.slice(1);
    return content;
}
module.exports = {
    isArray: isArray,
    isArrayBuffer: isArrayBuffer,
    isBuffer: isBuffer,
    isFormData: isFormData,
    isArrayBufferView: isArrayBufferView,
    isString: isString,
    isNumber: isNumber,
    isObject: isObject,
    isPlainObject: isPlainObject,
    isUndefined: isUndefined,
    isDate: isDate,
    isFile: isFile,
    isBlob: isBlob,
    isFunction: isFunction,
    isStream: isStream,
    isURLSearchParams: isURLSearchParams,
    isStandardBrowserEnv: isStandardBrowserEnv,
    forEach: forEach,
    merge: merge,
    extend: extend,
    trim: trim,
    stripBOM: stripBOM
};

},{"a7c7b4094caa86ac":"haRQb"}],"haRQb":[function(require,module,exports) {
"use strict";
module.exports = function bind(fn, thisArg) {
    return function wrap() {
        var args = new Array(arguments.length);
        for(var i = 0; i < args.length; i++)args[i] = arguments[i];
        return fn.apply(thisArg, args);
    };
};

},{}],"cpqD8":[function(require,module,exports) {
"use strict";
var utils = require("2cd2d0baba832579");
var buildURL = require("945ebba9256ed84f");
var InterceptorManager = require("fc2d71ae77ba798e");
var dispatchRequest = require("77b4f57f4d663a9b");
var mergeConfig = require("5db81a4f62f8927d");
var validator = require("d0f5147a00cee7c5");
var validators = validator.validators;
/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 */ function Axios(instanceConfig) {
    this.defaults = instanceConfig;
    this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
    };
}
/**
 * Dispatch a request
 *
 * @param {Object} config The config specific for this request (merged with this.defaults)
 */ Axios.prototype.request = function request(config) {
    /*eslint no-param-reassign:0*/ // Allow for axios('example/url'[, config]) a la fetch API
    if (typeof config === "string") {
        config = arguments[1] || {};
        config.url = arguments[0];
    } else config = config || {};
    config = mergeConfig(this.defaults, config);
    // Set config.method
    if (config.method) config.method = config.method.toLowerCase();
    else if (this.defaults.method) config.method = this.defaults.method.toLowerCase();
    else config.method = "get";
    var transitional = config.transitional;
    if (transitional !== undefined) validator.assertOptions(transitional, {
        silentJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
        forcedJSONParsing: validators.transitional(validators.boolean, "1.0.0"),
        clarifyTimeoutError: validators.transitional(validators.boolean, "1.0.0")
    }, false);
    // filter out skipped interceptors
    var requestInterceptorChain = [];
    var synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) return;
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    var responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    var promise;
    if (!synchronousRequestInterceptors) {
        var chain = [
            dispatchRequest,
            undefined
        ];
        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);
        promise = Promise.resolve(config);
        while(chain.length)promise = promise.then(chain.shift(), chain.shift());
        return promise;
    }
    var newConfig = config;
    while(requestInterceptorChain.length){
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
            newConfig = onFulfilled(newConfig);
        } catch (error) {
            onRejected(error);
            break;
        }
    }
    try {
        promise = dispatchRequest(newConfig);
    } catch (error) {
        return Promise.reject(error);
    }
    while(responseInterceptorChain.length)promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
    return promise;
};
Axios.prototype.getUri = function getUri(config) {
    config = mergeConfig(this.defaults, config);
    return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, "");
};
// Provide aliases for supported request methods
utils.forEach([
    "delete",
    "get",
    "head",
    "options"
], function forEachMethodNoData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
            method: method,
            url: url,
            data: (config || {}).data
        }));
    };
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    /*eslint func-names:0*/ Axios.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig(config || {}, {
            method: method,
            url: url,
            data: data
        }));
    };
});
module.exports = Axios;

},{"2cd2d0baba832579":"5By4s","945ebba9256ed84f":"3bwC2","fc2d71ae77ba798e":"1VRIM","77b4f57f4d663a9b":"6sjJ6","5db81a4f62f8927d":"b85oP","d0f5147a00cee7c5":"9vgkY"}],"3bwC2":[function(require,module,exports) {
"use strict";
var utils = require("d198994ea2a45305");
function encode(val) {
    return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @returns {string} The formatted url
 */ module.exports = function buildURL(url, params, paramsSerializer) {
    /*eslint no-param-reassign:0*/ if (!params) return url;
    var serializedParams;
    if (paramsSerializer) serializedParams = paramsSerializer(params);
    else if (utils.isURLSearchParams(params)) serializedParams = params.toString();
    else {
        var parts = [];
        utils.forEach(params, function serialize(val, key) {
            if (val === null || typeof val === "undefined") return;
            if (utils.isArray(val)) key = key + "[]";
            else val = [
                val
            ];
            utils.forEach(val, function parseValue(v) {
                if (utils.isDate(v)) v = v.toISOString();
                else if (utils.isObject(v)) v = JSON.stringify(v);
                parts.push(encode(key) + "=" + encode(v));
            });
        });
        serializedParams = parts.join("&");
    }
    if (serializedParams) {
        var hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) url = url.slice(0, hashmarkIndex);
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
    }
    return url;
};

},{"d198994ea2a45305":"5By4s"}],"1VRIM":[function(require,module,exports) {
"use strict";
var utils = require("982be9ba543c1801");
function InterceptorManager() {
    this.handlers = [];
}
/**
 * Add a new interceptor to the stack
 *
 * @param {Function} fulfilled The function to handle `then` for a `Promise`
 * @param {Function} rejected The function to handle `reject` for a `Promise`
 *
 * @return {Number} An ID used to remove interceptor later
 */ InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {
    this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
};
/**
 * Remove an interceptor from the stack
 *
 * @param {Number} id The ID that was returned by `use`
 */ InterceptorManager.prototype.eject = function eject(id) {
    if (this.handlers[id]) this.handlers[id] = null;
};
/**
 * Iterate over all the registered interceptors
 *
 * This method is particularly useful for skipping over any
 * interceptors that may have become `null` calling `eject`.
 *
 * @param {Function} fn The function to call for each interceptor
 */ InterceptorManager.prototype.forEach = function forEach(fn) {
    utils.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) fn(h);
    });
};
module.exports = InterceptorManager;

},{"982be9ba543c1801":"5By4s"}],"6sjJ6":[function(require,module,exports) {
"use strict";
var utils = require("dccb83262660ba2a");
var transformData = require("670a836c9c5a1abe");
var isCancel = require("9b938a75c8452b2f");
var defaults = require("293260d2186f65fb");
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ function throwIfCancellationRequested(config) {
    if (config.cancelToken) config.cancelToken.throwIfRequested();
}
/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 * @returns {Promise} The Promise to be fulfilled
 */ module.exports = function dispatchRequest(config) {
    throwIfCancellationRequested(config);
    // Ensure headers exist
    config.headers = config.headers || {};
    // Transform request data
    config.data = transformData.call(config, config.data, config.headers, config.transformRequest);
    // Flatten headers
    config.headers = utils.merge(config.headers.common || {}, config.headers[config.method] || {}, config.headers);
    utils.forEach([
        "delete",
        "get",
        "head",
        "post",
        "put",
        "patch",
        "common"
    ], function cleanHeaderConfig(method) {
        delete config.headers[method];
    });
    var adapter = config.adapter || defaults.adapter;
    return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        // Transform response data
        response.data = transformData.call(config, response.data, response.headers, config.transformResponse);
        return response;
    }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
            throwIfCancellationRequested(config);
            // Transform response data
            if (reason && reason.response) reason.response.data = transformData.call(config, reason.response.data, reason.response.headers, config.transformResponse);
        }
        return Promise.reject(reason);
    });
};

},{"dccb83262660ba2a":"5By4s","670a836c9c5a1abe":"eRqJY","9b938a75c8452b2f":"a0VmF","293260d2186f65fb":"lTJJ4"}],"eRqJY":[function(require,module,exports) {
"use strict";
var utils = require("506225f7f22ee5b3");
var defaults = require("5f8f7bd977372ccb");
/**
 * Transform the data for a request or a response
 *
 * @param {Object|String} data The data to be transformed
 * @param {Array} headers The headers for the request or response
 * @param {Array|Function} fns A single function or Array of functions
 * @returns {*} The resulting transformed data
 */ module.exports = function transformData(data, headers, fns) {
    var context = this || defaults;
    /*eslint no-param-reassign:0*/ utils.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
    });
    return data;
};

},{"506225f7f22ee5b3":"5By4s","5f8f7bd977372ccb":"lTJJ4"}],"lTJJ4":[function(require,module,exports) {
var process = require("1ad3e53325021694");
"use strict";
var utils = require("46f17d5a961ed1b0");
var normalizeHeaderName = require("cc6d63c7870abf00");
var enhanceError = require("381f0945c152ddd3");
var DEFAULT_CONTENT_TYPE = {
    "Content-Type": "application/x-www-form-urlencoded"
};
function setContentTypeIfUnset(headers, value) {
    if (!utils.isUndefined(headers) && utils.isUndefined(headers["Content-Type"])) headers["Content-Type"] = value;
}
function getDefaultAdapter() {
    var adapter;
    if (typeof XMLHttpRequest !== "undefined") // For browsers use XHR adapter
    adapter = require("f5547462a34fd4c6");
    else if (typeof process !== "undefined" && Object.prototype.toString.call(process) === "[object process]") // For node use HTTP adapter
    adapter = require("1a73616b0da0ef06");
    return adapter;
}
function stringifySafely(rawValue, parser, encoder) {
    if (utils.isString(rawValue)) try {
        (parser || JSON.parse)(rawValue);
        return utils.trim(rawValue);
    } catch (e) {
        if (e.name !== "SyntaxError") throw e;
    }
    return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
    transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
    },
    adapter: getDefaultAdapter(),
    transformRequest: [
        function transformRequest(data, headers) {
            normalizeHeaderName(headers, "Accept");
            normalizeHeaderName(headers, "Content-Type");
            if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) return data;
            if (utils.isArrayBufferView(data)) return data.buffer;
            if (utils.isURLSearchParams(data)) {
                setContentTypeIfUnset(headers, "application/x-www-form-urlencoded;charset=utf-8");
                return data.toString();
            }
            if (utils.isObject(data) || headers && headers["Content-Type"] === "application/json") {
                setContentTypeIfUnset(headers, "application/json");
                return stringifySafely(data);
            }
            return data;
        }
    ],
    transformResponse: [
        function transformResponse(data) {
            var transitional = this.transitional;
            var silentJSONParsing = transitional && transitional.silentJSONParsing;
            var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
            var strictJSONParsing = !silentJSONParsing && this.responseType === "json";
            if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) try {
                return JSON.parse(data);
            } catch (e) {
                if (strictJSONParsing) {
                    if (e.name === "SyntaxError") throw enhanceError(e, this, "E_JSON_PARSE");
                    throw e;
                }
            }
            return data;
        }
    ],
    /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */ timeout: 0,
    xsrfCookieName: "XSRF-TOKEN",
    xsrfHeaderName: "X-XSRF-TOKEN",
    maxContentLength: -1,
    maxBodyLength: -1,
    validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
    }
};
defaults.headers = {
    common: {
        "Accept": "application/json, text/plain, */*"
    }
};
utils.forEach([
    "delete",
    "get",
    "head"
], function forEachMethodNoData(method) {
    defaults.headers[method] = {};
});
utils.forEach([
    "post",
    "put",
    "patch"
], function forEachMethodWithData(method) {
    defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);
});
module.exports = defaults;

},{"1ad3e53325021694":"d5jf4","46f17d5a961ed1b0":"5By4s","cc6d63c7870abf00":"adBZo","381f0945c152ddd3":"itUQr","f5547462a34fd4c6":"ldm57","1a73616b0da0ef06":"ldm57"}],"adBZo":[function(require,module,exports) {
"use strict";
var utils = require("5f8afca0889a63e1");
module.exports = function normalizeHeaderName(headers, normalizedName) {
    utils.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
            headers[normalizedName] = value;
            delete headers[name];
        }
    });
};

},{"5f8afca0889a63e1":"5By4s"}],"itUQr":[function(require,module,exports) {
"use strict";
/**
 * Update an Error with the specified config, error code, and response.
 *
 * @param {Error} error The error to update.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The error.
 */ module.exports = function enhanceError(error, config, code, request, response) {
    error.config = config;
    if (code) error.code = code;
    error.request = request;
    error.response = response;
    error.isAxiosError = true;
    error.toJSON = function toJSON() {
        return {
            // Standard
            message: this.message,
            name: this.name,
            // Microsoft
            description: this.description,
            number: this.number,
            // Mozilla
            fileName: this.fileName,
            lineNumber: this.lineNumber,
            columnNumber: this.columnNumber,
            stack: this.stack,
            // Axios
            config: this.config,
            code: this.code
        };
    };
    return error;
};

},{}],"ldm57":[function(require,module,exports) {
"use strict";
var utils = require("2bb8b5f6db10dd6d");
var settle = require("a7b983c12bb9f77f");
var cookies = require("19bdb320f45f036e");
var buildURL = require("568f70ee55491398");
var buildFullPath = require("a1fd5a6807469b6d");
var parseHeaders = require("f197d20bdfdcd5a4");
var isURLSameOrigin = require("32737c301de74bf5");
var createError = require("df24397a62f10f34");
module.exports = function xhrAdapter(config) {
    return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        if (utils.isFormData(requestData)) delete requestHeaders["Content-Type"]; // Let the browser set it
        var request = new XMLHttpRequest();
        // HTTP basic authentication
        if (config.auth) {
            var username = config.auth.username || "";
            var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : "";
            requestHeaders.Authorization = "Basic " + btoa(username + ":" + password);
        }
        var fullPath = buildFullPath(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);
        // Set the request timeout in MS
        request.timeout = config.timeout;
        function onloadend() {
            if (!request) return;
            // Prepare the response
            var responseHeaders = "getAllResponseHeaders" in request ? parseHeaders(request.getAllResponseHeaders()) : null;
            var responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
            var response = {
                data: responseData,
                status: request.status,
                statusText: request.statusText,
                headers: responseHeaders,
                config: config,
                request: request
            };
            settle(resolve, reject, response);
            // Clean up request
            request = null;
        }
        if ("onloadend" in request) // Use onloadend if available
        request.onloadend = onloadend;
        else // Listen for ready state to emulate onloadend
        request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) return;
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) return;
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
        };
        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
            if (!request) return;
            reject(createError("Request aborted", config, "ECONNABORTED", request));
            // Clean up request
            request = null;
        };
        // Handle low level network errors
        request.onerror = function handleError() {
            // Real errors are hidden from us by the browser
            // onerror should only fire if it's a network error
            reject(createError("Network Error", config, null, request));
            // Clean up request
            request = null;
        };
        // Handle timeout
        request.ontimeout = function handleTimeout() {
            var timeoutErrorMessage = "timeout of " + config.timeout + "ms exceeded";
            if (config.timeoutErrorMessage) timeoutErrorMessage = config.timeoutErrorMessage;
            reject(createError(timeoutErrorMessage, config, config.transitional && config.transitional.clarifyTimeoutError ? "ETIMEDOUT" : "ECONNABORTED", request));
            // Clean up request
            request = null;
        };
        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils.isStandardBrowserEnv()) {
            // Add xsrf header
            var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : undefined;
            if (xsrfValue) requestHeaders[config.xsrfHeaderName] = xsrfValue;
        }
        // Add headers to the request
        if ("setRequestHeader" in request) utils.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === "undefined" && key.toLowerCase() === "content-type") // Remove Content-Type if data is undefined
            delete requestHeaders[key];
            else // Otherwise add header to the request
            request.setRequestHeader(key, val);
        });
        // Add withCredentials to request if needed
        if (!utils.isUndefined(config.withCredentials)) request.withCredentials = !!config.withCredentials;
        // Add responseType to request if needed
        if (responseType && responseType !== "json") request.responseType = config.responseType;
        // Handle progress if needed
        if (typeof config.onDownloadProgress === "function") request.addEventListener("progress", config.onDownloadProgress);
        // Not all browsers support upload events
        if (typeof config.onUploadProgress === "function" && request.upload) request.upload.addEventListener("progress", config.onUploadProgress);
        if (config.cancelToken) // Handle cancellation
        config.cancelToken.promise.then(function onCanceled(cancel) {
            if (!request) return;
            request.abort();
            reject(cancel);
            // Clean up request
            request = null;
        });
        if (!requestData) requestData = null;
        // Send the request
        request.send(requestData);
    });
};

},{"2bb8b5f6db10dd6d":"5By4s","a7b983c12bb9f77f":"dD9aC","19bdb320f45f036e":"4WJjt","568f70ee55491398":"3bwC2","a1fd5a6807469b6d":"1I5TW","f197d20bdfdcd5a4":"kqDd5","32737c301de74bf5":"lxXtv","df24397a62f10f34":"5nVS9"}],"dD9aC":[function(require,module,exports) {
"use strict";
var createError = require("72d296795d733aeb");
/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 */ module.exports = function settle(resolve, reject, response) {
    var validateStatus = response.config.validateStatus;
    if (!response.status || !validateStatus || validateStatus(response.status)) resolve(response);
    else reject(createError("Request failed with status code " + response.status, response.config, null, response.request, response));
};

},{"72d296795d733aeb":"5nVS9"}],"5nVS9":[function(require,module,exports) {
"use strict";
var enhanceError = require("ff529806947600d1");
/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {Object} config The config.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 * @returns {Error} The created error.
 */ module.exports = function createError(message, config, code, request, response) {
    var error = new Error(message);
    return enhanceError(error, config, code, request, response);
};

},{"ff529806947600d1":"itUQr"}],"4WJjt":[function(require,module,exports) {
"use strict";
var utils = require("c987331427b8b2ad");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs support document.cookie
function standardBrowserEnv() {
    return {
        write: function write(name, value, expires, path, domain, secure) {
            var cookie = [];
            cookie.push(name + "=" + encodeURIComponent(value));
            if (utils.isNumber(expires)) cookie.push("expires=" + new Date(expires).toGMTString());
            if (utils.isString(path)) cookie.push("path=" + path);
            if (utils.isString(domain)) cookie.push("domain=" + domain);
            if (secure === true) cookie.push("secure");
            document.cookie = cookie.join("; ");
        },
        read: function read(name) {
            var match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
            return match ? decodeURIComponent(match[3]) : null;
        },
        remove: function remove(name) {
            this.write(name, "", Date.now() - 86400000);
        }
    };
}() : // Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return {
        write: function write() {},
        read: function read() {
            return null;
        },
        remove: function remove() {}
    };
}();

},{"c987331427b8b2ad":"5By4s"}],"1I5TW":[function(require,module,exports) {
"use strict";
var isAbsoluteURL = require("5ff0e8c05aa13380");
var combineURLs = require("e1ac36eef7d02fa4");
/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 * @returns {string} The combined full path
 */ module.exports = function buildFullPath(baseURL, requestedURL) {
    if (baseURL && !isAbsoluteURL(requestedURL)) return combineURLs(baseURL, requestedURL);
    return requestedURL;
};

},{"5ff0e8c05aa13380":"jD6NM","e1ac36eef7d02fa4":"brOWK"}],"jD6NM":[function(require,module,exports) {
"use strict";
/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */ module.exports = function isAbsoluteURL(url) {
    // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
    // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
    // by any combination of letters, digits, plus, period, or hyphen.
    return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
};

},{}],"brOWK":[function(require,module,exports) {
"use strict";
/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 * @returns {string} The combined URL
 */ module.exports = function combineURLs(baseURL, relativeURL) {
    return relativeURL ? baseURL.replace(/\/+$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
};

},{}],"kqDd5":[function(require,module,exports) {
"use strict";
var utils = require("5802dc5113a634d0");
// Headers whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = [
    "age",
    "authorization",
    "content-length",
    "content-type",
    "etag",
    "expires",
    "from",
    "host",
    "if-modified-since",
    "if-unmodified-since",
    "last-modified",
    "location",
    "max-forwards",
    "proxy-authorization",
    "referer",
    "retry-after",
    "user-agent"
];
/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} headers Headers needing to be parsed
 * @returns {Object} Headers parsed into an object
 */ module.exports = function parseHeaders(headers) {
    var parsed = {};
    var key;
    var val;
    var i;
    if (!headers) return parsed;
    utils.forEach(headers.split("\n"), function parser(line) {
        i = line.indexOf(":");
        key = utils.trim(line.substr(0, i)).toLowerCase();
        val = utils.trim(line.substr(i + 1));
        if (key) {
            if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) return;
            if (key === "set-cookie") parsed[key] = (parsed[key] ? parsed[key] : []).concat([
                val
            ]);
            else parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
    });
    return parsed;
};

},{"5802dc5113a634d0":"5By4s"}],"lxXtv":[function(require,module,exports) {
"use strict";
var utils = require("c8f79893fd676b4c");
module.exports = utils.isStandardBrowserEnv() ? // Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
    var msie = /(msie|trident)/i.test(navigator.userAgent);
    var urlParsingNode = document.createElement("a");
    var originURL;
    /**
    * Parse a URL to discover it's components
    *
    * @param {String} url The URL to be parsed
    * @returns {Object}
    */ function resolveURL(url) {
        var href = url;
        if (msie) {
            // IE needs attribute set twice to normalize properties
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
        }
        urlParsingNode.setAttribute("href", href);
        // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
        return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
        };
    }
    originURL = resolveURL(window.location.href);
    /**
    * Determine if a URL shares the same origin as the current location
    *
    * @param {String} requestURL The URL to test
    * @returns {boolean} True if URL shares the same origin, otherwise false
    */ return function isURLSameOrigin(requestURL) {
        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;
        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
    };
}() : // Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
    return function isURLSameOrigin() {
        return true;
    };
}();

},{"c8f79893fd676b4c":"5By4s"}],"a0VmF":[function(require,module,exports) {
"use strict";
module.exports = function isCancel(value) {
    return !!(value && value.__CANCEL__);
};

},{}],"b85oP":[function(require,module,exports) {
"use strict";
var utils = require("99adbff39af8f677");
/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 * @returns {Object} New object resulting from merging config2 to config1
 */ module.exports = function mergeConfig(config1, config2) {
    // eslint-disable-next-line no-param-reassign
    config2 = config2 || {};
    var config = {};
    var valueFromConfig2Keys = [
        "url",
        "method",
        "data"
    ];
    var mergeDeepPropertiesKeys = [
        "headers",
        "auth",
        "proxy",
        "params"
    ];
    var defaultToConfig2Keys = [
        "baseURL",
        "transformRequest",
        "transformResponse",
        "paramsSerializer",
        "timeout",
        "timeoutMessage",
        "withCredentials",
        "adapter",
        "responseType",
        "xsrfCookieName",
        "xsrfHeaderName",
        "onUploadProgress",
        "onDownloadProgress",
        "decompress",
        "maxContentLength",
        "maxBodyLength",
        "maxRedirects",
        "transport",
        "httpAgent",
        "httpsAgent",
        "cancelToken",
        "socketPath",
        "responseEncoding"
    ];
    var directMergeKeys = [
        "validateStatus"
    ];
    function getMergedValue(target, source) {
        if (utils.isPlainObject(target) && utils.isPlainObject(source)) return utils.merge(target, source);
        else if (utils.isPlainObject(source)) return utils.merge({}, source);
        else if (utils.isArray(source)) return source.slice();
        return source;
    }
    function mergeDeepProperties(prop) {
        if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(config1[prop], config2[prop]);
        else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(undefined, config1[prop]);
    }
    utils.forEach(valueFromConfig2Keys, function valueFromConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(undefined, config2[prop]);
    });
    utils.forEach(mergeDeepPropertiesKeys, mergeDeepProperties);
    utils.forEach(defaultToConfig2Keys, function defaultToConfig2(prop) {
        if (!utils.isUndefined(config2[prop])) config[prop] = getMergedValue(undefined, config2[prop]);
        else if (!utils.isUndefined(config1[prop])) config[prop] = getMergedValue(undefined, config1[prop]);
    });
    utils.forEach(directMergeKeys, function merge(prop) {
        if (prop in config2) config[prop] = getMergedValue(config1[prop], config2[prop]);
        else if (prop in config1) config[prop] = getMergedValue(undefined, config1[prop]);
    });
    var axiosKeys = valueFromConfig2Keys.concat(mergeDeepPropertiesKeys).concat(defaultToConfig2Keys).concat(directMergeKeys);
    var otherKeys = Object.keys(config1).concat(Object.keys(config2)).filter(function filterAxiosKeys(key) {
        return axiosKeys.indexOf(key) === -1;
    });
    utils.forEach(otherKeys, mergeDeepProperties);
    return config;
};

},{"99adbff39af8f677":"5By4s"}],"9vgkY":[function(require,module,exports) {
"use strict";
var pkg = require("3c22590bc411b699");
var validators = {};
// eslint-disable-next-line func-names
[
    "object",
    "boolean",
    "number",
    "function",
    "string",
    "symbol"
].forEach(function(type, i) {
    validators[type] = function validator(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
    };
});
var deprecatedWarnings = {};
var currentVerArr = pkg.version.split(".");
/**
 * Compare package versions
 * @param {string} version
 * @param {string?} thanVersion
 * @returns {boolean}
 */ function isOlderVersion(version, thanVersion) {
    var pkgVersionArr = thanVersion ? thanVersion.split(".") : currentVerArr;
    var destVer = version.split(".");
    for(var i = 0; i < 3; i++){
        if (pkgVersionArr[i] > destVer[i]) return true;
        else if (pkgVersionArr[i] < destVer[i]) return false;
    }
    return false;
}
/**
 * Transitional option validator
 * @param {function|boolean?} validator
 * @param {string?} version
 * @param {string} message
 * @returns {function}
 */ validators.transitional = function transitional(validator, version, message) {
    var isDeprecated = version && isOlderVersion(version);
    function formatMessage(opt, desc) {
        return "[Axios v" + pkg.version + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
    }
    // eslint-disable-next-line func-names
    return function(value, opt, opts) {
        if (validator === false) throw new Error(formatMessage(opt, " has been removed in " + version));
        if (isDeprecated && !deprecatedWarnings[opt]) {
            deprecatedWarnings[opt] = true;
            // eslint-disable-next-line no-console
            console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
        }
        return validator ? validator(value, opt, opts) : true;
    };
};
/**
 * Assert object's properties type
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 */ function assertOptions(options, schema, allowUnknown) {
    if (typeof options !== "object") throw new TypeError("options must be an object");
    var keys = Object.keys(options);
    var i = keys.length;
    while(i-- > 0){
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
            var value = options[opt];
            var result = value === undefined || validator(value, opt, options);
            if (result !== true) throw new TypeError("option " + opt + " must be " + result);
            continue;
        }
        if (allowUnknown !== true) throw Error("Unknown option " + opt);
    }
}
module.exports = {
    isOlderVersion: isOlderVersion,
    assertOptions: assertOptions,
    validators: validators
};

},{"3c22590bc411b699":"8o6oT"}],"8o6oT":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"axios","version":"0.21.4","description":"Promise based HTTP client for the browser and node.js","main":"index.js","scripts":{"test":"grunt test","start":"node ./sandbox/server.js","build":"NODE_ENV=production grunt build","preversion":"npm test","version":"npm run build && grunt version && git add -A dist && git add CHANGELOG.md bower.json package.json","postversion":"git push && git push --tags","examples":"node ./examples/server.js","coveralls":"cat coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js","fix":"eslint --fix lib/**/*.js"},"repository":{"type":"git","url":"https://github.com/axios/axios.git"},"keywords":["xhr","http","ajax","promise","node"],"author":"Matt Zabriskie","license":"MIT","bugs":{"url":"https://github.com/axios/axios/issues"},"homepage":"https://axios-http.com","devDependencies":{"coveralls":"^3.0.0","es6-promise":"^4.2.4","grunt":"^1.3.0","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.1.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^23.0.0","grunt-karma":"^4.0.0","grunt-mocha-test":"^0.13.3","grunt-ts":"^6.0.0-beta.19","grunt-webpack":"^4.0.2","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^6.3.2","karma-chrome-launcher":"^3.1.0","karma-firefox-launcher":"^2.1.0","karma-jasmine":"^1.1.1","karma-jasmine-ajax":"^0.1.13","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^4.3.6","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.8","karma-webpack":"^4.0.2","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","mocha":"^8.2.1","sinon":"^4.5.0","terser-webpack-plugin":"^4.2.3","typescript":"^4.0.5","url-search-params":"^0.10.0","webpack":"^4.44.2","webpack-dev-server":"^3.11.0"},"browser":{"./lib/adapters/http.js":"./lib/adapters/xhr.js"},"jsdelivr":"dist/axios.min.js","unpkg":"dist/axios.min.js","typings":"./index.d.ts","dependencies":{"follow-redirects":"^1.14.0"},"bundlesize":[{"path":"./dist/axios.min.js","threshold":"5kB"}]}');

},{}],"kjMy2":[function(require,module,exports) {
"use strict";
/**
 * A `Cancel` is an object that is thrown when an operation is canceled.
 *
 * @class
 * @param {string=} message The message.
 */ function Cancel(message) {
    this.message = message;
}
Cancel.prototype.toString = function toString() {
    return "Cancel" + (this.message ? ": " + this.message : "");
};
Cancel.prototype.__CANCEL__ = true;
module.exports = Cancel;

},{}],"45wzn":[function(require,module,exports) {
"use strict";
var Cancel = require("69a8f59e5e2b033");
/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @class
 * @param {Function} executor The executor function.
 */ function CancelToken(executor) {
    if (typeof executor !== "function") throw new TypeError("executor must be a function.");
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
    });
    var token = this;
    executor(function cancel(message) {
        if (token.reason) // Cancellation has already been requested
        return;
        token.reason = new Cancel(message);
        resolvePromise(token.reason);
    });
}
/**
 * Throws a `Cancel` if cancellation has been requested.
 */ CancelToken.prototype.throwIfRequested = function throwIfRequested() {
    if (this.reason) throw this.reason;
};
/**
 * Returns an object that contains a new `CancelToken` and a function that, when called,
 * cancels the `CancelToken`.
 */ CancelToken.source = function source() {
    var cancel;
    var token = new CancelToken(function executor(c) {
        cancel = c;
    });
    return {
        token: token,
        cancel: cancel
    };
};
module.exports = CancelToken;

},{"69a8f59e5e2b033":"kjMy2"}],"dyQ8N":[function(require,module,exports) {
"use strict";
/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 * @returns {Function}
 */ module.exports = function spread(callback) {
    return function wrap(arr) {
        return callback.apply(null, arr);
    };
};

},{}],"eyiLq":[function(require,module,exports) {
"use strict";
/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */ module.exports = function isAxiosError(payload) {
    return typeof payload === "object" && payload.isAxiosError === true;
};

},{}],"3IP7f":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StorageErrorStrings", ()=>StorageErrorStrings);
parcelHelpers.export(exports, "AWSS3ProviderMultipartCopierErrors", ()=>AWSS3ProviderMultipartCopierErrors);
parcelHelpers.export(exports, "AWSS3ProviderUploadErrorStrings", ()=>AWSS3ProviderUploadErrorStrings);
var StorageErrorStrings;
(function(StorageErrorStrings) {
    StorageErrorStrings["NO_CREDENTIALS"] = "No credentials";
    StorageErrorStrings["NO_SRC_KEY"] = 'source param should be an object with the property "key" with value of type string';
    StorageErrorStrings["NO_DEST_KEY"] = 'destination param should be an object with the property "key" with value of type string';
    StorageErrorStrings["INVALID_BLOB"] = "Object must be an instance of Blob";
})(StorageErrorStrings || (StorageErrorStrings = {}));
var AWSS3ProviderMultipartCopierErrors;
(function(AWSS3ProviderMultipartCopierErrors) {
    AWSS3ProviderMultipartCopierErrors["CLEANUP_FAILED"] = "Multipart copy clean up failed";
    AWSS3ProviderMultipartCopierErrors["NO_OBJECT_FOUND"] = "Object does not exist";
    AWSS3ProviderMultipartCopierErrors["INVALID_QUEUESIZE"] = "Queue size must be a positive number";
    AWSS3ProviderMultipartCopierErrors["NO_COPYSOURCE"] = "You must specify a copy source";
    AWSS3ProviderMultipartCopierErrors["MAX_NUM_PARTS_EXCEEDED"] = "Only a maximum of 10000 parts are allowed";
})(AWSS3ProviderMultipartCopierErrors || (AWSS3ProviderMultipartCopierErrors = {}));
var AWSS3ProviderUploadErrorStrings;
(function(AWSS3ProviderUploadErrorStrings) {
    AWSS3ProviderUploadErrorStrings["UPLOAD_PAUSED_MESSAGE"] = "paused";
})(AWSS3ProviderUploadErrorStrings || (AWSS3ProviderUploadErrorStrings = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"zJioP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "byteLength", ()=>byteLength);
parcelHelpers.export(exports, "dispatchStorageEvent", ()=>dispatchStorageEvent);
parcelHelpers.export(exports, "isFile", ()=>isFile);
parcelHelpers.export(exports, "isBlob", ()=>isBlob);
var _core = require("@aws-amplify/core");
var _storageConstants = require("./StorageConstants");
var byteLength = function(x) {
    if (typeof x === "string") return x.length;
    else if (isArrayBuffer(x)) return x.byteLength;
    else if (isBlob(x)) return x.size;
    else throw new Error("Cannot determine byte length of " + x);
};
var dispatchStorageEvent = function(track, event, attrs, metrics, message) {
    if (track) {
        var data = {
            attrs: attrs
        };
        if (metrics) data["metrics"] = metrics;
        (0, _core.Hub).dispatch("storage", {
            event: event,
            data: data,
            message: message
        }, "Storage", (0, _storageConstants.AMPLIFY_SYMBOL));
    }
};
var isFile = function(x) {
    return typeof x !== "undefined" && x instanceof File;
};
var isBlob = function(x) {
    return typeof x !== "undefined" && x instanceof Blob;
};
var isArrayBuffer = function(x) {
    return typeof x !== "undefined" && x instanceof ArrayBuffer;
};

},{"@aws-amplify/core":"hZcAF","./StorageConstants":"lqkiw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lqkiw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AMPLIFY_SYMBOL", ()=>AMPLIFY_SYMBOL);
parcelHelpers.export(exports, "SET_CONTENT_LENGTH_HEADER", ()=>SET_CONTENT_LENGTH_HEADER);
parcelHelpers.export(exports, "localTestingStorageEndpoint", ()=>localTestingStorageEndpoint);
parcelHelpers.export(exports, "UPLOADS_STORAGE_KEY", ()=>UPLOADS_STORAGE_KEY);
var AMPLIFY_SYMBOL = typeof Symbol !== "undefined" && typeof Symbol.for === "function" ? Symbol.for("amplify_default") : "@@amplify_default";
var SET_CONTENT_LENGTH_HEADER = "contentLengthMiddleware";
var localTestingStorageEndpoint = "http://localhost:20005";
var UPLOADS_STORAGE_KEY = "__uploadInProgress";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2rcWH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPrefix", ()=>getPrefix);
parcelHelpers.export(exports, "createPrefixMiddleware", ()=>createPrefixMiddleware);
parcelHelpers.export(exports, "autoAdjustClockskewMiddleware", ()=>autoAdjustClockskewMiddleware);
parcelHelpers.export(exports, "autoAdjustClockskewMiddlewareOptions", ()=>autoAdjustClockskewMiddlewareOptions);
parcelHelpers.export(exports, "prefixMiddlewareOptions", ()=>prefixMiddlewareOptions);
parcelHelpers.export(exports, "credentialsProvider", ()=>credentialsProvider);
parcelHelpers.export(exports, "createS3Client", ()=>createS3Client);
var _core = require("@aws-amplify/core");
var _clientS3 = require("@aws-sdk/client-s3");
var _axiosHttpHandler = require("../providers/axios-http-handler");
var _storageConstants = require("./StorageConstants");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var logger = new (0, _core.Logger)("S3ClientUtils");
// placeholder credentials in order to satisfy type requirement, always results in 403 when used
var INVALID_CRED = {
    accessKeyId: "",
    secretAccessKey: ""
};
var getPrefix = function(config) {
    var credentials = config.credentials, level = config.level, customPrefix = config.customPrefix, identityId = config.identityId;
    var resolvedCustomPrefix = customPrefix || {};
    var resolvedIdentityId = identityId || credentials.identityId;
    var privatePath = (resolvedCustomPrefix.private !== undefined ? resolvedCustomPrefix.private : "private/") + resolvedIdentityId + "/";
    var protectedPath = (resolvedCustomPrefix.protected !== undefined ? resolvedCustomPrefix.protected : "protected/") + resolvedIdentityId + "/";
    var publicPath = resolvedCustomPrefix.public !== undefined ? resolvedCustomPrefix.public : "public/";
    switch(level){
        case "private":
            return privatePath;
        case "protected":
            return protectedPath;
        default:
            return publicPath;
    }
};
var createPrefixMiddleware = function(opt, key) {
    return function(next, _context) {
        return function(args) {
            return __awaiter(void 0, void 0, void 0, function() {
                var credentials, cred, prefix, clonedInput, result;
                return __generator(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            return [
                                4 /*yield*/ ,
                                (0, _core.Credentials).get()
                            ];
                        case 1:
                            credentials = _a.sent();
                            cred = (0, _core.Credentials).shear(credentials);
                            prefix = getPrefix(__assign(__assign({}, opt), {
                                credentials: cred
                            }));
                            clonedInput = Object.assign({}, args.input);
                            if (Object.prototype.hasOwnProperty.call(args.input, "Key")) {
                                clonedInput.Key = prefix + key;
                                args.input = clonedInput;
                            } else if (Object.prototype.hasOwnProperty.call(args.input, "Prefix")) {
                                clonedInput.Prefix = prefix + key;
                                args.input = clonedInput;
                            }
                            result = next(args);
                            return [
                                2 /*return*/ ,
                                result
                            ];
                    }
                });
            });
        };
    };
};
var isTimeSkewedError = function(err) {
    return err.ServerTime && typeof err.Code === "string" && err.Code === "RequestTimeTooSkewed";
};
var autoAdjustClockskewMiddleware = function(config) {
    return function(next, _context) {
        return function(args) {
            return __awaiter(void 0, void 0, void 0, function() {
                var err_1, serverDate;
                return __generator(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            _a.trys.push([
                                0,
                                2,
                                ,
                                3
                            ]);
                            return [
                                4 /*yield*/ ,
                                next(args)
                            ];
                        case 1:
                            return [
                                2 /*return*/ ,
                                _a.sent()
                            ];
                        case 2:
                            err_1 = _a.sent();
                            if (isTimeSkewedError(err_1)) {
                                serverDate = new Date(err_1.ServerTime);
                                config.systemClockOffset = serverDate.getTime() - Date.now();
                            }
                            throw err_1;
                        case 3:
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        };
    };
};
var autoAdjustClockskewMiddlewareOptions = {
    step: "finalizeRequest",
    name: "autoAdjustClockskewMiddleware"
};
var prefixMiddlewareOptions = {
    step: "initialize",
    name: "addPrefixMiddleware"
};
var credentialsProvider = function() {
    return __awaiter(void 0, void 0, void 0, function() {
        var credentials, cred, error_1;
        return __generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    _a.trys.push([
                        0,
                        2,
                        ,
                        3
                    ]);
                    return [
                        4 /*yield*/ ,
                        (0, _core.Credentials).get()
                    ];
                case 1:
                    credentials = _a.sent();
                    if (!credentials) return [
                        2 /*return*/ ,
                        INVALID_CRED
                    ];
                    cred = (0, _core.Credentials).shear(credentials);
                    logger.debug("credentials provider get credentials", cred);
                    return [
                        2 /*return*/ ,
                        cred
                    ];
                case 2:
                    error_1 = _a.sent();
                    logger.warn("credentials provider error", error_1);
                    return [
                        2 /*return*/ ,
                        INVALID_CRED
                    ];
                case 3:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
};
var createS3Client = function(config, emitter) {
    var region = config.region, cancelTokenSource = config.cancelTokenSource, dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting, useAccelerateEndpoint = config.useAccelerateEndpoint;
    var localTestingConfig = {};
    if (dangerouslyConnectToHttpEndpointForTesting) localTestingConfig = {
        endpoint: (0, _storageConstants.localTestingStorageEndpoint),
        tls: false,
        bucketEndpoint: false,
        forcePathStyle: true
    };
    var s3client = new (0, _clientS3.S3Client)(__assign(__assign({
        region: region,
        // Using provider instead of a static credentials, so that if an upload task was in progress, but credentials gets
        // changed or invalidated (e.g user signed out), the subsequent requests will fail.
        credentials: credentialsProvider,
        customUserAgent: (0, _core.getAmplifyUserAgent)()
    }, localTestingConfig), {
        requestHandler: new (0, _axiosHttpHandler.AxiosHttpHandler)({}, emitter, cancelTokenSource),
        useAccelerateEndpoint: useAccelerateEndpoint
    }));
    s3client.middlewareStack.remove((0, _storageConstants.SET_CONTENT_LENGTH_HEADER));
    return s3client;
};

},{"@aws-amplify/core":"hZcAF","@aws-sdk/client-s3":"9MDBM","../providers/axios-http-handler":"hL9Ok","./StorageConstants":"lqkiw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1zbOk":[function(require,module,exports) {
/*
 * Copyright 2017-2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"). You may not use this file except in compliance with
 * the License. A copy of the License is located at
 *
 *     http://aws.amazon.com/apache2.0/
 *
 * or in the "license" file accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions
 * and limitations under the License.
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AWSS3ProviderManagedUpload", ()=>AWSS3ProviderManagedUpload);
var _core = require("@aws-amplify/core");
var _clientS3 = require("@aws-sdk/client-s3");
var _axiosHttpHandler = require("./axios-http-handler");
var _events = require("events");
var _s3ClientUtils = require("../common/S3ClientUtils");
var __assign = undefined && undefined.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var logger = new (0, _core.ConsoleLogger)("AWSS3ProviderManagedUpload");
var AWSS3ProviderManagedUpload = /** @class */ function() {
    function AWSS3ProviderManagedUpload(params, opts, emitter) {
        // Defaults
        this.minPartSize = 5242880; // in MB
        this.queueSize = 4;
        // Data for current upload
        this.body = null;
        this.params = null;
        this.opts = null;
        this.completedParts = [];
        this.cancel = false;
        // Progress reporting
        this.bytesUploaded = 0;
        this.totalBytesToUpload = 0;
        this.emitter = null;
        this.params = params;
        this.opts = opts;
        this.emitter = emitter;
        this.s3client = this._createNewS3Client(opts, emitter);
    }
    AWSS3ProviderManagedUpload.prototype.upload = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, putObjectCommand, uploadId, numberOfPartsToUpload, parts, start;
            var _this = this;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _a = this;
                        return [
                            4 /*yield*/ ,
                            this.validateAndSanitizeBody(this.params.Body)
                        ];
                    case 1:
                        _a.body = _b.sent();
                        this.totalBytesToUpload = this.byteLength(this.body);
                        if (!(this.totalBytesToUpload <= this.minPartSize)) return [
                            3 /*break*/ ,
                            2
                        ];
                        // Multipart upload is not required. Upload the sanitized body as is
                        this.params.Body = this.body;
                        putObjectCommand = new (0, _clientS3.PutObjectCommand)(this.params);
                        return [
                            2 /*return*/ ,
                            this.s3client.send(putObjectCommand)
                        ];
                    case 2:
                        return [
                            4 /*yield*/ ,
                            this.createMultiPartUpload()
                        ];
                    case 3:
                        uploadId = _b.sent();
                        numberOfPartsToUpload = Math.ceil(this.totalBytesToUpload / this.minPartSize);
                        parts = this.createParts();
                        start = 0;
                        _b.label = 4;
                    case 4:
                        if (!(start < numberOfPartsToUpload)) return [
                            3 /*break*/ ,
                            9
                        ];
                        /** This first block will try to cancel the upload if the cancel
                         *	request came before any parts uploads have started.
                         **/ return [
                            4 /*yield*/ ,
                            this.checkIfUploadCancelled(uploadId)
                        ];
                    case 5:
                        /** This first block will try to cancel the upload if the cancel
                         *	request came before any parts uploads have started.
                         **/ _b.sent();
                        // Upload as many as `queueSize` parts simultaneously
                        return [
                            4 /*yield*/ ,
                            this.uploadParts(uploadId, parts.slice(start, start + this.queueSize))
                        ];
                    case 6:
                        // Upload as many as `queueSize` parts simultaneously
                        _b.sent();
                        /** Call cleanup a second time in case there were part upload requests
                         *  in flight. This is to ensure that all parts are cleaned up.
                         */ return [
                            4 /*yield*/ ,
                            this.checkIfUploadCancelled(uploadId)
                        ];
                    case 7:
                        /** Call cleanup a second time in case there were part upload requests
                         *  in flight. This is to ensure that all parts are cleaned up.
                         */ _b.sent();
                        _b.label = 8;
                    case 8:
                        start += this.queueSize;
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 9:
                        parts.map(function(part) {
                            _this.removeEventListener(part);
                        });
                        return [
                            4 /*yield*/ ,
                            this.finishMultiPartUpload(uploadId)
                        ];
                    case 10:
                        // Step 3: Finalize the upload such that S3 can recreate the file
                        return [
                            2 /*return*/ ,
                            _b.sent()
                        ];
                }
            });
        });
    };
    AWSS3ProviderManagedUpload.prototype.createParts = function() {
        var parts = [];
        for(var bodyStart = 0; bodyStart < this.totalBytesToUpload;){
            var bodyEnd = Math.min(bodyStart + this.minPartSize, this.totalBytesToUpload);
            parts.push({
                bodyPart: this.body.slice(bodyStart, bodyEnd),
                partNumber: parts.length + 1,
                emitter: new _events.EventEmitter(),
                _lastUploadedBytes: 0
            });
            bodyStart += this.minPartSize;
        }
        return parts;
    };
    AWSS3ProviderManagedUpload.prototype.createMultiPartUpload = function() {
        return __awaiter(this, void 0, void 0, function() {
            var createMultiPartUploadCommand, response;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        createMultiPartUploadCommand = new (0, _clientS3.CreateMultipartUploadCommand)(this.params);
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(createMultiPartUploadCommand)
                        ];
                    case 1:
                        response = _a.sent();
                        logger.debug(response.UploadId);
                        return [
                            2 /*return*/ ,
                            response.UploadId
                        ];
                }
            });
        });
    };
    /**
     * @private Not to be extended outside of tests
     * @VisibleFotTesting
     */ AWSS3ProviderManagedUpload.prototype.uploadParts = function(uploadId, parts) {
        return __awaiter(this, void 0, void 0, function() {
            var allResults, i, error_1;
            var _this = this;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            Promise.all(parts.map(function(part) {
                                return __awaiter(_this, void 0, void 0, function() {
                                    var options, _a, Key, Bucket, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, res;
                                    return __generator(this, function(_b) {
                                        switch(_b.label){
                                            case 0:
                                                this.setupEventListener(part);
                                                options = {
                                                    emitter: part.emitter
                                                };
                                                _a = this.params, Key = _a.Key, Bucket = _a.Bucket, SSECustomerAlgorithm = _a.SSECustomerAlgorithm, SSECustomerKey = _a.SSECustomerKey, SSECustomerKeyMD5 = _a.SSECustomerKeyMD5;
                                                return [
                                                    4 /*yield*/ ,
                                                    this.s3client.send(new (0, _clientS3.UploadPartCommand)(__assign(__assign(__assign({
                                                        PartNumber: part.partNumber,
                                                        Body: part.bodyPart,
                                                        UploadId: uploadId,
                                                        Key: Key,
                                                        Bucket: Bucket
                                                    }, SSECustomerAlgorithm && {
                                                        SSECustomerAlgorithm: SSECustomerAlgorithm
                                                    }), SSECustomerKey && {
                                                        SSECustomerKey: SSECustomerKey
                                                    }), SSECustomerKeyMD5 && {
                                                        SSECustomerKeyMD5: SSECustomerKeyMD5
                                                    })), options)
                                                ];
                                            case 1:
                                                res = _b.sent();
                                                return [
                                                    2 /*return*/ ,
                                                    res
                                                ];
                                        }
                                    });
                                });
                            }))
                        ];
                    case 1:
                        allResults = _a.sent();
                        // The order of resolved promises is the same as input promise order.
                        for(i = 0; i < allResults.length; i++)this.completedParts.push({
                            PartNumber: parts[i].partNumber,
                            ETag: allResults[i].ETag
                        });
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        error_1 = _a.sent();
                        logger.error("error happened while uploading a part. Cancelling the multipart upload", error_1);
                        this.cancelUpload();
                        return [
                            2 /*return*/ 
                        ];
                    case 3:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3ProviderManagedUpload.prototype.finishMultiPartUpload = function(uploadId) {
        return __awaiter(this, void 0, void 0, function() {
            var input, completeUploadCommand, data, error_2;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        input = {
                            Bucket: this.params.Bucket,
                            Key: this.params.Key,
                            UploadId: uploadId,
                            MultipartUpload: {
                                Parts: this.completedParts
                            }
                        };
                        completeUploadCommand = new (0, _clientS3.CompleteMultipartUploadCommand)(input);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(completeUploadCommand)
                        ];
                    case 2:
                        data = _a.sent();
                        return [
                            2 /*return*/ ,
                            data.Key
                        ];
                    case 3:
                        error_2 = _a.sent();
                        logger.error("error happened while finishing the upload. Cancelling the multipart upload", error_2);
                        this.cancelUpload();
                        return [
                            2 /*return*/ 
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3ProviderManagedUpload.prototype.checkIfUploadCancelled = function(uploadId) {
        return __awaiter(this, void 0, void 0, function() {
            var errorMessage, error_3;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!this.cancel) return [
                            3 /*break*/ ,
                            5
                        ];
                        errorMessage = "Upload was cancelled.";
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.cleanup(uploadId)
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        error_3 = _a.sent();
                        errorMessage += " " + error_3.message;
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        throw new Error(errorMessage);
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3ProviderManagedUpload.prototype.cancelUpload = function() {
        this.cancel = true;
    };
    AWSS3ProviderManagedUpload.prototype.cleanup = function(uploadId) {
        return __awaiter(this, void 0, void 0, function() {
            var input, data;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        // Reset this's state
                        this.body = null;
                        this.completedParts = [];
                        this.bytesUploaded = 0;
                        this.totalBytesToUpload = 0;
                        input = {
                            Bucket: this.params.Bucket,
                            Key: this.params.Key,
                            UploadId: uploadId
                        };
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(new (0, _clientS3.AbortMultipartUploadCommand)(input))
                        ];
                    case 1:
                        _a.sent();
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(new (0, _clientS3.ListPartsCommand)(input))
                        ];
                    case 2:
                        data = _a.sent();
                        if (data && data.Parts && data.Parts.length > 0) throw new Error("Multi Part upload clean up failed");
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3ProviderManagedUpload.prototype.removeEventListener = function(part) {
        part.emitter.removeAllListeners((0, _axiosHttpHandler.SEND_UPLOAD_PROGRESS_EVENT));
        part.emitter.removeAllListeners((0, _axiosHttpHandler.SEND_DOWNLOAD_PROGRESS_EVENT));
    };
    AWSS3ProviderManagedUpload.prototype.setupEventListener = function(part) {
        var _this = this;
        part.emitter.on((0, _axiosHttpHandler.SEND_UPLOAD_PROGRESS_EVENT), function(progress) {
            _this.progressChanged(part.partNumber, progress.loaded - part._lastUploadedBytes);
            part._lastUploadedBytes = progress.loaded;
        });
    };
    AWSS3ProviderManagedUpload.prototype.progressChanged = function(partNumber, incrementalUpdate) {
        this.bytesUploaded += incrementalUpdate;
        this.emitter.emit((0, _axiosHttpHandler.SEND_UPLOAD_PROGRESS_EVENT), {
            loaded: this.bytesUploaded,
            total: this.totalBytesToUpload,
            part: partNumber,
            key: this.params.Key
        });
    };
    AWSS3ProviderManagedUpload.prototype.byteLength = function(input) {
        if (input === null || input === undefined) return 0;
        if (typeof input.byteLength === "number") return input.byteLength;
        else if (typeof input.length === "number") return input.length;
        else if (typeof input.size === "number") return input.size;
        else if (typeof input.path === "string") ;
        else throw new Error("Cannot determine length of " + input);
    };
    AWSS3ProviderManagedUpload.prototype.validateAndSanitizeBody = function(body) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                if (this.isGenericObject(body)) // Any javascript object
                return [
                    2 /*return*/ ,
                    JSON.stringify(body)
                ];
                else // Files, arrayBuffer etc
                return [
                    2 /*return*/ ,
                    body
                ];
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    AWSS3ProviderManagedUpload.prototype.isGenericObject = function(body) {
        if (body !== null && typeof body === "object") try {
            return !(this.byteLength(body) >= 0);
        } catch (error) {
            // If we cannot determine the length of the body, consider it
            // as a generic object and upload a stringified version of it
            return true;
        }
        return false;
    };
    AWSS3ProviderManagedUpload.prototype._createNewS3Client = function(config, emitter) {
        var s3client = (0, _s3ClientUtils.createS3Client)(config, emitter);
        s3client.middlewareStack.add((0, _s3ClientUtils.createPrefixMiddleware)(this.opts, this.params.Key), (0, _s3ClientUtils.prefixMiddlewareOptions));
        s3client.middlewareStack.add((0, _s3ClientUtils.autoAdjustClockskewMiddleware)(s3client.config), (0, _s3ClientUtils.autoAdjustClockskewMiddlewareOptions));
        return s3client;
    };
    return AWSS3ProviderManagedUpload;
}();

},{"@aws-amplify/core":"hZcAF","@aws-sdk/client-s3":"9MDBM","./axios-http-handler":"hL9Ok","events":"1VQLm","../common/S3ClientUtils":"2rcWH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1VQLm":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
"use strict";
var R = typeof Reflect === "object" ? Reflect : null;
var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === "function") ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== "function") throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, "defaultMaxListeners", {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === "error";
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === "function") ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit("newListener", type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === "function") // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners " + "added. Use emitter.setMaxListeners() to " + "increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit("removeListener", type, list.listener || listener);
        }
    } else if (typeof list !== "function") {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit("removeListener", type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === "removeListener") continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === "function") this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === "function") return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === "function") return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === "function") return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === "function") emitter.removeListener("error", errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== "error") addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === "function") eventTargetAgnosticAddListener(emitter, "error", handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === "function") {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === "function") // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"3Sopq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AWSS3UploadTaskState", ()=>AWSS3UploadTaskState);
parcelHelpers.export(exports, "TaskEvents", ()=>TaskEvents);
parcelHelpers.export(exports, "AWSS3UploadTask", ()=>AWSS3UploadTask);
var _clientS3 = require("@aws-sdk/client-s3");
var _axios = require("axios");
var _axiosDefault = parcelHelpers.interopDefault(_axios);
var _core = require("@aws-amplify/core");
var _storageUtils = require("../common/StorageUtils");
var _storageErrorStrings = require("../common/StorageErrorStrings");
var _storageConstants = require("../common/StorageConstants");
var __awaiter = undefined && undefined.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = undefined && undefined.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __read = undefined && undefined.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = undefined && undefined.__spread || function() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
};
var logger = new (0, _core.Logger)("AWSS3UploadTask");
var AWSS3UploadTaskState;
(function(AWSS3UploadTaskState) {
    AWSS3UploadTaskState[AWSS3UploadTaskState["INIT"] = 0] = "INIT";
    AWSS3UploadTaskState[AWSS3UploadTaskState["IN_PROGRESS"] = 1] = "IN_PROGRESS";
    AWSS3UploadTaskState[AWSS3UploadTaskState["PAUSED"] = 2] = "PAUSED";
    AWSS3UploadTaskState[AWSS3UploadTaskState["CANCELLED"] = 3] = "CANCELLED";
    AWSS3UploadTaskState[AWSS3UploadTaskState["COMPLETED"] = 4] = "COMPLETED";
})(AWSS3UploadTaskState || (AWSS3UploadTaskState = {}));
var TaskEvents;
(function(TaskEvents) {
    TaskEvents["CANCEL"] = "cancel";
    TaskEvents["UPLOAD_COMPLETE"] = "uploadComplete";
    TaskEvents["UPLOAD_PROGRESS"] = "uploadPartProgress";
    TaskEvents["ERROR"] = "error";
})(TaskEvents || (TaskEvents = {}));
// maximum number of parts per upload request according the S3 spec,
// see: https://docs.aws.amazon.com/AmazonS3/latest/userguide/qfacts.html
var MAX_PARTS = 10000;
// 5MB in bytes
var PART_SIZE = 5242880;
var DEFAULT_QUEUE_SIZE = 4;
function comparePartNumber(a, b) {
    return a.PartNumber - b.PartNumber;
}
var AWSS3UploadTask = /** @class */ function() {
    function AWSS3UploadTask(_a) {
        var s3Client = _a.s3Client, file = _a.file, emitter = _a.emitter, storage = _a.storage, params = _a.params, level = _a.level, prefixPromise = _a.prefixPromise;
        this.partSize = PART_SIZE;
        this.queueSize = DEFAULT_QUEUE_SIZE;
        this.inProgress = [];
        this.completedParts = [];
        this.queued = [];
        this.bytesUploaded = 0;
        this.totalBytes = 0;
        this.state = AWSS3UploadTaskState.INIT;
        this.prefixPromise = prefixPromise;
        this.s3client = s3Client;
        this.s3client.middlewareStack.remove((0, _storageConstants.SET_CONTENT_LENGTH_HEADER));
        this.storage = storage;
        this.storageSync = Promise.resolve();
        if (typeof this.storage["sync"] === "function") this.storageSync = this.storage["sync"]();
        this.params = params;
        this.file = file;
        this.totalBytes = this.file.size;
        this.bytesUploaded = 0;
        this.emitter = emitter;
        this.queued = [];
        this.fileId = this._getFileId(level);
        this._validateParams();
        // event emitter will re-throw an error if an event emits an error unless there's a listener, attaching a no-op
        // function to it unless user adds their own onError callback
        this.emitter.on(TaskEvents.ERROR, function() {});
    }
    Object.defineProperty(AWSS3UploadTask.prototype, "percent", {
        get: function() {
            return this.bytesUploaded / this.totalBytes * 100;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AWSS3UploadTask.prototype, "isInProgress", {
        get: function() {
            return this.state === AWSS3UploadTaskState.IN_PROGRESS;
        },
        enumerable: true,
        configurable: true
    });
    AWSS3UploadTask.prototype._listSingleFile = function(_a) {
        var key = _a.key, bucket = _a.bucket;
        return __awaiter(this, void 0, void 0, function() {
            var listObjectRes, _b, Contents, prefix, obj;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(new (0, _clientS3.ListObjectsV2Command)({
                                Bucket: bucket,
                                Prefix: key
                            }))
                        ];
                    case 1:
                        listObjectRes = _c.sent();
                        _b = listObjectRes.Contents, Contents = _b === void 0 ? [] : _b;
                        return [
                            4 /*yield*/ ,
                            this.prefixPromise
                        ];
                    case 2:
                        prefix = _c.sent();
                        obj = Contents.find(function(o) {
                            return o.Key === "" + prefix + key;
                        });
                        return [
                            2 /*return*/ ,
                            obj
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._getFileId = function(level) {
        // We should check if it's a File first because File is also instance of a Blob
        if ((0, _storageUtils.isFile)(this.file)) return [
            this.file.name,
            this.file.lastModified,
            this.file.size,
            this.file.type,
            this.params.Bucket,
            level,
            this.params.Key
        ].join("-");
        else return [
            this.file.size,
            this.file.type,
            this.params.Bucket,
            level,
            this.params.Key
        ].join("-");
    };
    AWSS3UploadTask.prototype._findCachedUploadParts = function() {
        return __awaiter(this, void 0, void 0, function() {
            var uploadRequests, cachedUploadFileData, listPartsOutput;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._listCachedUploadTasks()
                        ];
                    case 1:
                        uploadRequests = _a.sent();
                        if (Object.keys(uploadRequests).length === 0 || !Object.prototype.hasOwnProperty.call(uploadRequests, this.fileId)) return [
                            2 /*return*/ ,
                            {
                                parts: [],
                                uploadId: null
                            }
                        ];
                        cachedUploadFileData = uploadRequests[this.fileId];
                        cachedUploadFileData.lastTouched = Date.now();
                        this.storage.setItem((0, _storageConstants.UPLOADS_STORAGE_KEY), JSON.stringify(uploadRequests));
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(new (0, _clientS3.ListPartsCommand)({
                                Bucket: this.params.Bucket,
                                Key: this.params.Key,
                                UploadId: cachedUploadFileData.uploadId
                            }))
                        ];
                    case 2:
                        listPartsOutput = _a.sent();
                        return [
                            2 /*return*/ ,
                            {
                                parts: listPartsOutput.Parts || [],
                                uploadId: cachedUploadFileData.uploadId
                            }
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._emitEvent = function(event, payload) {
        this.emitter.emit(event, payload);
    };
    AWSS3UploadTask.prototype._validateParams = function() {
        if (this.file.size / this.partSize > MAX_PARTS) throw new Error("Too many parts. Number of parts is " + this.file.size / this.partSize + ", maximum is " + MAX_PARTS + ".");
    };
    AWSS3UploadTask.prototype._listCachedUploadTasks = function() {
        return __awaiter(this, void 0, void 0, function() {
            var tasks;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.storageSync
                        ];
                    case 1:
                        _a.sent();
                        tasks = this.storage.getItem((0, _storageConstants.UPLOADS_STORAGE_KEY)) || "{}";
                        return [
                            2 /*return*/ ,
                            JSON.parse(tasks)
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._cache = function(fileMetadata) {
        return __awaiter(this, void 0, void 0, function() {
            var uploadRequests;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._listCachedUploadTasks()
                        ];
                    case 1:
                        uploadRequests = _a.sent();
                        uploadRequests[this.fileId] = fileMetadata;
                        this.storage.setItem((0, _storageConstants.UPLOADS_STORAGE_KEY), JSON.stringify(uploadRequests));
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._isCached = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, _b;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        _b = (_a = Object.prototype.hasOwnProperty).call;
                        return [
                            4 /*yield*/ ,
                            this._listCachedUploadTasks()
                        ];
                    case 1:
                        return [
                            2 /*return*/ ,
                            _b.apply(_a, [
                                _c.sent(),
                                this.fileId
                            ])
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._removeFromCache = function() {
        return __awaiter(this, void 0, void 0, function() {
            var uploadRequests;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._listCachedUploadTasks()
                        ];
                    case 1:
                        uploadRequests = _a.sent();
                        delete uploadRequests[this.fileId];
                        this.storage.setItem((0, _storageConstants.UPLOADS_STORAGE_KEY), JSON.stringify(uploadRequests));
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._onPartUploadCompletion = function(_a) {
        var eTag = _a.eTag, partNumber = _a.partNumber, chunk = _a.chunk;
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_b) {
                this.completedParts.push({
                    ETag: eTag,
                    PartNumber: partNumber
                });
                this.bytesUploaded += (0, _storageUtils.byteLength)(chunk);
                this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {
                    loaded: this.bytesUploaded,
                    total: this.totalBytes
                });
                // Remove the completed item from the inProgress array
                this.inProgress = this.inProgress.filter(function(job) {
                    return job.uploadPartInput.PartNumber !== partNumber;
                });
                if (this.queued.length && this.state !== AWSS3UploadTaskState.PAUSED) this._startNextPart();
                if (this._isDone()) this._completeUpload();
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    AWSS3UploadTask.prototype._completeUpload = function() {
        return __awaiter(this, void 0, void 0, function() {
            var err_1;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            2,
                            ,
                            3
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(new (0, _clientS3.CompleteMultipartUploadCommand)({
                                Bucket: this.params.Bucket,
                                Key: this.params.Key,
                                UploadId: this.uploadId,
                                MultipartUpload: {
                                    // Parts are not always completed in order, we need to manually sort them
                                    Parts: this.completedParts.sort(comparePartNumber)
                                }
                            }))
                        ];
                    case 1:
                        _a.sent();
                        this._verifyFileSize();
                        this._emitEvent(TaskEvents.UPLOAD_COMPLETE, {
                            key: this.params.Bucket + "/" + this.params.Key
                        });
                        this._removeFromCache();
                        this.state = AWSS3UploadTaskState.COMPLETED;
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 2:
                        err_1 = _a.sent();
                        logger.error("error completing upload", err_1);
                        this._emitEvent(TaskEvents.ERROR, err_1);
                        return [
                            3 /*break*/ ,
                            3
                        ];
                    case 3:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._makeUploadPartRequest = function(input, cancelTokenSource) {
        return __awaiter(this, void 0, void 0, function() {
            var res, err_2;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        _a.trys.push([
                            0,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(new (0, _clientS3.UploadPartCommand)(input), {
                                cancelTokenSource: cancelTokenSource
                            })
                        ];
                    case 1:
                        res = _a.sent();
                        return [
                            4 /*yield*/ ,
                            this._onPartUploadCompletion({
                                eTag: res.ETag,
                                partNumber: input.PartNumber,
                                chunk: input.Body
                            })
                        ];
                    case 2:
                        _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        err_2 = _a.sent();
                        if (this.state === AWSS3UploadTaskState.PAUSED) logger.log("upload paused");
                        else if (this.state === AWSS3UploadTaskState.CANCELLED) logger.log("upload aborted");
                        else logger.error("error starting next part of upload: ", err_2);
                        // axios' cancel will also throw an error, however we don't need to emit an event in that case as it's an
                        // expected behavior
                        if (!(0, _axiosDefault.default).isCancel(err_2) && err_2.message !== (0, _storageErrorStrings.AWSS3ProviderUploadErrorStrings).UPLOAD_PAUSED_MESSAGE) {
                            this._emitEvent(TaskEvents.ERROR, err_2);
                            this.pause();
                        }
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._startNextPart = function() {
        if (this.queued.length > 0 && this.state !== AWSS3UploadTaskState.PAUSED) {
            var cancelTokenSource = (0, _axiosDefault.default).CancelToken.source();
            var nextPart = this.queued.shift();
            this.inProgress.push({
                uploadPartInput: nextPart,
                s3Request: this._makeUploadPartRequest(nextPart, cancelTokenSource),
                cancel: cancelTokenSource.cancel
            });
        }
    };
    /**
     * Verify on S3 side that the file size matches the one on the client side.
     *
     * @async
     * @throws throws an error if the file size does not match between local copy of the file and the file on s3.
     */ AWSS3UploadTask.prototype._verifyFileSize = function() {
        return __awaiter(this, void 0, void 0, function() {
            var obj, valid;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._listSingleFile({
                                key: this.params.Key,
                                bucket: this.params.Bucket
                            })
                        ];
                    case 1:
                        obj = _a.sent();
                        valid = Boolean(obj && obj.Size === this.file.size);
                        if (!valid) throw new Error("File size does not match between local file and file on s3");
                        return [
                            2 /*return*/ ,
                            valid
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._isDone = function() {
        return !this.queued.length && !this.inProgress.length && this.bytesUploaded === this.totalBytes;
    };
    AWSS3UploadTask.prototype._createParts = function() {
        var size = this.file.size;
        var parts = [];
        for(var bodyStart = 0; bodyStart < size;){
            var bodyEnd = Math.min(bodyStart + this.partSize, size);
            parts.push({
                Body: this.file.slice(bodyStart, bodyEnd),
                Key: this.params.Key,
                Bucket: this.params.Bucket,
                PartNumber: parts.length + 1,
                UploadId: this.uploadId
            });
            bodyStart += this.partSize;
        }
        return parts;
    };
    AWSS3UploadTask.prototype._initCachedUploadParts = function(cachedParts) {
        this.bytesUploaded += cachedParts.reduce(function(acc, part) {
            return acc + part.Size;
        }, 0);
        // Find the set of part numbers that have already been uploaded
        var uploadedPartNumSet = new Set(cachedParts.map(function(part) {
            return part.PartNumber;
        }));
        this.queued = this.queued.filter(function(part) {
            return !uploadedPartNumSet.has(part.PartNumber);
        });
        this.completedParts = cachedParts.map(function(part) {
            return {
                PartNumber: part.PartNumber,
                ETag: part.ETag
            };
        });
        this._emitEvent(TaskEvents.UPLOAD_PROGRESS, {
            loaded: this.bytesUploaded,
            total: this.totalBytes
        });
    };
    AWSS3UploadTask.prototype._initMultipartUpload = function() {
        return __awaiter(this, void 0, void 0, function() {
            var res;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(new (0, _clientS3.CreateMultipartUploadCommand)(this.params))
                        ];
                    case 1:
                        res = _a.sent();
                        this._cache({
                            uploadId: res.UploadId,
                            lastTouched: Date.now(),
                            bucket: this.params.Bucket,
                            key: this.params.Key,
                            fileName: this.file instanceof File ? this.file.name : ""
                        });
                        return [
                            2 /*return*/ ,
                            res.UploadId
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype._initializeUploadTask = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, parts, uploadId, uploadId, err_3;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        this.state = AWSS3UploadTaskState.IN_PROGRESS;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([
                            1,
                            7,
                            ,
                            8
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._isCached()
                        ];
                    case 2:
                        if (!_b.sent()) return [
                            3 /*break*/ ,
                            4
                        ];
                        return [
                            4 /*yield*/ ,
                            this._findCachedUploadParts()
                        ];
                    case 3:
                        _a = _b.sent(), parts = _a.parts, uploadId = _a.uploadId;
                        this.uploadId = uploadId;
                        this.queued = this._createParts();
                        this._initCachedUploadParts(parts);
                        this._startUpload();
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 4:
                        if (!!this.uploadId) return [
                            3 /*break*/ ,
                            6
                        ];
                        return [
                            4 /*yield*/ ,
                            this._initMultipartUpload()
                        ];
                    case 5:
                        uploadId = _b.sent();
                        this.uploadId = uploadId;
                        this.queued = this._createParts();
                        this._startUpload();
                        _b.label = 6;
                    case 6:
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        err_3 = _b.sent();
                        if (!(0, _axiosDefault.default).isCancel(err_3)) logger.error("Error initializing the upload task", err_3);
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    AWSS3UploadTask.prototype.resume = function() {
        if (this.state === AWSS3UploadTaskState.CANCELLED) logger.warn("This task has already been cancelled");
        else if (this.state === AWSS3UploadTaskState.COMPLETED) logger.warn("This task has already been completed");
        else if (this.state === AWSS3UploadTaskState.IN_PROGRESS) logger.warn("Upload task already in progress");
        else if (!this.uploadId) this._initializeUploadTask();
        else this._startUpload();
    };
    AWSS3UploadTask.prototype._startUpload = function() {
        this.state = AWSS3UploadTaskState.IN_PROGRESS;
        for(var i = 0; i < this.queueSize; i++)this._startNextPart();
    };
    AWSS3UploadTask.prototype._cancel = function() {
        return __awaiter(this, void 0, void 0, function() {
            var err_4;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!(this.state === AWSS3UploadTaskState.CANCELLED)) return [
                            3 /*break*/ ,
                            1
                        ];
                        logger.warn("This task has already been cancelled");
                        return [
                            2 /*return*/ ,
                            false
                        ];
                    case 1:
                        if (!(this.state === AWSS3UploadTaskState.COMPLETED)) return [
                            3 /*break*/ ,
                            2
                        ];
                        logger.warn("This task has already been completed");
                        return [
                            2 /*return*/ ,
                            false
                        ];
                    case 2:
                        this.pause();
                        this.queued = [];
                        this.completedParts = [];
                        this.bytesUploaded = 0;
                        this.state = AWSS3UploadTaskState.CANCELLED;
                        _a.label = 3;
                    case 3:
                        _a.trys.push([
                            3,
                            6,
                            ,
                            7
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.s3client.send(new (0, _clientS3.AbortMultipartUploadCommand)({
                                Bucket: this.params.Bucket,
                                Key: this.params.Key,
                                UploadId: this.uploadId
                            }))
                        ];
                    case 4:
                        _a.sent();
                        return [
                            4 /*yield*/ ,
                            this._removeFromCache()
                        ];
                    case 5:
                        _a.sent();
                        return [
                            2 /*return*/ ,
                            true
                        ];
                    case 6:
                        err_4 = _a.sent();
                        logger.error("Error cancelling upload task", err_4);
                        return [
                            2 /*return*/ ,
                            false
                        ];
                    case 7:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * pause this particular upload task
     **/ AWSS3UploadTask.prototype.pause = function() {
        var _a;
        if (this.state === AWSS3UploadTaskState.CANCELLED) logger.warn("This task has already been cancelled");
        else if (this.state === AWSS3UploadTaskState.COMPLETED) logger.warn("This task has already been completed");
        else if (this.state === AWSS3UploadTaskState.PAUSED) logger.warn("This task is already paused");
        this.state = AWSS3UploadTaskState.PAUSED;
        // Use axios cancel token to abort the part request immediately
        // Add the inProgress parts back to pending
        var removedInProgressReq = this.inProgress.splice(0, this.inProgress.length);
        removedInProgressReq.forEach(function(req) {
            req.cancel((0, _storageErrorStrings.AWSS3ProviderUploadErrorStrings).UPLOAD_PAUSED_MESSAGE);
        });
        // Put all removed in progress parts back into the queue
        (_a = this.queued).unshift.apply(_a, __spread(removedInProgressReq.map(function(req) {
            return req.uploadPartInput;
        })));
    };
    return AWSS3UploadTask;
}();

},{"@aws-sdk/client-s3":"9MDBM","axios":"jo6P5","@aws-amplify/core":"hZcAF","../common/StorageUtils":"zJioP","../common/StorageErrorStrings":"3IP7f","../common/StorageConstants":"lqkiw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kBu2D":[function(require,module,exports) {
!function(t, _) {
    module.exports = _();
}(this, function() {
    return function(t) {
        var _ = {};
        function n(o) {
            if (_[o]) return _[o].exports;
            var e = _[o] = {
                i: o,
                l: !1,
                exports: {}
            };
            return t[o].call(e.exports, e, e.exports, n), e.l = !0, e.exports;
        }
        return n.m = t, n.c = _, n.d = function(t, _, o) {
            n.o(t, _) || Object.defineProperty(t, _, {
                enumerable: !0,
                get: o
            });
        }, n.r = function(t) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(t, "__esModule", {
                value: !0
            });
        }, n.t = function(t, _) {
            if (1 & _ && (t = n(t)), 8 & _) return t;
            if (4 & _ && "object" == typeof t && t && t.__esModule) return t;
            var o = Object.create(null);
            if (n.r(o), Object.defineProperty(o, "default", {
                enumerable: !0,
                value: t
            }), 2 & _ && "string" != typeof t) for(var e in t)n.d(o, e, (function(_) {
                return t[_];
            }).bind(null, e));
            return o;
        }, n.n = function(t) {
            var _ = t && t.__esModule ? function() {
                return t.default;
            } : function() {
                return t;
            };
            return n.d(_, "a", _), _;
        }, n.o = function(t, _) {
            return Object.prototype.hasOwnProperty.call(t, _);
        }, n.p = "", n(n.s = 0);
    }([
        function(t, _, n) {
            "use strict";
            function o(t) {
                for(var n in t)_.hasOwnProperty(n) || (_[n] = t[n]);
            }
            Object.defineProperty(_, "__esModule", {
                value: !0
            }), o(n(1)), o(n(2)), o(n(3)), o(n(4)), o(n(5)), o(n(6)), o(n(7)), o(n(8)), o(n(9)), o(n(10)), o(n(11)), o(n(12)), o(n(13));
        },
        function(t, _, n) {
            t.exports = {
                a: "Anchor__a___1_Iz8"
            };
        },
        function(t, _, n) {
            t.exports = {
                button: "Button__button___vS7Mv",
                signInButton: "Button__signInButton___3bUH-",
                googleSignInButton: "Button__googleSignInButton___1YiCu",
                signInButtonIcon: "Button__signInButtonIcon___ihN75",
                auth0SignInButton: "Button__auth0SignInButton___znnCj",
                facebookSignInButton: "Button__facebookSignInButton___34Txh",
                amazonSignInButton: "Button__amazonSignInButton___2EMtl",
                oAuthSignInButton: "Button__oAuthSignInButton___3UGOl",
                signInButtonContent: "Button__signInButtonContent___xqTXJ"
            };
        },
        function(t, _, n) {
            t.exports = {
                formContainer: "Form__formContainer___1GA3x",
                formSection: "Form__formSection___1PPvW",
                formField: "Form__formField___38Ikl",
                formRow: "Form__formRow___2mwRs"
            };
        },
        function(t, _, n) {
            t.exports = {
                hint: "Hint__hint___2XngB"
            };
        },
        function(t, _, n) {
            t.exports = {
                input: "Input__input___3e_bf",
                inputLabel: "Input__inputLabel___3VF0S",
                label: "Input__label___23sO8",
                radio: "Input__radio___2hllK"
            };
        },
        function(t, _, n) {
            t.exports = {
                navBar: "Nav__navBar___xtCFA",
                navRight: "Nav__navRight___1QG2J",
                nav: "Nav__nav___2Dx2Y",
                navItem: "Nav__navItem___1LtFQ"
            };
        },
        function(t, _, n) {
            t.exports = {
                photoPickerButton: "PhotoPicker__photoPickerButton___2XdVn",
                photoPlaceholder: "PhotoPicker__photoPlaceholder___2JXO4",
                photoPlaceholderIcon: "PhotoPicker__photoPlaceholderIcon___3Et71"
            };
        },
        function(t, _, n) {
            t.exports = {
                container: "Section__container___3YYTG",
                actionRow: "Section__actionRow___2LWSU",
                sectionHeader: "Section__sectionHeader___2djyg",
                sectionHeaderHint: "Section__sectionHeaderHint___3Wxdc",
                sectionBody: "Section__sectionBody___ihqqd",
                sectionHeaderContent: "Section__sectionHeaderContent___1UCqa",
                sectionFooter: "Section__sectionFooter___1T54C",
                sectionFooterPrimaryContent: "Section__sectionFooterPrimaryContent___2r9ZX",
                sectionFooterSecondaryContent: "Section__sectionFooterSecondaryContent___Nj41Q"
            };
        },
        function(t, _, n) {
            t.exports = {
                selectInput: "SelectInput__selectInput___3efO4"
            };
        },
        function(t, _, n) {
            t.exports = {
                strike: "Strike__strike___1XV1b",
                strikeContent: "Strike__strikeContent___10gLb"
            };
        },
        function(t, _, n) {
            t.exports = {
                toast: "Toast__toast___XXr3v",
                toastClose: "Toast__toastClose___18lU4"
            };
        },
        function(t, _, n) {
            t.exports = {
                totpQrcode: "Totp__totpQrcode___1crLx"
            };
        },
        function(t, _, n) {
            t.exports = {
                sumerianSceneContainer: "XR__sumerianSceneContainer___3nVMt",
                sumerianScene: "XR__sumerianScene___2Tt7-",
                loadingOverlay: "XR__loadingOverlay___IbqcI",
                loadingContainer: "XR__loadingContainer___2Itxb",
                loadingLogo: "XR__loadingLogo___Ub7xQ",
                loadingSceneName: "XR__loadingSceneName___3__ne",
                loadingBar: "XR__loadingBar___2vcke",
                loadingBarFill: "XR__loadingBarFill___3M-D9",
                sceneErrorText: "XR__sceneErrorText___2y0tp",
                sceneBar: "XR__sceneBar___2ShrP",
                sceneName: "XR__sceneName___1ApHr",
                sceneActions: "XR__sceneActions___7plGs",
                actionButton: "XR__actionButton___2poIM",
                tooltip: "XR__tooltip___UYyhn",
                actionIcon: "XR__actionIcon___2qnd2",
                autoShowTooltip: "XR__autoShowTooltip___V1QH7"
            };
        }
    ]);
});

},{}],"9im1Q":[function(require,module,exports) {
Amplify.configure({
    Auth: {
        userPoolId: "ap-northeast-2_4BBJiRrR9",
        userPoolWebClientId: "122g2i26b7erslg90ut69s227l",
        region: "ap-northeast-2"
    }
});

},{}]},["7IWGr","gBOtN"], "gBOtN", "parcelRequire94c2")

//# sourceMappingURL=index.bdf185b5.js.map
